{"code": "import numpy as np\rx = np.repeat(3, 4)\rprint(x)\rx = np.array([[1,2],[3,4]])\rprint(np.repeat(x, 2))\r", "nl": "Write a NumPy program to repeat elements of an array. "}
{"code": "def printValues():\n\tl = list()\n\tfor i in range(1,31):\n\t\tl.append(i**2)\n\tprint(l)\n\t\t\nprintValues()\n", "nl": "Write a Python function to create and print a list where the values are square of numbers between 1 and 30 (both included). "}
{"code": "import itertools\rnum = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\rprint(\"Original List\", num)\rnum.sort()\rnew_num = list(num for num,_ in itertools.groupby(num))\rprint(\"New List\", new_num)\r", "nl": "Write a Python program to remove duplicates from a list of lists. "}
{"code": "import numpy as np\rimport matplotlib.pyplot as plt\r# Compute the x and y coordinates for points on a sine curve\rx = np.arange(0, 3 * np.pi, 0.2)\ry = np.sin(x)\rprint(\"Plot the points using matplotlib:\")\rplt.plot(x, y)\rplt.show()\r", "nl": "Write a NumPy program to compute the x and y coordinates for points on a sine curve and plot the points using matplotlib. "}
{"code": "import sqlite3\rfrom sqlite3 import Error\rdef sql_connection():\r   try:\r     conn = sqlite3.connect('mydatabase.db')\r     return conn\r   except Error:\r     print(Error)\rdef sql_table(conn):\r   cursorObj = conn.cursor()\r   cursorObj.execute(\"CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);\")\r   print(\"\\nagent_master file has created.\")\r   \r   # adding a new column in the agent_master table\r   cursorObj.execute(\"\"\"\r   ALTER TABLE agent_master\r   ADD COLUMN FLAG BOOLEAN;\r   \"\"\")\r   print(\"\\nagent_master file altered.\")\r   conn.commit()\r   \rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r sqllite_conn.close()\r print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to alter a given SQLite table. "}
{"code": "def extract_string(str_list1, l):\r    result = list(filter(lambda e: len(e) == l, str_list1))\r    return result\r\rstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] \rprint(\"Original list:\")\rprint(str_list1)\rl = 8\rprint(\"\\nlength of the string to extract:\")\rprint(l)\rprint(\"\\nAfter extracting strings of specified length from the said list:\")\rprint(extract_string(str_list1 , l))\r", "nl": "Write a Python program to extract specified size of strings from a give list of string values using lambda. "}
{"code": "from functools import reduce\r \rfib_series = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],\r                                range(n-2), [0, 1])\r \rprint(\"Fibonacci series upto 2:\")\rprint(fib_series(2))\rprint(\"\\nFibonacci series upto 5:\")\rprint(fib_series(5))\rprint(\"\\nFibonacci series upto 6:\")\rprint(fib_series(6))\rprint(\"\\nFibonacci series upto 9:\")\rprint(fib_series(9))\r", "nl": "Write a Python program to create Fibonacci series upto n using Lambda. "}
{"code": "#Ref:https://bit.ly/3qW9FIX\rimport operator\rdef strand_sort(arr: list, reverse: bool = False, solution: list = None) -> list:\r    _operator = operator.lt if reverse else operator.gt\r    solution = solution or []\r    if not arr:\r        return solution\r    sublist = [arr.pop(0)]\r    for i, item in enumerate(arr):\r        if _operator(item, sublist[-1]):\r            sublist.append(item)\r            arr.pop(i)\r\r    #  merging sublist into solution list\r    if not solution:\r        solution.extend(sublist)\r    else:\r        while sublist:\r            item = sublist.pop(0)\r            for i, xx in enumerate(solution):\r                if not _operator(item, xx):\r                    solution.insert(i, item)\r                    break\r            else:\r                solution.append(item)\r\r    strand_sort(arr, reverse, solution)\r    return solution\rlst = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying  Strand sort the said list becomes:\")\rprint(strand_sort(lst))\rlst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Strand sort the said list becomes:\")\rprint(strand_sort(lst))\rlst = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Strand sort the said list becomes:\")\rprint(strand_sort(lst))\r", "nl": "Write a Python program to sort unsorted numbers using Strand sort. "}
{"code": "def inset_element_list(lst, x, n):\r    i = n\r    while i < len(lst):\r        lst.insert(i, x)\r        i+= n+1\r    return lst\r\rnums = [1, 3, 5, 7, 9, 11,0, 2, 4, 6, 8, 10,8,9,0,4,3,0]\rprint(\"Original list:\")\rprint(nums)\rx = 20\rn = 4\rprint(\"\\nInsert\",x,\"in said list after every\",n,\"th element:\")\rprint(inset_element_list(nums, x, n))\r\rchars = ['s','d','f','j','s','a','j','d','f','d']\rprint(\"\\nOriginal list:\")\rprint(chars)\rx = 'Z'\rn = 3\rprint(\"\\nInsert\",x,\"in said list after every\",n,\"th element:\")\rprint(inset_element_list(chars, x, n))\r", "nl": "Write a Python program to insert a specified element in a given list after every nth element. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=[np.max, np.min])\rprint(table)\r", "nl": "rite a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items. "}
{"code": "import numpy as np\rnum = np.arange(18)\rarr1 = np.reshape(num, [6, 3])\rprint(\"Original array:\")\rprint(arr1)\rresult  = arr1[np.triu_indices(3)]\rprint(\"\\nExtract upper triangular part of the said array:\")\rprint(result)\rresult  = arr1[np.triu_indices(2)]\rprint(\"\\nExtract upper triangular part of the said array:\")\rprint(result)\r", "nl": "Write a NumPy program to extract upper triangular part of a NumPy matrix. "}
{"code": "def get_max_occuring_char(str1):\r  ASCII_SIZE = 256\r  ctr = [0] * ASCII_SIZE\r  max = -1\r  ch = ''\r  for i in str1:\r    ctr[ord(i)]+=1;\r \r  for i in str1:\r    if max < ctr[ord(i)]:\r      max = ctr[ord(i)]\r      ch = i\r  return ch\r\rprint(get_max_occuring_char(\"Python: Get file creation and modification date/times\"))\rprint(get_max_occuring_char(\"abcdefghijkb\"))\r", "nl": "Write a Python program to find the maximum occurring character in a given string. "}
{"code": "num = int(input(\"Enter a number: \"))\rmod = num % 2\rif mod > 0:\r    print(\"This is an odd number.\")\relse:\r    print(\"This is an even number.\")", "nl": "Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user. "}
{"code": "import numpy as np\rnums = np.array([1,2,3,4,5,6,7,8])\rprint(\"Original array:\")\rprint(nums)\rp = 2\rnew_nums = np.zeros(len(nums) + (len(nums)-1)*(p))\rnew_nums[::p+1] = nums\rprint(\"\\nNew array:\")\rprint(new_nums)\r", "nl": "Write a NumPy program to create a new vector with 2 consecutive 0 between two values of a given vector. "}
{"code": "def word_count(str):\r    counts = dict()\r    words = str.split()\r\r    for word in words:\r        if word in counts:\r            counts[word] += 1\r        else:\r            counts[word] = 1\r\r    return counts\r\rprint( word_count('the quick brown fox jumps over the lazy dog.'))\r", "nl": "Write a Python program to count the occurrences of each word in a given sentence. "}
{"code": "items=[n for n in input().split('-')]\ritems.sort()\rprint('-'.join(items))\r", "nl": "Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index =  [1, 2, 3, 4, 5, 6])\rprint(\"Original DataFrame with single index:\")\rprint(df)\rdate_of_birth = ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997']  \ridx = 3\rprint(\"\\nInsert 'date_of_birth' column in 3rd position of the said DataFrame:\")\rdf.insert(loc=idx, column='date_of_birth', value=date_of_birth)\rprint(df)\r", "nl": "Write a Pandas program to insert a column at a specific index in a given DataFrame. "}
{"code": "def remove_last_n(nums, N):\r    result = nums[:len(nums)-N]\r    return result    \rnums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]\rprint(\"Original lists:\")\rprint(nums)\rN = 3\rprint(\"\\nRemove the last\",N,\"elements from the said list:\")\rprint(remove_last_n(nums, N))\rN = 5\rprint(\"\\nRemove the last\",N,\"elements from the said list:\")\rprint(remove_last_n(nums, N))\rN = 1\rprint(\"\\nRemove the last\",N,\"element from the said list:\")\rprint(remove_last_n(nums, N))\r", "nl": "Write a Python program to remove the last N number of elements from a given list. "}
{"code": "def position_max_min(nums):\r    max_result = max(enumerate(nums), key=(lambda x: x[1]))\r    min_result = min(enumerate(nums), key=(lambda x: x[1]))\r    return max_result,min_result\r\rnums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]\rprint(\"Original list:\")\rprint(nums)\rresult = position_max_min(nums)\rprint(\"\\nIndex position and value of the maximum value of the said list:\")\rprint(result[0])\rprint(\"\\nIndex position and value of the minimum value of the said list:\")\rprint(result[1])\r", "nl": "Write a Python program to find index position and value of the maximum and minimum values in a given list of numbers using lambda. "}
{"code": "import numpy as np\rarray1 = np.array([1, 7, 8, 2, 0.1, 3, 15, 2.5])\rprint(\"Original arrays:\")\rprint(array1)\rk = 4\rresult = np.argpartition(array1, k)\rprint(\"\\nk smallest values:\")\rprint(array1[result[:k]])\r", "nl": "Write a NumPy program to find the k smallest values of a given NumPy array. "}
{"code": "from numpy.polynomial import polynomial as P\rx = (10,20,30)\ry = (30,40,50)\rprint(\"Add one polynomial to another:\")\rprint(P.polyadd(x,y))\rprint(\"Subtract one polynomial from another:\")\rprint(P.polysub(x,y))\rprint(\"Multiply one polynomial by another:\")\rprint(P.polymul(x,y))\rprint(\"Divide one polynomial by another:\")\rprint(P.polydiv(x,y))\r", "nl": "Write a NumPy program to add one polynomial to another, subtract one polynomial from another, multiply one polynomial by another and divide one polynomial by another. "}
{"code": "def same_order(l1, l2):\r    common_elements = set(l1) & set(l2)\r    l1 = [e for e in l1 if e in common_elements]\r    l2 = [e for e in l2 if e in common_elements]\r    return l1 == l2\r\rcolor1 = [\"red\",\"green\",\"black\",\"orange\"]\rcolor2 = [\"red\",\"pink\",\"green\",\"white\",\"black\"]\rcolor3 = [\"white\",\"orange\",\"pink\",\"black\"]\r\rprint(\"Original lists:\")\rprint(color1)\rprint(color2)\rprint(color3)\rprint(\"\\nTest common elements between color1 and color2 are in same order?\")\rprint(same_order(color1, color2))\rprint(\"\\nTest common elements between color1 and color3 are in same order?\")\rprint(same_order(color1, color3))\rprint(\"\\nTest common elements between color2 and color3 are in same order?\")\rprint(same_order(color2, color3))\r", "nl": "Write a Python program to check common elements between two given list are in same order or not. "}
{"code": "nums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]\rprint(\"Orginal list:\")\rprint(nums) \rresult = list(filter(lambda x: (x % 19 == 0 or x % 13 == 0), nums)) \rprint(\"\\nNumbers of the above list divisible by nineteen or thirteen:\")\rprint(result)\r", "nl": "Write a Python program to find numbers divisible by nineteen or thirteen from a list of numbers using Lambda. "}
{"code": "import numpy as np \rnums1 = np.array([[2, 5, 2],\r              [1, 5, 5]])\rnums2 = np.array([[5, 3, 4],\r              [3, 2, 5]])\rprint(\"Array1:\") \rprint(nums1)\rprint(\"Array2:\") \rprint(nums2)\rprint(\"\\nMultiply said arrays of same size element-by-element:\")\rprint(np.multiply(nums1, nums2))\r", "nl": "Write a NumPy program to multiply two given arrays of same size element-by-element. "}
{"code": "def last(n): return n[-1]\r\rdef sort_list_last(tuples):\r  return sorted(tuples, key=last)\r\rprint(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))\r", "nl": "Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df) \rprint(\"\\nReplace the missing values with the most frequent values present in each column:\")\rresult = df.fillna(df.mode().iloc[0])\rprint(result)\r", "nl": "Write a Pandas program to replace the missing values with the most frequent values present in each column of a given DataFrame. "}
{"code": "import numpy as np\rx = np.arange(1, 15)\rprint(\"Original array:\",x)\rprint(\"After splitting:\")\rprint(np.split(x, [2, 6]))\r", "nl": "Write a NumPy program to split an array of 14 elements into 3 arrays, each of which has 2, 4, and 8 elements in the original order. "}
{"code": "import copy\rnums_x = {\"a\":1, \"b\":2, 'cc':{\"c\":3}}\rprint(\"Original dictionary: \", nums_x)\rnums_y = copy.deepcopy(nums_x)\rprint(\"\\nDeep copy of the said list:\")\rprint(nums_y)\rprint(\"\\nChange the value of an element of the original dictionary:\")\rnums_x[\"cc\"][\"c\"] = 10\rprint(nums_x)\rprint(\"\\nSecond dictionary (Deep copy):\")\rprint(nums_y)\r\rnums = {\"x\":1, \"y\":2, 'zz':{\"z\":3}}\rnums_copy = copy.deepcopy(nums)\rprint(\"\\nOriginal dictionary :\")\rprint(nums)\rprint(\"\\nDeep copy of the said list:\")\rprint(nums_copy)\rprint(\"\\nChange the value of an element of the original dictionary:\")\rnums[\"zz\"][\"z\"] = 10\rprint(\"\\nFirst dictionary:\")\rprint(nums)\rprint(\"\\nSecond dictionary (Deep copy):\")\rprint(nums_copy)\r", "nl": "Write a Python program to create a deep copy of a given dictionary. Use copy.copy"}
{"code": "import pandas as pd\rs = pd.Series([0, 1,2,3,4,5,6,7,8,9,10])\rprint(\"Original Data Series:\")\rprint(s)\rprint(\"\\nSubset of the above Data Series:\")\rn = 6\rnew_s = s[s < n]\rprint(new_s)\r", "nl": "Write a Pandas program to create a subset of a given series based on value and condition. "}
{"code": "def first_index(l1):\r    return sum(1 for i in l1 if (i> 45 and i % 2 == 0))\r\rnums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]\rprint(\"Original list:\")\rprint(nums)\rn = 45\rprint(\"\\nNumber of Items of the said list which are even and greater than\",n)\rprint(first_index(nums))\r", "nl": "Write a Python program to get the items from a given list with specific condition. "}
{"code": "def file_read(fname):\r        with open (fname, \"r\") as myfile:\r                data=myfile.readlines()\r                print(data)\rfile_read('test.txt')\r", "nl": "Write a Python program to read a file line by line store it into a variable. "}
{"code": "import sys\rprint()\rprint(\"Current value of the recursion limit:\")\rprint(sys.getrecursionlimit())\rprint()\r", "nl": "Write a Python program to get the current value of the recursion limit. "}
{"code": "def swap_case_string(str1):\r   result_str = \"\"   \r   for item in str1:\r       if item.isupper():\r           result_str += item.lower()\r       else:\r           result_str += item.upper()           \r   return result_str\rprint(swap_case_string(\"Python Exercises\"))\rprint(swap_case_string(\"Java\"))\rprint(swap_case_string(\"NumPy\"))\r", "nl": "Write a Python program to swap cases of a given string. "}
{"code": "import requests\r\ngeo_url = 'http://maps.googleapis.com/maps/api/geocode/json'\r\nmy_address = {'address': '21 Ramkrishana Road, Burdwan, East Burdwan, West Bengal, India', \r\n             'language': 'en'}\r\nresponse = requests.get(geo_url, params = my_address)\r\nresults = response.json()['results']\r\nmy_geo = results[0]['geometry']['location']\r\nprint(\"Longitude:\",my_geo['lng'],\"\\n\",\"Latitude:\",my_geo['lat'])\r\n", "nl": "Write a Python program to convert an address (like \"1600 Amphitheatre Parkway, Mountain View, CA\") into geographic coordinates (like latitude 37.423021 and longitude -122.083739). "}
{"code": "import arrow\rfrom datetime import datetime\rfrom dateutil import tz\rprint(\"\\nCreate a date from a given date and a given time zone:\")\rd1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')\rprint(d1)\rprint(\"\\nCreate a date from a given date and a time zone object from a string representation:\")\rd2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))\rprint(d2)\rd3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))\rprint(\"\\nCreate a date using current datetime and a specified time zone:\")\rprint(d3)\r", "nl": "Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. "}
{"code": "def two_dimensional_list(nums):\r  return list(zip(*nums))\rprint(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\rprint(two_dimensional_list([[1, 2], [4, 5]]))\r", "nl": "Write a Python program to create a two-dimensional list from given list of lists. "}
{"code": "def test(students):\r  return { value: key for key, value in students.items() }\r \rstudents = {\r  'Theodore': 10,\r  'Mathew': 11,\r  'Roxanne': 9,\r}\rprint(test(students))\r", "nl": "Write a Python program to invert a dictionary with unique hashable values. "}
{"code": "import numpy as np\rarra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\rprint(arra)\rresult = arra[:,[1,2]]\rprint(result)\r", "nl": "Write a NumPy program to access last two columns of a multidimensional columns. "}
{"code": "import itertools \rdef cartesian_product(lists):\r    return list(itertools.product(*lists))\r\rls = [[1,2],[3,4]]\rprint(\"Original Lists:\",ls)\rprint(\"Cartesian product of the said lists: \",cartesian_product(ls))\rls = [[1,2,3],[3,4,5]]\rprint(\"\\nOriginal Lists:\",ls)\rprint(\"Cartesian product of the said lists: \",cartesian_product(ls))\rls = [[],[1,2,3]]\rprint(\"\\nOriginal Lists:\",ls)\rprint(\"Cartesian product of the said lists: \",cartesian_product(ls))\rls = [[1,2],[]]\rprint(\"\\nOriginal Lists:\",ls)\rprint(\"Cartesian product of the said lists: \",cartesian_product(ls))\r", "nl": "Write a Python program to create Cartesian product of two or more given lists using itertools. "}
{"code": "import numpy as np\rprint(\"First Monday in May 2017:\")\rprint(np.busday_offset('2017-05', 0, roll='forward', weekmask='Mon'))\r", "nl": "Write a NumPy program to find the first Monday in May 2017. "}
{"code": "#https://bit.ly/2lVhlLX\r\nimport requests\r\nfrom lxml import html\r\nurl = 'https://www.us-cert.gov/ncas/alerts'\r\ndoc = html.fromstring(requests.get(url).text)\r\nprint(\"The number of security alerts issued by US-CERT in the current year:\")\r\nprint(len(doc.cssselect('.item-list li')))\r\n  ", "nl": " Write a Python program to get the number of people visiting a U.S. government website right now. "}
{"code": "import numpy as np\rx = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rstripped = np.char.strip(x)\rprint(\"\\nRemove the leading and trailing whitespaces: \", stripped)\r", "nl": "Write a NumPy program to remove the leading and trailing whitespaces of all the elements of a given array. "}
{"code": "def first_repeated_char_smallest_distance(str1):\r  temp = {}\r  for ch in str1:\r    if ch in temp:\r      return ch, str1.index(ch);\r    else:\r      temp[ch] = 0\r  return 'None'\rprint(first_repeated_char_smallest_distance(\"abcabc\"))\rprint(first_repeated_char_smallest_distance(\"abcb\"))\rprint(first_repeated_char_smallest_distance(\"abcc\"))\rprint(first_repeated_char_smallest_distance(\"abcxxy\"))\rprint(first_repeated_char_smallest_distance(\"abc\"))))\r", "nl": "Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest. "}
{"code": "import sqlite3\r \rfrom sqlite3 import Error\r \rdef sql_connection():\r   try:\r     conn = sqlite3.connect('mydatabase.db')\r     return conn\r   except Error:\r     print(Error)\r \rdef sql_table(conn):\r   cursorObj = conn.cursor()\r# Create the table\r   cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r# Insert records\r   cursorObj.executescript(\"\"\"\r   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);\r   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);\r   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);\r   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);\r   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);\r   \"\"\")\r   conn.commit()\r   cursorObj.execute(\"SELECT * FROM salesman\")\r   rows = cursorObj.fetchall()\r   print(\"Agent details:\")\r   for row in rows:\r       print(row)\rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r sqllite_conn.close()\r print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to create a table and insert some records in that table. Finally selects all rows from the table and display the records. "}
{"code": "import pandas as pd\rseries1 = pd.Series(['Php', 'Python', 'Java', 'C#'])\rprint(\"Original Series:\")\rprint(series1)\rresult = series1.map(lambda x: len(x))\rprint(\"\\nNumber of characters in each word in the said series:\")\rprint(result)\r", "nl": "Write a Pandas program to calculate the number of characters in each word in a given series. "}
{"code": "import numpy as np    \rp = np.array([[0, 0, 0],\r              [1, 2, 3],\r              [4, 5, 6]]) \rq= np.array([10, 11, 12]) \rprint(\"Original arrays:\")\rprint(\"Array-1\")\rprint(p)\rprint(\"Array-2\")\rprint(q)\rprint(\"\\nNew Array:\")\rnew_array1 = p + q \rprint(new_array1)\r", "nl": "Write a NumPy program to broadcast on different shapes of arrays where p(3,3) + q(3). "}
{"code": "def some(lst, fn = lambda x: x):\r  return any(map(fn, lst))\rprint(some([0, 1, 2, 0], lambda x: x >= 2 ))\rprint(some([5, 10, 20, 10], lambda x: x < 2 ))\r", "nl": "Write a Python program to check if a given function returns True for at least one element in the list. "}
{"code": "import numpy as np\rdef generate():\r   for n in range(15):\r       yield n\rnums = np.fromiter(generate(),dtype=float,count=-1)\rprint(\"New array:\")\rprint(nums)\r", "nl": "Write a NumPy program to create an array using generator function that generates 15 integers. "}
{"code": "#Source: https://bit.ly/2SSoyhf\rfrom bisect import bisect_left\rclass Solution:\r    def fourSum(self, nums, target):\r        \"\"\"\r        :type nums: List[int]\r        :type target: int\r        :rtype: List[List[int]]\r        \"\"\"\r        N = 4\r        quadruplets = []\r        if len(nums) < N:\r            return quadruplets\r        nums = sorted(nums)\r        quadruplet = []\r\r        # Let top[i] be the sum of largest i numbers.\r        top = [0]       \r        for i in range(1, N):\r            top.append(top[i - 1] + nums[-i])\r\r        # Find range of the least number in curr_n (0,...,N)\r        # numbers that sum up to curr_target, then find range\r        # of 2nd least number and so on by recursion.\r        def sum_(curr_target, curr_n, lo=0):\r            if curr_n == 0:\r                if curr_target == 0:\r                    quadruplets.append(quadruplet[:])\r                return\r\r            next_n = curr_n - 1\r            max_i = len(nums) - curr_n\r            max_i = bisect_left(\r                nums, curr_target // curr_n,\r                lo, max_i)\r            min_i = bisect_left(\r                nums, curr_target - top[next_n],\r                lo, max_i)\r\r            for i in range(min_i, max_i + 1): \r                if i == min_i or nums[i] != nums[i - 1]:\r                    quadruplet.append(nums[i])\r                    next_target = curr_target - nums[i]\r                    sum_(next_target, next_n, i + 1)\r                    quadruplet.pop()\r\r        sum_(target, N)\r        return quadruplets\r\rs = Solution()\rnums = [-2, -1, 1, 2, 3, 4, 5, 6]\rtarget = 10\rresult = s.fourSum(nums, target)\rprint(\"\\nArray values & target value:\",nums,\"&\",target)\rprint(\"Solution Set:\\n\", result)\r", "nl": "Write a Python program to find four elements from a given array of integers whose sum is equal to a given number. The solution set must not contain duplicate quadruplets. "}
{"code": "def extract_string(str_list1, l):\r    result = [e for e in str_list1 if len(e) == l] \r    return result\r\rstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] \rprint(\"Original list:\")\rprint(str_list1)\rl = 8\rprint(\"\\nlength of the string to extract:\")\rprint(l)\rprint(\"\\nAfter extracting strings of specified length from the said list:\") \rprint(extract_string(str_list1 , l))\r", "nl": "Write a Python program to extract specified size of strings from a give list of string values. "}
{"code": "import collections\rnums = (2,9,0,8,2,4,0,9,2,4,8,2,0,4,2,3,4,0)\rnums_dq = collections.deque(nums)\rprint(\"Number of 2 in the sequence\")\rprint(nums_dq.count(2))\rprint(\"Number of 4 in the sequence\")\rprint(nums_dq.count(4))\r", "nl": "Write a Python program to count the number of times a specific element presents in a deque object. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rprint(df.isnull().sum())\r", "nl": "Write a Pandas program to check the empty values of UFO (unidentified flying object) Dataframe. "}
{"code": "import pandas as pd\rimport numpy as np\rimport seaborn as sns\r\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - Gradient color:\")\rdf.style.background_gradient()\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color on all the values of the said dataframe. "}
{"code": "def diff_consecutive_nums(nums):\r    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r    return result\r\rnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\rprint(\"Original list:\")\rprint(nums1)\rprint(\"Difference between consecutive numbers of the said list:\") \rprint(diff_consecutive_nums(nums1))\r\rnums2 = [4, 5, 8, 9, 6, 10]\rprint(\"\\nOriginal list:\")\rprint(nums2)\rprint(\"Difference between consecutive numbers of the said list:\") \rprint(diff_consecutive_nums(nums2))\r", "nl": "Write a Python program to find the difference between consecutive numbers in a given list. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']\r})\rprint(\"Original DataFrame:\")\rprint(df)\r\rdef search_words(text):\r    result = re.findall(r'\\b[^\\d\\W]+\\b', text)\r    return \" \".join(result)\r\rdf['only_words']=df['address'].apply(lambda x : search_words(x))\rprint(\"\\nOnly words:\")\rprint(df)\r", "nl": "Write a Pandas program to extract only words from a given column of a given DataFrame. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current date and time:\")\rprint(a)\rprint(\"\\nReplace hour and minute with 5 and 35:\")\rprint(a.replace(hour=5, minute=35))\rprint(\"\\nReplace day with 2:\")\rprint(a.replace(day=2))\rprint(\"\\nReplace year with 2021:\")\rprint(a.replace(year=2021))\rprint(\"\\nReplace month with 11:\")\rprint(a.replace(month=11)) \rprint(\"\\nReplace timezone with 'US/Pacific:\")\rprint(a.replace(tzinfo='US/Pacific'))\r", "nl": "Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. "}
{"code": "from time import sleep\rimport math\rdef delay(fn, ms, *args):\r  sleep(ms / 1000)\r  return fn(*args)\rprint(\"Square root after specific miliseconds:\") \rprint(delay(lambda x: math.sqrt(x), 100, 16))\rprint(delay(lambda x: math.sqrt(x), 1000, 100))\rprint(delay(lambda x: math.sqrt(x), 2000, 25100))\r", "nl": "Write a Python program that invoke a given function after specific milliseconds. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nMissing values:\")\rprint(w_a_con.isnull())\rprint(\"\\nDropping the missing values:\")\rprint(w_a_con.dropna())\r", "nl": "Write a Pandas program to find and drop the missing values from World alcohol consumption dataset. "}
{"code": "\rdef sieve_of_Eratosthenes(num):\r    limitn = num+1\r    not_prime_num = set()\r    prime_nums = []\r\r    for i in range(2, limitn):\r        if i in not_prime_num:\r            continue\r\r        for f in range(i*2, limitn, i):\r            not_prime_num.add(f)\r\r        prime_nums.append(i)\r\r    return prime_nums\r\rprint(sieve_of_Eratosthenes(100));\r", "nl": "Write a Python program to print all primes (Sieve_of_Eratosthenes) smaller than or equal to a specified number. "}
{"code": "import itertools as it\rmums1 = [1, 2, 3, 4]\rmums2 = [5, 6, 7, 8]\rmums3 = [9, 10, 11, 12]\rmums4 = [13, 14, 15, 16]\rprint(\"Original lists:\")\rprint(mums1)\rprint(mums2)\rprint(mums3)\rprint(mums4)\rprint(\"\\nSum of the specified range:\")\rfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\r    print(i)\r", "nl": "Write a Python program to create non-repeated combinations of Cartesian product of four given list of numbers. "}
{"code": "weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\rdays = filter(lambda day: day if len(day)==6 else '', weekdays)\rfor d in days:\r  print(d)\r", "nl": "Write a Python program to find the values of length six in a given list using Lambda. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nReplacing NaNs with the value from the previous row (purch_amt):\")\rdf['purch_amt'].fillna(method='pad', inplace=True)\rprint(df)\rprint(\"\\nReplacing NaNs with the value from the next row (sale_amt):\")\rdf['sale_amt'].fillna(method='bfill', inplace=True)\rprint(df)\r", "nl": "Write a Pandas program to replace NaNs with the value from the previous row or the next row in a given DataFrame. "}
{"code": "def mergeSort(nlist):\r    print(\"Splitting \",nlist)\r    if len(nlist)>1:\r        mid = len(nlist)//2\r        lefthalf = nlist[:mid]\r        righthalf = nlist[mid:]\r\r        mergeSort(lefthalf)\r        mergeSort(righthalf)\r        i=j=k=0       \r        while i < len(lefthalf) and j < len(righthalf):\r            if lefthalf[i] < righthalf[j]:\r                nlist[k]=lefthalf[i]\r                i=i+1\r            else:\r                nlist[k]=righthalf[j]\r                j=j+1\r            k=k+1\r\r        while i < len(lefthalf):\r            nlist[k]=lefthalf[i]\r            i=i+1\r            k=k+1\r\r        while j < len(righthalf):\r            nlist[k]=righthalf[j]\r            j=j+1\r            k=k+1\r    print(\"Merging \",nlist)\r\rnlist = [14,46,43,27,57,41,45,21,70]\rmergeSort(nlist)\rprint(nlist)\r", "nl": "Write a Python program to sort a list of elements using the merge sort algorithm. "}
{"code": "from lxml import html\r\nimport requests\r\nresponse = requests.get('http://catalog.data.gov/dataset?q=&sort=metadata_created+desc')\r\ndoc = html.fromstring(response.text)\r\ntitle = doc.cssselect('h3.dataset-heading')[0].text_content()\r\nprint(\"The name of the most recently added dataset on data.gov:\")\r\nprint(title.strip())\r\n", "nl": " latitude 37.423021 and longitude -122.083739), which you can use to place markers on a map, or position the map."}
{"code": "import numpy as np\rprint(\"Create an array of zeros\")\rx = np.zeros((1,2))\rprint(\"Default type is float\")\rprint(x)\rprint(\"Type changes to int\")\rx = np.zeros((1,2), dtype = np.int)\rprint(x)\rprint(\"Create an array of ones\")\ry= np.ones((1,2)) \rprint(\"Default type is float\")\rprint(y)\rprint(\"Type changes to int\")\ry = np.ones((1,2), dtype = np.int)\rprint(y)\r", "nl": "Write a NumPy program to create an array of ones and an array of zeros. "}
{"code": "def find(lst, fn):\r  return next(x for x in lst if fn(x)) \rprint(find([1, 2, 3, 4], lambda n: n % 2 == 1))\rprint(find([1, 2, 3, 4], lambda n: n % 2 == 0))\r", "nl": "Write a Python program to find the value of the first element in the given list that satisfies the provided testing function. "}
{"code": "student_data = {'id1': \r   {'name': ['Sara'], \r    'class': ['V'], \r    'subject_integration': ['english, math, science']\r   },\r 'id2': \r  {'name': ['David'], \r    'class': ['V'], \r    'subject_integration': ['english, math, science']\r   },\r 'id3': \r    {'name': ['Sara'], \r    'class': ['V'], \r    'subject_integration': ['english, math, science']\r   },\r 'id4': \r   {'name': ['Surya'], \r    'class': ['V'], \r    'subject_integration': ['english, math, science']\r   },\r}\r\rresult = {}\r\rfor key,value in student_data.items():\r    if value not in result.values():\r        result[key] = value\r\rprint(result)\r", "nl": "Write a Python program to remove duplicates from Dictionary. "}
{"code": "num = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]\rprint(max(num, key=sum))\r", "nl": "Write a Python program to find the list in a list of lists whose sum of elements is the highest. "}
{"code": "import bs4\rfrom bs4 import BeautifulSoup as soup\rfrom urllib.request import urlopen\r\rnews_url=\"https://news.google.com/news/rss\"\rClient=urlopen(news_url)\rxml_page=Client.read()\rClient.close()\r\rsoup_page=soup(xml_page,\"xml\")\rnews_list=soup_page.findAll(\"item\")\r# Print news title, url and publish date\rfor news in news_list:\r  print(news.title.text)\r  print(news.link.text)\r  print(news.pubDate.text)\r  print(\"-\"*60)\r", "nl": "Write a Python program to get the top stories from Google news. "}
{"code": "def value_check(students, n):\r    result = all(x == n for x in students.values()) \r    return result\r  \rstudents = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}\rprint(\"Original Dictionary:\")\rprint(students)\rn = 12\rprint(\"\\nCheck all are \",n,\"in the dictionary.\")\rprint(value_check(students, n))\rn = 10\rprint(\"\\nCheck all are \",n,\"in the dictionary.\")\rprint(value_check(students, n))\r", "nl": "Write a Python program to check all values are same in a dictionary. "}
{"code": "def matched_index(l1, l2):\r    l2 = set(l2)\r    return [i for i, el in enumerate(l1) if el in l2]\r\rnums1 = [1, 2, 3, 4, 5 ,6]\rnums2 = [7, 8, 5, 2, 10, 12]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"Compare said two lists and get the indices of the values present in both lists:\")\rprint(matched_index(nums1, nums2))\r\rnums1 = [1, 2, 3, 4, 5 ,6]\rnums2 = [7, 8, 5, 7, 10, 12]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"Compare said two lists and get the indices of the values present in both lists:\")\rprint(matched_index(nums1, nums2))\r\rnums1 = [1, 2, 3, 4, 15 ,6]\rnums2 = [7, 8, 5, 7, 10, 12]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"Compare said two lists and get the indices of the values present in both lists:\")\rprint(matched_index(nums1, nums2))\r", "nl": "Write a Python program to compare two given lists and find the indices of the values present in both lists. "}
{"code": "import itertools\rdef max_time(nums):\r    for i in range(len(nums)):\r        nums[i] *= -1\r    nums.sort()\r    for hr1, hr2, m1, m2 in itertools.permutations(nums):\r        hrs = -(10*hr1 + hr2)\r        mins = -(10*m1 + m2)\r        if 60> mins >=0 and 24 > hrs >=0:\r            result = \"{:02}:{:02}\".format(hrs, mins)\r            break\r    return result\r\rnums = [1,2,3,4]\rprint(\"Original array:\",nums)\rprint(\"Latest time: \",max_time(nums))\r\rnums = [1,2,4,5]\rprint(\"\\nOriginal array:\",nums)\rprint(\"Latest time: \",max_time(nums))\r\rnums = [2,2,4,5]\rprint(\"\\nOriginal array:\",nums)\rprint(\"Latest time: \",max_time(nums))\r\rnums = [2,2,4,3]\rprint(\"\\nOriginal array:\",nums)\rprint(\"Latest time: \",max_time(nums))\r\rnums = [0,2,4,3]\rprint(\"\\nOriginal array:\",nums)\rprint(\"Latest time: \",max_time(nums))\r", "nl": "Write a Python program to create a 24-hour time format (HH:MM ) using 4 given digits. Display the latest time and do not use any digit more than once. "}
{"code": "#Source: shorturl.at/csxLM\rdef test(list1):\r    result =   [(x + y) / 2.0 for (x, y) in zip(list1[:-1], list1[1:])]\r    return list(result)\r\rnums =  [1,2,3,4,5,6,7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nSum the said list of numbers:\")\rprint(test(nums))\r\rnums =  [0,1,-3,3,7,-5,6,7,11]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nSum the said list of numbers:\")\rprint(test(nums))\r", "nl": "Sum a list of numbers. Write a Python program to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on. "}
{"code": "num = [2, 3, 4, 5]\rprint()\rprint(all(x > 1 for x in num))\rprint(all(x > 4 for x in num))\rprint()\r", "nl": "Write a Python program to test whether all numbers of a list is greater than a certain number. "}
{"code": "import numpy as np\rprint(\"Original array:\")\rnums = np.random.randint(0,3,(4,10))\rprint(nums)\rprint(\"\\nTest whether the said array has null columns or not:\")\rprint((~nums.any(axis=0)).any())\r", "nl": "Write a NumPy program to test whether a given 2D array has null columns or not. "}
{"code": "import numpy as np\rx = np.array([-180.,  -90.,   90.,  180.])\rr1 = np.radians(x)\rr2 = np.deg2rad(x)\rassert np.array_equiv(r1, r2)\rprint(r1)\r", "nl": "Write a NumPy program to convert angles from degrees to radians for all elements in a given array. "}
{"code": "from collections import Counter  \rtexts = [\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"]\rstr = \"abcd\"\rprint(\"Orginal list of strings:\")\rprint(texts) \rresult = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \rprint(\"\\nAnagrams of 'abcd' in the above string: \")\rprint(result)\r", "nl": "Write a Python program to find all anagrams of a string in a given list of strings using lambda. "}
{"code": "from urllib.request import urlopen\r\nfrom bs4 import BeautifulSoup\r\nhtml = urlopen('http://www.example.com/')\r\nbsh = BeautifulSoup(html.read(), 'html.parser')\r\nprint(bsh.h1)\r\n", "nl": "rogram to display the name of the most recently added dataset on data.gov. "}
{"code": "import numpy as np  \rnums = np.array([[5.54, 3.38, 7.99],\r              [3.54, 4.38, 6.99],\r              [1.54, 2.39, 9.29]])\rprint(\"Original array:\")\rprint(nums)\rn = 5\rprint(\"\\nElements of the said array greater than\",n)\rprint(nums[nums > n])\rn = 6\rprint(\"\\nElements of the said array less than\",n)\rprint(nums[nums < n])\r", "nl": "Write a NumPy program to extract all numbers from a given array which are less and greater than a specified number. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: Second and fourth elements of the second and fourth rows \")\rprint(arra_data[1::2, 1::2])\r", "nl": "Write a NumPy program to extract second and fourth elements of the second and fourth rows from a given (4x4) array. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.arange(16.0).reshape(4, 4)\rprint(x)\rnew_array1 =  np.vsplit(x, 2)\rprint(\"\\nSplit an array into multiple sub-arrays vertically:\")\rprint(new_array1)\r", "nl": "Write a NumPy program to split a given array into multiple sub-arrays vertically (row-wise). "}
{"code": "def count_k_dist(str1, k): \r\tstr_len = len(str1) \r\t\r\tresult = 0\r\r\tctr = [0] * 27\r\r\tfor i in range(0, str_len): \r\t\tdist_ctr = 0\r\r\t\tctr = [0] * 27\r\r\t\tfor j in range(i, str_len): \r\t\t\t\r\t\t\tif(ctr[ord(str1[j]) - 97] == 0): \r\t\t\t\tdist_ctr += 1\r\r\t\t\tctr[ord(str1[j]) - 97] += 1\r\r\t\t\tif(dist_ctr == k): \r\t\t\t\tresult += 1\r\t\t\tif(dist_ctr > k): \r\t\t\t\tbreak\r\r\treturn result \r\rstr1 = input(\"Input a string (lowercase alphabets):\")\rk = int(input(\"Input k: \"))\rprint(\"Number of substrings with exactly\", k, \"distinct characters : \", end = \"\") \rprint(count_k_dist(str1, k))\r", "nl": "Write a Python program to count number of substrings from a given string of lowercase alphabets with exactly k distinct (given) characters. "}
{"code": "from itertools import groupby\rdef encode_list(s_list):\r    return [[len(list(group)), key] for key, group in groupby(s_list)]\rn_list = [1,1,2,3,4,4.3,5, 1]\rprint(\"Original list:\") \rprint(n_list)\rprint(\"\\nList reflecting the run-length encoding from the said list:\")\rprint(encode_list(n_list))\rn_list = 'automatically'\rprint(\"\\nOriginal String:\") \rprint(n_list)\rprint(\"\\nList reflecting the run-length encoding from the said string:\")\rprint(encode_list(n_list))\r", "nl": "Write a Python program to create a list reflecting the run-length encoding from a given list of integers or a given list of characters. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Company','Company a001', '2055', 'abcd', '123345'],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\r\t\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nNumeric values present in company_code column:\")\rdf['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))\rprint(df)\r\r", "nl": "Write a Pandas program to check whether only numeric values present in a given column of a DataFrame."}
{"code": "def test(dictt, key, value):\r   if any(sub[key] == value for sub in dictt):\r       return True\r   return False\r\rstudents = [\r        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, \r        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},\r        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, \r        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, \r        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}\r        ]\r\r\rprint(\"\\nOriginal dictionary:\")\rprint(students)\rprint(\"\\nCheck if a specific Key and a value exist in the said dictionary:\")\rprint(test(students,'student_id', 1))\rprint(test(students,'name', 'Brian Howell'))\rprint(test(students,'class', 'VII'))\rprint(test(students,'class', 'I'))\rprint(test(students,'name', 'Brian Howelll'))\rprint(test(students,'student_id', 11))\r", "nl": "Write a Python program to check if a specific Key and a value exist in a dictionary. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3002,3001,3004,3003,3002,3003,3001],\r'salesman_id':[5002,5003,5001,5003,5002,5001,5001,5003,5003,5002,5003,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nSplit the said data on 'salesman_id', 'customer_id' wise:\")\rresult = df.groupby(['salesman_id', 'customer_id'])\rfor name,group in result:\r    print(\"\\nGroup:\")\r    print(name)\r    print(group)\rn = 2\r#result1 = df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)\rprint(\"\\nDroping last two records:\")    \rresult1 = df.drop(df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)\rprint(result1)\r", "nl": "Write a Pandas program to split a given dataset using group by on multiple columns and drop last n rows of from each group. "}
{"code": "import numpy as np\ra= np.random.random((10,2))\rx,y = np.atleast_2d(a[:,0], a[:,1])\rd = np.sqrt( (x-x.T)**2 + (y-y.T)**2)\rprint(d)\r", "nl": "Write a NumPy program to find point by point distances of a random vector with shape (10,2) representing coordinates. "}
{"code": "def rearrange_bigger(n):\r    #Break the number into digits and store in a list\r    nums = list(str(n))\r    for i in range(len(nums)-2,-1,-1):\r        if nums[i] < nums[i+1]:\r            z = nums[i:]\r            y = min(filter(lambda x: x > z[0], z))\r            z.remove(y)\r            z.sort()\r            nums[i:] = [y] + z\r            return int(\"\".join(nums))\r    return False\rn = 12\rprint(\"Original number:\",n)\rprint(\"Next bigger number:\",rearrange_bigger(n))\r\rn = 10\rprint(\"\\nOriginal number:\",n)\rprint(\"Next bigger number:\",rearrange_bigger(n))\r      \rn = 201\rprint(\"\\nOriginal number:\",n)\rprint(\"Next bigger number:\",rearrange_bigger(n))\rn = 102\rprint(\"\\nOriginal number:\",n)\rprint(\"Next bigger number:\",rearrange_bigger(n))\rn = 445\rprint(\"\\nOriginal number:\",n)\rprint(\"Next bigger number:\",rearrange_bigger(n))\r", "nl": "Write a Python program to create the next bigger number by rearranging the digits of a given number. "}
{"code": "marks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\rprint(\"Original Dictionary:\")\rprint(marks)\rprint(\"Marks greater than 170:\")\rresult = {key:value for (key, value) in marks.items() if value >= 170}\rprint(result)\r", "nl": "Write a Python program to filter a dictionary based on values. "}
{"code": "from itertools import groupby\r\runo_list = [2,1,3,8,5,1,4,2,3,4,0,8,2,0,8,4,2,3,4,2]\rprint(\"Original list:\")\rprint(uno_list)\runo_list.sort()\rprint(uno_list)\rprint(\"\\nSort the said unordered list:\")\rprint(uno_list)\rprint(\"\\nFrequency of the elements of the said unordered list:\")\rresult = [len(list(group)) for key, group in groupby(uno_list)]\rprint(result)\r", "nl": "Write a Python program to count the frequency of the elements of a given unordered list. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details where year is 1987 or 1989:\")\rprint((w_a_con[(w_a_con['Year']==1987) | (w_a_con['Year']==1989)]).head(10))\r", "nl": "Write a Pandas program to find out the alcohol consumption details in the year '1987' or '1989' from the world alcohol consumption dataset. "}
{"code": "numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple\rcount_odd = 0\rcount_even = 0\rfor x in numbers:\r        if not x % 2:\r    \t     count_even+=1\r        else:\r    \t     count_odd+=1\rprint(\"Number of even numbers :\",count_even)\rprint(\"Number of odd numbers :\",count_odd)\r", "nl": "Write a Python program to count the number of even and odd numbers from a series of numbers. "}
{"code": "import requests\rpayload = {'key1': 'value1', 'key2': 'value2'}\rprint(\"Parameters: \",payload)\rr = requests.get('https://httpbin.org/get', params=payload)\rprint(\"Print the url to check the URL has been correctly encoded or not!\")\rprint(r.url)\rprint(\"\\nPass a list of items as a value:\")\rpayload = {'key1': 'value1', 'key2': ['value2', 'value3']}\rprint(\"Parameters: \",payload)\rr = requests.get('https://httpbin.org/get', params=payload)\rprint(\"Print the url to check the URL has been correctly encoded or not!\")\rprint(r.url)\r", "nl": "Write a Python code to send some sort of data in the URL's query string. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rdf['ord_date']= pd.to_datetime(df['ord_date']) \rprint(\"\\nMonth wise purchase amount:\")\rresult = df.set_index('ord_date').groupby(pd.Grouper(freq='M')).agg({'purch_amt':sum})\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups and calculate monthly purchase amount. "}
{"code": "import pandas as pd\rnums = {'amount': ['10', '250', '3000', '40000', '500000']}\rprint(\"Original dataframe:\")\rdf = pd.DataFrame(nums)\rprint(df)\rprint(\"\\nAdd leading zeros:\")\rdf['amount'] = list(map(lambda x: x.zfill(10), df['amount']))\rprint(df)\r", "nl": "Write a Pandas program to add leading zeros to the character column in a pandas series and makes the length of the field to 8 digit. "}
{"code": "import numpy as np\rx = np.array([1., 2., .2, .3])\rprint(\"Original array: \")\rprint(x)\rr1 = np.reciprocal(x)\rr2 = 1/x\rassert np.array_equal(r1, r2)\rprint(\"Reciprocal for all elements of the said array:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute the reciprocal for all elements in a given array. "}
{"code": "import numpy as np\rm = np.array([[1,2],[3,4]])\rprint(\"Original matrix:\")\rprint(m)\rresult =  np.linalg.qr(m)\rprint(\"Decomposition of the said matrix:\")\rprint(result)\r", "nl": "Write a NumPy program to calculate the QR decomposition of a given matrix. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: First and second elements of the first and second rows \")\rprint(arra_data[0:2, 0:2])\r", "nl": "Write a NumPy program to extract first and second elements of the first and second rows from a given (4x4) array. "}
{"code": "def sum_digits_string(str1):\r    sum_digit = 0\r    for x in str1:\r        if x.isdigit() == True:\r            z = int(x)\r            sum_digit = sum_digit + z\r\r    return sum_digit\r     \rprint(sum_digits_string(\"123abcd45\"))\rprint(sum_digits_string(\"abcd1234\"))\r", "nl": "Write a Python program to compute sum of digits of a given string. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - Gradient color:\")\rdf.style.background_gradient(subset=['C'])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color mapping on a specified column. "}
{"code": "import itertools\rfrom heapq import merge\r\rdef nth_hamming_number(n):\r    def num_recur():\r        last = 1\r        yield last\r        x, y, z = itertools.tee(num_recur(), 3)\r        for n in merge((2 * i for i in x), (3 * i for i in y), (5 * i for i in z)):\r            if n != last:\r                yield n\r                last = n\r    result =  itertools.islice(num_recur(), n)\r    return list(result)[-1]\r\rprint(nth_hamming_number(8))\rprint(nth_hamming_number(14))\rprint(nth_hamming_number(17))\r", "nl": "Write a Python program to find the nth Hamming number. User itertools module. "}
{"code": "def last_occurrence(l1, ch):\r    return ''.join(l1).rindex(ch)\r\rchars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']\rprint(\"Original list:\")\rprint(chars)\rch = 'f'\rprint(\"Last occurrence of\",ch,\"in the said list:\")\rprint(last_occurrence(chars, ch))\rch = 'c'\rprint(\"Last occurrence of\",ch,\"in the said list:\")\rprint(last_occurrence(chars, ch))\rch = 'k'\rprint(\"Last occurrence of\",ch,\"in the said list:\")\rprint(last_occurrence(chars, ch))\rch = 'w'\rprint(\"Last occurrence of\",ch,\"in the said list:\")\rprint(last_occurrence(chars, ch)) \r", "nl": "Write a Python program to find the last occurrence of a specified item in a given list. "}
{"code": "import json\rj_str = {'4': 5, '6': 7, '1': 3, '2': 4}\rprint(\"Original String:\")\rprint(j_str)\rprint(\"\\nJSON data:\")\rprint(json.dumps(j_str, sort_keys=True, indent=4))\r", "nl": "Write a Python program to convert Python dictionary object (sort by key) to JSON data. Print the object members with indent level 4. "}
{"code": "numbers = []\rfor num in range(1000):\r  num=str(num).zfill(3)\rprint(num)\rnumbers.append(num)\r", "nl": "Write a Python program to create the combinations of 3 digit combo. "}
{"code": "import itertools as it\rdef permutations_data(iter, length):\r    return it.permutations(iter, length)\r#List\rresult = permutations_data(['A','B','C','D'], 3)\rprint(\"\\nIterator to get specified number of permutations of elements:\")\rfor i in result:\r    print(i)\r\r#String\rresult = permutations_data(\"Python\", 2)\rprint(\"\\nIterator to get specified number of permutations of elements:\")\rfor i in result:\r    print(i)\r", "nl": "Write a Python program to create an iterator to get specified number of permutations of elements. "}
{"code": "def first_three(str):\r\treturn str[:3] if len(str) > 3 else str\r\rprint(first_three('ipy'))\rprint(first_three('python'))\rprint(first_three('py'))\r", "nl": "Write a Python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nString representing the date, controlled by an explicit format string:\")\rprint(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))\r", "nl": "Write a Python program to get hourly datetime between two hours. "}
{"code": "import textwrap\rsample_text = '''\r  Python is a widely used high-level, general-purpose, interpreted,\r  dynamic programming language. Its design philosophy emphasizes\r  code readability, and its syntax allows programmers to express\r  concepts in fewer lines of code than possible in languages such\r  as C++ or Java.\r  '''\rprint()\rprint(textwrap.fill(sample_text, width=50))\rprint()\r", "nl": "Write a Python program to display formatted text (width=50) as output. "}
{"code": "def max_min(data):\r  l = data[0]\r  s = data[0]\r  for num in data:\r    if num> l:\r      l = num\r    elif num< s:\r        s = num\r  return l, s\r\rprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))\r", "nl": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers. "}
{"code": "import pandas as pd\rdate_range = pd.timedelta_range(0, periods=49, freq='H')\rprint(\"Hourly range of perods 49:\")\rprint(date_range)\r", "nl": "Write a Pandas program to create a sequence of durations increasing by an hour. "}
{"code": "import numpy as np\rnums =  np.random.rand(10)\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nSorted first 5 elements:\")\rprint(nums[np.argpartition(nums,range(5))])\r", "nl": "Write a NumPy program to sort the specified number of elements from beginning of a given array. "}
{"code": "import datetime\rnow = datetime.datetime.now()\rprint(now)\ryear = lambda x: x.year\rmonth = lambda x: x.month\rday = lambda x: x.day\rt = lambda x: x.time()\rprint(year(now))\rprint(month(now))\rprint(day(now))\rprint(t(now))\r", "nl": "Write a Python program to extract year, month, date and time using Lambda. "}
{"code": "from collections import Counter \rdef common_chars(str1,str2): \t\r\td1 = Counter(str1) \r\td2 = Counter(str2) \r\tcommon_dict = d1 & d2 \r\tif len(common_dict) == 0: \r\t\treturn \"No common characters.\"\r\r\t# list of common elements \r\tcommon_chars = list(common_dict.elements()) \r\tcommon_chars = sorted(common_chars) \r\r\treturn ''.join(common_chars) \r\rstr1 = 'Python'\rstr2 = 'PHP'\rprint(\"Two strings: \"+str1+' : '+str2)\rprint(common_chars(str1, str2))\rstr1 = 'Java'\rstr2 = 'PHP'\rprint(\"Two strings: \"+str1+' : '+str2)\rprint(common_chars(str1, str2))\r", "nl": "Write a Python program to find all the common characters in lexicographical order from two given lower case strings. If there are no common letters print \"No common characters\". "}
{"code": "str1='Python Exercises\\n'\rprint(str1)\rprint(str1.rstrip())\r", "nl": "Write a Python program to remove a newline in Python. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rprint(\"List of columns:\")\rprint(df.columns)\rprint(\"\\nShape of the Dataset:\")\rprint(df.shape)\rprint(\"\\nData types of the Dataset:\")\rprint(df.dtypes)\r", "nl": "Write a Pandas program to extract the column labels, shape and data types of the dataset (titanic.csv). "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['A','B', 'C', 'D', 'A'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\r\rprint(\"Original DataFrame:\")\rprint(df)\r\rprint(\"\\nReplace A with c:\")\rdf = df.replace(\"A\", \"C\")\rprint(df)\r", "nl": "Write a Pandas program to replace arbitrary values with other values in a given DataFrame. "}
{"code": "import numpy as np\rx = np.array([[10, 30], [20, 60]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Mean of each column:\")\rprint(x.mean(axis=0))\rprint(\"Mean of each row:\")\rprint(x.mean(axis=1))\r", "nl": "Write a NumPy program to calculate mean across dimension, in a 2D numpy array. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rfare = pd.qcut(df['fare'], 2)\rage = pd.cut(df['age'], [0, 10, 30, 60, 80])\rresult = df.pivot_table('survived', index=['sex', age], columns=[fare, 'pclass'])\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. Add the fare as a dimension of columns and partition fare column into 2 categories based on the values present in fare columns. "}
{"code": "from functools import reduce \rfrom operator import getitem\rdef get(d, selectors):\r  return reduce(getitem, selectors, d) \rusers = {\r  'freddy': {\r    'name': {\r      'first': 'Fateh',\r      'last': 'Harwood' \r    },\r    'postIds': [1, 2, 3]\r  }\r}\rprint(get(users, ['freddy', 'name', 'last']))\rprint(get(users, ['freddy', 'postIds', 1]))\r", "nl": "Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. "}
{"code": "#Ref.https://bit.ly/3oneU2l\rdef bubble_sort(list_data: list, length: int = 0) -> list:\r    length = length or len(list_data)\r    swapped = False\r    for i in range(length - 1):\r        if list_data[i] > list_data[i + 1]:\r            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]\r            swapped = True\r\r    return list_data if not swapped else bubble_sort(list_data, length - 1)\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Insertion Sort the said list becomes:\")\rbubble_sort(nums, len(nums))\rprint(nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Bubble Sort the said list becomes:\")\rbubble_sort(nums, len(nums))\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Bubble Sort the said list becomes:\")\rbubble_sort(nums, len(nums))\rprint(nums)\rnums = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Bubble Sort the said list becomes:\")\rbubble_sort(nums, len(nums))\rprint(nums)\r", "nl": "Write a Python program to sort unsorted numbers using Recursive Bubble Sort. "}
{"code": "student = [{'id': 1, 'success': True, 'name': 'Lary'},\r {'id': 2, 'success': False, 'name': 'Rabi'},\r {'id': 3, 'success': True, 'name': 'Alex'}]\rprint(sum(d['id'] for d in student))\rprint(sum(d['success'] for d in student))\r", "nl": "Write a Python program to count the values associated with key in a dictionary. "}
{"code": "import numpy as np\rnums1 = np.ones((2,2,3))\rnums2 = 3*np.ones((2,2))\rprint(\"Original array:\")\rprint(nums1)\rnew_array = nums1 * nums2[:,:,None]\rprint(\"\\nNew array:\")\rprint(new_array)\r", "nl": "Write a NumPy program to multiply an array of dimension (2,2,3) by an array with dimensions (2,2). "}
{"code": "import numpy as np\rnums = np.array([[[1, 2, 3, 4],\r               [0, 1, 3, 4],\r               [90, 91, 93, 94],\r               [5, 0, 3, 2]]])\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nSwap rows and columns of the said array in reverse order:\")\rnew_nums = print(nums[::-1, ::-1])\rprint(new_nums)\r", "nl": "Write a NumPy program to swap rows and columns of a given array in reverse order. "}
{"code": "import numpy as np\rarray_nums = np.arange(0, 40, 2)\rprint(\"Original array:\")\rprint(array_nums)\rprint(\"\\nNew array of shape(5, 4):\")\rnew_array = array_nums.reshape(5, 4)\rprint(new_array) \rprint(\"\\nRestore the reshaped array into a 1-D array:\")\rprint(new_array.flatten())\r", "nl": "Write a NumPy program to create an 1-D array of 20 elements. Now create a new array of shape (5, 4) from the said array, then restores the reshaped array into a 1-D array. "}
{"code": "# License https://bit.ly/2InTS3W\r# Tree_sort algorithm\r# Build a BST and in order traverse.\rclass node():\r    # BST data structure\r    def __init__(self, val):\r        self.val = val\r        self.left = None \r        self.right = None \r    \r    def insert(self,val):\r        if self.val:\r            if val < self.val:\r                if self.left is None:\r                    self.left = node(val)\r                else:\r                    self.left.insert(val)\r            elif val > self.val:\r                if self.right is None:\r                    self.right = node(val)\r                else:\r                    self.right.insert(val)\r        else:\r            self.val = val\r\rdef inorder(root, res):\r    # Recursive travesal \r    if root:\r        inorder(root.left,res)\r        res.append(root.val)\r        inorder(root.right,res)\r\rdef treesort(arr):\r    # Build BST\r    if len(arr) == 0:\r        return arr\r    root = node(arr[0])\r    for i in range(1,len(arr)):\r        root.insert(arr[i])\r    # Traverse BST in order. \r    res = []\r    inorder(root,res)\r    return res\r\rprint(treesort([7,1,5,2,19,14,17]))\r", "nl": "Write a Python program to sort a list of elements using Tree sort. "}
{"code": "import numpy as np\rx = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])\ry = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])\rprint(\"Original numbers:\")\rprint(x)\rprint(y)\rprint(\"Comparison - equal:\")\rprint(np.equal(x, y))\rprint(\"Comparison - equal within a tolerance:\")\rprint(np.allclose(x, y))\r", "nl": "Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s001'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nGroup by with multiple aggregations:\")\rresult = df.groupby(['school_code','class']).agg({'height': ['max', 'mean'],\r                                 'weight': ['sum','min','count']})\rprint(result)\r", "nl": "Write a Pandas program to split a given dataframe into groups with multiple aggregations. "}
{"code": "import numpy as np\rv = np.arange(7)\rresult = np.linalg.norm(v)\rprint(\"Vector norm:\")\rprint(result)\rm = np.matrix('1, 2; 3, 4') \rresult1 = np.linalg.norm(m)\rprint(\"Matrix norm:\")\rprint(result1)\r", "nl": "Write a NumPy program to find a matrix or vector norm. "}
{"code": "class Node:\r    # Singly linked node\r    def __init__(self, data=None):\r        self.data = data\r        self.next = None\rclass singly_linked_list:\r    def __init__(self):\r        # Createe an empty list\r        self.tail = None\r        self.head = None\r        self.count = 0\r\r    def append_item(self, data):\r        #Append items on the list\r        node = Node(data)\r        if self.head:\r            self.head.next = node\r            self.head = node\r        else:\r            self.tail = node\r            self.head = node\r        self.count += 1\r    \r    def delete_item(self, data):\r        # Delete an item from the list\r        current = self.tail\r        prev = self.tail\r        while current:\r            if current.data == data:\r                if current == self.tail:\r                    self.tail = current.next\r                else:\r                    prev.next = current.next\r                self.count -= 1\r                return\r            prev = current\r            current = current.next\r    def iterate_item(self):\r        # Iterate the list.\r        current_item = self.tail\r        while current_item:\r            val = current_item.data\r            current_item = current_item.next\r            yield val\r\ritems = singly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Original list:\")\rfor val in items.iterate_item():\r    print(val)\r\rprint(\"\\nAfter removing the first item from the list:\")\ritems.delete_item('PHP')\rfor val in items.iterate_item():\r    print(val)\r", "nl": "Write a Python program to delete the first item from a singly linked list. "}
{"code": "from collections import Counter\rl1 = [1,1,2,3,3,4,4,5,6,7]\rl2 = [1,1,2,4,5,6]\rprint(\"Original lists:\")\rc1 = Counter(l1)\rc2 = Counter(l2)\rdiff = c1-c2\rprint(list(diff.elements()))\r", "nl": "Write a Python program to find the difference between two list including duplicate elements. Use collections module. "}
{"code": "def sum_of_cubes(n):\r n -= 1\r total = 0\r while n > 0:\r   total += n * n * n\r   n -= 1\r return total\rprint(\"Sum of cubes smaller than the specified number: \",sum_of_cubes(3))\r", "nl": "Write a Python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')    \rdf.query('Mine_Name == [\"Shoal Creek Mine\", \"Piney Woods Preparation Plant\"]').head()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and find a list of specified customers by name. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rcloned = a.clone()\rprint(\"\\nCloned datetime:\")\rprint(cloned)\r", "nl": "Write a Python program to create a new Arrow object, cloned from the current one. "}
{"code": "import numpy as np\rx = np.eye(3)\rprint(x)\r", "nl": "Write a NumPy program to create a 3-D array with ones on a diagonal and zeros elsewhere. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: First element of the second row and fourth element of fourth row  \")\rprint(arra_data[[1,3], [0,3]])\r", "nl": "Write a NumPy program to extract first element of the second row and fourth element of fourth row from a given (4x4) array. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current date:\")\rprint(a.date())\rprint(\"\\nCurrent time:\")\rprint(a.time())\r", "nl": "Write a Python program to get date and time properties from datetime function using arrow module. "}
{"code": "import os\rfile_size = os.path.getsize(\"abc.txt\")\rprint(\"\\nThe size of abc.txt is :\",file_size,\"Bytes\")\rprint()\r", "nl": "Write a Python program to get the size of a file. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nBar charts in dataframe:\")\rdf.style.bar(subset=['B', 'C'], color='#d65f5f')\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display bar charts in dataframe on specified columns. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport seaborn as sns\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rdf[\"ufo_yr\"] = df.Date_time.dt.month\rmonths_data = df.ufo_yr.value_counts()\rmonths_index = months_data.index  # x ticks\rmonths_values = months_data.get_values()\rplt.figure(figsize=(15,8))\rplt.xticks(rotation = 60)\rplt.title('UFO sighted by Month')\rplt.xlabel(\"Months\")\rplt.ylabel(\"Number of sighting\")\rmonths_plot = sns.barplot(x=months_index[:60],y=months_values[:60], palette = \"Oranges\")\r", "nl": "Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) sighted by month. "}
{"code": "def quick_sort(nums: list) -> list:\r    if len(nums) <= 1:\r        return nums\r    else:\r        return (\r            quick_sort([el for el in nums[1:] if el <= nums[0]])\r            + [nums[0]]\r            + quick_sort([el for el in nums[1:] if el > nums[0]])\r        )\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Quick Sort the said list becomes:\")\rprint(quick_sort(nums))\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Quick Sort the said list becomes:\")\rprint(quick_sort(nums))\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Quick Sort the said list becomes:\")\rprint(quick_sort(nums))\r", "nl": "Write a Python program to sort unsorted numbers using Recursive Quick Sort. "}
{"code": "import arrow\rutc = arrow.utcnow()\rprint(\"utc:\")\rprint(utc)\rprint(\"\\nutc to local:\")\rprint(utc.to('local'))\rprint(\"\\nlocal to utc:\")\rprint(utc.to('local').to('utc'))\rprint(\"\\nutc to specific location:\")\rprint(utc.to('US/Pacific'))\r", "nl": "Write a Python program to convert timezone from local to utc, utc to local or specified zones. "}
{"code": "def list_difference(l1,l2):\r    result = list(l1)\r    for el in l2:\r        result.remove(el)\r    return result\rl1 = [1,1,2,3,3,4,4,5,6,7]\rl2 = [1,1,2,4,5,6]\r\rprint(\"Original lists:\")\rprint(l1)\rprint(l2)\rprint(\"\\nDifference between two said list including duplicate elements):\")\rprint(list_difference(l1,l2))\r", "nl": "Write a Python program to find the difference between two list including duplicate elements. "}
{"code": "import pandas as pd\rimport numpy as np\rimport seaborn as sns\r\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - Heatmap style:\")\r\rcm = sns.light_palette(\"red\", as_cmap=True)\r \rdf.style.background_gradient(cmap='viridis') \r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in Heatmap style. "}
{"code": "from bs4 import BeautifulSoup\rhtml_content = '<a href=\"https://w3resource.com/\">Python exercises<i>w3resource</i></a>'\rsoup = BeautifulSoup(html_content, \"lxml\")\rprint(\"Original Markup:\")\ra_tag = soup.a\rprint(a_tag)\rnew_tag = soup.a.decompose()\rprint(\"After decomposing:\")\rprint(new_tag)\r", "nl": "Write a Python program to remove a tag from a given tree of html document and destroy it and its contents. "}
{"code": "def digitize(n):\r  return list(map(int, str(n)))\rprint(digitize(123))\rprint(digitize(1347823)) \r", "nl": "Write a Python program to convert a given number (integer) to a list of digits. "}
{"code": "lines = []\rwhile True:\r    l = input()\r    if l:\r        lines.append(l.upper())\r    else:\r        break;\r\rfor l in lines:\r    print(l)\r\t", "nl": "rite a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case). "}
{"code": "from bs4 import BeautifulSoup\rhtml_markup= '<a href=\"https://w3resource.com/\">Python exercises<i>w3resource</i></a>'\rsoup = BeautifulSoup(html_markup, \"lxml\")\rprint(\"Original markup:\")\ra_tag = soup.a\rprint(a_tag)\rnew_tag = soup.new_tag(\"b\")\rnew_tag.string = \"PHP\"\rb_tag = a_tag.i.replace_with(new_tag)\rprint(\"New Markup:\")\rprint(a_tag)\r", "nl": "Write a Python program to remove a tag or string from a given tree of html document and replace it with the given tag or string. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'address': ['9910 Surrey Avenue\\n9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.\\n102 Dunbar St.', '17 West Livingston Court']\r})\r\rprint(\"Original DataFrame:\")\rprint(df)\r\rdef find_unique_sentence(str1):\r    result = re.findall(r'(?sm)(^[^\\r\\n]+$)(?!.*^\\1$)', str1)\r    return result\r\rdf['unique_sentence']=df['address'].apply(lambda st : find_unique_sentence(st))\rprint(\"\\nExtract unique sentences :\")\rprint(df)\r", "nl": "Write a Pandas program to extract the unique sentences from a given column of a given DataFrame. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFilter all records where the average consumption of beverages per person from .5 to 2.50.:\")\rprint(w_a_con[(w_a_con['Display Value'] < 2.5) & (w_a_con['Display Value']>.5)].head())\r", "nl": "Write a Pandas program to filter all records where the average consumption of beverages per person from .5 to 2.50 in world alcohol consumption dataset. "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels:\")\rdf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\rprint(df)\rprint(\"\\nSelect 1st, 2nd and 3rd row of the said DataFrame:\")\rpositions = [1, 2, 5]\rprint(df.take([1, 2, 5]))\r\rprint(\"\\nTake elements at indices 1 and 2 along the axis 1 (column selection):\")\rprint(df.take([1, 2], axis=1))\r\rprint(\"\\nTake elements at indices 4 and 3 using negative integers along the axis 1 (column selection):\")\rprint(df.take([-1, -2], axis=1))\r", "nl": "Write a Pandas program to extract elements in the given positional indices along an axis of a dataframe. "}
{"code": "def max_Product(arr): \r    arr_len = len(arr) \r    if (arr_len < 2): \r        print(\"No pairs exists\") \r        return      \r    # Initialize max product pair \r    x = arr[0]; y = arr[1] \r\r    # Traverse through every possible pair     \r    for i in range(0, arr_len): \r\r        for j in range(i + 1, arr_len): \r            if (arr[i] * arr[j] > x * y): \r                x = arr[i]; y = arr[j] \r\r    return x,y    \r\rnums = [1, 2, 3, 4, 7, 0, 8, 4] \rprint(\"Original array:\", nums)\rprint(\"Maximum product pair is:\", max_Product(nums))\r\rnums = [0, -1, -2, -4, 5, 0, -6] \rprint(\"\\nOriginal array:\", nums)\rprint(\"Maximum product pair is:\", max_Product(nums))\r", "nl": "Write a Python program to find a pair with highest product from a given array of integers. "}
{"code": "def test(lst):\r    result = sorted(lst, key=lambda x: not x) \r    return result\rnums = [3,4,0,0,0,6,2,0,6,7,6,0,0,0,9,10,7,4,4,5,3,0,0,2,9,7,1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nMove all zero digits to end of the said list of numbers:\")\rprint(test(nums)) \r", "nl": "Write a Python program to move all zero digits to end of a given list of numbers. "}
{"code": "import numpy as np\rx = np.array([0, 1, 3])\ry = np.array([2, 4, 5])\rprint(\"\\nOriginal array1:\")\rprint(x)\rprint(\"\\nOriginal array1:\")\rprint(y)\rprint(\"\\nCross-correlation of the said arrays:\\n\",np.cov(x, y))\r", "nl": "Write a NumPy program to compute cross-correlation of two given arrays. "}
{"code": "from inspect import getmodule\rfrom math import sqrt\rprint(getmodule(sqrt))\r", "nl": "Write a Python program to get the actual module object for a given object. "}
{"code": "def extract_nth_element(test_list, n):\r    result = list(map (lambda x:(x[n]), test_list))\r    return result\rstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] \rprint (\"Original list:\")\rprint(students)\rn = 0\rprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\rprint(extract_nth_element(students, n))\rn = 2\rprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\rprint(extract_nth_element(students, n))\r", "nl": "Write a Python program to extract the nth element from a given list of tuples using lambda. "}
{"code": "import numpy as np\rx = np.array([[10,20,30], [40,50,60]])\ry = np.array([[100], [200]])\rprint(np.append(x, y, axis=1))\r", "nl": "Write a NumPy program to add an extra column to a NumPy array. "}
{"code": "import functools \rdef remove_duplicates(nums):\r    result = functools.reduce(lambda x, y: x * y, nums, 1)\r    return result\rnums1 = [1,2,3,4,5,6,7,8,9,10]\rnums2 = [2.2,4.12,6.6,8.1,8.3]\rprint(\"list1:\", nums1)\rprint(\"Product of the said list numbers:\")\rprint(remove_duplicates(nums1))\rprint(\"\\nlist2:\", nums2)\rprint(\"Product of the said list numbers:\")\rprint(remove_duplicates(nums2))\r", "nl": "Write a Python program to calculate the product of a given list of numbers using lambda. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\ntime.struct_time, in the current timezone:\")\rprint(arrow.utcnow().timetuple())\r", "nl": "Write a Python program to parse a string representing a time according to a format. "}
{"code": "import numpy as np\rx = np.random.rand(10, 4)\rprint(\"Original array: \")\rprint(x)\ry= x[:5, :]\rprint(\"First 5 rows of the above array:\")\rprint(y)\r", "nl": "Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nAverage consumption of wine per person greater than 2:\")\rprint(w_a_con[(w_a_con['Beverage Types'] == 'Wine') & (w_a_con['Display Value'] > .2)].count())\r", "nl": "Write a Pandas program to find average consumption of wine per person greater than 2 in world alcohol consumption dataset. "}
{"code": "import pandas as pd\rs = pd.Series([\r    ['Red', 'Green', 'White'],\r    ['Red', 'Black'],\r    ['Yellow']])\rprint(\"Original Series of list\")\rprint(s)\rs = s.apply(pd.Series).stack().reset_index(drop=True)\rprint(\"One Series\")\rprint(s)\r", "nl": "Write a Pandas program to convert Series of lists to one Series. "}
{"code": "# License https://bit.ly/2InTS3W\rdef binary_search(lst, item, start, end):\r    if start == end:\r        if lst[start] > item:\r            return start\r        else:\r            return start + 1\r    if start > end:\r        return start\r\r    mid = (start + end) // 2\r    if lst[mid] < item:\r        return binary_search(lst, item, mid + 1, end)\r    elif lst[mid] > item:\r        return binary_search(lst, item, start, mid - 1)\r    else:\r        return mid\rdef insertion_sort(lst):\r    length = len(lst)\r\r    for index in range(1, length):\r        value = lst[index]\r        pos = binary_search(lst, value, 0, index - 1)\r        lst = lst[:pos] + [value] + lst[pos:index] + lst[index+1:]\r    return lst\r\r\rdef merge(left, right):\r    if not left:\r        return right\r\r    if not right:\r        return left\r\r    if left[0] < right[0]:\r        return [left[0]] + merge(left[1:], right)\r\r    return [right[0]] + merge(left, right[1:])\r\rdef time_sort(lst):\r    runs, sorted_runs = [], []\r    length = len(lst)\r    new_run = [lst[0]]\r    sorted_array = []\r\r    for i in range(1, length):\r        if i == length - 1:\r            new_run.append(lst[i])\r            runs.append(new_run)\r            break\r\r        if lst[i] < lst[i - 1]:\r            if not new_run:\r                runs.append([lst[i - 1]])\r                new_run.append(lst[i])\r            else:\r                runs.append(new_run)\r                new_run = []\r        else:\r            new_run.append(lst[i])\r\r    for run in runs:\r        sorted_runs.append(insertion_sort(run))\r\r    for run in sorted_runs:\r        sorted_array = merge(sorted_array, run)\r\r    return sorted_array\r\ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rprint(time_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Time sort. "}
{"code": "import arrow\rutc = arrow.utcnow()\rprint(\"utc:\")\rprint(utc)\rprint(\"\\nutc to local:\")\rprint(utc.to('local'))\rprint(\"\\nlocal to utc:\")\rprint(utc.to('local').to('utc'))\rprint(\"\\nutc to specific location:\")\rprint(utc.to('US/Pacific'))\r", "nl": "Write a Python program to convert timezone from local to utc, utc to local or specified zones. "}
{"code": "import numpy as np\rprint(\"Original matrix:\\n\")\rX = np.random.rand(5, 10)\rprint(X)\rprint(\"\\nSubtract the mean of each row of the said matrix:\\n\")\rY = X - X.mean(axis=1, keepdims=True)\rprint(Y)\r", "nl": "Write a NumPy program to subtract the mean of each row of a given matrix. "}
{"code": "import numpy as np\rprint(\"Test if two arrays are element-wise equal within a tolerance:\")\rprint(np.allclose([1e10,1e-7], [1.00001e10,1e-8]))\rprint(np.allclose([1e10,1e-8], [1.00001e10,1e-9]))\rprint(np.allclose([1e10,1e-8], [1.0001e10,1e-9]))\rprint(np.allclose([1.0, np.nan], [1.0, np.nan]))\rprint(np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True))\r", "nl": "Write a NumPy program to test whether two arrays are element-wise equal within a tolerance. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(pd.pivot_table(df,index=[\"Manager\"],values=[\"Sale_amt\"],aggfunc=[np.mean,len]))\r", "nl": "Write a Pandas program to create a Pivot table and count the manager wise sale and mean value of sale amount. "}
{"code": "from datetime import date, timedelta\r\rdef all_sundays(year):\r# January 1st of the given year\r       dt = date(year, 1, 1)\r# First Sunday of the given year       \r       dt += timedelta(days = 6 - dt.weekday())  \r       while dt.year == year:\r          yield dt\r          dt += timedelta(days = 7)\r          \rfor s in all_sundays(2020):\r   print(s)\r   ", "nl": "Write a Python program to select all the Sundays of a specified year. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.info()\rprint(result)\r", "nl": "Write a Pandas program to print a concise summary of the dataset (titanic.csv). "}
{"code": "import csv\rimport sys\rwith open('temp.csv', 'wt') as f:\r    writer = csv.writer(f)\r    writer.writerow(('id1', 'id2', 'date'))\r    for i in range(3):\r        row = (\r            i + 1,\r            chr(ord('a') + i),\r            '01/{:02d}/2019'.format(i + 1),)\r        writer.writerow(row)\rprint(open('temp.csv', 'rt').read())\r", "nl": "Write a Python program to create an object for writing and iterate over the rows to print the values. "}
{"code": "def remove_duplicate_dictionary(list_color):\r    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]\r    return result\r\rlist_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]\rprint (\"Original list with duplicate dictionary:\")\rprint(list_color)\rprint(\"\\nAfter removing duplicate dictionary of the said list:\")\rprint(remove_duplicate_dictionary(list_color))\r", "nl": "Write a Python program to remove duplicate dictionary from a given list. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table('survived', index='sex', columns='class', margins=True)\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and compute survival totals of all classes along each group. "}
{"code": "def condition_match(x):\r    return ((x % 2) == 0)\rdef remove_items_con(data, N):\r    ctr = 1\r    result = []\r    for x in data:\r        if ctr > N or not condition_match(x):\r            result.append(x)\r        else:\r            ctr = ctr + 1\r    return result\rnums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]\rN = 4\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nRemove first 4 even numbers from the said list:\")\rprint(remove_items_con(nums, N))\r", "nl": "Write a Python program to remove first specified number of elements from a given list satisfying a condition. "}
{"code": "L = [11, 33, 50]\rprint(\"Original List: \",L)\rx = int(\"\".join(map(str, L)))\rprint(\"Single Integer: \",x)\r", "nl": "Write a Python program to convert a list of multiple integers into a single integer. "}
{"code": "def find_last(lst, fn):\r  return next(x for x in lst[::-1] if fn(x))\r\rprint(find_last([1, 2, 3, 4], lambda n: n % 2 == 1))\rprint(find_last([1, 2, 3, 4], lambda n: n % 2 == 0))\r", "nl": "Write a Python program to find the value of the last element in the given list that satisfies the provided testing function. "}
{"code": "from itertools import zip_longest, chain, tee\rdef replace2copy(lst):\r    lst1, lst2 = tee(iter(lst), 2)\r    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\rn = [0,1,2,3,4,5]\rprint(replace2copy(n))\r", "nl": "Write a Python program to change the position of every n-th value with the (n+1)th in a list. "}
{"code": "from functools import reduce \rdef mutiple_list(nums):\r    result =  reduce(lambda x, y: x*y, nums)\r    return result\rnums = [4, 3, 2, 2, -1, 18]\rprint (\"Original list: \")\rprint(nums)\rprint(\"Mmultiply all the numbers of the said list:\",mutiple_list(nums))\rnums = [2, 4, 8, 8, 3, 2, 9]\rprint (\"\\nOriginal list: \")\rprint(nums)\rprint(\"Mmultiply all the numbers of the said list:\",mutiple_list(nums))\r", "nl": "Write a Python program to multiply all the numbers in a given list using lambda. "}
{"code": "def remove_chars(str1, unwanted_chars):\r    for i in unwanted_chars:\r        str1 = str1.replace(i, '')\r    return str1\r\r\r\rstr1 = \"Pyth*^on Exercis^es\"\rstr2 = \"A%^!B#*CD\"\r\runwanted_chars = [\"#\", \"*\", \"!\", \"^\", \"%\"]\rprint (\"Original String : \" + str1)\rprint(\"After removing unwanted characters:\")\rprint(remove_chars(str1, unwanted_chars))\rprint (\"\\nOriginal String : \" + str2)\rprint(\"After removing unwanted characters:\")\rprint(remove_chars(str2, unwanted_chars))\r", "nl": "Write a Python program to remove unwanted characters from a given string. "}
{"code": "import itertools as it\rnums = [[0, 1, 2],\r       [2, 3, 4],\r       [3, 4, 5, 6],\r       [7, 8, 9, 10, 11],\r       [12, 13, 14]]\r\rprint(\"Original list:\")\rprint(nums)\rdef get_avg(x):\r    x = [i for i in x if i is not None]\r    return sum(x, 0.0) / len(x)\rresult = map(get_avg, it.zip_longest(*nums))\rprint(\"\\nAverage of n-th elements in the said list of lists with different lengths:\")\rprint(list(result))\r", "nl": "Write a Python program to compute the average of n"}
{"code": "from geopy.geocoders import Nominatim\rgeolocator = Nominatim(user_agent=\"geoapiExercises\")\rzipcode1 = \"99501\"\rprint(\"\\nZipcode:\",zipcode1)\rlocation = geolocator.geocode(zipcode1)\rprint(\"Details of the said pincode:\")\rprint(location.address) \rzipcode2 = \"CA9 3HX\"\rprint(\"\\nZipcode:\",zipcode2)\rlocation = geolocator.geocode(zipcode2)\rprint(\"Details of the said pincode:\")\rprint(location.address) \rzipcode3 = \"61000\"\rprint(\"\\nZipcode:\",zipcode3)\rlocation = geolocator.geocode(zipcode3)\rprint(\"Details of the said pincode:\")\rprint(location.address) \rzipcode4 = \"713101\"\rprint(\"\\nZipcode:\",zipcode4)\rlocation = geolocator.geocode(zipcode4)\rprint(\"Details of the said pincode:\")\rprint(location.address)\r", "nl": "Write a Python program to find the details of a given zip code using Nominatim API and GeoPy package. "}
{"code": "import numpy as np\rx = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rr = np.char.join(\" \", x)\rprint(r)\r", "nl": "Write a NumPy program to insert a space between characters of all the elements of a given array. "}
{"code": "def merge_some_chars(lst,merge_from,merge_to):\r    result = lst\r    result[merge_from:merge_to] = [''.join(result[merge_from:merge_to])]    \r    return result    \rchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\rprint(\"Original lists:\")\rprint(chars)\rmerge_from = 2\rmerge_to = 4\rprint(\"\\nMerge items from\",merge_from,\"to\",merge_to,\"in the said List:\")\rprint(merge_some_chars(chars,merge_from,merge_to))\rchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\rmerge_from = 3\rmerge_to = 7\rprint(\"\\nMerge items from\",merge_from,\"to\",merge_to,\"in the said List:\")\rprint(merge_some_chars(chars,merge_from,merge_to))\r", "nl": "Write a Python program to merge some list items in given list using index value. "}
{"code": "def perfect_number(n):\r    sum = 0\r    for x in range(1, n):\r        if n % x == 0:\r            sum += x\r    return sum == n\rprint(perfect_number(6))\r", "nl": "Write a Python function to check whether a number is perfect or not. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(df)\rdict_data_list = list()\r\rfor gg, dd in df.groupby(['school_code','class']):\r    group = dict(zip(['school_code','class'], gg))\r    ocolumns_list = list()\r    for _, data in dd.iterrows():\r        data = data.drop(labels=['school_code','class'])\r        ocolumns_list.append(data.to_dict())\r    group['other_columns'] = ocolumns_list\r    dict_data_list.append(group)\r\rprint(dict_data_list) \r", "nl": "Write a Pandas program to split a given dataset, group by two columns and convert other columns of the dataframe into a dictionary with column header as key. "}
{"code": "from collections import Counter\rs = 'lkseropewdssafsdfafkpwe'\rprint(\"Original string: \"+s)\rprint(\"Most common three characters of the said string:\")\rprint(Counter(s).most_common(3))\r", "nl": "Write a Python program to find the most common elements and their counts of a specified text. "}
{"code": "import numpy as np\rx = np.round([1.45, 1.50, 1.55])\rprint(x)\rx = np.round([0.28, .50, .64], decimals=1)\rprint(x)\rx = np.round([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value\rprint(x)\r", "nl": "Write a NumPy program to round array elements to the given number of decimals. "}
{"code": "import pandas as pd\rnums = pd.Series([1, 3, 7, 12, 88, 23, 3, 1, 9, 0])\rprint(\"Original Series:\")\rprint(nums)\rprint(\"Index of the first occurrence of the smallest and largest value of the said series:\")\rprint(nums.idxmin())\rprint(nums.idxmax())\r", "nl": "Write a Pandas program to find the index of the first occurrence of the smallest and largest value of a given series. "}
{"code": "import numpy as np\rrand_num = np.random.normal(0,1,1)\rprint(\"Random number between 0 and 1:\")\rprint(rand_num)\r", "nl": "Write a NumPy program to generate a random number between 0 and 1. "}
{"code": "def unique_sublists(input_list):\r    result ={}\r    for l in input_list: \r        result.setdefault(tuple(l), list()).append(1) \r    for a, b in result.items(): \r        result[a] = sum(b)\r    return result\r\rlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] \rprint(\"Original list:\")\rprint(list1)  \rprint(\"Number of unique lists of the said list:\")\rprint(unique_sublists(list1)) \r\rcolor1 = [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]\rprint(\"\\nOriginal list:\")\rprint(color1)  \rprint(\"Number of unique lists of the said list:\")\rprint(unique_sublists(color1))\r", "nl": "Write a Python program to count number of unique sublists within a given list. "}
{"code": "from timeit import default_timer\rdef timer(n):\r    start = default_timer()\r    # some code here\r    for row in range(0,n):\r        print(row)\r    print(default_timer() - start)\r\rtimer(5)\rtimer(15)\r", "nl": "Write a Python program to calculate the time runs (difference between start and current time) of a program. "}
{"code": "def concatenate_lists(l1,l2,l3):\r    return [i + j + k for i, j, k in zip(l1, l2, l3)]\r    \rl1 = ['0','1','2','3','4'] \rl2 = ['red','green','black','blue','white']\rl3 = ['100','200','300','400','500'] \r\rprint(\"Original lists:\")\rprint(l1)\rprint(l2)\rprint(l3)\rprint(\"\\nConcatenate element-wise three said lists:\")\rprint(concatenate_lists(l1,l2,l3))\r", "nl": "Write a Python program to concatenate element-wise three given lists. "}
{"code": "import sqlite3\rfrom sqlite3 import Error\rdef sql_connection():\r   try:\r     conn = sqlite3.connect('mydatabase.db')\r     return conn\r   except Error:\r     print(Error)\rdef sql_table(conn):\r   cursorObj = conn.cursor()\r# Create the table\r   cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r# Insert records\r   cursorObj.executescript(\"\"\"\r   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);\r   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);\r   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);\r   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);\r   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);\r   \"\"\")   \r   cursorObj.execute(\"SELECT * FROM salesman\")\r   rows = cursorObj.fetchall()\r   print(\"Agent details:\")\r   for row in rows:\r       print(row)\r   print(\"\\nDelete Salesman of ID 5003:\")\r   s_id = 5003\r   cursorObj.execute(\"\"\"\r   DELETE FROM salesman\r   WHERE salesman_id = ?\r   \"\"\", (s_id,))\r   conn.commit()\r   cursorObj.execute(\"SELECT * FROM salesman\")\r   rows = cursorObj.fetchall()\r   print(\"\\nAfter updating Agent details:\")\r   for row in rows:\r       print(row)\rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r sqllite_conn.close()\r print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to delete a specific row from a given SQLite table. "}
{"code": "def max_length_list(input_list):\r    max_length = max(len(x) for x in input_list )   \r    max_list = max(input_list, key = lambda i: len(i))    \r    return(max_length, max_list)\r    \rdef min_length_list(input_list):\r    min_length = min(len(x) for x in input_list )  \r    min_list = min(input_list, key = lambda i: len(i))\r    return(min_length, min_list)\r      \rlist1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nList with maximum length of lists:\")\rprint(max_length_list(list1))\rprint(\"\\nList with minimum length of lists:\")\rprint(min_length_list(list1))\r", "nl": "Write a Python program to find the list with maximum and minimum length using lambda. "}
{"code": "from re import sub\r\rdef camel_case(s):\r  s = sub(r\"(_|-)+\", \" \", s).title().replace(\" \", \"\")\r  return ''.join([s[0].lower(), s[1:]])\rprint(camel_case('JavaScript'))\rprint(camel_case('Foo-Bar'))\rprint(camel_case('foo_bar'))\rprint(camel_case('--foo.bar'))\rprint(camel_case('Foo-BAR'))\rprint(camel_case('fooBAR'))\rprint(camel_case('foo bar'))\r", "nl": "Write a Python program to convert a given string to camelcase. "}
{"code": "color1 = \"Red\", \"Green\", \"Orange\", \"White\"\rcolor2 = \"Black\", \"Green\", \"White\", \"Pink\"\rprint(set(color1) & set(color2))\r", "nl": "Write a Python program to find common items from two lists. "}
{"code": "class Node(object):\r    # Doubly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r\r        self.count += 1\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)\r            \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.data\r            current = current.next\r            yield item_val\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Items in the Doubly linked list: \")\ritems.print_foward()\r", "nl": "Write a Python program to create a doubly linked list, append some items and iterate through the list (print forward). "}
{"code": "import numpy as np    \rx = np.arange(24).reshape((6,4))\rprint(\"Original arrays:\")\rprint(x)\rnew_array = np.transpose(x)\rprint(\"After reverse the dimensions:\")\rprint(new_array)\r", "nl": "Write a NumPy program to rearrange the dimensions of a given array. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({'year': [2018, 2019, 2020],\r                   'month': [2, 3, 4],\r                   'day': [4, 5, 6],\r                   'hour': [2, 3, 4]})\rprint(\"Original dataframe:\")\rprint(df)\rresult = pd.to_datetime(df)\rprint(\"\\nSeries of Timestamps from the said dataframe:\")\rprint(result)\rprint(\"\\nSeries of Timestamps using specified columns:\")\rprint(pd.to_datetime(df[['year', 'month', 'day']]))\r", "nl": "Write a Pandas program to create a series of Timestamps from a DataFrame of integer or string columns. Also create a series of Timestamps using specified columns. "}
{"code": "import arrow\ri = arrow.get(1857900545)\rprint(\"Date from integers: \")\rprint(i)\rf = arrow.get(1857900545.234323)\rprint(\"\\nDate from floats: \")\rprint(f)\rs = arrow.get('1857900545')\rprint(\"\\nDate from Strings: \")\rprint(s)\r", "nl": "Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. "}
{"code": "def merge_lists(*args, fill_value = None):\r  max_length = max([len(lst) for lst in args])\r  result = []\r  for i in range(max_length):\r    result.append([\r      args[k][i] if i < len(args[k]) else fill_value for k in range(len(args))\r    ])\r  return result\rprint(\"After merging lists into a list of lists:\")\rprint(merge_lists(['a', 'b'], [1, 2], [True, False]))  \rprint(merge_lists(['a'], [1, 2], [True, False]))  \rprint(merge_lists(['a'], [1, 2], [True, False], fill_value = '_'))\r", "nl": "Write a Python program to merge two or more lists into a list of lists, combining elements from each of the input lists based on their positions. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.arange(9).reshape(3,3)\ry = x*3\rprint(\"Array-1\")\rprint(x)\rprint(\"Array-2\")\rprint(y)\rnew_array =  np.hstack((x,y))\rprint(\"\\nStack arrays in sequence horizontally:\")\rprint(new_array)\r", "nl": "Write a NumPy program to stack arrays in sequence horizontally (column wise). "}
{"code": "def first_repeated_word(str1):\r  temp = set()\r  for word in str1.split():\r    if word in temp:\r      return word;\r    else:\r      temp.add(word)\r  return 'None'\rprint(first_repeated_word(\"ab ca bc ab\"))\rprint(first_repeated_word(\"ab ca bc ab ca ab bc\"))\rprint(first_repeated_word(\"ab ca bc ca ab bc\"))\rprint(first_repeated_word(\"ab ca bc\"))\r", "nl": "rite a Python program to find the first repeated word in a given string. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rdef color_negative_red(val):\r    color = 'red' if val < 0 else 'black'\r    return 'color: %s' % color\rprint(\"\\nNegative numbers red and positive numbers black:\")\rdf.style.highlight_null(null_color='red')\r", "nl": "Create a dataframe of ten rows, four columns with random values. Convert some values to nan values. Write a Pandas program which will highlight the nan values. "}
{"code": "from random import choice\rdef generate_random(start_range, end_range, nums):\r    result = choice([i for i in range(start_range,end_range) if i not in nums])\r    return result\r   \rstart_range = 1\rend_range = 10\rnums = [2, 9, 10]\rprint(\"\\nGenerate a number in a specified range (1, 10) except [2, 9, 10]\")\rprint(generate_random(start_range,end_range,nums))\r\rstart_range = -5\rend_range = 5\rnums = [-5,0,4,3,2]\r\rprint(\"\\nGenerate a number in a specified range (-5, 5) except [-5,0,4,3,2]\")\rprint(generate_random(start_range,end_range,nums))\r", "nl": "Write a Python program to generate a number in a specified range except some specific numbers. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = '<a href=\"http://example.com/\">HTML<i>w3resource.com</i></a>'\rsoup = BeautifulSoup(html_doc, \"lxml\")\rprint(\"\\nOriginal Markup:\")\rprint(soup.a)\rsoup.a.append(\"CSS\")\rprint(\"\\nAfter append a text in the new link:\")\rprint(soup.a)\r", "nl": "Write a Python program to add to a tag's contents in a given html document. "}
{"code": "import numpy as np\rx = np.arange(1e3)\rprint(x)\r", "nl": "Write a NumPy program to create an array with 10^3 elements. "}
{"code": "import numpy as np\rx=np.array([1.6e-10, 1.6, 1200, .235]) \rprint(\"Original array elements:\")\rprint(x)\rprint(\"Print array values with precision 3:\")\rnp.set_printoptions(suppress=True)\rprint(x)\r", "nl": "Write a NumPy program to suppresses the use of scientific notation for small numbers in NumPy array. "}
{"code": "def test(lst):\r    result = [x + y for x, y in zip(lst[::2],lst[1::2])]\r    return result\r\rnums = ['1','2','3','4','5','6','7','8']\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nJoin adjacent members of a given list:\")\rprint(test(nums))\r\rnums = ['1','2','3']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nJoin adjacent members of a given list:\")\rprint(test(nums))\r", "nl": "Write a Python program to join adjacent members of a given list. "}
{"code": "from collections import Counter\rdef compare_lists(x, y):\r    return Counter(x) == Counter(y)\rn1 = [20, 10, 30, 10, 20, 30]\rn2 = [30, 20, 10, 30, 20, 50]\rprint(compare_lists(n1, n2))\r", "nl": "Write a Python program to compare two unordered lists (not sets). "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nLength of the string in a column:\")\rdf['company_code_length'] = df['company_code'].apply(len)\rprint(df)\r", "nl": "Write a Pandas program to get the length of the string present of a given column in a DataFrame. "}
{"code": "import arrow\rprint(arrow.utcnow())\rprint(\"Hour ceiling:\")\rprint(arrow.utcnow().floor('hour'))\rprint(\"\\nMinute ceiling:\")\rprint(arrow.utcnow().floor('minute'))\rprint(\"\\nSecond ceiling:\")\rprint(arrow.utcnow().floor('second'))\r", "nl": "Write a Python program to create a new Arrow object, representing the \"floor\" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. "}
{"code": "def cast_list(val):\r  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\rd1 = [1]\rprint(type(d1))\rprint(cast_list(d1)) \rd2 = ('Red', 'Green')\rprint(type(d2))\rprint(cast_list(d2)) \rd3 = {'Red', 'Green'}\rprint(type(d3))\rprint(cast_list(d3))\rd4 = {1: 'Red', 2: 'Green', 3: 'Black'}\rprint(type(d4))\rprint(cast_list(d4))\r", "nl": "Write a Python program to cast the provided value as a list if it's not one. "}
{"code": "def test(lsts, key):\r  return [x.get(key) for x in lsts]\r \rstudents = [\r  { 'name': 'Theodore', 'age': 18 },\r  { 'name': 'Mathew', 'age': 22 },\r  { 'name': 'Roxanne', 'age': 20 },\r  { 'name': 'David', 'age': 18 }\r]\r\rprint(\"Original list of dictionaries:\")\rprint(students)\rprint(\"\\nConvert a list of dictionaries into a list of values corresponding to the specified key:\")\rprint(test(students, 'age'))\r", "nl": "Write a Python program to convert a list of dictionaries into a list of values corresponding to the specified key. "}
{"code": "def factorial(n):\r  if n <= 1:\r    return 1\r  else:\r    return n * (factorial(n - 1))\r    \rprint(factorial(5))\r", "nl": "Write a Python program to get the factorial of a non-negative integer. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult  =  df.pivot_table('survived', index=['sex','age'], columns='class')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival rate by gender, age wise of various classes. "}
{"code": "import numpy as np\rx = np.array([[1, 2], [3, 4]])\ry = np.array([[1, 2], [1, 2]])\rprint(\"Array1: \")\rprint(x)\rprint(\"Array1: \")\rprint(y)\rprint(\"Result- x^y:\")\rr1 = np.power(x, y)\rprint(r1)\r", "nl": "Write a NumPy program to compute xy, element-wise where x, y are two given arrays. "}
{"code": "from geopy.geocoders import Nominatim\rgeolocator = Nominatim(user_agent=\"geoapiExercises\")\rstate1 = \"Uttar Pradesh\"\rprint(\"State Name:\",state1)\rlocation = geolocator.geocode(state1)\rprint(\"State Name/Country Name: \")\rprint(location.address)\rstate2 = \" Illinois\"\rprint(\"\\nState Name:\",state2)\rlocation = geolocator.geocode(state2)\rprint(\"State Name/Country Name: \")\rprint(location.address)\rstate3 = \"Normandy\"\rprint(\"\\nState Name:\",state3)\rlocation = geolocator.geocode(state3)\rprint(\"State Name/Country Name: \")\rprint(location.address) \rstate4 = \"Jerusalem District\"\rprint(\"\\nState Name:\",state4)\rlocation = geolocator.geocode(state4)\rprint(\"State Name/Country Name: \")\rprint(location.address)\r", "nl": "Write a Python program to search the country name from given state name using Nominatim API and GeoPy package. "}
{"code": "from array import *\rnum_list = [1, 2, 6, -8]\rarray_num = array('i', [])\rprint(\"Items in the list: \" + str(num_list))\rprint(\"Append items from the list: \")\rarray_num.fromlist(num_list)\rprint(\"Items in the array: \"+str(array_num))\r", "nl": "Write a Python program to append items from a specified list. "}
{"code": "import numpy as np\rarray=np.arange(30,71)\rprint(\"Array of the integers from 30 to70\")\rprint(array)\r", "nl": "Write a NumPy program to create an array of the integers from 30 to70. "}
{"code": "def multiple(m, n):\r\treturn True if m % n == 0 else False\r\rprint(multiple(20, 5))\rprint(multiple(7, 2))\r", "nl": "Write a Python function to check whether a number is divisible by another number. Accept two integers values form the user. "}
{"code": "import numpy as np\rx = [[1, 0], [1, 1]]\ry = [[3, 1], [2, 2]]\rprint(\"Matrices and vectors.\")\rprint(\"x:\")\rprint(x)\rprint(\"y:\")\rprint(y)\rprint(\"Matrix product of above two arrays:\")\rprint(np.matmul(x, y))\r", "nl": "Write a NumPy program to generate a matrix product of two arrays. "}
{"code": "import numpy as np\ra = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])\rprint(\"Original array:\")\rprint(a)\rresult = np.where(np.logical_and(a>=7, a<=20))\rprint(\"\\nElements within range: index position\")\rprint(result)\r", "nl": "Write a NumPy program to find elements within range from a given array of numbers. "}
{"code": "import pandas as pd \r\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFind which years have all non-zero values:\")\rprint(w_a_con.loc[:,w_a_con.all()])\rprint(\"\\nFind which years have any non-zero values:\")\rprint(w_a_con.loc[:,w_a_con.any()])\r", "nl": "Write a Pandas program to find which years have all non-zero values and which years have any non-zero values from world alcohol consumption dataset. "}
{"code": "import pandas as pd\rprint(\"Sequences of fixed-frequency dates and time spans (1 H):\\n\")\rr1 = pd.date_range('2030-01-01', periods=10, freq='H')\rprint(r1)\rprint(\"\\nSequences of fixed-frequency dates and time spans (3 H):\\n\")\rr2 = pd.date_range('2030-01-01', periods=10, freq='3H')\rprint(r2)\r", "nl": "Write a Pandas program to generate sequences of fixed-frequency dates and time spans intervals. "}
{"code": "x = 3000000\ry = 30000000\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number with comma separator: \"+\"{:,}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number with comma separator: \"+\"{:,}\".format(y));\rprint()\r", "nl": "Write a Python program to display a number with a comma separator. "}
{"code": "import numpy as np\ra = [[1, 2], [3, 4]]\rx = np.array(a)\ra2 = x.tolist()\rprint(a == a2)\r", "nl": "Write a NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not. "}
{"code": "def string_reverse(str1):\r\r    rstr1 = ''\r    index = len(str1)\r    while index > 0:\r        rstr1 += str1[ index - 1 ]\r        index = index - 1\r    return rstr1\rprint(string_reverse('1234abcd'))\r", "nl": "Write a Python program to reverse a string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, None, 33, 30, 31, None]},\r     index = ['t1', 't2', 't3', 't4', 't5', 't6'])\rprint(\"Original DataFrame:\")\rprint(df)\rindex = df['weight'].index[df['weight'].apply(np.isnan)]\rdf_index = df.index.values.tolist()\rprint(\"\\nInteger index of rows with missing data in 'weight' column of the said dataframe:\")\rprint([df_index.index(i) for i in index])\r", "nl": "Write a Pandas program to find integer index of rows with missing data in a given dataframe. "}
{"code": "with open('abc.txt') as fh1, open('test.txt') as fh2:\r    for line1, line2 in zip(fh1, fh2):\r        # line1 from abc.txt, line2 from test.txtg\r        print(line1+line2)\r\t\t", "nl": "Write a Python program to combine each line from first file with the corresponding line in second file. "}
{"code": "def pair_consecutive_elements(lst):\r    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]\r    return result\rnums =  [1,2,3,4,5,6]\rprint(\"Original lists:\")\rprint(nums)\rprint(\"Pair up the consecutive elements of the said list:\")\rprint(pair_consecutive_elements(nums))\rnums =  [1,2,3,4,5]\rprint(\"\\nOriginal lists:\")\rprint(nums)\rprint(\"Pair up the consecutive elements of the said list:\")\rprint(pair_consecutive_elements(nums))\r", "nl": "Write a Python program to pair up the consecutive elements of a given list. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival of both gender and class affected. "}
{"code": "def tuple_max_val(nums):\r    result_max = max([abs(x * y) for x, y in nums] )\r    result_min = min([abs(x * y) for x, y in nums] )\r    return result_max,result_min\rnums = [(2, 7), (2, 6), (1, 8), (4, 9)]   \rprint(\"The original list, tuple : \") \rprint(nums)\rprint(\"\\nMaximum and minimum product from the pairs of the said tuple of list:\")\rprint(tuple_max_val(nums)) \r", "nl": "Write a Python program to find the maximum and minimum product from the pairs of tuple within a given list. "}
{"code": "import itertools\r\rdef interleave_multiple_lists(list1,list2,list3):\r    result = list(itertools.chain(*zip(list1, list2, list3)))\r    return result\r     \rlist1 = [100,200,300,400,500,600,700]\rlist2 = [10,20,30,40,50,60,70]\rlist3 = [1,2,3,4,5,6,7]\rprint(\"Original list:\")\rprint(\"list1:\",list1)\rprint(\"list2:\",list2)\rprint(\"list3:\",list3)\rprint(\"\\nInterleave multiple lists:\")\rprint(interleave_multiple_lists(list1,list2,list3))\r", "nl": "Write a Python program to interleave multiple lists of the same length. Use itertools module. "}
{"code": "import numpy as np\rnums = np.random.randint(0,4,(6,3))\rprint(\"Original vector:\")\rprint(nums)\rnew_nums = np.logical_and.reduce(nums[:,1:] == nums[:,:-1], axis=1)\rresult = nums[~new_nums]\rprint(\"\\nRows with unequal values:\")\rprint(result)\r", "nl": "Write a NumPy program to extract rows with unequal values (e.g. [1,1,2]) from 10x3 matrix. "}
{"code": "user_input = input(\"What's your favourite language? \")\rprint(\"My favourite language is \", user_input.upper())\rprint(\"My favourite language is \", user_input.lower())\r", "nl": "Write a Python script that takes input from the user and displays that input back in upper and lower cases. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link1\">Lacie</a>\r<a class=\"sister\" href=\"http://example.com/tillie\"  id=\"link2\">Tillie</a>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc,\"lxml\")\rprint(\"\\nSiblings of tags:\")\rprint(soup.select(\"#link1 ~ .sister\"))\rprint(soup.select(\"#link1 + .sister\"))\r", "nl": "Write a Python program to find the siblings of tags in a given html document. "}
{"code": "import requests\r\nr = requests.get(\"https://analytics.usa.gov/data/live/browsers.json\")\r\nprint(\"90 days of visits broken down by browser for all sites:\")\r\nprint(r.json()['totals']['browser'])\r\n", "nl": "Write a Python program to extract and display all the image links from en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer). "}
{"code": "import numpy as np    \rarr = np.empty((0,3), int)\rprint(\"Empty array:\")\rprint(arr)\rarr = np.append(arr, np.array([[10,20,30]]), axis=0)\rarr = np.append(arr, np.array([[40,50,60]]), axis=0)\rprint(\"After adding two new arrays:\")\rprint(arr)\r", "nl": "Write a NumPy program to add a new row to an empty NumPy array. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from w3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc, 'html.parser')\rprint(\"href of the first <a> tag:\")\rprint(soup.find('a').attrs['href'])\r\r", "nl": "Write a Python program to find the href of the first <a> tag of a given html document. "}
{"code": "x = 12\rprint(format(x, '08b'))\rprint(format(x, '010b'))\r", "nl": "Write a Python program to convert an integer to binary keep leading zeros. "}
{"code": "def reverse_strings_list(string_list):\r    result = list(map(lambda x: \"\".join(reversed(x)), string_list))\r    return result\r\rcolors_list = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]\rprint(\"\\nOriginal lists:\")\rprint(colors_list)\rprint(\"\\nReverse strings of the said given list:\")\rprint(reverse_strings_list(colors_list))\r", "nl": "Write a Python program to reverse strings in a given list of string values using lambda. "}
{"code": "import numpy as np\ra = np.array( [10,10,20,10,20,20,20,30, 30,50,40,40] )\rprint(\"Original array:\")\rprint(a)\runique_elements, counts_elements = np.unique(a, return_counts=True)\rprint(\"Frequency of unique values of the said array:\")\rprint(np.asarray((unique_elements, counts_elements)))\r", "nl": "Write a NumPy program to count the frequency of unique values in NumPy array. "}
{"code": "import numpy as np\rx = np.array([1, 3, 5, 7, 0])\rprint(\"Original array: \")\rprint(x)\rr1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])\rr2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])\rassert np.array_equiv(r1, r2)\rprint(\"Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:\")\rprint(r2)\r", "nl": "Write a NumPy program to calculate the difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to a given array. "}
{"code": "def sectorarea():\r    pi=22/7\r    radius = float(input('Radius of Circle: '))\r    angle = float(input('angle measure: '))\r    if angle >= 360:\r        print(\"Angle is not possible\")\r        return\r    sur_area = (pi*radius**2) * (angle/360)\r    print(\"Sector Area: \", sur_area)\r\rsectorarea()\r", "nl": "Write a Python program to calculate the area of the sector. "}
{"code": "import numpy as np\rimport sys\rnums = np.arange(2000)\rnp.set_printoptions(threshold=sys.maxsize)\rprint(nums)\r", "nl": "Write a NumPy program to print the full NumPy array, without truncation. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"Text from the said page:\")\rprint(soup.get_text())\r\r", "nl": "Write a Python program to extract all the text from a given web page. "}
{"code": "def test(d):\r  return list(d.items())\r \rd = {'Red': 1, 'Green': 3, 'White': 5, 'Black': 2, 'Pink': 4}\rprint(\"Original Dictionary:\")\rprint(d)\rprint(\"\\nConvert the said dictionary to a list of tuples:\")\rprint(test(d))\r", "nl": "Write a Python program to convert given a dictionary to a list of tuples. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 37, 33, 30, 31, 32],\r    'tcode': ['t1', 't2', 't3', 't4', 't5', 't6']})    \rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nCreate MultiIndex on 'tcode' and 'school_code':\")\rdf = df.set_index(['tcode', 'school_code'])\rprint(df)\rprint(\"\\nSelect rows(s) from 'tcode' column:\")\rprint(df.query(\"tcode == 't2'\"))\rprint(\"\\nSelect rows(s) from 'school_code' column:\")\rprint(df.query(\"school_code == 's001'\"))\rprint(\"\\nSelect rows(s) from 'tcode' and 'scode' columns:\")\rprint(df.query((\"tcode == 't1'\") and (\"school_code == 's001'\")))\r", "nl": "Write a Pandas program to select rows by filtering on one or more column(s) in a multi-index dataframe. "}
{"code": "def smallest_largest_words(str1):\r    word = \"\";\r    all_words = [];\r    str1 = str1 + \" \";\r    for i in range(0, len(str1)):\r        if(str1[i] != ' '):\r            word = word + str1[i];  \r        else:\r            all_words.append(word);  \r            word = \"\";  \r          \r    small = large = all_words[0];  \r   \r#Find smallest and largest word in the str1  \r    for k in range(0, len(all_words)):\r        if(len(small) > len(all_words[k])):\r            small = all_words[k];\r        if(len(large) < len(all_words[k])):\r            large = all_words[k];\r    return small,large;\r\rstr1 = \"Write a Java program to sort an array of given integers using Quick sort Algorithm.\";  \rprint(\"Original Strings:\\n\",str1)\rsmall, large = smallest_largest_words(str1)  \rprint(\"Smallest word: \" + small);  \rprint(\"Largest word: \" + large); \r", "nl": "Write a Python program to find smallest and largest word in a given string. "}
{"code": "def test(dictt):\r    result = {}\r    for val in dictt.values(): \r        result[val] = len(val) \r    return result    \r\rcolor_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}\rprint(\"\\nOriginal Dictionary:\")\rprint(color_dict)\rprint(\"Length of dictionary values:\")\rprint(test(color_dict))\r\rcolor_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}\rprint(\"\\nOriginal Dictionary:\")\rprint(color_dict)\rprint(\"Length of dictionary values:\")\rprint(test(color_dict))\r", "nl": "Write a Python program to find the length of a given dictionary values. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Year:\")\rprint(a.year)\rprint(\"\\nMonth:\")\rprint(a.month)\rprint(\"\\nDate:\")\rprint(a.day)\r", "nl": "Write a Python program to extract year, month and date value from current datetime using arrow module. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']\r})\r\rprint(\"Original DataFrame:\")\rprint(df)\r\rdef find_capital_word(str1):\r    result = re.findall(r'\\b[A-Z]\\w+', str1)\r    return result\r\rdf['caps_word_in']=df['address'].apply(lambda cw : find_capital_word(cw))\rprint(\"\\nExtract words starting with capital words from the sentences':\")\rprint(df)\r", "nl": "Write a Pandas program to extract words starting with capital words from a given column of a given DataFrame. "}
{"code": "import os\rpath = r'g:\\\\testpath\\\\a.txt'\rprint(\"Original path:\")\rprint(path)\rprint(\"\\nDir and file name of the said path:\")\rprint(os.path.split(path))\rprint(\"\\nJoin one or more path components together:\")\rprint(os.path.join(r'g:\\\\testpath\\\\','a.txt'))\r", "nl": "Write a Python program to join one or more path components together and split a given path in directory and file. "}
{"code": "from copy import deepcopy\rfrom random import randint\rdef shuffle_list(lst):\r  temp_lst = deepcopy(lst)\r  m = len(temp_lst)\r  while (m):\r    m -= 1\r    i = randint(0, m)\r    temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]\r  return temp_lst\rnums = [1, 2, 3, 4, 5, 6]\rprint(\"Original list: \",nums)\rprint(\"\\nShuffle the elements of the said list:\")\rprint(shuffle_list(nums))\r", "nl": "Write a Python program to randomize the order of the values of an list, returning a new list. "}
{"code": "def count_same_pair(nums1, nums2, nums3):\r    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))\r    return result\rnums1 = [1,2,3,4,5,6,7,8]\rnums2 = [2,2,3,1,2,6,7,9]\rnums3 = [2,1,3,1,2,6,7,9]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(nums3)\rprint(\"\\nNumber of same pair of the said three given lists:\")\rprint(count_same_pair(nums1, nums2, nums3))\r", "nl": "Write a Python program to count the same pair in three given lists. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = pd.pivot_table(df, index = [\"sex\",\"age\"], aggfunc=np.sum)\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table with multiple indexes from the data set of titanic.csv. "}
{"code": "\rpi = 3.1415926535897931\rr= 6.0\rV= 4.0/3.0*pi* r**3\rprint('The volume of the sphere is: ',V)\r", "nl": "Write a Python program to get the volume of a sphere with radius 6."}
{"code": "color = [\"red\", \"green\", \"white\", \"black\"]\rprint(\"Original list:\")\rprint(color)\rprint(\"\\nTraverse the said list in reverse order:\")\rfor i in reversed(color):\r    print(i)\rprint(\"\\nTraverse the said list in reverse order with original index:\")\rfor i, el in reversed(list(enumerate(color))):\r    print(i, el) \r", "nl": "Write a Python program to traverse a given list in reverse order, also print the elements with original index. "}
{"code": "import numpy as np\rx = np.zeros((3,), dtype=('i4,f4,a40'))\rnew_data = [(1, 2., \"Albert Einstein\"), (2, 2., \"Edmond Halley\"), (3, 3., \"Gertrude B. Elion\")]\rx[:] = new_data\rprint(x)\r", "nl": "Write a NumPy program to create an array of zeros and three column types (integer, float, character). "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.array((1,2,3))\ry = np.array((2,3,4))\rprint(\"Array-1\")\rprint(x)\rprint(\"Array-2\")\rprint(y)\rnew_array =  np.row_stack((x, y))\rprint(\"\\nStack 1-D arrays as rows wise:\")\rprint(new_array)\r", "nl": "Write a NumPy program to stack 1-D arrays as row wise. "}
{"code": "import pandas as pd\rfrom datetime import timedelta\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nAdd 100 days with reporting date:\")\rdf['New_doc_dt'] = df['Date_time'] + timedelta(days=180)\rprint(df)\r", "nl": "Write a Pandas program to add 100 days with reporting date of unidentified flying object (UFO). "}
{"code": "import numpy as np\rx = np.array([0, 1, -1])\rprint(\"Original array: \")\rprint(x)\rr1 = np.negative(x)\rr2 = -x\rassert np.array_equal(r1, r2)\rprint(\"Numerical negative value for all elements of the said array:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute numerical negative value for all elements in a given array. "}
{"code": "def sort_sublists(input_list):\r    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r    return result\rcolor1 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]\rprint(\"\\nOriginal list:\")\rprint(color1)  \rprint(\"\\nAfter sorting each sublist of the said list of lists:\")\rprint(sort_sublists(color1))\r", "nl": "Write a Python program to sort each sublist of strings in a given list of lists using lambda. "}
{"code": "def combination(n, n_list):\r    if n<=0:\r        yield []\r        return\r    for i in range(len(n_list)):\r        c_num = n_list[i:i+1]\r        for a_num in combination(n-1, n_list[i+1:]):\r            yield c_num + a_num\rn_list = [1,2,3,4,5,6,7,8,9]\rprint(\"Original list:\") \rprint(n_list)\rn = 2\rresult = combination(n, n_list)\rprint(\"\\nCombinations of\",n,\"distinct objects:\")\rfor e in result:\r     print(e)\r\r", "nl": "Write a Python program to generate the combinations of n distinct objects taken from the elements of a given list. "}
{"code": "def position_max_min(nums):\r    max_val = max(nums)\r    min_val = min(nums)\r    max_result = [i for i, j in enumerate(nums) if j == max_val]\r    min_result = [i for i, j in enumerate(nums) if j == min_val]\r    return max_result,min_result\r\rnums = [12,33,23,10,67,89,45,667,23,12,11,10,54]\rprint(\"Original list:\")\rprint(nums)\rresult = position_max_min(nums)\rprint(\"\\nIndex positions of the maximum value of the said list:\")\rprint(result[0])\rprint(\"\\nIndex positions of the minimum value of the said list:\")\rprint(result[1])\r", "nl": "Write a Python program to find all index positions of the maximum and minimum values in a given list of numbers. "}
{"code": "import numpy as np\rx = np.arange(7)\rprint(\"Original array\")\rprint(x)\rprint(\"First array elements raised to powers from second array, element-wise:\")\rprint(np.power(x, 3))\r", "nl": "Write a NumPy program to get the powers of an array values element-wise. "}
{"code": "import arrow\rprint(\"Ctime formatted representation of the date and time:\")\ra = arrow.utcnow().ctime()\rprint(a) \r", "nl": "Write a Python program to create a ctime formatted representation of the date and time using arrow module. "}
{"code": "import numpy as np\rx = np.arange(12).reshape(3, 4)\rfor x in np.nditer(x):\r    print(x,end=' ')\rprint()\r", "nl": "Write a NumPy program to create display every element of a NumPy array. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rdf[df['hire_date'] >='20070101']\r", "nl": "Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date> 01-01-07. "}
{"code": "import numpy as np\rx = np.ones((5,5))\rprint(\"Original array:\")\rprint(x)\rprint(\"1 on the border and 0 inside in the array\")\rx[1:-1,1:-1] = 0\rprint(x)\r", "nl": "Write a NumPy program to create a 2d array with 1 on the border and 0 inside. "}
{"code": "import numpy as np\rx = np.arange(10)\rprint(\"Original array:\")\rprint(x)\rnp.random.shuffle(x)\rn = 1\rprint (x[np.argsort(x)[-n:]])\r", "nl": "Write a NumPy program to get the n largest values of an array. "}
{"code": "def divisible_by_digits(start_num, end_num):\r    return [n for n in range(start_num, end_num+1) \\\r                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\rprint(divisible_by_digits(1,22))\r", "nl": "Write a Python program to find numbers within a given range where every number is divisible by every digit it contains. "}
{"code": "from urllib.request import urlopen\r\nfrom bs4 import BeautifulSoup\r\nhtml = urlopen('https://en.wikipedia.org/wiki/Main_Page')\r\nbs = BeautifulSoup(html, \"html.parser\")\r\ntitles = bs.find_all(['h1', 'h2','h3','h4','h5','h6'])\r\nprint('List all the header tags :', *titles, sep='\\n\\n')\r\n", "nl": "Write a Python program to extract h1 tag from example.com. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 7, 9])\rprint(\"Original array: \"+str(array_num))\rprint(\"Remove the third item form the array:\")\rarray_num.pop(2)\rprint(\"New array: \"+str(array_num))\r", "nl": "Write a Python program to remove a specified item using the index from an array. "}
{"code": "def sort_sublists(input_list):\r    result = sorted(input_list, key=lambda l: (len(l), l))\r    return result\rlist1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nSort the list of lists by length and value:\")\rprint(sort_sublists(list1))\r", "nl": "Write a Python program to sort a given list of lists by length and value using lambda. "}
{"code": "from bisect import bisect_left  \rdef Binary_Search(l, x): \r    i = bisect_left(l, x) \r    if i: \r        return (i-1) \r    else: \r        return -1  \rnums = [1, 2, 3, 4, 8, 8, 10, 12] \rx = 5 \rnum_position  = Binary_Search(nums, x) \rif num_position  == -1: \r    print(\"Not found..!\") \relse: \r    print(\"Largest value smaller than \", x, \" is at index \", num_position )\r", "nl": "Write a Python program to find the index position of the largest value smaller than a given number in a sorted list using Binary Search (bisect). "}
{"code": "import numpy as np\rresult  = np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)\rprint(\"\\nCopy of a matrix with the elements below the k-th diagonal zeroed:\")\rprint(result)\r", "nl": "Write a NumPy program to get a copy of a matrix with the elements below the k-th diagonal zeroed. "}
{"code": "for fizzbuzz in range(51):\r    if fizzbuzz % 3 == 0 and fizzbuzz % 5 == 0:\r        print(\"fizzbuzz\")\r        continue\r    elif fizzbuzz % 3 == 0:\r        print(\"fizz\")\r        continue\r    elif fizzbuzz % 5 == 0:\r        print(\"buzz\")\r        continue\r    print(fizzbuzz)\r\t", "nl": "Write a Python program which iterates the integers from 1 to 50. For multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\"."}
{"code": "def drop_left_right(a, n = 1):\r  return a[n:], a[:-n] \rnums = [1, 2, 3]\rprint(\"Original list elements:\")\rprint(nums)\rresult = drop_left_right(nums)\rprint(\"Remove 1 element from left of the said list:\")\rprint(result[0])\rprint(\"Remove 1 element from right of the said list:\")\rprint(result[1])\rnums = [1, 2, 3, 4]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rresult = drop_left_right(nums,2)\rprint(\"Remove 2 elements from left of the said list:\")\rprint(result[0])\rprint(\"Remove 2 elements from right of the said list:\")\rprint(result[1])\rnums = [1, 2, 3, 4, 5, 6]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rresult = drop_left_right(nums)\rprint(\"Remove 7 elements from left of the said list:\")\rprint(result[0])\rprint(\"Remove 7 elements from right of the said list:\")\rprint(result[1])\r", "nl": "Write a Python program to get a list with n elements removed from the left, right. "}
{"code": "import sqlite3\rfrom sqlite3 import Error\rdef sql_connection():\r   try:\r     conn = sqlite3.connect('mydatabase.db')\r     return conn\r   except Error:\r     print(Error)\r \rdef sql_table(conn):\r   cursorObj = conn.cursor()\r# Create two tables\r   cursorObj.execute(\"CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);\")\r   cursorObj.execute(\"CREATE TABLE temp_agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);\")\r   print(\"List of tables:\")\r   cursorObj.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\r   print(cursorObj.fetchall())\r   conn.commit()\rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r sqllite_conn.close()\r print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to list the tables of given SQLite database file. "}
{"code": "def bifurcate(colors, filter):\r  return [\r    [x for x, flag in zip(colors, filter) if flag],\r    [x for x, flag in zip(colors, filter) if not flag]\r  ]\rprint(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))\r", "nl": "Write a Python program to split values into two groups, based on the result of the given filter list. "}
{"code": "d = {\"students\":[{\"firstName\": \"Nikki\", \"lastName\": \"Roysden\"},\r               {\"firstName\": \"Mervin\", \"lastName\": \"Friedland\"},\r               {\"firstName\": \"Aron \", \"lastName\": \"Wilkins\"}],\r\"teachers\":[{\"firstName\": \"Amberly\", \"lastName\": \"Calico\"},\r         {\"firstName\": \"Regine\", \"lastName\": \"Agtarap\"}]}\rprint(\"Original dictionary:\")\rprint(d)\rprint(type(d))\rimport json\r \rwith open(\"dictionary\", \"w\") as f:\r   json.dump(d, f, indent = 4, sort_keys = True)\r \rprint(\"\\nJson file to dictionary:\")\rwith open('dictionary') as f:\r data = json.load(f)\rprint(data)\r", "nl": "Write a Python program to store a given dictionary in a json file. "}
{"code": "def add_numbers(a, b):\r   if not (isinstance(a, int) and isinstance(b, int)):\r       return \"Inputs must be integers!\"\r   return a + b\rprint(add_numbers(10, 20))\rprint(add_numbers(10, 20.23))\rprint(add_numbers('5', 6))\rprint(add_numbers('5', '6'))\r", "nl": "Write a Python program to add two objects if both objects are an integer type. "}
{"code": "class Node(object):\r    # Singly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r\r        self.count += 1\r\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\ritems.append_item('SQL')\r\rprint(\"Number of items of the  Doubly linked list:\",items.count)\r", "nl": "Write a Python program to count the number of items of a given doubly linked list. "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\r                      'B': ['B0', 'B1', 'B2']},\r                     index=['K0', 'K1', 'K2'])\r\rdata2 = pd.DataFrame({'C': ['C0', 'C2', 'C3'],\r                      'D': ['D0', 'D2', 'D3']},\r                     index=['K0', 'K2', 'K3'])\r \rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerged Data (Joining on index):\")\rresult = data1.join(data2)\rprint(result)\r", "nl": "Write a Pandas program to combine the columns of two potentially differently-indexed DataFrames into a single result DataFrame. "}
{"code": "dict =  {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}\rctr = sum(map(len, dict.values()))\rprint(ctr)\r", "nl": "Write a Python program to count number of items in a dictionary value that is a list. "}
{"code": "def find_substring(str1, sub_str):\r    result = list(filter(lambda x: sub_str in x, str1))\r    return result\rcolors = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\rprint(\"Original list:\")\rprint(colors)\r\rsub_str = \"ack\"\rprint(\"\\nSubstring to search:\")\rprint(sub_str)\rprint(\"Elements of the said list that contain specific substring:\")\rprint(find_substring(colors, sub_str))\rsub_str = \"abc\"\rprint(\"\\nSubstring to search:\")\rprint(sub_str)\rprint(\"Elements of the said list that contain specific substring:\")\rprint(find_substring(colors, sub_str))\r", "nl": "Write a Python program to find the elements of a given list of strings that contain specific substring using lambda. "}
{"code": "import pandas as pd\rfrom pandas.tseries.holiday import *\rsdt = datetime(2021, 1, 1)\redt = datetime(2030, 12, 31)\rprint(\"Holidays between 2021-01-01 and 2030-12-31 using the US federal holiday calendar.\")\rcal = USFederalHolidayCalendar()\rfor dt in cal.holidays(start=sdt, end=edt): \r    print (dt)\r", "nl": "Write a Pandas program to generate holidays between two dates using the US federal holiday calendar. "}
{"code": "import numpy as np\rnp_array = np.arange(3*4*5).reshape(3,4,5)\rprint(\"Original Numpy array:\")\rprint(np_array)\rprint(\"Type: \",type(np_array))\rresult = np.diagonal(np_array, axis1=1, axis2=2)\rprint(\"\\n2D diagonals: \")\rprint(result)\rprint(\"Type: \",type(result))\r", "nl": "Write a NumPy program to get all 2D diagonals of a 3D NumPy array. "}
{"code": "def fibonacci(n):\r  if n == 1 or n == 2:\r    return 1\r  else:\r    return (fibonacci(n - 1) + (fibonacci(n - 2)))\r\rprint(fibonacci(7))\r", "nl": "Write a Python program to solve the Fibonacci sequence using recursion. "}
{"code": "import numpy as np\rx= np.arange(9).reshape(3,3)\rprint(\"Original array elements:\")\rprint(x)\rprint(\"Access an array by column:\")\rprint(\"First column:\")\rprint(x[:,0])\rprint(\"Second column:\")\rprint(x[:,1])\rprint(\"Third column:\")\rprint(x[:,2])\r", "nl": "Write a NumPy program to access an array by column. "}
{"code": "def sumDigits(n):\r  if n == 0:\r    return 0\r  else:\r    return n % 10 + sumDigits(int(n / 10))\r\rprint(sumDigits(345))\rprint(sumDigits(45))\r", "nl": "Write a Python program to get the sum of a non-negative integer. "}
{"code": "import numpy as np\rx = np.arange(12).reshape(3, 4)\rprint(\"Elements of the array in Fortan array:\")\rfor x in np.nditer(x, order=\"F\"):\r    print(x,end=' ')\rprint(\"\\n\")\r", "nl": "Write a NumPy program to create and display every element of a NumPy array in Fortran order. "}
{"code": "def is_sort_list(nums):\r    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\r    return result\r\rnums1 = [1,2,4,6,8,10,12,14,16,17]\rprint (\"Original list:\")\rprint(nums1)\rprint(\"\\nIs the said list is sorted!\")\rprint(is_sort_list(nums1)) \r\rnums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]\rprint (\"\\nOriginal list:\")\rprint(nums1)\rprint(\"\\nIs the said list is sorted!\")\rprint(is_sort_list(nums2))\r", "nl": "Write a Python program to check whether a specified list is sorted or not. "}
{"code": "import numpy as np\rarray_2D=np.identity(3)\rprint('3x3 matrix:')\rprint(array_2D)\r", "nl": "Write a NumPy program to create a 3x3 identity matrix. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nString representing the date, controlled by an explicit format string:\")\rprint(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))\r", "nl": "Write a Python program to get string representing the date, controlled by an explicit format string. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])\rprint(\"Original array: \"+str(array_num))\rprint(\"Remove the first occurrence of 3 from the said array:\")\rarray_num.remove(3)\rprint(\"New array: \"+str(array_num))\r", "nl": "Write a Python program to remove the first occurrence of a specified element from an array. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'tweets': ['@Obama says goodbye','Retweets for @cash','A political endorsement in @Indonesia', '1 dog = many #retweets', 'Just a simple #egg']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_at_word(text):\r    word=re.findall(r'(?<[email\u00a0protected])\\w+',text)\r    return \" \".join(word)\r\rdf['at_word']=df['tweets'].apply(lambda x: find_at_word(x))\rprint(\"\\Extracting @word from dataframe columns:\")\rprint(df)\r", "nl": "Write a Pandas program to extract word mention someone in tweets using @ from the specified column of a given DataFrame. "}
{"code": "nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]\rprint(\"Original list:\",nums)\r\rtotal_negative_nums = list(filter(lambda nums:nums<0,nums))\rtotal_positive_nums = list(filter(lambda nums:nums>0,nums))\r\rprint(\"Sum of the positive numbers: \",sum(total_negative_nums))\rprint(\"Sum of the negative numbers: \",sum(total_positive_nums))\r", "nl": "Write a Python program to calculate the sum of the positive and negative numbers of a given list of numbers using lambda function. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['05-10-2012','09-10-2012','05-10-2013','08-17-2013','10-09-2013','07-27-2014','10-09-2012','10-10-2012','10-10-2012','06-17-2014','07-08-2012','04-25-2012'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rdf['ord_date']= pd.to_datetime(df['ord_date']) \rprint(\"\\nYear wise Month wise purchase amount:\")\rresult = df.groupby([df['ord_date'].dt.year, df['ord_date'].dt.month]).agg({'purch_amt':sum})\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups, group by month and year based on order date and find the total purchase amount year wise, month wise. "}
{"code": "#License:  https://bit.ly/2InTS3W \r# Python program for Bitonic Sort. Note that this program \r# works only when size of input is a power of 2. \r# The parameter dir indicates the sorting direction, ASCENDING \r# or DESCENDING; if (a[i] > a[j]) agrees with the direction, \r# then a[i] and a[j] are interchanged.*/ \rdef compAndSwap(a, i, j, dire):\r    if (dire == 1 and a[i] > a[j]) or (dire == 0 and a[i] < a[j]):\r        a[i], a[j] = a[j], a[i]\r        # It recursively sorts a bitonic sequence in ascending order,\r# if dir = 1, and in descending order otherwise (means dir=0).\r# The sequence to be sorted starts at index position low, \r# the parameter cnt is the number of elements to be sorted. \rdef bitonicMerge(a, low, cnt, dire):\r    if cnt > 1:\r        k = int(cnt / 2)\r        for i in range(low, low + k):\r            compAndSwap(a, i, i + k, dire)\r        bitonicMerge(a, low, k, dire)\r        bitonicMerge(a, low + k, k, dire)\r\r        # This funcion first produces a bitonic sequence by recursively\r\r\r# sorting its two halves in opposite sorting orders, and then\r# calls bitonicMerge to make them in the same order \rdef bitonicSort(a, low, cnt, dire):\r    if cnt > 1:\r        k = int(cnt / 2)\r        bitonicSort(a, low, k, 1)\r        bitonicSort(a, low + k, k, 0)\r        bitonicMerge(a, low, cnt, dire)\r\r        # Caller of bitonicSort for sorting the entire array of length N\r\r\r# in ASCENDING order\rdef sort(a, N, up):\r    bitonicSort(a, 0, N, up)\r\r\r# Driver code to test above\ra = []\rprint(\"How many numbers u want to enter?\");\rn = int(input())\rprint(\"Input the numbers:\");\rfor i in range(n):\r    a.append(int(input()))\rup = 1\r\rsort(a, n, up)\rprint(\"\\n\\nSorted array is:\")\rfor i in range(n):\r    print(\"%d\" % a[i])\r", "nl": "Write a Python code to create a program for Bitonic Sort. "}
{"code": "from itertools import accumulate\rdef cumsum(lst):\r  return list(accumulate(lst))\rnums = [1,2,3,4]\rprint(\"Original list elements:\")\rprint(nums)\rprint(\"Cumulative sum of the elements of the said list:\")\rprint(cumsum(nums)) \rnums = [-1,-2,-3,4]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Cumulative sum of the elements of the said list:\")\rprint(cumsum(nums))\r", "nl": "Write a Python program to get the cumulative sum of the elements of a given list. "}
{"code": "import numpy as np\rx = np.tri(4, 3, -1)\rprint(x)\r", "nl": "Write a NumPy program to create an array which looks like below array. "}
{"code": "def extract_index_ele(l1, l2, l3):\r    result = []\r    for m, n, o in zip(l1, l2, l3):\r        if (m == n == o):\r            result.append(m)\r    return result\r\rnums1 = [1, 1, 3, 4, 5, 6, 7]\rnums2 = [0, 1, 2, 3, 4, 5, 7]\rnums3 = [0, 1, 2, 3, 4, 5, 7]\r\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(nums3)\rprint(\"\\nCommon index elements of the said lists:\") \rprint(extract_index_ele(nums1, nums2, nums3))\r", "nl": "Write a Python program to extract common index elements from more than one given list. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index =  ['t1', 't2', 't3', 't4', 't5', 't6'])\rprint(\"Original DataFrame with single index:\")\rprint(df)\rprint(\"\\nCheck a value is exist in single column index dataframe:\")\rprint('t1' in df.index)\rprint('t11' in df.index)\rprint(\"\\nCreate MultiIndex using columns 't_id', \u2018school_code\u2019 and 'class':\")\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32],\r    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})\rdf1 = df.set_index(['t_id', 'school_code', 'class'])\rprint(df1)\rprint(\"\\nCheck a value is exist in multiple columns index dataframe:\")\rprint('t4' in df1.index.levels[0])\rprint('t4' in df1.index.levels[1])\rprint('t4' in df1.index.levels[2])\r", "nl": "Write a Pandas program to check if a specified value exists in single and multiple column index dataframe. "}
{"code": "num = [10,20,30,(10,20),40]\rctr = 0\rfor n in num:\r    if isinstance(n, tuple):\r        break\r    ctr += 1\rprint(ctr)\r", "nl": "Write a Python program to count the elements in a list until an element is a tuple. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Open','Close','High','Low']]\rplt.figure(figsize=(25,25))\rdf2.plot.hist(stacked=True, bins=20)\rplt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')\rplt.show()\r", "nl": "Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. "}
{"code": "def add_val_to_list(lst, add_val):\r    result = lst\r    result = [x+add_val for x in result]   \r    return result    \rnums = [3,8,9,4,5,0,5,0,3]\rprint(\"Original lists:\")\rprint(nums)\radd_val = 3\rprint(\"\\nAdd\",add_val,\"to each element in the said list:\")\rprint(add_val_to_list(nums, add_val))\rnums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]\rprint(\"\\nOriginal lists:\")\rprint(nums)\radd_val = .51\rprint(\"\\nAdd\",add_val,\"to each element in the said list:\")\rprint(add_val_to_list(nums, add_val))\r", "nl": "Write a Python program to add a number to each element in a given list of numbers. "}
{"code": "nums = []\r\rfor i in range(3):\r\r    nums.append([])\r\r    for j in range(2):\r\r        nums[i].append(0)\rprint(\"Multidimensional list:\")\rprint(nums)\r", "nl": "Write a Python program to create a multidimensional list (lists of lists) with zeros. "}
{"code": "import pandas as pd\rimport numpy as np\rnum_series = pd.Series(np.random.randint(1, 10, 9))\rprint(\"Original Series:\")\rprint(num_series)\rresult = np.argwhere(num_series % 5==0)\rprint(\"Positions of numbers that are multiples of 5:\")\rprint(result)\r", "nl": "Write a Pandas program to find the positions of numbers that are multiples of 5 of a given series. "}
{"code": "def substring_copy(str, n):\r  flen = 2\r  if flen > len(str):\r    flen = len(str)\r  substr = str[:flen]\r  \r  result = \"\"\r  for i in range(n):\r    result = result + substr\r  return result\rprint(substring_copy('abcdef', 2))\rprint(substring_copy('p', 3));\r", "nl": "Write a Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2. "}
{"code": "import numpy as np\rnums = np.array([70, 50, 20, 30, -11, 60, 50, 40])\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nAfter partitioning on 4 the position:\")\rprint(np.partition(nums, 4))\r", "nl": "Write a NumPy program to partition a given array in a specified position and move all the smaller elements values to the left of the partition, and the remaining values to the right, in arbitrary order (based on random choice). "}
{"code": "import pandas as pd\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df,index=[\"Region\",\"Manager\",\"SalesMan\"], values=\"Sale_amt\")\rprint(table.query('Manager == [\"Douglas\"]'))\r", "nl": "Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise where Manager = \"Douglas\". "}
{"code": "def is_sort_list(nums, key=lambda x: x):\r    for i, e in enumerate(nums[1:]):\r        if key(e) < key(nums[i]): \r            return False\r    return True\rnums1 = [1,2,4,6,8,10,12,14,16,17]\rprint (\"Original list:\")\rprint(nums1)\rprint(\"\\nIs the said list is sorted!\")\rprint(is_sort_list(nums1)) \rnums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]\rprint (\"\\nOriginal list:\")\rprint(nums1)\rprint(\"\\nIs the said list is sorted!\")\rprint(is_sort_list(nums2))\r", "nl": "Write a Python program to check whether a specified list is sorted or not using lambda. "}
{"code": "import collections\r# declare an empty deque object\rdq_object = collections.deque()\r# Add elements to the deque - left to right\rdq_object.append(2)\rdq_object.append(4)\rdq_object.append(6)\rdq_object.append(8)\rdq_object.append(10)\rprint(\"Deque before rotation:\")\rprint(dq_object)\r# Rotate once in positive direction\rdq_object.rotate()\rprint(\"\\nDeque after 1 positive rotation:\")\rprint(dq_object)\r# Rotate twice in positive direction\rdq_object.rotate(2)\rprint(\"\\nDeque after 2 positive rotations:\")\rprint(dq_object)\r", "nl": "Write a Python program to rotate a Deque Object specified number (positive) of times. "}
{"code": "import requests\rprint(\"timeout = 0.001\")\rtry:\r    r = requests.get('https://github.com/', timeout = 0.001)\r    print(r.text)\rexcept requests.exceptions.RequestException as e:\r    print(e)    \r\rprint(\"\\ntimeout = 1.0\")    \rtry:\r    r = requests.get('https://github.com/', timeout = 1.0)\r    print(\"Connected....!\")\rexcept requests.exceptions.RequestException as e:\r    print(e)\r", "nl": "Write a Python code to send a request to a web page and stop waiting for a response after a given number of seconds. In the event of times out of request, raise Timeout exception. "}
{"code": "class Node(object):\r    # Doubly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\t\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r\r        self.count += 1\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)\r\r    def print_backward(self):\r        current = self.tail\r        while current:\r            print(current.data)\r            current = current.prev\r            \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.data\r            current = current.next\r            yield item_val\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Print Items in the Doubly linked backwards:\")\ritems.print_backward()\r", "nl": "Write a Python program to create a doubly linked list and print nodes from current position to first node. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\r\rprint(\"Original DataFrame:\")\rprint(df)\r\rprint(\"\\nTitle cases:\")\rdf['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to convert a specified character column in title case in a given DataFrame. "}
{"code": "import numpy as np\rimport pandas as pd\rchar_list = list('ABCDEFGHIJKLMNOP')\rnum_arra = np.arange(8)\rnum_dict = dict(zip(char_list, num_arra))\rnum_ser = pd.Series(num_dict)\rdf = num_ser.to_frame().reset_index()\rprint(df.head())\r", "nl": "Write a Pandas program to convert given series into a dataframe with its index as another column on the dataframe. "}
{"code": "import numpy as np\rx = np.array(['2', '11', '234', '1234', '12345'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x)\rr = np.char.zfill(x, 5)\rprint(\"\\nNumeric string of 5 digits with zeros:\")\rprint(r) \r", "nl": "Write a NumPy program to make all the elements of a given string to a numeric string of 5 digits with zeros on its left. "}
{"code": "from collections import Counter\rdef filter_unique(lst):\r  return [item for item, count in Counter(lst).items() if count > 1] \rprint(filter_unique([1, 2, 2, 3, 4, 4, 5]))\r", "nl": "Write a Python program to create a list with the unique values filtered out. "}
{"code": "import random \rprint(\"Set a random seed and get a random number between 0 and 1:\")\rrandom.seed(0)\rnew_random_value = random.random()\rprint(new_random_value)\rrandom.seed(1)\rnew_random_value = random.random()\rprint(new_random_value)\rrandom.seed(2)\rnew_random_value = random.random()\rprint(new_random_value)\r", "nl": "Write a Python program to set a random seed and get a random number between 0 and 1. Use random.random. "}
{"code": "import numpy as np\ra = np.random.randint(0, 10, (3, 4, 8))\rprint(\"Original array and shape:\")\rprint(a)\rprint(a.shape)\rprint(\"--------------------------------\")\rtidx = np.random.randint(0, 3, 4)\rprint(\"tidex: \",tidx)\rprint(\"Result:\")\rprint(a[tidx, np.arange(len(tidx)),:])\r", "nl": "Create an array (a) of shape 3, 4, 8 (K=3, J=4, I=8). tidx is an array of the same length as a.shape[1], i.e. contains J = 4 elements where each index denotes which element of K should be chosen."}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001],\r'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6],\r'sale_feb':[250.5, 170.65, 15.26, 110.5, 598.5, 1400.6, 2760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_mar':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_apr':[150.5, 270.65, 95.26, 210.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_may':[130.5, 270.65, 65.26, 310.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_jun':[150.5, 270.65, 45.26, 110.5, 948.5, 3400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_jul':[950.5, 270.65, 65.26, 210.5, 948.5, 2400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_aug':[150.5, 70.65,  65.26, 110.5, 948.5, 400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_sep':[150.5, 270.65, 65.26, 110.5, 948.5, 200.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_oct':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'sale_nov':[150.5, 270.65, 95.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \r'sale_dec':[150.5, 70.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6]\r})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\Result after group on salesman_id and apply different aggregate functions:\")\rdf = df.groupby('salesman_id').agg(lambda x : x.sum() if x.name in ['sale_jan','sale_feb','sale_mar'] else x.mean())\rprint(df)\r", "nl": "Write a Pandas program to split a given dataset, group by one column and apply an aggregate function to few columns and another aggregate function to the rest of the columns of the dataframe. "}
{"code": "import numpy as np\rx = np.arange(1, 100)\r# find  multiple of 3 or 5\rn= x[(x % 3 == 0) | (x % 5 == 0)]\rprint(n[:1000])\r# print sum the numbers\rprint(n.sum())\r", "nl": "Write a NumPy program (using NumPy) to sum of all the multiples of 3 or 5 below 100. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')    \rdf[df[\"Labor_Hours\"] > 20000].head()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where \"Labor Hours\" > 20000. "}
{"code": "def cyclically_iteration(lst,spec_index):\r    result = []\r    length = len(lst)\r    for i in range(length):\r        element_index = spec_index % length\r        result.append(lst[element_index])\r        spec_index += 1\r    return result\r\rchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\rprint(\"Original list:\")\rprint(chars)\rspec_index = 3\rprint(\"\\nIterate the said  list cyclically on specific index position\",spec_index,\":\")\rprint(cyclically_iteration(chars,spec_index))\rspec_index = 5\rprint(\"\\nIterate the said  list cyclically on specific index position\",spec_index,\":\")\rprint(cyclically_iteration(chars,spec_index))\r", "nl": "Write a Python program to iterate a given list cyclically on specific index position. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df) \rprint(\"\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):\")\rdf['purch_amt'].interpolate(method='linear', direction = 'forward', inplace=True) \rprint(df)\r", "nl": "Write a Pandas program to interpolate the missing values using the Linear Interpolation method in a given DataFrame. "}
{"code": "import random\rdef random_line(fname):\r    lines = open(fname).read().splitlines()\r    return random.choice(lines)\rprint(random_line('test.txt'))\r", "nl": "Write a Python program to read a random line from a file. "}
{"code": "area = 1256.66\rvolume = 1254.725\rdecimals = 2\rprint(\"The area of the rectangle is {0:.{1}f}cm\\u00b2\".format(area, decimals))\rdecimals = 3\rprint(\"The volume of the cylinder is {0:.{1}f}cm\\u00b3\".format(volume, decimals))\r", "nl": "Write a Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder. "}
{"code": "import numpy as np\ra = np.array([1, 2])\rb = np.array([4, 5])\rprint(\"Array a: \",a)\rprint(\"Array b: \",b)\rprint(\"a > b\")\rprint(np.greater(a, b))\rprint(\"a >= b\")\rprint(np.greater_equal(a, b))\rprint(\"a < b\")\rprint(np.less(a, b))\rprint(\"a <= b\")\rprint(np.less_equal(a, b))\r", "nl": "Write a NumPy program compare two given arrays. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rstudent_data = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\r\rprint(\"Original DataFrame:\")\rprint(student_data)\rprint('\\nSplit the said data on school_code wise:')\rgrouped = student_data.groupby(['school_code'])\rprint(\"Call school code 's001':\")\rprint(grouped.get_group('s001'))\rprint(\"\\nCall school code 's004':\")\rprint(grouped.get_group('s004'))\r", "nl": "Write a Pandas program to split the following given dataframe into groups based on school code and call a specific group with the name of the group. "}
{"code": "from itertools import chain\rdef sum_of_digits(nums):\r    return sum(int(y) for y in (chain(*[str(x) for x in nums])))\r\rnums = [10,2,56]\rprint(\"Original tuple: \") \rprint(nums)\rprint(\"Sum of digits of each number of the said list of integers:\")\rprint(sum_of_digits(nums))\r\rnums = [10,20,4,5,70]\rprint(\"\\nOriginal tuple: \") \rprint(nums)\rprint(\"Sum of digits of each number of the said list of integers:\")\rprint(sum_of_digits(nums))\r", "nl": "Write a Python program to compute the sum of digits of each number of a given list of positive integers. "}
{"code": " f = open('abc.txt','r')\rprint(f.closed)\rf.close()\rprint(f.closed)\r", "nl": "Write a Python program to assess if a file is closed or not. "}
{"code": "import random\rdef randomly_interleave(nums1, nums2):\r    result =  [x.pop(0) for x in random.sample([nums1]*len(nums1) + [nums2]*len(nums2), len(nums1)+len(nums2))]\r    return result\rnums1 = [1,2,7,8,3,7]\rnums2 = [4,3,8,9,4,3,8,9]\rprint(\"Original lists:\") \rprint(nums1)\rprint(nums2)\rprint(\"\\nInterleave two given list into another list randomly:\")\rprint(randomly_interleave(nums1, nums2))\r", "nl": "Write a Python program to interleave two given list into another list randomly. "}
{"code": "x = 30\ry = 20\rprint(\"\\n%d+%d=%d\" % (x, y, x+y))\rprint()\r", "nl": "Given variables x=30 and y=20, write a Python program to print \"30+20=50\". "}
{"code": "from collections import Counter \rfrom itertools import chain \rdef max_aggregate(list_str, N):\r    temp = (set(sub) for sub in list_str) \r    counts = Counter(chain.from_iterable(temp)) \r    gt_N =  [chr for chr, count in counts.items() if count > N]\r    lt_N =  [chr for chr, count in counts.items() if count < N]\r    return gt_N, lt_N\r     \rlist_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd'] \rprint(\"Original list:\")\rprint(list_str)\rN = 3\rresult = max_aggregate(list_str, N)\rprint(\"\\nCharacters of the said list of strings which occur more than:\",N)\rprint(result[0])\rprint(\"\\nCharacters of the said list of strings which occur less than:\",N)\rprint(result[1])\r", "nl": "Write a Python program to find the characters in a list of strings which occur more than and less than a given number. "}
{"code": "import numpy as np \r\rnums = np.array(['1.12', '2.23', '3.71', '4.23', '5.11'], dtype=np.str)\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nAdd two zeros to the beginning of each element of the said array:\")\rprint(np.char.add('00', nums))\rprint(\"\\nAlternate method:\")\rprint(np.char.rjust(nums, 6, fillchar='0'))\r", "nl": "Write a NumPy program to add two zeros to the beginning of each element of a given array of string values. "}
{"code": "import numpy as np\rnums = np.array([10, 20, 20, 20, 20, 0, 20, 30, 30, 30, 0, 0, 20, 20, 0])\rprint(\"Original array:\")\rprint(nums)\rprint(np.count_nonzero(nums == 10))\rprint(np.count_nonzero(nums == 20))\rprint(np.count_nonzero(nums == 30))\rprint(np.count_nonzero(nums == 0))\r", "nl": "Write a NumPy program to count the occurrence of a specified item in a given NumPy array. "}
{"code": "def test_dsc(n):\r    return int(''.join(sorted(str(n), reverse = True)))\r\rdef test_asc(n):\r    return int(''.join(sorted(list(str(n))))[::1])\r\rn = 134543\rprint(\"Original Number: \",n);\rprint(\"Descending order of the said number: \", test_dsc(n));\rprint(\"Ascending order of the said number: \", test_asc(n));\rn = 43750973\rprint(\"\\nOriginal Number: \",n);\rprint(\"Descending order of the said number: \", test_dsc(n));\rprint(\"Ascending order of the said number: \", test_asc(n));\r", "nl": "Write a Python program to sort a given positive number in descending/ascending order. "}
{"code": "import string\ralphabet = set(string.ascii_lowercase)\rinput_string = 'The quick brown fox jumps over the lazy dog'\rprint(set(input_string.lower()) >= alphabet)\rinput_string = 'The quick brown fox jumps over the lazy cat'\rprint(set(input_string.lower()) >= alphabet)\r", "nl": "Write a Python program to check whether a string contains all letters of the alphabet. "}
{"code": "class Node(object):\r    # Singly linked node\r    def __init__(self, value=None, next=None, prev=None):\r        self.value = value\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, value):\r        # Append an item \r        new_item = Node(value, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r        self.count += 1\r    \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.value\r            current = current.next\r            yield item_val\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)   \r        \r    def search_item(self, val):\r         for node in self.iter():\r            if val == node:\r                return True\r         return False\r     \r    def delete(self, value):\r        # Delete a specific item\r        current = self.head\r        node_deleted = False\r        if current is None:\r            node_deleted = False\r\r        elif current.value == value:\r            self.head = current.next\r            self.head.prev = None\r            node_deleted = True\r\r        elif self.tail.value == value:\r            self.tail = self.tail.prev\r            self.tail.next = None\r            node_deleted = True\r\r        else:\r            while current:\r                if current.value == value:\r                    current.prev.next = current.next\r                    current.next.prev = current.prev\r                    node_deleted = True\r                current = current.next\r\r        if node_deleted:\r            self.count -= 1\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\ritems.append_item('SQL')\r\rprint(\"Original list:\")\ritems.print_foward()\r\ritems.delete(\"Java\")\ritems.delete(\"Python\")\rprint(\"\\nList after deleting two items:\")\ritems.print_foward()\r", "nl": "Write a Python program to delete a specific item from a given doubly linked list. "}
{"code": "import numpy as np\rmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\rprint(\"List to array: \")\rprint(np.asarray(my_list))\rmy_tuple = ([8, 4, 6], [1, 2, 3])\rprint(\"Tuple to array: \")\rprint(np.asarray(my_tuple))\r", "nl": "Write a NumPy program to convert a list and tuple into arrays. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport seaborn as sns\rdf = pd.read_csv(r'ufo.csv')\rdf['duration_sec'] = (df['length_of_encounter_seconds'].astype(float))/60\rs = df[\"duration_sec\"].quantile(0.95)\rtemp = df['duration_sec']\rtemp = temp.sort_values()\rtemp = temp[temp < s]\rplt.figure(figsize=(10, 8))\rsns.distplot(temp)\rplt.xlabel('Duration(min)', fontsize=20)\rplt.ylabel(\"Frequency\", fontsize=15)\rplt.xticks(fontsize=12)\rplt.title(\"-Distribution of UFO obervation time-\", fontsize=20)\rplt.show()\r", "nl": "Write a Pandas program to create a plot of distribution of UFO (unidentified flying object) observation time. "}
{"code": "import numpy as np\rarray1 = np.array([0, 10, 20, 40, 60, 80])\rprint(\"Array1: \",array1)\rarray2 = [10, 30, 40, 50, 70]\rprint(\"Array2: \",array2)\rprint(\"Unique sorted array of values that are in either of the two input arrays:\")\rprint(np.union1d(array1, array2))\r", "nl": "Write a NumPy program to find the union of two arrays. Union will return the unique, sorted array of values that are in either of the two input arrays. "}
{"code": "my_dict = {'data1':100,'data2':-54,'data3':247}\rprint(sum(my_dict.values()))\r", "nl": "Write a Python program to sum all the items in a dictionary. "}
{"code": "from array import array\r\rdef plusMinus(nums):\r    n = len(nums)\r    n1 = n2 = n3 = 0\r    \r    for x in nums:\r        if x > 0:\r            n1 += 1\r        elif x < 0:\r            n2 += 1\r        else:\r            n3 += 1\r            \r    return round(n1/n,2), round(n2/n,2), round(n3/n,2)\r\rnums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\rprint(\"Original array:\",nums)\rnums_arr = list(map(int, nums))\rresult = plusMinus(nums_arr)\rprint(\"Ratio of positive numbers, negative numbers and zeroes:\")\rprint(result)\rnums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\rprint(\"\\nOriginal array:\",nums)\rnums_arr = list(map(int, nums))\rresult = plusMinus(nums_arr)\rprint(\"Ratio of positive numbers, negative numbers and zeroes:\")\rprint(result)\r", "nl": "Write a Python program to find the ration of positive numbers, negative numbers and zeroes in an array of integers. "}
{"code": "def selectionSort(nlist):\r   for fillslot in range(len(nlist)-1,0,-1):\r       maxpos=0\r       for location in range(1,fillslot+1):\r           if nlist[location]>nlist[maxpos]:\r               maxpos = location\r\r       temp = nlist[fillslot]\r       nlist[fillslot] = nlist[maxpos]\r       nlist[maxpos] = temp\r\rnlist = [14,46,43,27,57,41,45,21,70]\rselectionSort(nlist)\rprint(nlist)\r", "nl": "Write a Python program to sort a list of elements using the selection sort algorithm. "}
{"code": "def interleave_multiple_lists(list1,list2,list3):\r    result = [el for pair in zip(list1, list2, list3) for el in pair]\r    return result\r     \rlist1 = [1,2,3,4,5,6,7]\rlist2 = [10,20,30,40,50,60,70]\rlist3 = [100,200,300,400,500,600,700]\rprint(\"Original list:\")\rprint(\"list1:\",list1)\rprint(\"list2:\",list2)\rprint(\"list3:\",list3)\rprint(\"\\nInterleave multiple lists:\")\rprint(interleave_multiple_lists(list1,list2,list3))\r", "nl": "Write a Python program to interleave multiple lists of the same length. "}
{"code": "from collections import defaultdict\rdef test(*dicts):\r  result = defaultdict(list)\r  for el in dicts:\r    for key in el:\r      result[key].append(el[key])\r  return dict(result)\r \rd1 = {'w': 50, 'x': 100, 'y': 'Green', 'z': 400}\rd2 = {'x': 300, 'y': 'Red', 'z': 600}\r\rprint(\"Original dictionaries:\")\rprint(d1)\rprint(d2)\rprint(\"\\nCombined dictionaries, creating a list of values for each key:\")\rprint(test(d1, d2))\r", "nl": "Write a Python program to combines two or more dictionaries, creating a list of values for each key. "}
{"code": "import pandas as pd\rcols = pd.MultiIndex.from_tuples([(\"a\", \"x\"), (\"a\", \"y\"), (\"a\", \"z\")])\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels: \")\rdf = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)\rprint(df)\r#Levels are 0-indexed beginning from the top.\rprint(\"\\nRemove the top level index:\")\rdf.columns = df.columns.droplevel(0)\rprint(df)\rdf = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)\rprint(\"\\nOriginal dataframe:\")\rprint(df)\rprint(\"\\nRemove the index next to top level:\")\rdf.columns = df.columns.droplevel(1)\rprint(df)\r", "nl": "Write a Pandas program to drop a index level from a multi-level column index of a dataframe. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nSighting days of the unidentified flying object (ufo) between 1949-10-10 and 1960-10-10:\")\rselected_period = df[(df['Date_time'] >= '1950-01-01 00:00:00') & (df['Date_time'] <= '1960-12-31 23:59:59')]\rprint(selected_period)\r", "nl": "Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) between 1950-10-10 and 1960-10-10. "}
{"code": "import itertools as it\rdef drop_while(nums):\r    return it.dropwhile(lambda x : x < 0, nums)\rnums = [-1,-2,-3,4,-10,2,0,5,12]\rprint(\"Original list: \",nums)\rresult = drop_while(nums)\rprint(\"Drops elements from the iterable when a positive number arises \\n\",list(result))\r#Alternate solution\rdef negative_num(x):\r    return x < 0\rdef drop_while(nums):\r    return it.dropwhile(negative_num, nums)\rnums = [-1,-2,-3,4,-10,2,0,5,12]\rprint(\"Original list: \",nums)\rresult = drop_while(nums)\rprint(\"Drops elements from the iterable when a positive number arises \\n\",list(result))\r", "nl": "Write a Python program to make an iterator that drops elements from the iterable as soon as an element is a positive number. "}
{"code": "list1 = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nAfter deleting the empty lists from the said lists of lists\")\rlist2 = [x for x in list1 if x]\rprint(list2)\r", "nl": "Write a Python program to remove empty lists from a given list of lists. "}
{"code": "def cocktail_shaker_sort(nums):\r    for i in range(len(nums)-1, 0, -1):\r        is_swapped = False\r        \r        for j in range(i, 0, -1):\r            if nums[j] < nums[j-1]:\r                nums[j], nums[j-1] = nums[j-1], nums[j]\r                is_swapped = True\r\r        for j in range(i):\r            if nums[j] > nums[j+1]:\r                nums[j], nums[j+1] = nums[j+1], nums[j]\r                is_swapped = True\r        \r        if not is_swapped:\r            return nums\r \rnum1 = input('Input comma separated numbers:\\n').strip()\rnums = [int(item) for item in num1.split(',')]\rprint(cocktail_shaker_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Cocktail shaker sort. "}
{"code": "def check_string(s):\r    messg = []\r    if not any(x.isupper() for x in s):\r        messg.append('String must have 1 upper case character.')\r    if not any(x.islower() for x in s):\r        messg.append('String must have 1 lower case character.')\r    if not any(x.isdigit() for x in s):\r        messg.append('String must have 1 number.')\r    if len(s) < 8:\r        messg.append('String length should be atleast 8.')    \r    if not messg:\r        messg.append('Valid string.')\r    return messg\r    \rs = input(\"Input the string: \")\rprint(check_string(s))\r", "nl": "Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length. "}
{"code": "import numpy as np\rarra_data = np.arange(0,36).reshape((6, 6))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: First, third and fifth elements of the third and fifth rows\")\rprint(arra_data[2::2, ::2]) \r", "nl": "Write a NumPy program to extract first, third and fifth elements of the third and fifth rows from a given (6x6) array. "}
{"code": "import types\rdef a(x):\r    yield x\r        \rdef b(x):\r    return x\r\rdef add(x, y):\r    return x + y\r\rprint(isinstance(a(456), types.GeneratorType))\rprint(isinstance(b(823), types.GeneratorType))\rprint(isinstance(add(8,2), types.GeneratorType))\r", "nl": "Write a Python program to check if a given function is a generator or not. Use types.GeneratorType()"}
{"code": "import difflib\rdef string_similarity(str1, str2):\r    result =  difflib.SequenceMatcher(a=str1.lower(), b=str2.lower())\r    return result.ratio()\rstr1 = 'Python Exercises'\rstr2 = 'Python Exercises'\rprint(\"Original string:\")\rprint(str1)\rprint(str2)\rprint(\"Similarity between two said strings:\")\rprint(string_similarity(str1,str2))\rstr1 = 'Python Exercises'\rstr2 = 'Python Exercise'\rprint(\"\\nOriginal string:\")\rprint(str1)\rprint(str2)\rprint(\"Similarity between two said strings:\")\rprint(string_similarity(str1,str2))\rstr1 = 'Python Exercises'\rstr2 = 'Python Ex.'\rprint(\"\\nOriginal string:\")\rprint(str1)\rprint(str2)\rprint(\"Similarity between two said strings:\")\rprint(string_similarity(str1,str2))\rstr1 = 'Python Exercises'\rstr2 = 'Python'\rprint(\"\\nOriginal string:\")\rprint(str1)\rprint(str2)\rprint(\"Similarity between two said strings:\")\rprint(string_similarity(str1,str2))\rstr1 = 'Python Exercises'\rstr1 = 'Java Exercises'\rprint(\"\\nOriginal string:\")\rprint(str1)\rprint(str2)\rprint(\"Similarity between two said strings:\")\rprint(string_similarity(str1,str2))\r", "nl": "Write a Python program to find the string similarity between two given strings. "}
{"code": "L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),\r (7, 8), (9, 10)]\rprint(\"Original List: \", L)\rprint(\"Sorted Unique Data:\",sorted(set().union(*L)))\r", "nl": "Write a Python program to convert a pair of values into a sorted unique array. "}
{"code": "import numpy as np\rx = np.array([[1,2,3], [4,5,6]])\rprint(\"Original array: \")\rprint(x)\rprint(\"Cumulative sum of the elements along a given axis:\")\rr = np.cumsum(x)\rprint(r)\rprint(\"\\nSum over rows for each of the 3 columns:\")\rr = np.cumsum(x,axis=0) \rprint(r)\rprint(\"\\nSum over columns for each of the 2 rows:\")\rr = np.cumsum(x,axis=1) \rprint(r)\r\r", "nl": "Write a NumPy program to calculate cumulative sum of the elements along a given axis, sum over rows for each of the 3 columns and sum over columns for each of the 2 rows of a given 3x3 array. "}
{"code": "student = {\r  'name': 'Alex',\r  'class': 'V',\r  'roll_id': '2'\r}\rprint(student.keys() >= {'class', 'name'})\rprint(student.keys() >= {'name', 'Alex'})\rprint(student.keys() >= {'roll_id', 'name'})\r", "nl": "Write a Python program to check multiple keys exists in a dictionary. "}
{"code": "from collections import Counter  \rdef generateStrings(input): \r     str_char_ctr = Counter(input) \r     part1 = [ key for (key,count) in str_char_ctr.items() if count==1] \r     part2 = [ key for (key,count) in str_char_ctr.items() if count>1] \r     part1.sort() \r     part2.sort()\r     return part1,part2\rinput = \"aabbcceffgh\"\rs1, s2 = generateStrings(input)\rprint(''.join(s1))   \rprint(''.join(s2))\r", "nl": "Write a Python program to create two strings from a given string. Create the first string using those character which occurs only once and create the second string which consists of multi-time occurring characters in the said string. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['ABCD','EFGF', 'hhhh', 'abcd', 'EAWQaaa'],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\r\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nIs lower (company_code)?\")\rdf['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))\rprint(df)\rprint(\"\\nIs Upper (company_code)?\")\rdf['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to check whether only lower case or upper case is present in a given column of a DataFrame. "}
{"code": "def max_min_list_tuples(nums):\r    zip(*nums)\r    result1 = map(max, zip(*nums))\r    result2 = map(min, zip(*nums))\r    return list(result1), list(result2)\r\rnums = [(2,3),(2,4),(0,6),(7,1)]\rprint(\"Original list:\")\rprint(nums)\r\rresult = max_min_list_tuples(nums)\rprint(\"\\nMaximum value  for each tuple position in the said list of tuples:\")\rprint(result[0])\rprint(\"\\nMinimum value  for each tuple position in the said list of tuples:\")\rprint(result[1])\r", "nl": "Write a Python program to find the minimum, maximum value for each tuple position in a given list of tuples. "}
{"code": "def strings_to_listOflists(colors):\r    result = [list(word) for word in colors]\r    return result\r\rcolors = [\"Red\", \"Maroon\", \"Yellow\", \"Olive\"]\rprint('Original list of strings:')\rprint(colors)\rprint(\"\\nConvert the said list of strings into list of lists:\")\rprint(strings_to_listOflists(colors))\r", "nl": "Write a Python program to convert a given list of strings into list of lists. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index =  [1, 2, 3, 4, 5, 6])\rprint(\"Original DataFrame with single index:\")\rprint(df)\rprint(\"\\nDataFrame without index:\")\rprint(df.to_string(index=False))\r", "nl": "Write a Pandas program to print a DataFrame without index. "}
{"code": "import platform as pl\r\ros_profile = [\r        'architecture',\r        'linux_distribution',\r        'mac_ver',\r        'machine',\r        'node',\r        'platform',\r        'processor',\r        'python_build',\r        'python_compiler',\r        'python_version',\r        'release',\r        'system',\r        'uname',\r        'version',\r    ]\rfor key in os_profile:\r  if hasattr(pl, key):\r    print(key +  \": \" + str(getattr(pl, key)()))\r", "nl": "Write a Python program to display some information about the OS where the script is running. "}
{"code": "import numpy as np\rx = np.ones((3,3))\rprint(\"Checkerboard pattern:\")\rx = np.zeros((8,8),dtype=int)\rx[1::2,::2] = 1\rx[::2,1::2] = 1\rprint(x)\r", "nl": "Write a NumPy program to create a 8x8 matrix and fill it with a checkerboard pattern. "}
{"code": "def filter_data(students):\r    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}\r    return result    \r \rstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\rprint(\"Original Dictionary:\")\rprint(students)\rprint(\"\\nHeight > 6ft and Weight> 70kg:\")\rprint(filter_data(students))\r", "nl": "Write a Python program to filter the height and width of students, which are stored in a dictionary. "}
{"code": "import numpy as np\rx = np.random.uniform(1, 12, 5)\rv = 4\rn = x.flat[np.abs(x - v).argmin()]\rprint(n)\r", "nl": "Write a NumPy program to find the nearest value from a given value in an array. "}
{"code": "import numpy as np   \rprint(\"Create an array of shape (15,10):\") \rprint(\"Command-1\")\rprint(np.arange(1, 151).reshape(15, 10)) \rprint(\"\\nCommand-2\")\rprint(np.arange(1, 151).reshape(-1, 10)) \rprint(\"\\nCommand-3\")\rprint(np.arange(1, 151).reshape(15, -1))\r", "nl": "Write a NumPy program to create a two-dimensional array of specified format. "}
{"code": "import numpy as np\rarray_nums = np.arange(20).reshape(4,5)\rprint(\"Original array:\")\rprint(array_nums)\rprint(\"\\nAfter reversing:\")\rarray_nums[:] = array_nums[3::-1]\rprint(array_nums)\r", "nl": "Write a NumPy program to create an array of 4,5 shape and to reverse the rows of the said array. After reversing 1st row will be 4th and 4th will be 1st, 2nd row will be 3rd row and 3rd row will be 2nd row. "}
{"code": "import random\rimport os\rprint(\"Select a random element from a list:\")\relements = [1, 2, 3, 4, 5]\rprint(random.choice(elements))\rprint(random.choice(elements))\rprint(random.choice(elements))\rprint(\"\\nSelect a random element from a set:\")\relements = set([1, 2, 3, 4, 5])\r# convert to tuple because sets are invalid inputs\rprint(random.choice(tuple(elements)))\rprint(random.choice(tuple(elements)))\rprint(random.choice(tuple(elements)))\rprint(\"\\nSelect a random value from a dictionary:\")\rd = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\rkey = random.choice(list(d))\rprint(d[key])\rkey = random.choice(list(d))\rprint(d[key])\rkey = random.choice(list(d))\rprint(d[key]) \rprint(\"\\nSelect a random file from a directory.:\")\rprint(random.choice(os.listdir(\"/\")))\r", "nl": "Write a Python program to select a random element from a list, set, dictionary (value) and a file from a directory. Use random.choice()"}
{"code": "import numpy as np\rarra=np.ones((1,8,8))\rprint(\"Original array:\")\rprint(arra)\rresult = np.triu(arra, k=1)\rprint(\"\\nResult:\")\rprint(result)\r", "nl": "Write a NumPy program to set zero to lower triangles along the last two axes of a three-dimensional of a given array. "}
{"code": "from itertools import product\rdef test(dictt):\r    result = [dict(zip(dictt, sub)) for sub in product(*dictt.values())]\r    return result\r\rstudents = {1: ['Jean Castro'], 2: ['Lula Powell'], 3: ['Brian Howell'], 4: ['Lynne Foster'], 5: ['Zachary Simon']}\r\rprint(\"\\nOriginal dictionary:\")\rprint(students)\rprint(\"\\nA key-value list pairings of the said dictionary:\")\rprint(test(students))\r", "nl": "Write a Python program to create a key-value list pairings in a given dictionary. "}
{"code": "import random\rimport string\rprint(\"Generate a random alphabetical character:\")\rprint(random.choice(string.ascii_letters))\rprint(\"\\nGenerate a random alphabetical string:\")\rmax_length = 255\rstr1 = \"\"\rfor i in range(random.randint(1, max_length)):\r    str1 += random.choice(string.ascii_letters)\rprint(str1)\rprint(\"\\nGenerate a random alphabetical string of a fixed length:\")\rstr1 = \"\"\rfor i in range(10):\r    str1 += random.choice(string.ascii_letters)\rprint(str1)\r", "nl": "Write a Python program to generate a random alphabetical character, alphabetical string and alphabetical string of a fixed length. Use random.choice()"}
{"code": "import numpy as np\rx = np.array([[1,2,3], [4,5,6]])\rprint(\"Original array: \")\rprint(x)\rprint(\"Cumulative product  of the elements along a given axis:\")\rr = np.cumprod(x)\rprint(r)\rprint(\"\\nProduct over rows for each of the 3 columns:\")\rr = np.cumprod(x,axis=0) \rprint(r)\rprint(\"\\nProduct  over columns for each of the 2 rows:\")\rr = np.cumprod(x,axis=1) \rprint(r)\r", "nl": "Write a NumPy program to calculate cumulative product of the elements along a given axis, sum over rows for each of the 3 columns and product over columns for each of the 2 rows of a given 3x3 array. "}
{"code": "import arrow\rprint(\"\\nSearch a date from a string:\")\rd1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')\rprint(d1)\r", "nl": "Write a Python program to search a date from a given string using arrow module. "}
{"code": "import pandas as pd\rs1 = pd.Series([0, 1, 2, 3], name='col1')\rs2 = pd.Series([0, 1, 2, 3])\rs3 = pd.Series([0, 1, 4, 5], name='col3')\rdf = pd.concat([s1, s2, s3], axis=1, keys=['column1', 'column2', 'column3'])\rprint(df)\r", "nl": "Write a Pandas program to create a new DataFrame based on existing series, using specified argument and override the existing columns names. "}
{"code": "def permute(nums):\r  result_perms = [[]]\r  for n in nums:\r    new_perms = []\r    for perm in result_perms:\r      for i in range(len(perm)+1):\r        new_perms.append(perm[:i] + [n] + perm[i:])\r        result_perms = new_perms\r  return result_perms\r\rmy_nums = [1,2,3]\rprint(\"Original Cofllection: \",my_nums)\rprint(\"Collection of distinct numbers:\\n\",permute(my_nums))\r", "nl": "Write a Python program to create all possible permutations from a given collection of distinct numbers."}
{"code": "def max_min_list_tuples(class_students):\r    return_max = max(class_students,key=lambda item:item[1])[1]\r    return_min = min(class_students,key=lambda item:item[1])[1]\r    return return_max, return_min\r    \rclass_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]\rprint(\"Original list with tuples:\")\rprint(class_students)\rprint(\"\\nMaximum and minimum values of the said list of tuples:\")\rprint(max_min_list_tuples(class_students))\r", "nl": "Write a Python program to find the maximum and minimum values in a given list of tuples using lambda function. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 7, 9])\rprint(\"Original array: \"+str(array_num))\rarray_num.extend(array_num)\rprint(\"Extended array: \"+str(array_num))\r", "nl": "Write a Python program to append items from inerrable to the end of the array. "}
{"code": "def find_longest_word(words_list):\r    word_len = []\r    for n in words_list:\r        word_len.append((len(n), n))\r    word_len.sort()\r    return word_len[-1][0], word_len[-1][1]\rresult = find_longest_word([\"PHP\", \"Exercises\", \"Backend\"])\rprint(\"\\nLongest word: \",result[1])\rprint(\"Length of the longest word: \",result[0])\r", "nl": "Write a Python function that takes a list of words and return the longest word and the length of the longest one. "}
{"code": "import decimal\rprint(\"Configure the rounding to round to the nearest, with ties going towards 0:\")\rdecimal.getcontext().prec = 1\rdecimal.getcontext().rounding = decimal.ROUND_HALF_DOWN\rprint(decimal.Decimal(10) / decimal.Decimal(4))\rprint(\"\\nConfigure the rounding to round to the nearest, with ties going away from 0:\")\rdecimal.getcontext().prec = 1\rdecimal.getcontext().rounding = decimal.ROUND_HALF_UP\rprint(decimal.Decimal(10) / decimal.Decimal(4))\r", "nl": "Write a Python program to configure the rounding to round to the nearest - with ties going towards 0, with ties going away from 0. Use decimal.ROUND_HALF_DOWN, decimal.ROUND_HALF_UP"}
{"code": "import json\rpython_obj = '{\"a\":  1, \"a\":  2, \"a\":  3, \"a\": 4, \"b\": 1, \"b\": 2}'\rprint(\"Original Python object:\")\rprint(python_obj)\rjson_obj = json.loads(python_obj)\rprint(\"\\nUnique Key in a JSON object:\")\rprint(json_obj) \r", "nl": "Write a Python program to access only unique key value of a Python object. "}
{"code": "from numpy import genfromtxt\rcsv_data = genfromtxt('fdata.csv', dtype=['S10','float32','float32','float32','float32'], delimiter=\",\")\rprint(csv_data)\r", "nl": "Write a NumPy program to read a CSV data file and store records in an array. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rdef highlight_cols(s):\r    color = 'grey'\r    return 'background-color: %s' % color\rprint(\"\\nHighlight specific columns:\")\rdf.style.applymap(highlight_cols, subset=pd.IndexSlice[:, ['B', 'C']])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns. "}
{"code": "def string_test(s):\r    d={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\r    for c in s:\r        if c.isupper():\r           d[\"UPPER_CASE\"]+=1\r        elif c.islower():\r           d[\"LOWER_CASE\"]+=1\r        else:\r           pass\r    print (\"Original String : \", s)\r    print (\"No. of Upper case characters : \", d[\"UPPER_CASE\"])\r    print (\"No. of Lower case Characters : \", d[\"LOWER_CASE\"])\r\rstring_test('The quick Brown Fox')\r", "nl": "Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters. "}
{"code": "bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\rindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\rprint(\"Base numbers abd index: \")\rprint(bases_num)\rprint(index)\rresult = list(map(pow, bases_num, index))\rprint(\"\\nPower of said number in bases raised to the corresponding number in the index:\")\rprint(result)\r", "nl": "Write a Python program to create a list containing the power of said number in bases raised to the corresponding number in the index using Python map. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_year(text):\r    #line=re.findall(r\"\\b(18[0][0]|2[0-2][00])\\b\",text)\r    result = re.findall(r\"\\b(18[0-9]{2}|19[0-8][0-9]|199[0-9]|2[01][0-9]{2}|2200)\\b\",text)\r    return result\rdf['year_range']=df['year'].apply(lambda x: find_year(x))\rprint(\"\\Extracting year between 1800 to 2200:\")\rprint(df)\r", "nl": "Write a Pandas program to extract year between 1800 to 2200 from the specified column of a given DataFrame. "}
{"code": "import pandas as pd\rnewday = pd.Timestamp('2020-02-07')\rprint(\"First date:\")\rprint(newday)\rprint(\"\\nThe day name of the said date:\")\rprint(newday.day_name())\rprint(\"\\nAdd 2 days with the said date:\")\rnewday1 = newday + pd.Timedelta('2 day')\rprint(newday1.day_name())\rprint(\"\\nNext business day:\")\rnbday = newday + pd.offsets.BDay()\rprint(nbday.day_name())\r", "nl": "Write a Pandas program to extract the day name from a specified date. Add 2 days and 1 business day with the specified date. "}
{"code": "import csv\rf = open(\"employees.csv\", newline='')\rcsv_reader = csv.reader(f)\rprint(next(csv_reader))\rprint(next(csv_reader))\rprint(next(csv_reader))\r", "nl": "Write a Python program to read the current line from a given CSV file. Use csv.reader"}
{"code": "size = int(input(\"Input the size of the matrix: \"))\rmatrix = [[0] * size for row in range(0, size)]\rfor x in range(0, size):\r\r    line = list(map(int, input().split()))\r\r    for y in range(0, size):\r        matrix[x][y] = line[y]\r\rmatrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))\rprint(\"Sum of matrix primary diagonal:\")\rprint(matrix_sum_diagonal)\r", "nl": "Write a Python program to read a square matrix from console and print the sum of matrix primary diagonal. Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx',sheet_name=1)\rprint(df)\r", "nl": "Write a Pandas program to import sheet2 data from a given excel data (employee.xlsx ) into a Pandas dataframe. "}
{"code": "import numpy as np\rimport os\ra = np.array([1, 2, 3, 4, 5, 6])\rprint(\"Original array:\")\rprint(a)\ra_bytes = a.tostring()\ra2 = np.fromstring(a_bytes, dtype=a.dtype)\rprint(\"After loading, content of the text file:\")\rprint(a2)\rprint(np.array_equal(a, a2))\r", "nl": "Write a NumPy program to convert a given array into bytes, and load it as array. "}
{"code": "import pandas as pd\rmtp = pd.Period('2021-11','M')\rprint(\"Monthly time perid: \",mtp)\rprint(\"\\nList of names in the current local scope:\")\rprint(dir(mtp)) \r", "nl": "Write a Pandas program to create a monthly time period and display the list of names in the current local scope. "}
{"code": "import numpy as np\ra = np.array([[4, 6],[2, 1]])\rprint(\"Original array: \")\rprint(a)\rprint(\"Sort along the first axis: \")\rx = np.sort(a, axis=0)\rprint(x)\rprint(\"Sort along the last axis: \")\ry = np.sort(x, axis=1)\rprint(y)\r", "nl": "Write a NumPy program to sort an along the first, last axis of an array. "}
{"code": "import numpy as np\rx = np.ones((2,3,4,5))\rprint(np.rollaxis(x, 3, 1).shape)\r", "nl": "Write a NumPy program to move the specified axis backwards, until it lies in a given position. "}
{"code": "import numpy as np\rx1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x1)\rprint(\"Test if each element of the said array starts with 'P':\")\rr = np.char.startswith(x1, \"P\")\rprint(r)\r", "nl": "Write a NumPy program to check whether each element of a given array starts with \"P\". "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rprint(\"Create a MultiIndex:\")\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(sales_tuples)\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels: \")\rdf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\rprint(df)\r", "nl": "Write a Pandas program to construct a DataFrame using the MultiIndex levels as the column and index. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - table style:\")\r\rdef highlight_greaterthan(x):\r    if x.C > .5:\r        return ['background-color: yellow']*5\r    else:\r        return ['background-color: white']*5 \rdf.style.apply(highlight_greaterthan, axis=1)\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the entire row in Yellow where a specific column value is greater than 0.5. "}
{"code": "import re\rp= input(\"Input your password\")\rx = True\rwhile x:  \r    if (len(p)<6 or len(p)>12):\r        break\r    elif not re.search(\"[a-z]\",p):\r        break\r    elif not re.search(\"[0-9]\",p):\r        break\r    elif not re.search(\"[A-Z]\",p):\r        break\r    elif not re.search(\"[$#@]\",p):\r        break\r    elif re.search(\"\\s\",p):\r        break\r    else:\r        print(\"Valid Password\")\r        x=False\r        break\r\rif x:\r    print(\"Not a Valid Password\")\r", "nl": "a href=\"python-conditional-exercise-15.php\" target=\"_blank\">Click me to see the sample solution</a>"}
{"code": "import numpy as np\rX = np.array([1, 7, 13, 105])\rprint(\"Original array:\")\rprint(X)\rprint(\"Size of the memory occupied by the said array:\")\rprint(\"%d bytes\" % (X.size * X.itemsize))\r", "nl": "Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array. "}
{"code": "a = int(input(\"Input an integer : \"))\rn1 = int( \"%s\" % a )\rn2 = int( \"%s%s\" % (a,a) )\rn3 = int( \"%s%s%s\" % (a,a,a) )\rprint (n1+n2+n3)\r", "nl": "Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn. "}
{"code": "x = [(4, 1), (1, 2), (6, 0)]\rprint(min(x, key=lambda n: (n[1], -n[0])))\r", "nl": "Write a Python program to find a tuple, the smallest second index value from a list of tuples. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - table style:\")\r# Set CSS properties for th elements in dataframe\rth_props = [\r  ('font-size', '12px'),\r  ('text-align', 'center'),\r  ('font-weight', 'bold'),\r  ('color', '#6d6d6d'),\r  ('background-color', '#f7ffff')\r  ]\r\r# Set CSS properties for td elements in dataframe\rtd_props = [\r  ('font-size', '12px')\r  ]\r\r# Set table styles\rstyles = [\r  dict(selector=\"th\", props=th_props),\r  dict(selector=\"td\", props=td_props)\r  ]\r(df.style\r        .set_table_styles(styles))\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style. "}
{"code": "import numpy as np\rimport pandas as pd\rnp_array = np.random.rand(12,3)\rprint(\"Original Numpy array:\")\rprint(np_array)\rprint(\"Type: \",type(np_array))\rdf = pd.DataFrame(np.random.rand(12,3),columns=['A','B','C'])\rprint(\"\\nPanda's DataFrame: \")\rprint(df)\rprint(\"Type: \",type(df))\r", "nl": "Write a NumPy program to convert Pandas dataframe to NumPy array with headers. "}
{"code": "import numpy as np\rx = np.array([1., 2., 3., 4.], np.float32)\rprint(\"Original array: \")\rprint(x)\rprint(\"\\n2^p for all the elements of the said array:\")\rr1 = np.exp2(x)\rr2 = 2 ** x\rassert np.allclose(r1, r2)\rprint(r1)\r", "nl": "Write a NumPy program to calculate 2p for all elements in a given array. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nBackground:black - fontcolor:yelow\")\rdf.style.set_properties(**{'background-color': 'black',\r                           'color': 'yellow'})\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to set dataframe background Color black and font color yellow. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: First and third elements of the first and third rows \")\rprint(arra_data[::2, ::2])\r", "nl": "Write a NumPy program to extract first and third elements of the first and third rows from a given (4x4) array. "}
{"code": "def sum(x, y, z):\r    if x == y or y == z or x==z:\r        sum = 0\r    else:\r        sum = x + y + z\r    return sum\r\rprint(sum(2, 1, 2))\rprint(sum(3, 2, 2))\rprint(sum(2, 2, 2))\rprint(sum(1, 2, 3))\r", "nl": "Write a Python program to sum of three given integers. However, if two values are equal sum will be zero. "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(sales_tuples)\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels: \")\rdf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\rprint(df)\rprint(\"\\nSort on MultiIndex DataFrame:\")\rdf1 = df.sort_index()\rprint(\"\\nSort on Index level=0 of the DataFrame:\")\rdf2 = df.sort_index(level=0)\rprint(df2)\rprint(\"\\nSort on Index level=1 of the DataFrame:\")\rdf2 = df.sort_index(level=1)\rprint(df2)\rprint(\"\\nPass a level name to sort the DataFrame:\")\rdf3 = df.sort_index(level=\"city\")\rprint(df3)  \r", "nl": "Write a Pandas program to sort a MultiIndex of a DataFrame. Also sort on various levels of index. "}
{"code": "import numpy as np\rx = np.array([[0,1],[2,3]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Sum of all elements:\")\rprint(np.sum(x))\rprint(\"Sum of each column:\")\rprint(np.sum(x, axis=0))\rprint(\"Sum of each row:\")\rprint(np.sum(x, axis=1))\r", "nl": "Write a NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array. "}
{"code": "from itertools import groupby \r\rdef extract_elements(nums, n):\r    result = [i for i, j in groupby(nums) if len(list(j)) == n] \r    return result\r\rnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\rn = 2\rprint(\"Original list:\")\rprint(nums1)\rprint(\"Extract 2 number of elements from the said list which follows each other continuously:\") \rprint(extract_elements(nums1, n))\rnums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]\rn = 4\rprint(\"Original lists:\")\rprint(nums2)\rprint(\"Extract 4 number of elements from the said list which follows each other continuously:\") \rprint(extract_elements(nums2, n))\r", "nl": "Write a Python program to extract specified number of elements from a given list, which follows each other continuously. "}
{"code": "def sort_on_specific_item(lst, n):\r    result = sorted((lst), key=lambda x: x[n])\r    return result   \ritems = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]\rprint(\"Original list of tuples:\")\rprint(items)\rprint(\"\\nSort on 1st element of the tuple of the said list:\")\rn = 0\rprint(sort_on_specific_item(items, n))\rprint(\"\\nSort on 2nd element of the tuple of the said list:\")\rn = 1\rprint(sort_on_specific_item(items, n))\rprint(\"\\nSort on 3rd element of the tuple of the said list:\")\rn = 2\rprint(sort_on_specific_item(items, n))\r", "nl": "Write a Python program to sort a given list of tuples on specified element. "}
{"code": "import numpy as np\rx = np.zeros((2, 3, 4))\rprint(np.moveaxis(x, 0, -1).shape)\rprint(np.moveaxis(x, -1, 0).shape)\r", "nl": "Write a NumPy program to move axes of an array to new positions. Other axes remain in their original order. "}
{"code": "from random import shuffle\r\rdef shuffle_word(text_list):\r    text_list = list(text_list)\r    shuffle(text_list)\r    return ''.join(text_list)\r\rtext_list = ['Python', 'list', 'exercises', 'practice', 'solution'] \rprint(\"Original list:\")\rprint(text_list)\rprint(\"\\nAfter scrambling the letters of the strings of the said list:\")\rresult =  [shuffle_word(word) for word in text_list]\rprint(result) \r", "nl": "Write a Python program to scramble the letters of string in a given list. "}
{"code": "def most_frequent(nums):\r  return max(set(nums), key = nums.count) \rprint(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))\rnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\rprint (\"Original list:\")\rprint(nums)\rprint(\"Item with maximum frequency of the said list:\")\rprint(most_frequent(nums))\rnums = [1, 2, 3, 1, 2, 3, 2, 1, 4, 3, 3]\rprint (\"\\nOriginal list:\")\rprint(nums)\rprint(\"Item with maximum frequency of the said list:\")\rprint(most_frequent(nums))\r", "nl": "Write a Python program to get the most frequent element in a given list of numbers. "}
{"code": "def smallest_multiple(n):\r    if (n<=2):\r      return n\r    i = n * 2\r    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r    print(factors)\r\r    while True:\r        for a in factors:\r            if i % a != 0:\r                i += n\r                break\r            if (a == factors[-1] and i % a == 0):\r                return i\r                \rprint(smallest_multiple(13))\rprint(smallest_multiple(11))\rprint(smallest_multiple(2))\rprint(smallest_multiple(1))\r", "nl": "Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors. "}
{"code": "import numpy as np\rx = np.array([24, 27, 30, 29, 18, 14])\rprint(\"Original array:\")\rprint(x)\ry = np.empty_like (x)\ry[:] = x\rprint(\"\\nCopy of the said array:\")\rprint(y)\r", "nl": "Write a NumPy program to copy data from a given array to another array. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rdf_agg = df.groupby(['customer_id','salesman_id']).agg({'purch_amt':sum})\rresult = df_agg['purch_amt'].groupby(level=0, group_keys=False)\rprint(\"\\nGroup on 'customer_id', 'salesman_id' and then sort sum of purch_amt within the groups:\")\rprint(result.nlargest())\r", "nl": "Write a Pandas program to split a dataset to group by two columns and then sort the aggregated results within the groups. "}
{"code": "def relative_order(lst):\r    result = [i for i in range(len(lst)) if lst[i] == None]\r    return result\r\rnums = [1, None, 5, 4,None, 0, None, None]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nIndexes of all None items of the list:\")\rprint(relative_order(nums))\r", "nl": "Write a Python program to find the indexes of all None items in a given list. "}
{"code": "def split_lines(s):\r  return s.split('\\n')\rprint(\"Original string:\")\rprint(\"This\\nis a\\nmultiline\\nstring.\\n\")\rprint(\"Split the said multiline string into a list of lines:\")\rprint(split_lines('This\\nis a\\nmultiline\\nstring.\\n'))\r", "nl": "Write a Python program to split a given multiline string into a list of lines. "}
{"code": "import csv\rdata = [[10,'a1', 1], [12,'a2', 3], [14, 'a3', 5], [16, 'a4', 7], [18, 'a5', 9]]\rwith open(\"temp.csv\", \"w\", newline=\"\") as f:\r   writer = csv.writer(f)\r   writer.writerows(data)\rwith open('temp.csv', newline='') as csvfile:\r data = csv.reader(csvfile, delimiter=' ')\r for row in data:\r   print(', '.join(row))\r", "nl": "Write a Python program to write a Python list of lists to a csv file. After writing the CSV file read the CSV file and display the content. "}
{"code": "def check_string(str1):\r    messg = [\r    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r    result = [x for x in [i(str1) for i in messg] if x != True]\r    if not result:\r        result.append('Valid string.')\r    return result    \rs = input(\"Input the string: \")\rprint(check_string(s))\r", "nl": "Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length using lambda. "}
{"code": "import os\rif os.name == \"nt\":\r   command = \"dir\"\relse:\r   command = \"ls -l\"\ros.system(command)\r", "nl": "Write a Python program to run an operating system command using the os module. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rdf_sub=df[[\"MSHA ID\",\"Labor_Hours\"]].groupby('MSHA ID').sum()\rdf_sub\r", "nl": "Write a Pandas program to create a subtotal of \"Labor Hours\" against MSHA ID from the given excel data (coalpublic2013.xlsx ). "}
{"code": "import sqlite3 \rfrom sqlite3 import Error \rdef sql_connection():\r    try:\r      conn = sqlite3.connect('mydatabase.db')\r      return conn\r    except Error:\r      print(Error)\r \rdef sql_table(conn):\r    cursorObj = conn.cursor()\r# Create the table\r    cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r    print(\"Number of records before inserting rows:\")\r    cursor = cursorObj.execute('select * from salesman;')\r    print(len(cursor.fetchall()))\r# Insert records\r    cursorObj.executescript(\"\"\"\r    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);\r    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);\r    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);\r    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);\r    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);\r    \"\"\")\r    conn.commit()\r    print(\"\\nNumber of records after inserting rows:\")\r    cursor = cursorObj.execute('select * from salesman;')\r    print(len(cursor.fetchall()))\r    \rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\r\rif (sqllite_conn):\r  sqllite_conn.close()\r  print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to count the number of rows of a given SQLite table. "}
{"code": "def count_dups(nums):\r    element = []\r    freque = []\r    if not nums:\r        return element\r    running_count = 1\r    for i in range(len(nums)-1):\r        if nums[i] == nums[i+1]:\r            running_count += 1\r        else:\r            freque.append(running_count)\r            element.append(nums[i])\r            running_count = 1\r    freque.append(running_count)\r    element.append(nums[i+1])\r    return element,freque\r\r\rnums = [1,2,2,2,4,4,4,5,5,5,5]\rprint(\"Original lists:\")\rprint(nums)\r\rprint(\"\\nConsecutive duplicate elements and their frequency:\")\rprint(count_dups(nums))\r", "nl": "Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. "}
{"code": "import numpy as np\rnums = np.array([0, 1, 3, 5, 7, 9, 11, 13, 15])\rprint(\"Original vector:\")\rprint(nums)\rbin_nums = ((nums.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)\rprint(\"\\nBinary representation of the said vector:\")\rprint(bin_nums[:,::-1])\r", "nl": "Write a NumPy program to convert a given vector of integers to a matrix of binary representation. "}
{"code": "import numpy as np\r# Create an empty array\rx = np.empty((3,4))\rprint(x)\r# Create a full array\ry = np.full((3,3),6)\rprint(y)\r", "nl": "Write a NumPy program to create an empty and a full array. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"First four h2 tags from the webpage python.org.:\")\rprint(soup.find_all('h2')[0:4])\r\r", "nl": "Write a Python program to find all the h2 tags and list the first four from the webpage python.org. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'Hhhh', 'abcd', 'EAWQaaa'],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\r\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nIs proper case or title case?\")\rdf['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to check whether only proper case or title case is present in a given column of a DataFrame. "}
{"code": "import pandas as pd\rfrom pandas.tseries.offsets import *\rimport datetime\rfrom datetime import datetime, date\rdt = datetime(2020, 1, 4)\rprint(\"Specified date:\")\rprint(dt)\rprint(\"\\nOne business day from the said date:\")\robday = dt + BusinessDay()\rprint(obday)\rprint(\"\\nTwo business days from the said date:\")\rtbday = dt + 2 * BusinessDay()\rprint(tbday)\rprint(\"\\nThree business days from the said date:\")\rthbday = dt + 3 * BusinessDay()\rprint(thbday)\rprint(\"\\nNext business month end from the said date:\")\rnbday = dt + BMonthEnd()\rprint(nbday)\r", "nl": "Write a Pandas program to calculate one, two, three business day(s) from a specified date. Also find the next business month end from a specific date. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\r# Remove NA / NaN values\rnew_w_a_con = w_a_con.dropna()\rprint(\"\\nMatch if  a given column has a particular sub string:\")\rprint(new_w_a_con[new_w_a_con[\"WHO region\"].str.contains(\"Ea\")])\r", "nl": "Write a Pandas program to filter those records where WHO region contains \"Ea\" substring from world alcohol consumption dataset. "}
{"code": "d = {'Red': 'Green'}\r(c1, c2), = d.items()\rprint(c1)\rprint(c2)\r", "nl": "Write a Python program to extract single key-value pair of a dictionary in variables. "}
{"code": "def is_vowel(char):\r    all_vowels = 'aeiou'\r    return char in all_vowels\rprint(is_vowel('c'))\rprint(is_vowel('e'))\r", "nl": "Write a Python program to test whether a passed letter is a vowel or not. "}
{"code": "l = [[5*i + j for j in range(1,6)] for i in range(5)]\rprint(l)\r", "nl": "Write a Python program to generate groups of five consecutive numbers in a list. "}
{"code": "import enum\rclass Countries(enum.Enum):\r    Afghanistan = 93\r    Albania = 355\r    Algeria = 213\r    Andorra = 376\r    Angola = 244\r    India = 355\r    USA = 213\rfor result in Countries:\r    print('{:15} = {}'.format(result.name, result.value))\r", "nl": "rite a Python program to get the unique enumeration values. "}
{"code": "from collections import defaultdict\rclasses = (\r    ('V', 1),\r    ('VI', 1),\r    ('V', 2),\r    ('VI', 2),\r    ('VI', 3),\r    ('VII', 1),\r)\r\rclass_rollno = defaultdict(list)\r\rfor class_name, roll_id in classes:\r    class_rollno[class_name].append(roll_id)\r\rprint(class_rollno)\r", "nl": "Write a Python program to find the class wise roll number from a tuple-of-tuples. "}
{"code": "def fibonacci_nums(n):\r  if n <= 0:\r    return [0]\r  sequence = [0, 1]\r  while len(sequence) <= n:\r    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]\r    sequence.append(next_value)\r  return sequence\rprint(\"First 7 Fibonacci numbers:\")\rprint(fibonacci_nums(7))\rprint(\"\\nFirst 15 Fibonacci numbers:\")\rprint(fibonacci_nums(15))\rprint(\"\\nFirst 50 Fibonacci numbers:\")\rprint(fibonacci_nums(50))\r", "nl": "Write a Python program to generate a list, containing the Fibonacci sequence, up until the nth term. "}
{"code": "def Previous_Palindrome(num):\r    for x in range(num-1,0,-1):\r        if str(x) == str(x)[::-1]:\r            return x\rprint(Previous_Palindrome(99));\rprint(Previous_Palindrome(1221));\r", "nl": "Write a python program to find the next previous palindrome of a specified number. "}
{"code": "x = 'true'\rx = int(x == 'true')\rprint(x)\rx = 'abcd'\rx = int(x == 'true')\rprint(x)\r", "nl": "Write a Python program to convert true to 1 and false to 0. "}
{"code": "def remove_words(list1, remove_words):\r    result = list(filter(lambda word: word not in remove_words, list1))\r    return result\r        \rcolors = ['orange', 'red', 'green', 'blue', 'white', 'black']\rremove_colors = ['orange','black']\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nRemove words:\")\rprint(remove_colors)\rprint(\"\\nAfter removing the specified words from the said list:\")\rprint(remove_words(colors, remove_colors))\r", "nl": "Write a Python program to remove specific words from a given list using lambda. "}
{"code": "import numpy as np \rnums = np.random.random((8,8,3))\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nExtract array of shape (6,6,3) from the said array:\")\rnew_nums = nums[:6, :6, :]\rprint(new_nums)\r", "nl": "Write a NumPy program to create a 12x12x4 array with random values and extract any array of shape(6,6,3) from the said array. "}
{"code": "import pandas as pd\rnums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\rnums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\rprint(\"Original Series:\")\rprint(nums1)\rprint(nums2)\rprint(\"Check 2 series are equal or not?\")\rprint(nums1 == nums2)\r", "nl": "Write a Pandas program to check the equality of two given series. "}
{"code": "import numpy as np\ra = np.array([[1, 0, 0, 0, 2], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0]], dtype=np.float32)\rprint(\"Original array:\")\rprint(a)\rU, s, V = np.linalg.svd(a, full_matrices=False)\rq, r = np.linalg.qr(a)\rprint(\"Factor of a given array  by Singular Value Decomposition:\")\rprint(\"U=\\n\", U, \"\\ns=\\n\", s, \"\\nV=\\n\", V)\r", "nl": "Write a NumPy program to compute the factor of a given array by Singular Value Decomposition. "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(sales_tuples)\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels: \")\rdf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\rprint(df)\r\rprint(\"\\nExtract a single row from the said dataframe:\")\rprint(df.loc[('sale2', 'city2')])\rprint(\"\\nExtract a single row from the said dataframe:\")\rprint(df.loc[('sale2', 'city2')])\r\rprint(\"\\nExtract number of rows from the said dataframe:\")\rprint(df.loc['sale1'])\rprint(\"\\nExtract number of rows from the said dataframe:\")\rprint(df.loc['sale3'])\r\rprint(\"\\nExtract a single value from the said dataframe:\")\rprint(df.loc[('sale1', 'city2'), 1])\rprint(\"\\nExtract a single value from the said dataframe:\")\rprint(df.loc[('sale4', 'city1'), 4])\r", "nl": "Write a Pandas program to extract a single row, rows and a specific value from a MultiIndex levels DataFrame. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],\r'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],\r'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],\r'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nTotal number of missing values of the said DataFrame:\")\rresult = df.isna().sum().sum()\rprint(result)\r", "nl": "Write a Pandas program to calculate the total number of missing values in a DataFrame. "}
{"code": "def amicable_numbers_sum(limit):\r    if not isinstance(limit, int):\r        return \"Input is not an integer!\"\r\r    if limit < 1:\r        return \"Input must be bigger than 0!\"\r\r    amicables = set()\r\r    for num in range(2, limit+1):\r        if num in amicables:\r            continue\r\r        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r        if num == sum_fact2 and num != sum_fact:\r            amicables.add(num)\r            amicables.add(sum_fact2)\r\r    return sum(amicables)\r\r\rprint(amicable_numbers_sum(9999))\rprint(amicable_numbers_sum(999))\rprint(amicable_numbers_sum(99))\r", "nl": "Write a Python program to sum all amicable numbers from 1 to specified numbers. "}
{"code": "def remove_newlines(fname):\r    flist = open(fname).readlines()\r    return [s.rstrip('\\n') for s in flist]\r\rprint(remove_newlines(\"test.txt\"))\r", "nl": "Write a Python program to remove newline characters from a file. "}
{"code": "import numpy as np\rx = np.random.randint(0, 10, 40)\rprint(\"Original array:\")\rprint(x)\rprint(\"Most frequent value in the above array:\")\rprint(np.bincount(x).argmax())\r", "nl": "Write a NumPy program to find the most frequent value in an array. "}
{"code": "import itertools\rdef combination(str1):\r    result = map(''.join, itertools.product(*((c.lower(), c.upper()) for c in str1)))\r    return list(result)\rst =\"abc\"\rprint(\"Original string:\")\rprint(st)\rprint(\"All lower and upper mixed case combinations of the said string:\")\rprint(combination(st))\rst =\"w3r\"\rprint(\"\\nOriginal string:\")\rprint(st)\rprint(\"All lower and upper mixed case combinations of the said string:\")\rprint(combination(st))\rst =\"Python\"\rprint(\"\\nOriginal string:\")\rprint(st)\rprint(\"All lower and upper mixed case combinations of the said string:\")\rprint(combination(st))\r", "nl": "Write a Python program to find all lower and upper mixed case combinations of a given string. "}
{"code": "import pandas as pd\rnum_series = pd.Series(list('2390238923902390239023'))\relement_pos = [0, 2, 6, 11, 21]\rprint(\"Original Series:\")\rprint(num_series)\rresult = num_series.take(element_pos)\rprint(\"\\nExtract items at given positions of the said series:\")\rprint(result)\r", "nl": "Write a Pandas program to extract items at given positions of a given series. "}
{"code": "def intersection_nested_lists(l1, l2):\r    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]\r    return result\rnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\rnums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nIntersection of said nested lists:\")\rprint(intersection_nested_lists(nums1, nums2))\r", "nl": "Write a Python program to find the nested lists elements, which are present in another list using lambda. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: All the elements of the first and fourth columns \")\rprint(arra_data[:, [0,3]])\r", "nl": "Write a NumPy program to extract all the elements of the first and fourth columns from a given (4x4) array. "}
{"code": "def is_samePatterns(colors, patterns):    \r    if len(colors) != len(patterns):\r        return False    \r    sdict = {}\r    pset = set()\r    sset = set()    \r    for i in range(len(patterns)):\r        pset.add(patterns[i])\r        sset.add(colors[i])\r        if patterns[i] not in sdict.keys():\r            sdict[patterns[i]] = []\r\r        keys = sdict[patterns[i]]\r        keys.append(colors[i])\r        sdict[patterns[i]] = keys\r\r    if len(pset) != len(sset):\r        return False   \r\r    for values in sdict.values():\r\r        for i in range(len(values) - 1):\r            if values[i] != values[i+1]:\r                return False\r\r    return True\r\rprint(is_samePatterns([\"red\", \r \"green\", \r \"green\"], [\"a\", \r \"b\", \r \"b\"])) \r\rprint(is_samePatterns([\"red\", \r \"green\", \r \"greenn\"], [\"a\", \r \"b\", \r \"b\"])) \r", "nl": "Write a Python program to check whether it follows the sequence given in the patterns array. "}
{"code": "from pprint import pprint\rdict_nums = dict(x=list(range(11, 20)), y=list(range(21, 30)), z=list(range(31, 40)))\rpprint(dict_nums)\rprint(dict_nums[\"x\"][4])\rprint(dict_nums[\"y\"][4])\rprint(dict_nums[\"z\"][4])\rfor k,v in dict_nums.items():\r   print(k, \"has value\", v)\r", "nl": "Write a Python program to create a dictionary of keys x, y, and z where each key has as value a list from 11-20, 21-30, and 31-40 respectively. Access the fifth value of each key from the dictionary. "}
{"code": "import pandas as pd\rytp = pd.Period('2020','A-DEC')\rprint(\"Yearly time perid:\",ytp)\rprint(\"\\nAll the properties of the said period:\")\rprint(dir(ytp))\r", "nl": "Write a Pandas program to create a yearly time period from a specified year and display the properties of this period. "}
{"code": "import textwrap\rsample_text ='''\rPython is a widely used high-level, general-purpose, interpreted, dynamic\rprogramming language. Its design philosophy emphasizes code readability,\rand its syntax allows programmers to express concepts in fewer lines of\rcode than possible in languages such as C++ or Java.\r    '''\r\rtext1 =  textwrap.dedent(sample_text).strip()\rprint()\rprint(textwrap.fill(text1,\r                    initial_indent='',\r                    subsequent_indent=' ' * 4,\r                    width=80,\r                    ))\rprint()\r", "nl": "Write a Python program to set the indentation of the first line. "}
{"code": "import numpy as np\rimport numpy as np\rx = np.arange(12, 38)\rprint(\"Original array:\")\rprint(x)\rprint(\"Reverse array:\")\rx = x[::-1]\rprint(x)\r", "nl": "Write a NumPy program to reverse an array (first element becomes last). "}
{"code": "exam_st_date = (11,12,2014)\rprint( \"The examination will start from : %i / %i / %i\"%exam_st_date)\r", "nl": "Write a Python program to display the examination schedule. (extract the date from exam_st_date). "}
{"code": "def number_of_substrings(str): \r\tstr_len = len(str); \r\treturn int(str_len * (str_len + 1) / 2); \r\rstr1 = input(\"Input a string: \")\rprint(\"Number of substrings:\") \rprint(number_of_substrings(str1))\r", "nl": "Write a Python program to count number of non-empty substrings of a given string. "}
{"code": "import pandas as pd\rs = pd.Series(data = [1,2,3,4,5], index = ['A', 'B', 'C','D','E'])\rprint(\"Original Data Series:\")\rprint(s)\rs = s.reindex(index = ['B','A','C','D','E'])\rprint(\"Data Series after changing the order of index:\")\rprint(s)\r", "nl": "Write a Pandas program to change the order of index of a given series. "}
{"code": "import numpy as np\rp = [[1, 0], [0, 1]]\rq = [[1, 2], [3, 4]]\rprint(\"original matrix:\")\rprint(p)\rprint(q)\rresult1 = np.cross(p, q)\rresult2 = np.cross(q, p)\rprint(\"cross product of the said two vectors(p, q):\")\rprint(result1)\rprint(\"cross product of the said two vectors(q, p):\")\rprint(result2)\r", "nl": "Write a NumPy program to compute the cross product of two given vectors. "}
{"code": "def remove_none(nums):\r    result = [x for x in nums if x is not None]\r    return result\rnums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nRemove None value from the said list:\")\rprint(remove_none(nums))\r", "nl": "Write a Python program to remove None value from a given list. "}
{"code": "colors = [['Red'], ['Green'], ['Black']]\rprint('\\n'.join([str(lst) for lst in colors]))\r", "nl": "Write a Python program to print a nested lists (each list on a new line) using the print() function. "}
{"code": "class Node(object):\r    # Singly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r        self.count += 1\r    \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.data\r            current = current.next\r            yield item_val\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)   \r        \r    def search_item(self, val):\r         for node in self.iter():\r            if val == node:\r                return True\r         return False\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\ritems.append_item('SQL')\r\rprint(\"Original list:\")\ritems.print_foward()\rprint(\"\\n\")\rif items.search_item('SQL'):\r    print(\"True\")\relse:\r    print(\"False\")\r\rif items.search_item('C+'):\r    print(\"True\")\relse:\r    print(\"False\")\r", "nl": "Write a Python program to search a specific item in a given doubly linked list and return true if the item is found otherwise return false. "}
{"code": "import numpy as np\ra = np.array([[10],[20],[30]])\rb = np.array([[40],[50],[60]])\rc = np.dstack((a, b))\rprint(c)\r", "nl": "Write a NumPy program to convert (in sequence depth wise (along third axis)) two 1-D arrays into a 2-D array. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef test_and_cond(text):\r    result = re.findall(r'(?=.*Ave.)(?=.*9910).*', text) \r    return \" \".join(result)\rdf['check_two_words']=df['address'].apply(lambda x : test_and_cond(x))\rprint(\"\\nPresent two words!\")\rprint(df)\r", "nl": "Write a Pandas program to check whether two given words present in a specified column of a given DataFrame. "}
{"code": "from collections import defaultdict\rdef grouping_dictionary(l):\r    d = defaultdict(list)\r    for k, v in l:\r        d[k].append(v)\r    return d\rcolors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nGrouping a sequence of key-value pairs into a dictionary of lists:\")\rprint(grouping_dictionary(colors))\r", "nl": "Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. Use collections module. "}
{"code": "import numpy as np\ra = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\rprint(\"Original array\")\rprint(a)\rprint(\"Checking for complex number:\")\rprint(np.iscomplex(a))\rprint(\"Checking for real number:\")\rprint(np.isreal(a))\rprint(\"Checking for scalar type:\")\rprint(np.isscalar(3.1))\rprint(np.isscalar([3.1]))\r", "nl": "Write a NumPy program to\u00a0test element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not. "}
{"code": "import pandas as pd\rprint(\"Timezone: Europe/Berlin:\")\rprint(\"Using pytz:\")\rdate_pytz = pd.Timestamp('2019-01-01', tz = 'Europe/Berlin')\rprint(date_pytz.tz)  \rprint(\"Using dateutil:\")\rdate_util = pd.Timestamp('2019-01-01', tz = 'dateutil/Europe/Berlin')\rprint(date_util.tz)\rprint(\"\\nUS/Pacific:\")\rprint(\"Using pytz:\")\rdate_pytz = pd.Timestamp('2019-01-01', tz = 'US/Pacific')\rprint(date_pytz.tz)  \rprint(\"Using dateutil:\")\rdate_util = pd.Timestamp('2019-01-01', tz = 'dateutil/US/Pacific')\rprint(date_util.tz)\r", "nl": "Write a Pandas program to create a time series object with a time zone. "}
{"code": "import numpy as np\rnum = np.arange(20)\rarr1 = np.reshape(num, [4, 5])\rprint(\"Original array:\")\rprint(arr1)\rprint([0, 1, 2, 3, 4] in arr1.tolist())\rprint([0, 1, 2, 3, 5] in arr1.tolist())\rprint([15, 16, 17, 18, 19] in arr1.tolist())\r", "nl": "Write a NumPy program to check whether a Numpy array contains a specified row. "}
{"code": "import numpy as np\rx = np.array([2, 3])\ry = np.array([])\r# size 2, array is not empty\rprint(x.size)\r# size 0, array is empty\rprint(y.size)\r", "nl": "Write a NumPy program to check whether the NumPy array is empty or not. "}
{"code": "items = input(\"Input comma separated sequence of words\")\rwords = [word for word in items.split(\",\")]\rprint(\",\".join(sorted(list(set(words)))))\r", "nl": "Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically). "}
{"code": "class Node:\r    # Singly linked node\r    def __init__(self, data=None):\r        self.data = data\r        self.next = None\rclass singly_linked_list:\r    def __init__(self):\r        # Createe an empty list\r        self.tail = None\r        self.head = None\r        self.count = 0\r\r    def append_item(self, data):\r        #Append items on the list\r        node = Node(data)\r        if self.head:\r            self.head.next = node\r            self.head = node\r        else:\r            self.tail = node\r            self.head = node\r        self.count += 1\r    \r    def __getitem__(self, index):\r        if index > self.count - 1:\r            return \"Index out of range\"\r        current_val = self.tail\r        for n in range(index):\r            current_val = current_val.next\r        return current_val.data\r    \r    def __setitem__(self, index, value):\r        if index > self.count - 1:\r            raise Exception(\"Index out of range.\")\r        current = self.tail\r        for n in range(index):\r            current = current.next\r        current.data = value\r\ritems = singly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Modify items by index:\")\ritems[1] = \"SQL\"\rprint(\"New value: \",items[1])\ritems[4] = \"Perl\"\rprint(\"New value: \",items[4])\r", "nl": "Write a Python program to set a new value of an item in a singly linked list using index value. "}
{"code": "import sqlite3 \rfrom sqlite3 import Error \rdef sql_connection():\r    try:\r      conn = sqlite3.connect('mydatabase.db')\r      return conn\r    except Error:\r      print(Error) \rdef sql_table(conn):\r    cursorObj = conn.cursor()\r# Create the table\r    cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r# Insert records\r    cursorObj.executescript(\"\"\"\r    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);\r    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);\r    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);\r    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);\r    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);\r    \"\"\")    \r    cursorObj.execute(\"SELECT * FROM salesman\")\r    rows = cursorObj.fetchall()\r    print(\"Agent details:\")\r    for row in rows:\r        print(row)\r    print(\"\\nUpdate commission .15 to .45 where id is 5003:\")\r    sql_update_query = \"\"\"Update salesman set commission = .45 where salesman_id = 5003\"\"\"\r    cursorObj.execute(sql_update_query)\r    conn.commit()\r    print(\"Record Updated successfully \")    \r    cursorObj.execute(\"SELECT * FROM salesman\")\r    rows = cursorObj.fetchall()\r    print(\"\\nAfter updating Agent details:\")\r    for row in rows:\r        print(row)\rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r  sqllite_conn.close()\r  print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to update a specific column value of a given table and select all rows before and after updating the said table. "}
{"code": "class TreeNode(object):\r    def __init__(self, x):\r        self.val = x\r        self.left = None\r        self.right = None\r\rdef kth_smallest(root, k):\r    stack = []\r    while root or stack:\r        while root:\r            stack.append(root)\r            root = root.left\r        root = stack.pop()\r        k -= 1\r        if k == 0:\r            break\r        root = root.right\r    return root.val\r\rroot = TreeNode(8)  \rroot.left = TreeNode(5)  \rroot.right = TreeNode(14) \rroot.left.left = TreeNode(4)  \rroot.left.right = TreeNode(6) \rroot.left.right.left = TreeNode(8)  \rroot.left.right.right = TreeNode(7)  \rroot.right.right = TreeNode(24) \rroot.right.right.left = TreeNode(22)  \r\rprint(kth_smallest(root, 2))\rprint(kth_smallest(root, 3))\r", "nl": "Write a Python program to find the k"}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rdf['Year'] = df['Date_time'].apply(lambda x: \"%d\" % (x.year))\rresult = df.groupby(['Year', 'country']).size()\rprint(\"\\nCountry-year wise frequency of reporting dates of UFO:\")\rprint(result)\r", "nl": "Write a Pandas program to count year-country wise frequency of reporting dates of unidentified flying object(UFO). "}
{"code": "import itertools as it\rprint(\"Iterate over characters of a string and display\\nconsecutive keys and groups from the iterable:\")\rstr1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'\rdata_groupby = it.groupby(str1)\rfor key, group in data_groupby:\r    print('Key:', key)\r    print('Group:', list(group))    \rprint(\"\\nIterate over elements of a list and display\\nconsecutive keys and groups from the iterable:\")\rstr1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'    \rstr1 = [1,2,2,3,4,4,5,5,5,6,6,7,7,7,8]\rdata_groupby = it.groupby(str1)\rfor key, group in data_groupby:\r    print('Key:', key)\r    print('Group:', list(group))\r", "nl": "Write a Python program to create an iterator that returns consecutive keys and groups from an iterable. "}
{"code": "import collections\rodd_nums = (1,3,5,7,9)\rodd_deque  = collections.deque(odd_nums)\rprint(\"Original Deque object with odd numbers:\")\rprint(odd_deque)\rprint(\"Deque length: %d\"%(len(odd_deque)))\rodd_deque.clear()\rprint(\"Deque object after removing all numbers-\")\rprint(odd_deque)\rprint(\"Deque length:%d\"%(len(odd_deque)))\r", "nl": "Write a Python program to remove all the elements of a given deque object. "}
{"code": "import numpy as np\rarray_nums = np.arange(20).reshape(4,5)\rprint(\"Original array:\")\rprint(array_nums)\rprint(\"\\nAfter swapping column1 with column4:\")\rarray_nums[:,[0,3]] = array_nums[:,[3,0]]\rprint(array_nums)\r", "nl": "Write a NumPy program to create an array of 4,5 shape and swap column1 with column4. "}
{"code": "import pandas as pd\rresult = pd.Series(pd.date_range('2020-01-01', periods=52, freq='W-SUN'))\rprint(\"All Sundays of 2019:\")\rprint(result)\r", "nl": "Write a Pandas program to create a TimeSeries to display all the Sundays of given year. "}
{"code": "def unique_list(l):\r  x = []\r  for a in l:\r    if a not in x:\r      x.append(a)\r  return x\r\rprint(unique_list([1,2,3,3,3,3,4,5])) \r", "nl": "Write a Python function that takes a list and returns a new list with unique elements of the first list. "}
{"code": "import csv\rcsv_columns = ['id','Column1', 'Column2', 'Column3', 'Column4', 'Column5']\rdict_data = {'id':['1', '2', '3'],\r    'Column1':[33, 25, 56],\r    'Column2':[35, 30, 30],\r    'Column3':[21, 40, 55],\r    'Column4':[71, 25, 55],\r    'Column5':[10, 10, 40], }\rcsv_file = \"temp.csv\"\rtry:\r   with open(csv_file, 'w') as csvfile:\r       writer = csv.DictWriter(csvfile, fieldnames=csv_columns)\r       writer.writeheader()\r       for data in dict_data:\r           writer.writerow(dict_data)\rexcept IOError:\r   print(\"I/O error\")\rdata = csv.DictReader(open(csv_file))\rprint(\"CSV file as a dictionary:\\n\")\rfor row in data:\r   print(row)\r", "nl": "Write a Python program to write a Python dictionary to a csv file. After writing the CSV file read the CSV file and display the content. "}
{"code": "def test(lst, value):\r    result = [i for i,val in enumerate(lst) if val > value]\r    return result\rnums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]\rprint(\"\\nOriginal list:\")\rprint(nums)\rval = 3000\rprint(\"Indices of elements of the said list, greater than\",val)\rprint(test(nums,val))\rnums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]\rprint(\"\\nOriginal list:\")\rprint(nums)\rval = 20000\rprint(\"Indices of elements of the said list, greater than\",val)\rprint(test(nums,val))\r", "nl": "Write a Python program to find the indices of elements of a given list, greater than a specified value. "}
{"code": "import numpy as np\rarray1 = np.array([0, 10, 20, 40, 60])\rprint(\"Array1: \",array1)\rarray2 = [0, 40]\rprint(\"Array2: \",array2)\rprint(\"Compare each element of array1 and array2\")\rprint(np.in1d(array1, array2))\r", "nl": "Write a NumPy program to test whether each element of a 1-D array is also present in a second array. "}
{"code": "import sys\rprint(\"Float value information: \",sys.float_info)\rprint(\"\\nInteger value information: \",sys.int_info)\rprint(\"\\nMaximum size of an integer: \",sys.maxsize) \r", "nl": "Write a Python program to determine the largest and smallest integers, longs, floats. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'address': ['7277 Surrey Ave.1111','920 N. Bishop Ave.','9910 Golden Star St.', '1025 Dunbar St.', '1700 West Livingston Court']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef test_num_great(text): \r    result = re.findall(r'95[5-9]|9[6-9]\\d|[1-9]\\d{3,}',text)\r    return \" \".join(result)\rdf['num_great']=df['address'].apply(lambda x : test_num_great(x))\rprint(\"\\nNumber greater than 940:\")\rprint(df)\r", "nl": "Write a Pandas program to extract numbers greater than 940 from the specified column of a given DataFrame. "}
{"code": "string_words = '''United States Declaration of Independence\rFrom Wikipedia, the free encyclopedia\rThe United States Declaration of Independence is the statement\radopted by the Second Continental Congress meeting at the Pennsylvania State\rHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\rthat the thirteen American colonies, then at war with the Kingdom of Great\rBritain, regarded themselves as thirteen independent sovereign states, no longer\runder British rule. These states would found a new nation \u2013 the United States of\rAmerica. John Adams was a leader in pushing for independence, which was passed\ron July 2 with no opposing vote cast. A committee of five had already drafted the\rformal declaration, to be ready when Congress voted on independence.\r\rJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\rdraft of the document, which Congress would edit to produce the final version.\rThe Declaration was ultimately a formal explanation of why Congress had voted on July\r2 to declare independence from Great Britain, more than a year after the outbreak of\rthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: \"The\rSecond Day of July 1776, will be the most memorable Epocha, in the History of America.\"\rBut Independence Day is actually celebrated on July 4, the date that the Declaration of\rIndependence was approved.\r\rAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\rseveral forms. It was initially published as the printed Dunlap broadside that was widely\rdistributed and read to the public. The source copy used for this printing has been lost,\rand may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete\rwith changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made\rby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\ris a signed copy that is displayed at the National Archives in Washington, D.C., and which is\rpopularly regarded as the official document. This engrossed copy was ordered by Congress on\rJuly 19 and signed primarily on August 2.\r\rThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\rThe Declaration justified the independence of the United States by listing colonial grievances against\rKing George III, and by asserting certain natural and legal rights, including a right of revolution.\rHaving served its original purpose in announcing independence, references to the text of the\rDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\r(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\ron human rights, particularly its second sentence:\r\rWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\rCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\r\rThis has been called \"one of the best-known sentences in the English language\", containing \"the most potent\rand consequential words in American history\". The passage came to represent a moral standard to which\rthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\rDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\rthrough which the United States Constitution should be interpreted.\r\rThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\rbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\r(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\rEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\r19th century.'''\r\rword_list = string_words.split()\r\rword_freq = [word_list.count(n) for n in word_list]\r\rprint(\"String:\\n {} \\n\".format(string_words))\rprint(\"List:\\n {} \\n\".format(str(word_list)))\rprint(\"Pairs (Words and Frequencies:\\n {}\".format(str(list(zip(word_list, word_freq)))))\r", "nl": "Write a Python program to print a long text, convert the string to a list and print all the words and their frequencies. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'address': ['72 Surrey Ave.11','92 N. Bishop Ave.','9910 Golden Star St.', '102 Dunbar St.', '17 West Livingston Court']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\r\rdef test_num_less(n):\r    nums = []\r    for i in n.split():\r        result = re.findall(r'\\b(0*(?:[1-9][0-9]?|100))\\b',i)\r        nums.append(result)\r        all_num=[\",\".join(x) for x in nums if x != []]\r    return \" \".join(all_num)\r\rdf['num_less'] = df['address'].apply(lambda x : test_num_less(x))\rprint(\"\\nNumber less than 100:\")\rprint(df)\r", "nl": "Write a Pandas program to extract numbers less than 100 from the specified column of a given DataFrame. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'id': [1, 1, 2, 3, 3, 4, 4, 4],\r    'value': ['a', 'a', 'b', None, 'a', 'a', None, 'b']\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"Count unique values:\")\rprint (df.groupby('value')['id'].nunique())\r", "nl": "Write a Pandas program to split the following dataframe into groups and count unique values of 'value' column. "}
{"code": "from array import array\rdef array_sum(nums_arr):\r    sum_n = 0\r    for n in nums_arr:\r        sum_n += n\r    return sum_n\r\rnums = array('i', [1, 2, 3, 4, 5, -15])\rprint(\"Original array:\",nums)\rnums_arr = list(map(int, nums))\rresult = array_sum(nums_arr)\rprint(\"Sum of all elements of the said array:\")\rprint(result)\r", "nl": "Write a Python program to compute the sum of elements of a given array of integers, use map() function. "}
{"code": "str1 = \"The quick brown fox jumps over the lazy dog.\"\rprint(str1.split(' '))\rstr1 = \"The-quick-brown-fox-jumps-over-the-lazy-dog.\"\rprint(str1.split('-'))\r", "nl": "Write a Python program to convert a given string into a list of words. "}
{"code": "import decimal\r#Source: https://bit.ly/2SfZEtL\rdef format_e(n):\r    a = '%E' % n\r    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]\r\rprint(\"Original decimal value: \"+ \"40800000000.00000000000000\")\rprint(\"Scientific notation of the said decimal value:\")\rprint(format_e(decimal.Decimal('40800000000.00000000000000')))\rprint(\"\\nOriginal decimal value: \"+ \"40000000000.00000000000000\")\rprint(\"Scientific notation of the said decimal value:\")\rprint(format_e(decimal.Decimal('40000000000.00000000000000')))\rprint(\"\\nOriginal decimal value: \"+ \"40812300000.00000000000000\")\rprint(\"Scientific notation of the said decimal value:\")\rprint(format_e(decimal.Decimal('40812300000.00000000000000')))\r", "nl": "Write a Python program to display a given decimal value in scientific notation. Use decimal.Decimal"}
{"code": "my_list = ['p', 'q']\rn = 4\rnew_list = ['{}{}'.format(x, y) for y in range(1, n+1) for x in my_list]\rprint(new_list)\r", "nl": "Write a Python program to create a list by concatenating a given list which range goes from 1 to n. "}
{"code": "num =[10, 30, 4, -6]\rprint(num.index(30))\r", "nl": "Write a Python program to find the index of an item in a specified list. "}
{"code": "import pandas as pd\rdateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')\rprint(\"Time series with frequency 3h10min:\")\rprint(dateset1)\rdateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')\rprint(\"\\nTime series with frequency 1 day 10 minutes and 20 microseconds:\")\rprint(dateset2)\r", "nl": "Write a Pandas program to generate time series combining day and intraday offsets intervals. "}
{"code": "x = 3\ry = 123\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number(left padding, width 2): \"+\"{:0>2d}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number(left padding, width 6): \"+\"{:0>6d}\".format(y));\rprint()\r", "nl": "Write a Python program to print the following integers with zeros on the left of specified width. "}
{"code": "import glob\rchar_list = []\rfiles_list = glob.glob(\"*.txt\")\rfor file_elem in files_list:\r   with open(file_elem, \"r\") as f:\r       char_list.append(f.read())\rprint(char_list)\r", "nl": "Write a Python program to extract characters from various text files and puts them into a list. "}
{"code": "nums1 = [1, 2, 3]\rnums2 = [4, 5, 6]\rprint(\"Original list:\")\rprint(nums1)\rprint(nums2)\rresult = map(lambda x, y: x + y, nums1, nums2)\rprint(\"\\nResult: after adding two list\")\rprint(list(result))\r", "nl": "Write a Python program to add two given lists using map and lambda. "}
{"code": "def printValues():\r\tl = list()\r\tfor i in range(1,21):\r\t\tl.append(i**2)\r\tprint(l[:5])\r\tprint(l[-5:])\r\rprintValues()\r", "nl": "Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included). "}
{"code": "import numpy as np\rnp.set_printoptions(linewidth=100)\rstudent =  np.array([['01', 'V', 'Debby Pramod'],\r ['02', 'V', 'Artemiy Ellie'],\r ['03', 'V', 'Baptist Kamal'],\r ['04', 'V', 'Lavanya Davide'],\r ['05', 'V', 'Fulton Antwan'],\r ['06', 'V', 'Euanthe Sandeep'],\r ['07', 'V', 'Endzela Sanda'],\r ['08', 'V', 'Victoire Waman'],\r ['09', 'V', 'Briar Nur'],\r ['10', 'V', 'Rose Lykos']])\rprint(\"Original array:\")\rprint(student)\rchar='E'\rresult = student[np.char.startswith(student[:,2], char)]\rprint(\"\\nStudent name starting with\",char,\":\")\rprint(result)\rchar='1'\rresult = student[np.char.startswith(student[:,0], char)]\rprint(\"\\nStudent id starting with\",char,\":\")\rprint(result)\r", "nl": "Write a NumPy program to extract all the rows from a given array where a specific column starts with a given character. "}
{"code": "def square_num(n):\r  return n * n\rnums = [4, 5, 2, 9]\rprint(\"Original List: \",nums)\rresult = map(square_num, nums)\rprint(\"Square the elements of the said list using map():\")\rprint(list(result))\r", "nl": "Write a Python program to square the elements of a list using map() function. "}
{"code": "def file_read(fname):\r        with open(fname) as f:\r                #Content_list is the list that contains the read lines.     \r                content_list = f.readlines()\r                print(content_list)\r\rfile_read(\\'test.txt\\')\r", "nl": "Write a Python program to read a file line by line and store it into a list. "}
{"code": "def file_read(fname):\r        content_array = []\r        with open(fname) as f:\r                #Content_list is the list that contains the read lines.     \r                for line in f:\r                        content_array.append(line)\r                print(content_array)\r\rfile_read('test.txt')\r", "nl": "Write a Python program to read a file line by line store it into an array. "}
{"code": "def count_words(filepath):\r   with open(filepath) as f:\r       data = f.read()\r       data.replace(\",\", \" \")\r       return len(data.split(\" \"))\rprint(count_words(\"words.txt\"))\r", "nl": "Write a Python program that takes a text file as input and returns the number of words of a given text file. "}
{"code": "def catalan_number(num):\r    if num <=1:\r         return 1\r   \r    res_num = 0\r    for i in range(num):\r        res_num += catalan_number(i) * catalan_number(num-i-1)\r    return res_num\r \rfor n in range(10):\r    print(catalan_number(n))\r\t", "nl": "Write a Python program for nth Catalan Number. "}
{"code": "def test(dictt):\r    result = sum((len(values) for values in dictt.values()))\r    return result\rcolor = {'#FF0000':'Red', '#800000':'Maroon', '#FFFF00':'Yellow', '#808000':'Olive'}\rprint(\"\\nOriginal dictionary:\")\rprint(color)\rprint(\"\\nTotal length of all values of the said dictionary with string values:\")\rprint(test(color))\r", "nl": "Write a Python program to get the total length of all values of a given dictionary with string values. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32],\r    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nMultiIndex using columns 't_id', \u2018school_code\u2019 and 'class':\")\rdf1 = df.set_index(['t_id', 'school_code', 'class'])\rprint(df1)\rprint(\"\\nConvert 1st and 3rd levels in the index frame into columns:\")\rdf2 = df1.reset_index(level=['t_id', 'class'])\rprint(df2)\r", "nl": "Write a Pandas program to convert 1"}
{"code": "def test(a):\r        def add(b):\r                nonlocal a\r                a += 1\r                return a+b\r        return add\rfunc= test(4)\rprint(func(4))\r", "nl": "Write a Python program to access a function inside a function. "}
{"code": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\rprint(\"Original list of integers:\")\rprint(nums)\rprint(\"\\nEven numbers from the said list:\")\reven_nums = list(filter(lambda x: x%2 == 0, nums))\rprint(even_nums)\rprint(\"\\nOdd numbers from the said list:\")\rodd_nums = list(filter(lambda x: x%2 != 0, nums))\rprint(odd_nums)\r", "nl": "Write a Python program to filter a list of integers using Lambda. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details ('WHO region','Country','Beverage Types') \\nin the year \u20181986\u2019 or \u20181989\u2019 where  WHO region is \u2018Americas\u2019  or 'Europe':\")\rprint(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))][['WHO region','Country','Beverage Types']].head(10))\r", "nl": "Write a Pandas program to find out the 'WHO region, 'Country', 'Beverage Types' in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. "}
{"code": "import decimal\rprint(\"Construct a Decimal from a float:\")\rpi_val = decimal.Decimal(3.14159)\rprint(pi_val)\rprint(pi_val.as_tuple())\rprint(\"\\nConstruct a Decimal from a string:\")\rnum_str = decimal.Decimal(\"123.25\")\rprint(num_str)\rprint(num_str.as_tuple())\r", "nl": "Write a Python program to construct a Decimal from a float and a Decimal from a string. Also represent the Decimal value as a tuple. Use decimal.Decimal"}
{"code": "import array as arr\rdef test(nums):\r    return sorted(set(nums),key=nums.index)\r\rarray_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])\rprint(\"Original array:\")\rfor i in range(len(array_num)):    \r    print(array_num[i], end=' ')\rprint(\"\\nAfter removing duplicate elements from the said array:\")\rresult = arr.array('i', test(array_num))\rfor i in range(len(result)):    \r    print(result[i], end=' ')\rarray_num = arr.array('i', [2, 4, 2, 6, 4, 8])\rprint(\"\\nOriginal array:\")\rfor i in range(len(array_num)):    \r    print(array_num[i], end=' ')\rprint(\"\\nAfter removing duplicate elements from the said array:\")\rresult = arr.array('i', test(array_num))\rfor i in range(len(result)):    \r    print(result[i], end=' ')\r", "nl": "Write a Python program to remove all duplicate elements from a given array and returns a new array. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,\"--\",70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,\"?\",12.43,2480.4,250.45, 3045.6],\r'ord_date': ['?','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,\"--\",3002,3001,3001],\r'salesman_id':[5002,5003,\"?\",5001,np.nan,5002,5001,\"?\",5003,5002,5003,\"--\"]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nReplace the missing values with NaN:\")\rresult = df.replace({\"?\": np.nan, \"--\": np.nan})\rprint(result)\r", "nl": "Write a Pandas program to find and replace the missing values in a given DataFrame which do not have any valuable information. "}
{"code": "def find_last_index(lst, fn):\r  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))\r\rprint(find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1))\r", "nl": "Write a Python program to find the index of the last element in the given list that satisfies the provided testing function. "}
{"code": "def pairwise(l1):\r    temp = []\r    for i in range(len(l1) - 1):\r        current_element, next_element = l1[i], l1[i + 1]\r        x = (current_element, next_element)\r        temp.append(x)\r    return temp\rl1 = [1,1,2,3,3,4,4,5]\rprint(\"Original lists:\")\rprint(l1)\rprint(\"\\nIterate over all pairs of consecutive items of the said list:\")\rprint(pairwise(l1))\r", "nl": "Write a Python program to iterate over all pairs of consecutive items in a given list. "}
{"code": "from collections import Counter\rdef filter_non_unique(lst):\r  return [item for item, count in Counter(lst).items() if count == 1]\rprint(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))\r", "nl": "Write a Python program to create a list with the non-unique values filtered out. "}
{"code": "def second_smallest(numbers):\r  if (len(numbers)<2):\r    return\r  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r    return\r  dup_items = set()\r  uniq_items = []\r  for x in numbers:\r    if x not in dup_items:\r      uniq_items.append(x)\r      dup_items.add(x)\r  uniq_items.sort()    \r  return  uniq_items[1]   \r\rprint(second_smallest([1, 2, -8, -2, 0, -2]))\rprint(second_smallest([1, 1, 0, 0, 2, -2, -2]))\rprint(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))\rprint(second_smallest([2,2]))\rprint(second_smallest([2]))\r", "nl": "Write a Python program to find the second smallest number in a list. "}
{"code": "import collections\r# Create a deque\rdeque_colors = collections.deque([\"Red\",\"Green\",\"White\"])\rprint(deque_colors)\r# Append to the left\rprint(\"\\nAdding to the left: \")\rdeque_colors.appendleft(\"Pink\")\rprint(deque_colors)\r# Append to the right\rprint(\"\\nAdding to the right: \")\rdeque_colors.append(\"Orange\")\rprint(deque_colors)\r# Remove from the right\rprint(\"\\nRemoving from the right: \")\rdeque_colors.pop()\rprint(deque_colors)\r# Remove from the left\rprint(\"\\nRemoving from the left: \")\rdeque_colors.popleft()\rprint(deque_colors)\r# Reverse the dequeue\rprint(\"\\nReversing the deque: \")\rdeque_colors.reverse()\rprint(deque_colors)\r", "nl": "Write a Python program to create a deque and append few elements to the left and right, then remove some elements from the left, right sides and reverse the deque. "}
{"code": "def count_integer(list1):\r    ert = list(map(lambda i: isinstance(i, float), list1)) \r    result = len([e for e in ert if e])         \r    return result\rlist1 = [1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nNumber of floats in the said mixed list:\")\rprint(count_integer(list1))\r", "nl": "Write a Python program to count float number in a given mixed list using lambda. "}
{"code": "import numpy as np\rimport matplotlib.pyplot as plt\rnums = np.array([0.5, 0.7, 1.0, 1.2, 1.3, 2.1])\rbins = np.array([0, 1, 2, 3])\rprint(\"nums: \",nums)\rprint(\"bins: \",bins)\rprint(\"Result:\", np.histogram(nums, bins))\rplt.hist(nums, bins=bins)\rplt.show()\r", "nl": "Write a NumPy program to compute the histogram of nums against the bins. "}
{"code": "def test(str1):\r    result = [int(str1) for str1 in str1.split() if str1.isdigit()]\r    return result\rstr1 = \"red 12 black 45 green\" \rprint(\"Original string:\", str1) \rprint(\"Extract numbers from the said string:\")\rprint(test(str1))\r", "nl": "Write a Python program to extract numbers from a given string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = pd.cut(df['age'], [0, 10, 30, 60, 80])\rprint(result)\r", "nl": "Write a Pandas program to partition each of the passengers into four categories based on their age. "}
{"code": "import numpy as np\rarray_nums1 = np.arange(20).reshape(4,5)\rprint(\"Original arrays:\")\rprint(array_nums1)\rresult = array_nums1[(array_nums1>6) & (array_nums1%3==0)]\rprint(\"\\nItems greater than 6 and a multiple of 3 of the said array:\")\rprint(result)\r", "nl": "Write a NumPy program to fetch all items from a given array of 4,5 shape which are either greater than 6 and a multiple of 3. "}
{"code": "from collections import defaultdict   \r\rdef find_sub_string(str): \r    str_len = len(str) \r      \r    # Count all distinct characters. \r    dist_count_char = len(set([x for x in str])) \r  \r    ctr, start_pos, start_pos_index, min_len = 0, 0, -1, 9999999999\r    curr_count = defaultdict(lambda: 0) \r    for i in range(str_len): \r        curr_count[str[i]] += 1\r \r        if curr_count[str[i]] == 1: \r            ctr += 1\r  \r        if ctr == dist_count_char: \r            while curr_count[str[start_pos]] > 1: \r                if curr_count[str[start_pos]] > 1: \r                    curr_count[str[start_pos]] -= 1\r                start_pos += 1\r  \r            len_window = i - start_pos + 1\r            if min_len > len_window: \r                min_len = len_window \r                start_pos_index = start_pos \r    return str[start_pos_index: start_pos_index + min_len] \r      \rstr1 = \"asdaewsqgtwwsa\"\rprint(\"Original Strings:\\n\",str1)\rprint(\"\\nSmallest window that contains all characters of the said string:\")\rprint(find_sub_string(str1)) \r", "nl": "Write a Python program to find smallest window that contains all characters of a given string. "}
{"code": "'''Days of the week'''\r# Source:https://bit.ly/30NoXF8\r \rfrom datetime import date\rfrom itertools import islice\r \r \r# xmasIsSunday :: Int -> Bool\rdef xmasIsSunday(y):\r    '''True if Dec 25 in the given year is a Sunday.'''\r    return 6 == date(y, 12, 25).weekday()\r \r \r# main :: IO ()\rdef main():\r    '''Years between 2000 and 2150 with 25 December on a Sunday'''\r \r    xs = list(filter(\r        xmasIsSunday,\r        enumFromTo(2000)(2150)\r    ))\r    total = len(xs)\r    print(\r        fTable(main.__doc__ + ':\\n\\n' + '(Total ' + str(total) + ')\\n')(\r            lambda i: str(1 + i)\r        )(str)(index(xs))(\r            enumFromTo(0)(total - 1)\r        )\r    )\r \r \r# GENERIC -------------------------------------------------\r \r# enumFromTo :: (Int, Int) -> [Int]\rdef enumFromTo(m):\r    '''Integer enumeration from m to n.'''\r    return lambda n: list(range(m, 1 + n))\r \r \r# index (!!) :: [a] -> Int -> a\rdef index(xs):\r    '''Item at given (zero-based) index.'''\r    return lambda n: None if 0 > n else (\r        xs[n] if (\r            hasattr(xs, \"__getitem__\")\r        ) else next(islice(xs, n, None))\r    )\r \r \r# unlines :: [String] -> String\rdef unlines(xs):\r    '''A single string formed by the intercalation\r       of a list of strings with the newline character.\r    '''\r    return '\\n'.join(xs)\r \r \r#  FORMATTING ---------------------------------------------\r# fTable :: String -> (a -> String) ->\r#                     (b -> String) -> (a -> b) -> [a] -> String\rdef fTable(s):\r    '''Heading -> x display function -> fx display function ->\r                     f -> xs -> tabular string.\r    '''\r    def go(xShow, fxShow, f, xs):\r        ys = [xShow(x) for x in xs]\r        w = max(map(len, ys))\r        return s + '\\n' + '\\n'.join(map(\r            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),\r            xs, ys\r        ))\r    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(\r        xShow, fxShow, f, xs\r    ) \r \r# MAIN --\rif __name__ == '__main__':\r    main()\r", "nl": "Write a Python program to find the years where 25th of December be a Sunday between 2000 and 2150. "}
{"code": "filename = input(\"Input the Filename: \")\rf_extns = filename.split(\".\")\rprint (\"The extension of the file is : \" + repr(f_extns[-1]))\r", "nl": "Write a Python program to accept a filename from the user and print the extension of that. "}
{"code": "import numpy as np\rimport os\rx = np.arange(10)\ry = np.arange(11, 20)\rprint(\"Original arrays:\")\rprint(x)\rprint(y)\rnp.savez('temp_arra.npz', x=x, y=y)\rprint(\"Load arrays from the 'temp_arra.npz' file:\")\rwith np.load('temp_arra.npz') as data:\r    x2 = data['x']\r    y2 = data['y']\r    print(x2)\r    print(y2)\r", "nl": "Write a NumPy program to save two given arrays into a single file in compressed format (.npz format) and load it. "}
{"code": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\rprint(\"Original list:\")\rprint(nums)\rnums[6:10], nums[1:3] = nums[1:3], nums[6:10]\rprint(\"\\nSwap two sublists of the said list:\")\rprint(nums)\rnums[1:3], nums[4:6] = nums[4:6], nums[1:3]\rprint(\"\\nSwap two sublists of the said list:\")\rprint(nums)\r", "nl": "Write a Python program to swap two sublists in a given list. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\r\rdf1 = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nUpper cases in comapny_code:\")\rdf['upper_company_code'] = list(map(lambda x: x.upper(), df['company_code']))\rprint(df)\rprint(\"\\nLower cases in comapny_code:\")\rdf1['lower_company_code'] = list(map(lambda x: x.lower(), df1['company_code']))\rprint(df1)\r", "nl": "Write a Pandas program to convert a specified character column in upper/lower cases in a given DataFrame. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.array((1,2,3))\ry = np.array((2,3,4))\rprint(\"Array-1\")\rprint(x)\rprint(\"Array-2\")\rprint(y)\rnew_array =  np.column_stack((x, y))\rprint(\"\\nStack 1-D arrays as columns wise:\")\rprint(new_array)\r", "nl": "Write a NumPy program to stack 1-D arrays as columns wise. "}
{"code": "import numpy as np\ra = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)\rprint(\"Original array:\")\rprint(a)\rL = np.linalg.cholesky(a)\rprint(\"Lower-trianglular L in the Cholesky decomposition of the said array:\")\rprint(L)\r", "nl": "Write a NumPy program to get the lower-triangular L in the Cholesky decomposition of a given array. "}
{"code": "def unique_values_in_list_of_lists(lst):\r    result = set(x for l in lst for x in l)\r    return list(result)\rnums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]\rprint(\"Original list:\")\rprint(nums)\rprint(\"Unique values of the said list of lists:\")\rprint(unique_values_in_list_of_lists(nums))\rchars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]\rprint(\"\\nOriginal list:\")\rprint(chars)\rprint(\"Unique values of the said list of lists:\")\rprint(unique_values_in_list_of_lists(chars))\r", "nl": "Write a Python program to get the unique values in a given list of lists. "}
{"code": "import numpy as np\rm = np.array([[1,2],[3,4]])\rprint(\"Original matrix:\")\rprint(m)\rresult =  np.linalg.cond(m)\rprint(\"Condition number of the said matrix:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the condition number of a given matrix. "}
{"code": "import itertools      \rd ={'1':['a','b'], '2':['c','d']}\rfor combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\r    print(''.join(combo))\r\t", "nl": "Write a Python program to create and display all combinations of letters, selecting each letter from a different key in a dictionary. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFiltering records by label or index:\")\rprint(w_a_con.loc[0:4, [\"WHO region\", \"Beverage Types\"]])\r", "nl": "Write a Pandas program to filter the specified columns and records by range from world alcohol consumption dataset. "}
{"code": "import numpy as np\rarr1 = np.array([1,2,3, 2,4,6, 1,2,12, 0,-12,6])\rprint(\"Original array:\")\rprint(arr1)\rresult = np.mean(arr1.reshape(-1, 3), axis=1)\rprint(\"Average of every consecutive triplet of elements of the said array:\")\rprint(result)\r", "nl": "Write a NumPy program to create a new array which is the average of every consecutive triplet of elements of a given array. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rcloned = a.clone()\rprint(\"\\nCloned datetime:\")\rprint(cloned)\r", "nl": "Write a Python program to create a new Arrow object, cloned from the current one. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nLength of sale_amount:\")\rdf['sale_amount_length'] = df['sale_amount'].map(str).apply(len)\rprint(df)\r", "nl": "Write a Pandas program to get the length of the integer of a given column in a DataFrame. "}
{"code": "import os\rpath = 'e:\\\\testpath\\\\p.txt'\rfd = os.open(path, os.O_RDWR)\rinfo = os.fstat(fd)\rprint (f\"ID of device containing file: {info.st_dev}\")\rprint (f\"Inode number: {info.st_ino}\")\rprint (f\"Protection: {info.st_mode}\")\rprint (f\"Number of hard links: {info.st_nlink}\")\rprint (f\"User ID of owner: {info.st_uid}\")\rprint (f\"Group ID of owner: {info.st_gid}\")\rprint (f\"Total size, in bytes: {info.st_size}\")\rprint (f\"Time of last access: {info.st_atime}\")\rprint (f\"Time of last modification: {info.st_mtime }\")\rprint (f\"Time of last status change: {info.st_ctime }\")\ros.close( fd)\r", "nl": "Write a Python program to get information about the file pertaining to the file mode. Print the information - ID of device containing file, inode number, protection, number of hard links, user ID of owner, group ID of owner, total size (in bytes), time of last access, time of last modification and time of last status change. "}
{"code": "def test(flat_dict):\r  return list(flat_dict.values())\rstudents = {\r  'Theodore': 19,\r  'Roxanne': 20,\r  'Mathew': 21,\r  'Betty': 20\r}\rprint(\"\\nOriginal dictionary elements:\")\rprint(students)\rprint(\"\\nCreate a flat list of all the values of the said flat dictionary:\")\rprint(test(students))\r", "nl": "Write a Python program to create a flat list of all the values in a flat dictionary. "}
{"code": "items = []\rfor i in range(100, 401):\r    s = str(i)\r    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):\r        items.append(s)\rprint( \",\".join(items))\r", "nl": "rite a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence."}
{"code": "models = [{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':'2', 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}]\rprint(\"Original list of dictionaries :\")\rprint(models)\rsorted_models = sorted(models, key = lambda x: x['color'])\rprint(\"\\nSorting the List of dictionaries :\")\rprint(sorted_models)\r", "nl": "Write a Python program to sort a list of dictionaries using Lambda. "}
{"code": "import numpy as np\rx= np.random.random((3,3))\rprint(\"Original Array:\")\rprint(x)\rxmax, xmin = x.max(), x.min()\rx = (x - xmin)/(xmax - xmin)\rprint(\"After normalization:\")\rprint(x)\r", "nl": "Write a NumPy program to normalize a 3x3 random matrix. "}
{"code": "import numpy as np\ra = np.array([[4, 12, -14], [12, 37, -53], [-14, -53, 98]], dtype=np.int32)\rprint(\"Original array:\")\rprint(a)\rq, r = np.linalg.qr(a)\rprint(\"qr factorization of the said array:\")\rprint( \"q=\\n\", q, \"\\nr=\\n\", r)\r", "nl": "Write a NumPy program to get the qr factorization of a given array. "}
{"code": "from itertools import product\rdef all_repeat(str1, rno):\r  chars = list(str1)\r  results = []\r  for c in product(chars, repeat = rno):\r    results.append(c)\r  return results\rprint(all_repeat('xyz', 3))\rprint(all_repeat('xyz', 2))\rprint(all_repeat('abcd', 4))\r", "nl": "Write a Python program to print all permutations with given repetition number of characters of a given string. "}
{"code": "#x = ['a', 'b', 'c', 'd']\r#x = {'a', 'b', 'c', 'd'}\rx = ('tuple', False, 3.2, 1)\rif type(x) is list:\r    print('x is a list')\relif type(x) is set:\r    print('x is a set')\relif type(x) is tuple:\r    print('x is a tuple')    \relse:\r    print('Neither a list or a set or a tuple.')\r", "nl": "Write a Python program to test if a variable is a list or tuple or a set. "}
{"code": "import itertools\rdef combinations_list(list1):\r    temp = []\r    for i in range(0,len(list1)+1):\r        temp.append(list(itertools.combinations(list1,i)))\r    return temp\r\rcolors = ['orange', 'red', 'green', 'blue']\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nAll possible combinations of the said list\u2019s elements:\")\rprint(combinations_list(colors))\r", "nl": "Write a Python program to get all possible combinations of the elements of a given list using itertools module. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nReplace NaNs with a single constant value:\")\rresult = df['ord_no'].fillna(0, inplace=False)\rprint(result)\r", "nl": "Write a Pandas program to replace NaNs with a single constant value in specified columns in a DataFrame. "}
{"code": "def count_occurrences(nums):\r    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))\r    return result\rnums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nCount the occurrences of the items in the said list:\")\rprint(count_occurrences(nums))\r", "nl": "Write a Python program to count the occurrences of the items in a given list using lambda. "}
{"code": "import numpy as np\rrand_num = np.random.normal(0,1,15)\rprint(\"15 random numbers from a standard normal distribution:\")\rprint(rand_num)\r", "nl": "Write a NumPy program to generate an array of 15 random numbers from a standard normal distribution. "}
{"code": "def sum_series(n):\r  if n < 1:\r    return 0\r  else:\r    return n + sum_series(n - 2)\r\rprint(sum_series(6))\rprint(sum_series(10))\r", "nl": "Write a Python program to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-4-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Open', 'Close']]\rdf3 = df2.set_index('Date')\rplt.figure(figsize=(20,20))\rdf3.plot.barh(stacked=True)\rplt.suptitle('Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a horizontal stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. "}
{"code": "import pandas as pd\rprint(\"Create a dataframe, indexing by date and time:\")\r\rdt_range = pd.date_range(start ='2020-05-12 07:10:10', freq ='S', periods = 10) \rdf_dt = pd.DataFrame({\"Sale_amt\":[100, 110, 117, 150, 112, 99, 129, 135, 140, 150]},\r                            index = dt_range)\rprint(df_dt)\r", "nl": "Write a Pandas program to create a dataframe indexing by date and time. "}
{"code": "import pandas as pd\rindex = pd.DatetimeIndex(['2011-09-02', '2012-08-04',\r                          '2015-09-03', '2010-08-04',\r                          '2015-03-03', '2011-08-04',\r                          '2015-04-03', '2012-08-04'])\r\rs_dates = pd.Series([0, 1, 2, 3, 4, 5, 6, 7], index=index)\r\rprint(\"Time series object with indexed data:\")\rprint(s_dates)\rprint(\"\\nDates of same year:\")\rprint(s_dates['2015'])\rprint(\"\\nDates between 2012-01-01 and 2012-12-31\")\rprint(s_dates['2012-01-01':'2012-12-31']) \r", "nl": "Write a Pandas program to create a time series object that has time indexed data. Also select the dates of same year and select the dates between certain dates. "}
{"code": "import numpy as np\rx = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rlstripped_char = np.char.lstrip(x)\rprint(\"\\nRemove the leading whitespaces : \", lstripped_char)\r", "nl": "Write a NumPy program to remove the leading whitespaces of all the elements of a given array. "}
{"code": "color = [(\"Black\", \"#000000\", \"rgb(0, 0, 0)\"), (\"Red\", \"#FF0000\", \"rgb(255, 0, 0)\"),\r         (\"Yellow\", \"#FFFF00\", \"rgb(255, 255, 0)\")]\rvar1, var2, var3 = color\rprint(var1)\rprint(var2)\rprint(var3)\r", "nl": "Write a Python program to split a list into different variables. "}
{"code": "import itertools as it\rdef sum_pairs_list(nums, n):\r    for num2, num1 in list(it.combinations(nums[::-1], 2))[::-1]:\r        if num2 + num1 == n:\r            return [num1, num2]\r\rnums = [1,2,3,4,5,6,7]     \rn = 10\rprint(\"Original list:\",nums,\": Given value:\",n)   \rprint(\"Sum of pair equal to \",n,\"=\",sum_pairs_list(nums,n))\r\rnums = [1,2,-3,-4,-5,6,-7]     \rn = -6\rprint(\"Original list:\",nums,\": Given value:\",n)   \rprint(\"Sum of pair equal to \",n,\"=\",sum_pairs_list(nums,n))\r", "nl": "Write a Python program to find the first two elements of a given list whose sum is equal to a given value. Use itertools module to solve the problem. "}
{"code": "import pandas as pd\rprint(\"Create an Int64Index:\")\rdf_i64 = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=[1, 2, 3, 4, 5, 6])\rprint(df_i64)\rprint(\"\\nView the Index:\")\rprint(df_i64.index)\r\rprint(\"\\nFloating-point labels using Float64Index:\")\rdf_f64 = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=[.1, .2, .3, .4, .5, .6])\rprint(df_f64)\rprint(\"\\nView the Index:\")\rprint(df_f64.index)\r", "nl": "Write a Pandas program to create an index labels by using 64-bit integers, using floating-point numbers in a given dataframe. "}
{"code": "import numpy as np\rx= np.arange(6).reshape(3, 2)\rprint(\"Original array elements:\")\rprint(x)\rprint(\"Array to list:\")\rprint(x.tolist())\r", "nl": "Write a NumPy program to convert a NumPy array into Python list structure. "}
{"code": "import collections\rtup1 = (1,3,5,7,9)\rdq1 = collections.deque(tup1)\rdq2 = dq1.copy()\rprint(\"Content of dq1:\")\rprint(dq1)\rprint(\"dq2 id:\")\rprint(id(dq1))\rprint(\"\\nContent of dq2:\")\rprint(dq2)\rprint(\"dq2 id:\")\rprint(id(dq2))\rprint(\"\\nChecking the first element of dq1 and dq2 are shallow copies:\")\rprint(id(dq1[0]))\rprint(id(dq2[0]))\r", "nl": "Write a Python program to copy of a deque object and verify the shallow copying process. "}
{"code": "from collections import OrderedDict\rdict = {'Afghanistan': 93, 'Albania': 355, 'Algeria': 213, 'Andorra': 376, 'Angola': 244}\rnew_dict = OrderedDict(dict.items())\rfor key in new_dict:\r    print (key, new_dict[key])\r\rprint(\"\\nIn reverse order:\")\rfor key in reversed(new_dict):\r    print (key, new_dict[key])\r", "nl": "Write a Python program to create an instance of an OrderedDict using a given dictionary. Sort the dictionary during the creation and print the members of the dictionary in reverse order. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"title\")\rprint(soup.title)\rprint(\"title text\")\rprint(soup.title.text)\rprint(\"Parent content of the title:\")\rprint(soup.title.parent)\r", "nl": "Write a Python program to retrieve the HTML code of the title, its text, and the HTML code of its parent. "}
{"code": "from random import shuffle\rcolor = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\rshuffle(color)\rprint(color)\r", "nl": "Write a Python program to shuffle and print a specified list. "}
{"code": "import numpy as np\rmy_array = np.arange(12).reshape(3, 4)\rprint(\"Original array:\")\rprint(my_array)\rmy_array[:,[0, 1]] = my_array[:,[1, 0]]\rprint(\"\\nAfter swapping arrays:\")\rprint(my_array)\r", "nl": "Write a NumPy program to swap columns in a given array. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details in the year \u20181986\u2019 or \u20181989\u2019 where  WHO region is \u2018Americas\u2019  or 'Europe':\")\rprint(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))].head(10))\r", "nl": "Write a Pandas program to find out the alcohol consumption details in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. "}
{"code": "import numpy as np \rnums = np.random.random((7, 5))\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nDelete the first column of the said array:\")\rprint(np.delete(nums, [0], axis=1))\rprint(\"\\nDelete the last column of the said array:\")\rprint(np.delete(nums, [4], axis=1))\r", "nl": "Write a NumPy program to remove a specific column from a given array. "}
{"code": "import pandas as pd\rseries1 = pd.Series(['php', 'python', 'java', 'c#'])\rprint(\"Original Series:\")\rprint(series1)\rresult = series1.map(lambda x: x[0].upper() + x[1:-1] + x[-1].upper())\rprint(\"\\nFirst and last character of each word to upper case:\")\rprint(result)\r", "nl": "Write a Pandas program convert the first and last character of each word to upper case in each word of a given series. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current date and time:\")\rprint(a)\rprint(\"\\nReplace hour and minute with 5 and 35:\")\rprint(a.replace(hour=5, minute=35))\rprint(\"\\nReplace day with 2:\")\rprint(a.replace(day=2))\rprint(\"\\nReplace year with 2021:\")\rprint(a.replace(year=2021))\rprint(\"\\nReplace month with 11:\")\rprint(a.replace(month=11)) \rprint(\"\\nReplace timezone with 'US/Pacific:\")\rprint(a.replace(tzinfo='US/Pacific'))\r", "nl": "Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. "}
{"code": "import numpy as np\rx = np.random.randint(0, 11, 5)\rprint(\"Vector of length 5 filled with arbitrary integers from 0 to 10:\")\rprint(x)\r", "nl": "Write a NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rdf.insert(3, \"column1\", np.nan)\rprint(df.head) \r", "nl": "Write a Pandas program to insert a column in the sixth position of the said excel sheet and fill it with NaN values. "}
{"code": "import pandas as pd\rs = pd.Series(['100', '200', 'python', '300.12', '400'])\rprint(\"Original Data Series:\")\rprint(s)\rnew_s = pd.Series(s).sort_values()\rprint(new_s)\r", "nl": "Write a Pandas program to sort a given Series. "}
{"code": "def add_without_plus_operator(a, b):\r    while b != 0:\r        data = a & b\r        a = a ^ b\r        b = data << 1\r    return a\rprint(add_without_plus_operator(2, 10))\rprint(add_without_plus_operator(-20, 10))\rprint(add_without_plus_operator(-10, -20))\r", "nl": "Write a Python program to add two positive integers without using the '+' operator. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nPlot to present the number unidentified flying objects (ufo) found year wise:\")\rdf[\"Year\"] = df.Date_time.dt.year\rdf.Year.value_counts().sort_index().plot(x=\"Year\")\r", "nl": "Write a Pandas program to create a plot to present the number of unidentified flying object (UFO) reports per year. "}
{"code": "def comb_sort(nums):\r    shrink_fact = 1.3\r    gaps = len(nums)\r    swapped = True\r    i = 0\r\r    while gaps > 1 or swapped:\r        gaps = int(float(gaps) / shrink_fact)\r\r        swapped = False\r        i = 0\r\r        while gaps + i < len(nums):\r            if nums[i] > nums[i+gaps]:\r                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r                swapped = True\r            i += 1\r    return nums\r\rnum1 = input('Input comma separated numbers:\\n').strip()\rnums = [int(item) for item in num1.split(',')]\rprint(comb_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Comb sort. "}
{"code": "from itertools import combinations\rfrom heapq import nlargest\r\rdef test(lst):\r    result = nlargest(1, combinations(lst, 2),\r               key=lambda sub: abs(sub[0] - sub[1]))\r    return result\r\rmarks = [32,14,90,10,22,42,31]\rprint(\"\\nOriginal list:\")\rprint(marks)\rprint(\"\\nFind maximum difference pair of the said list:\")\rprint(test(marks))\r", "nl": "Write a Python program to find maximum difference pair in a given list. "}
{"code": "def move_end(nums, offset):\r  return nums[offset:] + nums[:offset] \rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))\rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))\rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], 8))\rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], -8))\rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], 7))\rprint(move_end([1, 2, 3, 4, 5, 6, 7, 8], -7))\r", "nl": "Write a Python program to move the specified number of elements to the end of the given list. "}
{"code": "from collections import OrderedDict\rcolor_orderdict = OrderedDict([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) \rprint(\"Original OrderedDict:\")\rprint(color_orderdict)\rprint(\"Insert an element at the beginning of the said OrderedDict:\")\rcolor_orderdict.update({'color4':'Orange'})\rcolor_orderdict.move_to_end('color4', last = False)\rprint(\"\\nUpdated OrderedDict:\")\rprint(color_orderdict)\r", "nl": "Write a Python program to insert an element at the beginning of a given OrderedDictionary. "}
{"code": "x = 3.1415926\ry = 12.9999\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number: \"+\"{:.2f}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number: \"+\"{:.2f}\".format(y));\rprint() \r", "nl": "Write a Python program to print the following floating numbers upto 2 decimal places. "}
{"code": "def specified_element(nums, N):\r    result = [i[N] for i in nums]\r    return result\r    \rnums = [\r        [1,2,3,2],\r        [4,5,6,2],\r        [7,1,9,5],\r       ]\r    \rprint(\"Original list of lists:\")\rprint(nums)\rN = 0\rprint(\"\\nExtract every first element from the said given two dimensional list:\")\rprint(specified_element(nums, N))\rN = 2\rprint(\"\\nExtract every third element from the said given two dimensional list:\")\rprint(specified_element(nums, N))\r", "nl": "Write a Python program to extract every first or specified element from a given two-dimensional list. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nProleptic Gregorian ordinal of the date:\")\rprint(arrow.utcnow().toordinal())\r", "nl": "Write a Python program to get the proleptic Gregorian ordinal of a given date. "}
{"code": "d = {'Red': 1, 'Green': 2, 'Blue': 3} \rfor color_key, value in d.items():\r     print(color_key, 'corresponds to ', d[color_key]) \r", "nl": "Write a Python program to iterate over dictionaries using for loops. "}
{"code": "#Ref.https://bit.ly/3pk7iPH\rdef stooge_sort(arr):\r    stooge(arr, 0, len(arr) - 1)\r    return arr\rdef stooge(arr, i, h):\r    if i >= h:\r        return\r    # If first element is smaller than the last then swap them\r    if arr[i] > arr[h]:\r        arr[i], arr[h] = arr[h], arr[i]\r    # If there are more than 2 elements in the array\r    if h - i + 1 > 2:\r        t = (int)((h - i + 1) / 3)\r        # Recursively sort first 2/3 elements\r        stooge(arr, i, (h - t))\r        # Recursively sort last 2/3 elements\r        stooge(arr, i + t, (h))\r        # Recursively sort first 2/3 elements\r        stooge(arr, i, (h - t))\rlst = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying  Stooge sort the said list becomes:\")\rprint(stooge_sort(lst))\rlst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Stooge sort the said list becomes:\")\rprint(stooge_sort(lst))\rlst = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Stooge sort the said list becomes:\")\rprint(stooge_sort(lst))\r", "nl": "Write a Python program to sort unsorted numbers using Stooge sort. "}
{"code": "array_nums = [-1, 2, -3, 5, 7, 8, 9, -10]\rprint(\"Original arrays:\")\rprint(array_nums)\rresult = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\rprint(\"\\nRearrange positive and negative numbers of the said array:\")\rprint(result)\r", "nl": "Write a Python program to rearrange positive and negative numbers in a given array using Lambda. "}
{"code": "n=1\rif n == 1:\r   print(\"\\nFirst day of a Month!\")\rprint()\r", "nl": "Write a Python program to perform an action if a condition is true. "}
{"code": "import itertools\r\rdef max_sub_string(str1):\r    return max(len(list(x)) for _, x in itertools.groupby(str1))\r    \r    \rstr1 = \"aaabbccddeeeee\"\r\rprint(\"Original string:\",str1)\rprint(\"Maximum length of a substring with unique characters of the said string:\")\rprint(max_sub_string(str1))\r\rstr1 = \"c++ exercises\"\rprint(\"\\nOriginal string:\",str1)\rprint(\"Maximum length of a substring with unique characters of the said string:\")\rprint(max_sub_string(str1))\r", "nl": "Write a Python program to find the maximum length of a substring in a given string where all the characters of the substring are same. Use itertools module to solve the problem. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rresult = df[(df['hire_date'] >='Jan-2005') & (df['hire_date'] <= 'Dec-2006')].head()\rresult\r", "nl": "Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date between two specific month and year. "}
{"code": "def long_words(n, str):\r    word_len = []\r    txt = str.split(\" \")\r    for x in txt:\r        if len(x) > n:\r            word_len.append(x)\r    return word_len\t\rprint(long_words(3, \"The quick brown fox jumps over the lazy dog\"))\r", "nl": "Write a Python program to find the list of words that are longer than n from a given list of words. "}
{"code": "import string, os\rif not os.path.exists(\"letters\"):\r   os.makedirs(\"letters\")\rfor letter in string.ascii_uppercase:\r   with open(letter + \".txt\", \"w\") as f:\r       f.writelines(letter)\r", "nl": "Write a Python program to generate 26 text files named A.txt, B.txt, and so on up to Z.txt. "}
{"code": "import numpy as np \rstudent = \"\"\"01\tV\tDebby Pramod\r02\tV\tArtemiy Ellie\r03\tV\tBaptist Kamal\r04\tV\tLavanya Davide\r05\tV\tFulton Antwan\r06\tV\tEuanthe Sandeep\r07\tV\tEndzela Sanda\r08\tV\tVictoire Waman\r09\tV\tBriar Nur\r10\tV\tRose Lykos\"\"\"\r\rprint(\"Original text:\") \rprint(student)\rtext_lines = student.splitlines()\rtext_lines = [r.split('\\t') for r in text_lines]\rresult = np.array(text_lines, dtype=np.str)\rprint(\"\\nArray from the said text:\")\rprint(result)\r", "nl": "Write a NumPy program to split a given text into lines and split the single line into array values. "}
{"code": "import time\rimport numpy as np \rSIZE = 200000 \rlist1 = range(SIZE)\rlist2 = range(SIZE)\rarra1 = np.arange(SIZE)\rarra2 = np.arange(SIZE)\rstart_list = time.time()\rresult=[(x,y) for x,y in zip(list1,list2)]\rprint(\"Time to aggregates elements from each of the iterables:\")\rprint(\"List:\")\rprint((time.time()-start_list)*1000)\rstart_array = time.time()\rresult = arra1 + arra2\rprint(\"NumPy array:\")\rprint((time.time()-start_array)*1000)\r", "nl": "Write a Numpy program to test whether numpy array is faster than Python list or not. "}
{"code": "def insert_elemnt_nth(lst, ele, n):\r    result = []\r    for st_idx in range(0, len(lst), n):\r        result.extend(lst[st_idx:st_idx+n])\r        result.append(ele)\r    result.pop()    \r    return result\r\rnums = [1,2,3,4,5,6,7,8,9,0]\rprint(\"Original list:\")\rprint(nums)\ri_ele = 'a'\ri_ele_pos = 2\rprint(\"\\nInsert\",i_ele,\"in the said list after\",i_ele_pos,\"nd element:\")\rprint(insert_elemnt_nth(nums, i_ele, i_ele_pos))\ri_ele = 'b'\ri_ele_pos = 4\rprint(\"\\nInsert\",i_ele,\"in the said list after\",i_ele_pos,\"th element:\")\rprint(insert_elemnt_nth(nums, i_ele, i_ele_pos))\r", "nl": "Write a Python program to insert an element in a given list after every nth position. "}
{"code": "import numpy as np  \rnums = np.arange(1, 21)\rprint(\"One-dimensional array of single digit numbers:\") \rprint(nums)\rnums = np.arange(10, 21)\rprint(\"\\nOne-dimensional array of two digit numbers:\") \rprint(nums)\rnums = np.arange(100, 201)\rprint(\"\\nOne-dimensional array of three digit numbers:\") \rprint(nums)\r", "nl": "Write a NumPy program to create one-dimensional array of single, two and three digit numbers. "}
{"code": "import numpy as np\rarray=np.arange(30,71,2)\rprint(\"Array of all the even integers from 30 to 70\")\rprint(array) \r", "nl": "Write a NumPy program to create an array of all the even integers from 30 to 70. "}
{"code": "def symmetric_difference(x, y):\r  (_x, _y) = (set(x), set(y))\r  return [item for item in x if item not in _y] + [item for item in y\r          if item not in _x]\rprint(symmetric_difference([10, 20, 30], [10, 20, 40]))\r", "nl": "Write a Python program to get the symmetric difference between two iterables, without filtering out duplicate values. "}
{"code": "import glob\rimport os\rwith open('a.txt', 'w') as f:\r   f.write('Python program to create a symbolic link and read it to decide the original file pointed by the link.')\rprint('\\nInitial file/dir name:', os.listdir())\rwith open('a.txt', 'r') as f:\r   print('\\nContents of a.txt:', repr(f.read()))   \ros.rename('a.txt', 'b.txt')\rprint('\\nAfter renaming initial file/dir name:', os.listdir())\rwith open('b.txt', 'r') as f:\r   print('\\nContents of b.txt:', repr(f.read()))\r", "nl": "Write a Python program to create a file and write some text and rename the file name. "}
{"code": "from re import sub\rdef snake_case(s):\r  return '-'.join(\r    sub(r\"(\\s|_|-)+\",\" \",\r    sub(r\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\",\r    lambda mo: ' ' + mo.group(0).lower(), s)).split())\r \rprint(snake_case('JavaScript'))\rprint(snake_case('GDScript'))\rprint(snake_case('BTW...what *do* you call that naming style? snake_case? '))\r", "nl": "Write a Python program to convert a given string to snake case. "}
{"code": "import numpy as np\rnums1 = np.random.randint(0,6,(6,4))\rnums2 = np.random.randint(0,6,(2,3))\rprint(\"Original arrays:\")\rprint(nums1)\rprint(\"\\n\",nums2)\rtemp = (nums1[..., np.newaxis, np.newaxis] == nums2)\rrows = (temp.sum(axis=(1,2,3)) >= nums2.shape[1]).nonzero()[0]\rprint(\"\\nRows of a given array that contain elements of each row of another given array:\")\rprint(rows)\r", "nl": "Write a NumPy program to find rows of a given array of shape (8,3) that contain elements of each row of another given array of shape (2,2). "}
{"code": "#Source: https://bit.ly/2SRefdb\rfrom bisect import bisect, bisect_left\rclass Solution:\r    def threeSumClosest(self, nums, target):\r        \"\"\"\r        :type nums: List[int]\r        :type target: int\r        :rtype: int\r        \"\"\"\r        nums = sorted(nums)\r        # Let top[i] be the sum of largest i numbers.\r        top = [\r            0,\r            nums[-1],\r            nums[-1] + nums[-2]\r        ]\r        min_diff = float('inf')\r        three_sum = 0\r        # Find range of the least number in curr_n (0, 1, 2 or 3)\r        # numbers that sum up to curr_target, then find range of \r        # 2nd least number and so on by recursion. \r        def closest(curr_target, curr_n, lo=0):\r            if curr_n == 0:\r                nonlocal min_diff, three_sum\r                if abs(curr_target) < min_diff:\r                    min_diff = abs(curr_target)\r                    three_sum = target - curr_target\r                return\r\r            next_n = curr_n - 1\r            max_i = len(nums) - curr_n\r            max_i = bisect(\r                nums, curr_target // curr_n,\r                lo, max_i)\r            min_i = bisect_left(\r                nums, curr_target - top[next_n],\r                lo, max_i) - 1\r            min_i = max(min_i, lo)\r\r            for i in range(min_i, max_i + 1): \r                if min_diff == 0:\r                    return\r                if i == min_i or nums[i] != nums[i - 1]:\r                    next_target = curr_target - nums[i]\r                    closest(next_target, next_n, i + 1)\r\r        closest(target, 3)\r        return three_sum\r\rs = Solution()\rnums = [1, 2, 3, 4, 5, -6]\rtarget = 14\rresult = s.threeSumClosest(nums, target)\rprint(\"\\nArray values & target value:\",nums,\"&\",target)\rprint(\"Sum of the integers closest to target:\", result)\r\rnums = [1, 2, 3, 4, -5, -6]\rtarget = 5\rresult = s.threeSumClosest(nums, target)\rprint(\"\\nArray values & target value:\",nums,\"&\",target)\rprint(\"Sum of the integers closest to target:\", result)\r", "nl": "Write a Python program to find a triplet in an array such that the sum is closest to a given number. Return the sum of the three integers. "}
{"code": "color_list = [\"Red\",\"Green\",\"White\" ,\"Black\"]\rprint( \"%s %s\"%(color_list[0],color_list[-1]))\r", "nl": "Write a Python program to display the first and last colors from the following list. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rstock_data = df1.set_index('Date')\rstock_data.plot(subplots = True, figsize = (8, 8));\rplt.legend(loc = 'best')\rplt.suptitle('Open,High,Low,Close,Adj Close prices & Volume of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a plot of Open, High, Low, Close, Adjusted Closing prices and Volume of Alphabet Inc. between two specific dates. "}
{"code": "# Definition: Binary tree node.\rclass TreeNode(object):\r    def __init__(self, x):\r         self.val = x\r         self.left = None\r         self.right = None\r\rdef delete_Node(root, key):\r  # if root doesn't exist, just return it\r\tif not root: \r\t\treturn root\r\t# Find the node in the left subtree\tif key value is less than root value\r\tif root.val > key: \r\t\troot.left = delete_Node(root.left, key)\r\t# Find the node in right subtree if key value is greater than root value, \r\telif root.val < key: \r\t\troot.right= delete_Node(root.right, key)\r\t# Delete the node if root.value == key\r\telse: \r\t# If there is no right children delete the node and new root would be root.left\r\t\tif not root.right:\r\t\t\treturn root.left\r\t# If there is no left children delete the node and new root would be root.right\t\r\t\tif not root.left:\r\t\t\treturn root.right\r  # If both left and right children exist in the node replace its value with \r  # the minmimum value in the right subtree. Now delete that minimum node\r  # in the right subtree\r\t\ttemp_val = root.right\r\t\tmini_val = temp_val.val\r\t\twhile temp_val.left:\r\t\t\ttemp_val = temp_val.left\r\t\t\tmini_val = temp_val.val\r  # Delete the minimum node in right subtree\r\t\troot.right = deleteNode(root.right,root.val)\r\treturn root\r\rdef preOrder(node): \r    if not node: \r        return      \r    print(node.val)\r    preOrder(node.left) \r    preOrder(node.right)   \r    \rroot = TreeNode(5)  \rroot.left = TreeNode(3)  \rroot.right = TreeNode(6) \rroot.left.left = TreeNode(2)  \rroot.left.right = TreeNode(4) \rroot.left.right.left = TreeNode(7)  \rprint(\"Original node:\")\rprint(preOrder(root))\rresult = delete_Node(root, 4)\rprint(\"After deleting specified node:\")\rprint(preOrder(result))\r", "nl": "Write a Python program to delete a node with the given key in a given Binary search tree (BST). "}
{"code": "from itertools import accumulate\rdef running_max_product(iters):\r    return accumulate(iters, max)\r#List\rresult = running_max_product([1,3,2,7,9,8,10,11,12,14,11,12,7])\rprint(\"Running maximum value of a list:\")\rfor i in result:\r    print(i)\r#Tuple\rresult = running_max_product((1,3,3,7,9,8,10,9,8,14,11,15,7))\rprint(\"Running maximum value of a Tuple:\")\rfor i in result:\r    print(i)\rdef running_min_product(iters):\r    return accumulate(iters, min)\r#List\rresult = running_min_product([3,2,7,9,8,10,11,12,1,14,11,12,7])\rprint(\"Running minimum value of a list:\")\rfor i in result:\r    print(i)\r#Tuple\rresult = running_min_product((1,3,3,7,9,8,10,9,8,0,11,15,7))\rprint(\"Running minimum value of a Tuple:\")\rfor i in result:\r    print(i)\r", "nl": "Write a Python program to generate the running maximum, minimum value of the elements of an iterable. "}
{"code": "import pandas as pd\rimport numpy as np\rsr1 = pd.Series([1, 2, 3, 4, 5])\rsr2 = pd.Series([2, 4, 6, 8, 10])\rprint(\"Original Series:\")\rprint(\"sr1:\")\rprint(sr1)\rprint(\"sr2:\")\rprint(sr2)\rprint(\"\\nItems of a given series not present in another given series:\")\rsr11 = pd.Series(np.union1d(sr1, sr2))\rsr22 = pd.Series(np.intersect1d(sr1, sr2))\rresult = sr11[~sr11.isin(sr22)]\rprint(result)\r", "nl": "Write a Pandas program to get the items which are not common of two given series. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFind  all columns which all entries present:\")\rprint(w_a_con.loc[:, w_a_con.notnull().all()])\rprint(\"\\nRows and columns has a NaN:\")\rprint(w_a_con.loc[:,w_a_con.isnull().any()])\rprint(\"\\nDrop rows with any NaNs:\")\rprint(w_a_con.dropna(how='any'))  \r", "nl": "Write a Pandas program to filter all columns where all entries present, check which rows and columns has a NaN and finally drop rows with any NaNs from world alcohol consumption dataset. "}
{"code": "import pandas as pd\rimport numpy as np\rx = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ry = pd.Series([11, 8, 7, 5, 6, 5, 3, 4, 7, 1])\rprint(\"Original series:\")\rprint(x)\rprint(y)\rprint(\"\\nEuclidean distance between two said series:\")\rprint(np.linalg.norm(x-y))\r", "nl": "Write a Pandas program to compute the Euclidean distance between two given series. "}
{"code": "import pandas as pd\rdata = {\\\r\"year\": [2002, 2003, 2015, 2018],\r\"day_of_the_year\": [250, 365, 1, 140]\r}\rdf = pd.DataFrame(data)\rprint(\"Original DataFrame:\")\rprint(df)\rdf[\"combined\"] = df[\"year\"]*1000 + df[\"day_of_the_year\"]\rdf[\"date\"] = pd.to_datetime(df[\"combined\"], format = \"%Y%j\")\rprint(\"\\nNew DataFrame:\")\rprint(df)\r", "nl": "Write a Pandas program to convert year and day of year into a single datetime column of a dataframe."}
{"code": "def odd_even_transposition(arr_nums: list) -> list:\r    arr_size = len(arr_nums)\r    for _ in range(arr_size):\r        for i in range(_ % 2, arr_size - 1, 2):\r            if arr_nums[i + 1] < arr_nums[i]:\r                arr_nums[i], arr_nums[i + 1] = arr_nums[i + 1], arr_nums[i]\r\r    return arr_nums\r            \rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rodd_even_transposition(nums)\rprint(\"Sorted order is:\", nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rodd_even_transposition(nums)\rprint(\"Sorted order is:\", nums)\r", "nl": "Write a Python program to sort unsorted numbers using non-parallelized implementation of odd-even transposition sort. "}
{"code": "import numpy as np \r\rstr1 = np.array([['Python-NumPy-Exercises'],\r              ['-Python-']])\rprint(\"Original array of string values:\") \rprint(str1)\rprint(\"\\nReplace '-' with '=' character in the said array of string values:\")\rprint(np.char.strip(np.char.replace(str1, '-', '==')))\rprint(\"\\nReplace '-' with ' ' character in the said array of string values:\")\rprint(np.char.strip(np.char.replace(str1, '-', ' ')))\r", "nl": "Write a NumPy program to replace a specific character with another in a given array of string values. "}
{"code": "def hex_to_rgb(hex):\r  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4)) \rprint(hex_to_rgb('FFA501'))\rprint(hex_to_rgb('FFFFFF'))\rprint(hex_to_rgb('000000'))\rprint(hex_to_rgb('FF0000'))\rprint(hex_to_rgb('000080'))\rprint(hex_to_rgb('C0C0C0'))\r", "nl": "Write a Python program to convert a hexadecimal color code to a tuple of integers corresponding to its RGB components. "}
{"code": "def tuples_to_list_string(lst):\r    result = list(map(' '.join, lst))\r    return result   \rcolors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]\rprint(\"Original list of tuples:\")\rprint(colors)\rprint(\"\\nConvert the said list of tuples to a list of strings:\")\rprint(tuples_to_list_string(colors))\rnames = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]\rprint(\"\\nOriginal list of tuples:\")\rprint(names)\rprint(\"\\nConvert the said list of tuples to a list of strings:\")\rprint(tuples_to_list_string(names))\r", "nl": "Write a Python program to convert a given list of tuples to a list of strings using map function. "}
{"code": "def is_contained_in(l1, l2):\r  for x in set(l1):\r    if l1.count(x) > l2.count(x):\r      return False\r  return True\rprint(is_contained_in([1, 2], [2, 4, 1]))\rprint(is_contained_in([1], [2, 4, 1]))\rprint(is_contained_in([1, 1], [4, 2, 1]))\rprint(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))\r", "nl": "Write a Python program to check if the elements of the first list are contained in the second one regardless of order. "}
{"code": "def histogram( items ):\r    for n in items:\r        output = ''\r        times = n\r        while( times > 0 ):\r          output += '*'\r          times = times - 1\r        print(output)\r\rhistogram([2, 3, 6, 5])\r", "nl": "Write a Python program to create a histogram from a given list of integers. "}
{"code": "datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],\r{\"class\":'V', \"section\":'A'}]\rfor item in datalist:\r   print (\"Type of \",item, \" is \", type(item))\r   ", "nl": "Write a Python program that prints each item and its corresponding type from the following list."}
{"code": "def find_index(nums, fn):\r  return next(i for i, x in enumerate(nums) if fn(x))\rprint(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))\r", "nl": "Write a Python program to find the index of the first element in the given list that satisfies the provided testing function. "}
{"code": "color_dict = {'red':'#FF0000',\r          'green':'#008000',\r          'black':'#000000',\r          'white':'#FFFFFF'}\r\rfor key in sorted(color_dict):\r    print(\"%s: %s\" % (key, color_dict[key]))\r\t", "nl": "Write a Python program to sort a given dictionary by key. "}
{"code": "from itertools import combinations \rdef unique_combinations_colors(list_data, n):\r    return [\" and \".join(items) for items in combinations(list_data, r=n)]\rcolors = [\"Red\",\"Green\",\"Blue\"]\rprint(\"Original List: \",colors)\rn=1\rprint(\"\\nn = 1\")\rprint(list(unique_combinations_colors(colors, n)))\rn=2\rprint(\"\\nn = 2\")\rprint(list(unique_combinations_colors(colors, n)))\rn=3\rprint(\"\\nn = 3\")\rprint(list(unique_combinations_colors(colors, n)))\r", "nl": "Write a Python program to chose specified number of colours from three different colours and generate the unique combinations. "}
{"code": "import pandas as pd\rdf1 = pd.DataFrame({'A': [None, 0, None], 'B': [3, 4, 5]})\rdf2 = pd.DataFrame({'A': [1, 1, 3], 'B': [3, None, 3]})\rdf1.combine_first(df2)\rprint(\"Original DataFrames:\")\rprint(df1)\rprint(\"--------------------\")\rprint(df2)\rprint(\"\\nMerge two dataframes with different columns:\")\rresult = df1.combine_first(df2)\rprint(result)\r", "nl": "Write a Pandas program to Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. "}
{"code": "import numpy as np\rx = np.array([1+2j,3+4j])\rprint(\"First array:\")\rprint(x)\ry = np.array([5+6j,7+8j])\rprint(\"Second array:\")\rprint(y)\rz = np.vdot(x, y)\rprint(\"Product of above two arrays:\")\rprint(z)\r", "nl": "Write a NumPy program to multiply a matrix by another matrix of complex numbers and create a new matrix of complex numbers. "}
{"code": "def test(n1, n2):\r    n1, n2 = '0' + n1, '0' + n2\r    if (n1.isnumeric() and n2.isnumeric()):\r        return str(int(n1) + int(n2))\r    else:\r        return 'Error in input!'\rprint(test(\"10\", \"32\"))\rprint(test(\"10\", \"22.6\"))\rprint(test(\"100\", \"-200\")) \r", "nl": "Write a Python program to add two strings as they are numbers (Positive integer values). Return a message if the numbers are string. "}
{"code": "import re\rdef capital_words_spaces(str1):\r  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\r\rprint(capital_words_spaces(\"Python\"))\rprint(capital_words_spaces(\"PythonExercises\"))\rprint(capital_words_spaces(\"PythonExercisesPracticeSolution\"))\r", "nl": "Write a Python program to insert spaces between words starting with capital letters. "}
{"code": "x = 3.1415926\ry = -12.9999\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number with sign: \"+\"{:+.2f}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number with sign: \"+\"{:+.2f}\".format(y));\rprint()\r", "nl": "Write a Python program to print the following floating numbers upto 2 decimal places with a sign. "}
{"code": "def initialize_list_with_values(n, val = 0):\r  return [val for x in range(n)] \rprint(initialize_list_with_values(7))\rprint(initialize_list_with_values(8,3))\rprint(initialize_list_with_values(5,-2))\rprint(initialize_list_with_values(5, 3.2))\r", "nl": "Write a Python program to initialize and fills a list with the specified value. "}
{"code": "class TreeNode(object):\r    def __init__(self, x):\r        self.val = x\r        self.left = None\r        self.right = None\r\rdef array_to_bst(array_nums):\r    if not array_nums:\r        return None\r    mid_num = len(array_nums)//2\r    node = TreeNode(array_nums[mid_num])\r    node.left = array_to_bst(array_nums[:mid_num])\r    node.right = array_to_bst(array_nums[mid_num+1:])\r    return node\r\rdef preOrder(node): \r    if not node: \r        return      \r    print(node.val)\r    preOrder(node.left) \r    preOrder(node.right)   \r\rarray_nums = [1,2,3,4,5,6,7]\r\rprint(\"Original array:\")\rprint(array_nums)\rresult = array_to_bst(array_nums)\rprint(\"\\nArray to a height balanced BST:\")\rprint(preOrder(result))\r", "nl": "Write a Python program to convert a given array elements to a height balanced Binary Search Tree (BST). "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\r                     'key2': ['K0', 'K1', 'K0', 'K1'],\r                     'P': ['P0', 'P1', 'P2', 'P3'],\r                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) \rdata2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\r                      'key2': ['K0', 'K0', 'K0', 'K0'],\r                      'R': ['R0', 'R1', 'R2', 'R3'],\r                      'S': ['S0', 'S1', 'S2', 'S3']})\rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerged Data:\")\rmerged_data = pd.merge(data1, data2, on=['key1', 'key2'])\rprint(merged_data)\r", "nl": "Write a Pandas program to merge two given datasets using multiple join keys. "}
{"code": "import copy\rnums_x = [1, [2, 3, 4]]\rprint(\"Original list: \", nums_x)\rnums_y = copy.deepcopy(nums_x)\rprint(\"\\nDeep copy of the said list:\")\rprint(nums_y)\rprint(\"\\nChange the value of an element of the original list:\")\rnums_x[1][1] = 10\rprint(nums_x)\rprint(\"\\nCopy of the second list (Deep copy):\")\rprint(nums_y)\rnums = [[1, 2, 3], [4, 5, 6]]\rdeep_copy = copy.deepcopy(nums)\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nDeep copy of the said list:\")\rprint(deep_copy)\rprint(\"\\nChange the value of some elements of the original list:\")\rnums[0][2] = 55\rnums[1][1] = 77\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nSecond list (Deep copy):\")\rprint(deep_copy)\r", "nl": "Write a Python program to create a deep copy of a given list. Use copy.copy"}
{"code": "import numpy as np\rfrom sys import getsizeof\rx = [0] * 1024\ry = np.array(x)\rprint(getsizeof(x))\r", "nl": "Write a NumPy program to get the memory usage by NumPy arrays. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc, \"lxml\")\rprint(soup.find( href=\"https://www.w3resource.com/css/CSS-tutorials.php\"))\r", "nl": "Write a Python program to find the first tag with a given attribute value in an html document. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nTime object with the same hour, minute, second, microsecond:\")\rprint(arrow.utcnow().time())\rprint(\"\\nTimestamp representation of the Arrow object, in UTC time:\")\rprint(arrow.utcnow().timestamp)\r", "nl": "Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. "}
{"code": "amount = \"32.054,23\"\rmaketrans = amount.maketrans\ramount = amount.translate(maketrans(',.', '.,'))\rprint(amount)\r", "nl": "Write a Python program to swap comma and dot in a string. "}
{"code": "import itertools as it\r\rdef char_shortest_distancer(str1, char1):\r    result = [len(str1)] * len(str1)\r    prev_char = -len(str1)\r    for i in it.chain(range(len(str1)),reversed(range(len(str1)))):\r        if str1[i] == char1:\r            prev_char = i\r        result[i] = min(result[i], abs(i-prev_char))\r    return result\r\rstr1 = \"w3resource\"\rchr1='r'\rprint(\"Original string:\",str1,\": Specified character:\",chr1)\rprint(char_shortest_distancer(str1,chr1))\r\rstr1 = \"python exercises\"\rchr1='e'\rprint(\"\\nOriginal string:\",str1,\": Specified character:\",chr1)\rprint(char_shortest_distancer(str1,chr1))\r\r\rstr1 = \"JavaScript\"\rchr1='S'\rprint(\"\\nOriginal string:\",str1,\": Specified character:\",chr1)\rprint(char_shortest_distancer(str1,chr1))\r", "nl": "Write a Python program to find the shortest distance from a specified character in a given string. Return the shortest distances through a list and use itertools module to solve the problem. "}
{"code": "import os  \rpath=\"abc.txt\"  \rif os.path.isdir(path):  \r    print(\"\\nIt is a directory\")  \relif os.path.isfile(path):  \r    print(\"\\nIt is a normal file\")  \relse:  \r    print(\"It is a special file (socket, FIFO, device file)\" )\rprint()\r", "nl": "Write a Python program to check whether a file path is a file or a directory. "}
{"code": "def create_largest_number(lst):\r    if all(val == 0 for val in lst):\r        return '0'\r    result = ''.join(sorted((str(val) for val in lst), reverse=False,\r                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))\r    return result\r\r\rnums = [3, 40, 41, 43, 74, 9]\rprint(\"Original list:\")\rprint(nums)\rprint(\"Smallest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\r\rnums = [10, 40, 20, 30, 50, 60]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Smallest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\rnums = [8, 4, 2, 9, 5, 6, 1, 0]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Smallest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\r", "nl": "Write a Python program to create the smallest possible number using the elements of a given list of positive integers. "}
{"code": "from collections import Counter\rcolors = ['Green', 'Red', 'Blue', 'Red', 'Orange', 'Black', 'Black', 'White', 'Orange']\rprint(\"Original List:\")\rprint(colors)\rprint(\"Count the occurrence of each element of the said list:\")\rresult = Counter(colors)\rprint(result)\rnums = [3,5,0,3,9,5,8,0,3,8,5,8,3,5,8,1,0,2]\rprint(\"\\nOriginal List:\")\rprint(nums)\rprint(\"Count the occurrence of each element of the said list:\")\rresult = Counter(nums)\rprint(result)\r", "nl": "Write a Python program to count the occurrence of each element of a given list. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: All the elements of the second and third columns\")\rprint(arra_data[:,[1,2]])\r", "nl": "Write a NumPy program to extract all the elements of the second and third columns from a given (4x4) array. "}
{"code": "import pandas as pd\rdef is_business_day(date):\r    return bool(len(pd.bdate_range(date, date)))\rprint(\"Check busines day or not?\")\rprint('2020-12-01: ',is_business_day('2020-12-01'))\rprint('2020-12-06: ',is_business_day('2020-12-06'))\rprint('2020-12-07: ',is_business_day('2020-12-07'))\rprint('2020-12-08: ',is_business_day('2020-12-08'))\r", "nl": "Write a Pandas program to check if a day is a business day (weekday) or not. "}
{"code": "from itertools import chain, combinations\rdef powerset(iterable):\r  s = list(iterable)\r  return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))\rnums = [1, 2]\rprint(\"Original list elements:\")\rprint(nums)\rprint(\"Powerset of the said list:\")\rprint(powerset(nums))\rnums = [1, 2, 3, 4]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Powerset of the said list:\")\rprint(powerset(nums))\r", "nl": "Write a Python program to get the powerset of a given iterable. "}
{"code": "from collections import defaultdict, Counter\rstr1 = 'w3resource' \rmy_dict = {}\rfor letter in str1:\r    my_dict[letter] = my_dict.get(letter, 0) + 1\rprint(my_dict)\r", "nl": "Write a Python program to create a dictionary from a string. "}
{"code": "import pandas as pd\rd1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}\rprint(\"Original dictionary:\")\rprint(d1)\rnew_series = pd.Series(d1)\rprint(\"Converted series:\")\rprint(new_series)\r", "nl": "Write a Pandas program to convert a dictionary to a Pandas series. "}
{"code": "word = input(\"Input a word to reverse: \")\r\rfor char in range(len(word) - 1, -1, -1):\r  print(word[char], end=\"\")\rprint(\"\\n\")\r", "nl": "Write a Python program that accepts a word from the user and reverse it. "}
{"code": "import numpy as np\rx = np.array([1, 2, 3, 4, 5, 6])\rprint(\"Original array: \",x)\rprint(\"Maximum Values: \",np.argmax(x))\rprint(\"Minimum Values: \",np.argmin(x))\r", "nl": "Write a NumPy program to find the indices of the maximum and minimum values along the given axis of an array. "}
{"code": "from bs4 import BeautifulSoup\rmarkup = '<a href=\"https://w3resource.com/\">Python exercises.<i>w3resource.com</i></a>'\rsoup = BeautifulSoup(markup, \"lxml\")\ra_tag = soup.a\rprint(\"Original markup:\")\rprint(a_tag)\ra_tag.i.unwrap()\rprint(\"\\nAfter unwrapping:\")\rprint(a_tag)\r", "nl": "Write a Python program to replace a given tag with whatever's inside a given tag. "}
{"code": "keys = ['red', 'green', 'blue']\rvalues = ['#FF0000','#008000', '#0000FF']\rcolor_dictionary = dict(zip(keys, values))\rprint(color_dictionary)\r", "nl": "Write a Python program to map two lists into a dictionary. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 7, 9])\rprint(\"Original array: \"+str(array_num))\rprint(\"Length in bytes of one array item: \"+str(array_num.itemsize))\r", "nl": "Write a Python program to get the length in bytes of one array item in the internal representation. "}
{"code": "import pandas as pd\rd = {'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]}\rdf = pd.DataFrame(data=d)\rprint(\"Original DataFrame\")\rprint(df)\rs1 = df.ix[:,0]\rprint(\"\\n1st column as a Series:\")\rprint(s1)\rprint(type(s1))\r", "nl": "Write a Pandas program to convert the first column of a DataFrame as a Series. "}
{"code": "import numpy as np\rm= np.arange(10,22).reshape((3, 4))\rprint(\"Original matrix:\")\rprint(m)\rprint(\"Number of rows and columns of the said matrix:\")\rprint(m.shape)\r", "nl": "Write a NumPy program to find the number of rows and columns of a given matrix. "}
{"code": "def letter_combinations(digits):\r    if digits == \"\":\r        return []\r    string_maps = {\r        \"1\": \"abc\",\r        \"2\": \"def\",\r        \"3\": \"ghi\",\r        \"4\": \"jkl\",\r        \"5\": \"mno\",\r        \"6\": \"pqrs\",\r        \"7\": \"tuv\",\r        \"8\": \"wxy\",\r        \"9\": \"z\"\r    }\r    result = [\"\"]\r    for num in digits:\r        temp = []\r        for an in result:\r            for char in string_maps[num]:\r                temp.append(an + char)\r        result = temp\r    return result\r\rdigit_string = \"47\"\rprint(letter_combinations(digit_string))\rdigit_string = \"29\"\rprint(letter_combinations(digit_string))\r", "nl": "Write a Python program to get all possible two digit letter combinations from a digit (1 to 9) string. "}
{"code": "def to_uppercase(str1):\r    num_upper = 0\r    for letter in str1[:4]: \r        if letter.upper() == letter:\r            num_upper += 1\r    if num_upper >= 2:\r        return str1.upper()\r    return str1\r\rprint(to_uppercase('Python'))\rprint(to_uppercase('PyThon'))\r", "nl": "Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters. "}
{"code": "str1 = \"w,3,r,e,s,o,u,r,c,e\"\rprint(str1.rsplit(',', 1))\rprint(str1.rsplit(',', 2))\rprint(str1.rsplit(',', 5))\r", "nl": "Write a Python program to split a string on the last occurrence of the delimiter. "}
{"code": "def test(flat_dict):\r  return list(flat_dict.keys())\rstudents = {\r  'Theodore': 19,\r  'Roxanne': 20,\r  'Mathew': 21,\r  'Betty': 20\r}\r\rprint(\"\\nOriginal dictionary elements:\")\rprint(students)\rprint(\"\\nCreate a flat list of all the keys of the said flat dictionary:\")\rprint(test(students))\r", "nl": "Write a Python program to create a flat list of all the keys in a flat dictionary. "}
{"code": "import numpy as np\rm = np.array([[1,2],[3,4]])\rprint(\"Original matrix:\")\rprint(m)\rresult =  np.linalg.inv(m)\rprint(\"Inverse of the said matrix:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the inverse of a given matrix. "}
{"code": "def power_base_sum(base, power):\r    return sum([int(i) for i in str(pow(base, power))])\r\r\rprint(power_base_sum(2, 100))\rprint(power_base_sum(8, 10))\r", "nl": "Write a Python program to calculate the sum of all digits of the base to the specified power. "}
{"code": "import os\rimport sys\rprogram = \"python\"\rarguments = [\"hello.py\"]\rprint(os.execvp(program, (program,) + tuple(arguments)))\rprint(\"Goodbye\")\r", "nl": "Write a Python program to start a new process replacing the current process. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nSwapp cases in comapny_code:\")\rdf['swapped_company_code'] = list(map(lambda x: x.swapcase(), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to swap the cases of a specified character column in a given DataFrame. "}
{"code": "import numpy as np\rx = np.array([3, 5])\ry = np.array([2, 5])\rprint(\"Original numbers:\")\rprint(x)\rprint(y)\rprint(\"Comparison - greater\")\rprint(np.greater(x, y))\rprint(\"Comparison - greater_equal\")\rprint(np.greater_equal(x, y))\rprint(\"Comparison - less\")\rprint(np.less(x, y))\rprint(\"Comparison - less_equal\")\rprint(np.less_equal(x, y))\r", "nl": "Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays. "}
{"code": "def unfold(fn, seed):\r  def fn_generator(val):\r    while True: \r      val = fn(val[1])\r      if val == False: break\r      yield val[0]\r  return [i for i in fn_generator([None, seed])]\rf = lambda n: False if n > 40 else [-n, n + 10]\rprint(unfold(f, 10))\r", "nl": "Write a Python program to build a list, using an iterator function and an initial seed value. "}
{"code": "def remove_kth_element(n_list, L):\r    return  n_list[:L-1] + n_list[L:]\r\rn_list = [1,1,2,3,4,4,5,1]\rprint(\"Original list:\") \rprint(n_list)\rkth_position = 3\rresult = remove_kth_element(n_list, kth_position)\rprint(\"\\nAfter removing an element at the kth position of the said list:\")\rprint(result)\r", "nl": "Write a Python program to remove the K'th element from a given list, print the new list. "}
{"code": "def interleave_diff_len_lists(list1, list2, list3, list4):\r    result = []\r    l1 = len(list1)\r    l2 = len(list2)\r    l3 = len(list3)\r    l4 = len(list4)\r    \r    for i in range(max(l1, l2, l3, l4)):\r        if i < l1:\r            result.append(list1[i])\r        if i < l2:\r            result.append(list2[i])\r        if i < l3:\r            result.append(list3[i])\r        if i < l4:\r            result.append(list4[i])\r    return result\r\rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [2, 5, 8]\rnums3 = [0, 1]\rnums4 = [3, 3, -1, 7]\r\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(nums3)\rprint(nums4)\r\rprint(\"\\nInterleave said lists of different lengths:\")\rprint(interleave_diff_len_lists(nums1, nums2, nums3, nums4))\r", "nl": "Write a Python program to interleave multiple given lists of different lengths. "}
{"code": "import numpy as np\rx = np.arange(4)\rprint(\"One dimensional array:\")\rprint(x)\ry = np.arange(8).reshape(2,4)\rprint(\"Two dimensional array:\")\rprint(y)\rfor a, b in np.nditer([x,y]):\r    print(\"%d:%d\" % (a,b),)\r", "nl": "Write a NumPy program to combine a one and a two dimensional array together and display their elements. "}
{"code": "import numpy as np\rx = np.array([-1., 0, 1.])\rprint(np.sinh(x))\rprint(np.cosh(x))\rprint(np.tanh(x))\r", "nl": "Write a NumPy program to calculate hyperbolic sine, hyperbolic cosine, and hyperbolic tangent for all elements in a given array. "}
{"code": "from scipy.spatial import distance\rp1 = (1, 2, 3)\rp2 = (4, 5, 6)\rd = distance.euclidean(p1, p2)\rprint(\"Euclidean distance: \",d)\r", "nl": "Write a NumPy program to calculate the Euclidean distance. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df) \rprint(\"\\nMissing values in purch_amt column:\")\rresult = df['ord_no'].isnull().to_numpy().nonzero()\rprint(result)\r", "nl": "Write a Pandas program to find the Indexes of missing values in a given DataFrame. "}
{"code": "import numpy as np\rnp.set_printoptions(threshold=np.nan)\rx = np.zeros((4, 4))\rprint(x)\r", "nl": "Write a NumPy program to print all the values of an array. "}
{"code": "import csv\rf = open(\"employees.csv\", \"r\")\rreader = csv.reader(f)\rnext(reader)\r\rfor row in reader:\r    print(row)\r", "nl": "Write a Python program to skip the headers of a given CSV file. Use csv.reader"}
{"code": "import numpy as np\rx = np.array([0, 1, 3])\ry = np.array([2, 4, 5])\rprint(\"\\nOriginal array1:\")\rprint(x)\rprint(\"\\nOriginal array1:\")\rprint(y)\rprint(\"\\nPearson product-moment correlation coefficients of the said arrays:\\n\",np.corrcoef(x, y))\r", "nl": "Write a NumPy program to compute pearson product-moment correlation coefficients of two given arrays. "}
{"code": "from collections import Counter\rnums = [(['1', '4'], ['4', '1'], ['3', '4'], ['2', '7'], ['6', '8'], ['5','8'], ['6','8'], ['5','7'], ['2','7'])]\rprint(\"Original list of tuples:\")\rprint(nums)\rresult = Counter(tuple(sorted(i)) for i in nums[0])\rprint(\"\\nTuples\",\"    \",\"frequency\")\rfor key,val in result.items():\r    print(key,\" \", val)\r", "nl": "Write a Python program to get the frequency of the tuples in a given list. "}
{"code": "import numpy as np\rx = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rcentered = np.char.center(x, 15, fillchar='_')\rleft = np.char.ljust(x, 15, fillchar='_')\rright = np.char.rjust(x, 15, fillchar='_')\rprint(\"\\nCentered =\", centered)\rprint(\"Left =\", left)\rprint(\"Right =\", right)\r", "nl": "Write a NumPy program to make the length of each element 15 of a given array and the string centered / left-justified / right-justified with paddings of _. "}
{"code": "import numpy as np\rarray1 = np.array([0, 10, 20, 40, 60, 80])\rprint(\"Array1: \",array1)\rarray2 = [10, 30, 40, 50, 70]\rprint(\"Array2: \",array2)\rprint(\"Unique values in array1 that are not in array2:\")\rprint(np.setdiff1d(array1, array2))\r", "nl": "Write a NumPy program to find the set difference of two arrays. The set difference will return the sorted, unique values in array1 that are not in array2. "}
{"code": "import numpy as np\rx = np.linspace(0,1,12,endpoint=True)[1:-1]\rprint(x)\r", "nl": "Write a NumPy program to create a vector of size 10 with values ranging from 0 to 1, both excluded. "}
{"code": "import numpy as np\ra = np.array([1,2,3])\rb = np.array([0,1,0])\rprint(\"Original 1-d arrays:\")\rprint(a)\rprint(b)\rresult =  np.einsum(\"n,n\", a, b)\rprint(\"Einstein\u2019s summation convention of the said arrays:\")\rprint(result)\rx = np.arange(9).reshape(3, 3)\ry = np.arange(3, 12).reshape(3, 3)\rprint(\"Original Higher dimension:\")\rprint(x)\rprint(y)\rresult = np.einsum(\"mk,kn\", x, y)\rprint(\"Einstein\u2019s summation convention of the said arrays:\")\rprint(result)\r", "nl": "Write a NumPy program to evaluate Einstein's summation convention of two given multidimensional arrays. "}
{"code": "from bs4 import BeautifulSoup\rhtml_content = '<a href=\"https://w3resource.com/\">Python exercises<i>w3resource</i></a>'\rsoup = BeautifulSoup(html_content, \"lxml\")\rprint(\"Original Markup:\")\rprint(soup.a)\rtag = soup.a\rtag = tag.clear()\rprint(\"\\nAfter clearing the contents in the tag:\")\rprint(soup.a)\r", "nl": "Write a Python program to remove the contents of a tag in a given html document. "}
{"code": "def count_range_in_list(li, min, max):\r\tctr = 0\r\tfor x in li:\r\t\tif min <= x <= max:\r\t\t\tctr += 1\r\treturn ctr\r\rlist1 = [10,20,30,40,40,40,70,80,99]\rprint(count_range_in_list(list1, 40, 100))\r\rlist2 = ['a','b','c','d','e','f']\rprint(count_range_in_list(list2, 'a', 'e'))\r", "nl": "Write a Python program to count the number of elements in a list within a specified range. "}
{"code": "color = ['red', 'green', 'orange']\rprint('-'.join(color))\rprint(''.join(color))\r", "nl": "Write a Python program to concatenate elements of a list. "}
{"code": "def access_elements(nums, list_index):\r    result = [nums[i] for i in list_index]\r    return result\r\r\rnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]\rprint (\"Original list:\")\rprint(nums)\rlist_index = [0,3,5,7,10]\rprint(\"Index list:\")\rprint(list_index)\rprint(\"\\nItems with specified index of the said list:\")\rprint(access_elements(nums, list_index))\r", "nl": "Write a Python program to access multiple elements of specified index from a given list. "}
{"code": "list1 = [[1, 3], [5, 7], [9, 11]] \rlist2 = [[2, 4], [6, 8], [10, 12, 14]]   \rprint(\"Original lists:\")\rprint(list1)\rprint(list2)\rresult = list(map(list.__add__, list1, list2)) \rprint(\"\\nZipped list:\\n\" +  str(result))\r", "nl": "Write a Python program to Zip two given lists of lists. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nUnique reporting dates of UFO:\")\rprint(df[\"Date_time\"].map(lambda t: t.date()).unique())\r", "nl": "Write a Pandas program to extract unique reporting dates of unidentified flying object (UFO). "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rage = pd.cut(df['age'], [0, 20, 55])\rresult = df.pivot_table('survived', index=['sex', age], columns='class')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. "}
{"code": "#Ref. https://bit.ly/3olnZcd\rdef pigeonhole_sort(a):\r    # size of range of values in the list (ie, number of pigeonholes we need)\r    min_val = min(a)  # min() finds the minimum value\r    max_val = max(a)  # max() finds the maximum value\r    size = max_val - min_val + 1  # size is difference of max and min values plus one\r    # list of pigeonholes of size equal to the variable size\r    holes = [0] * size\r    # Populate the pigeonholes.\r    for x in a:\r        assert isinstance(x, int), \"integers only please\"\r        holes[x - min_val] += 1\r    # Putting the elements back into the array in an order.\r    i = 0\r    for count in range(size):\r        while holes[count] > 0:\r            holes[count] -= 1\r            a[i] = count + min_val\r            i += 1\r            \rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rpigeonhole_sort(nums)\rprint(\"Sorted order is:\", nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rpigeonhole_sort(nums)\rprint(\"Sorted order is:\", nums)\r", "nl": "Write a Python program to sort unsorted numbers using Pigeonhole sorting. "}
{"code": "def difference(x, y):\r  _y = set(y)\r  return [item for item in x if item not in _y]\rprint(difference([1, 2, 3], [1, 2, 4]))\r", "nl": "Write a Python program to calculate the difference between two iterables, without filtering duplicate values. "}
{"code": "from lxml import html\r\nimport requests\r\nresponse = requests.get('http://www.data.gov/')\r\ndoc_gov = html.fromstring(response.text)\r\nlink_gov = doc_gov.cssselect('small a')[0]\r\nprint(\"Number of datasets currently listed on data.gov:\")\r\nprint(link_gov.text)\r\n", "nl": "Write a Python program to get the number of datasets currently listed on data.gov. "}
{"code": "import numpy as np\rA = np.ones((3,3))\rB = np.arange(3)\rprint(\"Original array:\")\rprint(\"Array-1\")\rprint(A)\rprint(\"Array-2\")\rprint(B)\rprint(\"A + B:\")\rnew_array = A + B\rprint(new_array)\r", "nl": "Write a NumPy program to add two arrays A and B of sizes (3,3) and (,3). "}
{"code": "def abc():\r    x = 1\r    y = 2\r    str1= \"w3resource\"\r    print(\"Python Exercises\")\r\rprint(abc.__code__.co_nlocals)\r", "nl": "Write a Python program to detect the number of local variables declared in a function. "}
{"code": "def longest_item(*args):\r  return max(args, key = len)\rprint(longest_item('this', 'is', 'a', 'Green'))  \rprint(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) \rprint(longest_item([1, 2, 3, 4], 'Red'))\r", "nl": "Write a Python program to that takes any number of iterable objects or objects with a length property and returns the longest one. "}
{"code": "nums = [2, 4, 6, 9 , 11]\rn = 2\rprint(\"Original list: \", nums)\rprint(\"Given number: \", n)\rfiltered_numbers=list(map(lambda number:number*n,nums))\rprint(\"Result:\")\rprint(' '.join(map(str,filtered_numbers)))\r", "nl": "Write a Python program that multiply each number of given list with a given number using lambda function. Print the result. "}
{"code": "color_name = [\"Black\", \"Red\", \"Maroon\", \"Yellow\"]\rcolor_code = [\"#000000\", \"#FF0000\", \"#800000\", \"#FFFF00\"]\rprint([{'color_name': f, 'color_code': c} for f, c in zip(color_name, color_code)])\r", "nl": "Write a Python program to convert list to list of dictionaries. "}
{"code": "from decimal import Decimal\r#Source: https://bit.ly/3hEyyY4\r\rdef round_to_10_cents(x):\r    remainder = x.remainder_near(Decimal('0.10'))\r    if abs(remainder) == Decimal('0.05'):\r        return x\r    else:\r        return x - remainder\r\r# Test code.\rfor x in range(80, 120):\r    y = Decimal(x) / Decimal('1E2')\r    print(\"{0} rounds to {1}\".format(y, round_to_10_cents(y)))\r", "nl": "Write a Python program to round a Decimal value to the nearest multiple of 0.10, unless already an exact multiple of 0.05. Use decimal.Decimal"}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rstudent_data = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(student_data)\rprint('\\nCast grouping as a list:')\rresult = student_data.groupby(['school_code'])\rprint(list(result))\r", "nl": "Write a Pandas program to split the following given dataframe into groups based on school code and cast grouping as a list. "}
{"code": "import array as arr\rdef test(nums):\r    return sum(range(10, 21)) - sum(list(nums))\r\rarray_num = arr.array('i', [10, 11, 12, 13, 14, 16, 17, 18, 19, 20])\rprint(\"Original array:\")\rfor i in range(len(array_num)):    \r    print(array_num[i], end=' ')\rprint(\"\\nMissing number in the said array (10-20): \",test(array_num))\r \rarray_num = arr.array('i', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\rprint(\"\\nOriginal array:\")\rfor i in range(len(array_num)):    \r    print(array_num[i], end=' ')\rprint(\"\\nMissing number in the said array (10-20): \",test(array_num))\r", "nl": "Write a Python program to find the missing number in a given array of numbers between 10 and 20. "}
{"code": "def map_dictionary(itr, fn):\r  return dict(zip(itr, map(fn, itr)))\rprint(map_dictionary([1, 2, 3], lambda x: x * x))\r", "nl": "Write a Python program to map the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. "}
{"code": "def has_duplicates(lst):\r  return len(lst) != len(set(lst))\rnums = [1, 2, 3, 4, 5, 6, 7]\rprint(\"Original list:\")\rprint(nums)\rprint(\"Check if there are duplicate values in the said given flat list:\")\rprint(has_duplicates(nums)) \rnums = [1, 2, 3, 3, 4, 5, 5, 6, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Check if there are duplicate values in the said given flat list:\")\rprint(has_duplicates(nums)) \r", "nl": "Write a Python program to check if there are duplicate values in a given flat list. "}
{"code": "from heapq import merge\rnums1 = [1, 3, 5, 7, 9, 11]\rnums2 = [0, 2, 4, 6, 8, 10]\rprint(\"Original sorted lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nAfter merging the said two sorted lists:\")\rprint(list(merge(nums1, nums2)))\r", "nl": "Write a Python program to combine two given sorted lists using heapq module. "}
{"code": "def test(dictt):\r    min_value=1\r    result = [k for k, v in dictt.items() if len(v) == (min_value)] \r    return result    \r\rdictt = {\r 'V': [10, 12],\r 'VI': [10],\r 'VII': [10, 20, 30, 40],\r 'VIII': [20],\r 'IX': [10,30,50,70],\r 'X': [80]\r }\r\rprint(\"\\nOriginal Dictionary:\")\rprint(dictt)\rprint(\"\\nShortest list of values with the keys of the said dictionary:\")\rprint(test(dictt))\r", "nl": "Write a Python program to find shortest list of values with the keys in a given dictionary. "}
{"code": "import os\rprint('Exist:', os.access('c:\\\\Users\\\\Public\\\\C programming library.docx', os.F_OK))\rprint('Readable:', os.access('c:\\\\Users\\\\Public\\\\C programming library.docx', os.R_OK))\rprint('Writable:', os.access('c:\\\\Users\\\\Public\\\\C programming library.docx', os.W_OK))\rprint('Executable:', os.access('c:\\\\Users\\\\Public\\\\C programming library.docx', os.X_OK))\r", "nl": "Write a Python program to check for access to a specified path. Test the existence, readability, writability and executability of the specified path. "}
{"code": "def selection_sort(nums):\r    for i, n in enumerate(nums):\r        mn = min(range(i,len(nums)), key=nums.__getitem__)\r        nums[i], nums[mn] = nums[mn], n\r    return nums\ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rprint(selection_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Selection sort. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rgr_data = df.groupby(['customer_id','salesman_id']).agg({'purch_amt': 'sum'})\rgr_data[\"% (Purch Amt.)\"] = gr_data.apply(lambda x:  100*x / x.sum())\rprint(\"\\nPercentage of purch_amt in each group of customer_id:\")\rprint(gr_data)\r", "nl": "Write a Pandas program to split the following datasets into groups on customer_id to summarize purch_amt and calculate percentage of purch_amt in each group. "}
{"code": "from bs4 import BeautifulSoup\rhtml_content = '<a href=\"https://w3resource.com/\">Python exercises<i>w3resource</i></a>'\rsoup = BeautifulSoup(html_content, \"lxml\")\rprint(\"Original Markup:\")\rprint(soup.a)\ri_tag = soup.i.extract()\rprint(\"\\nExtract i tag from said html Markup:\")\rprint(i_tag)\r", "nl": "Write a Python program to extract a tag or string from a given tree of html document. "}
{"code": "from itertools import groupby\rdef compress(l_nums):\r    return [key for key, group in groupby(l_nums)] \rn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\rprint(\"Original list:\") \rprint(n_list)\rprint(\"\\nAfter removing consecutive duplicates:\")\rprint(compress(n_list)) \r\r", "nl": "Write a Python program to remove consecutive duplicates of a given list. "}
{"code": "import numpy as np\rimport pandas as pd\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(pd.pivot_table(df,index=[\"Region\",\"Manager\",\"SalesMan\"], values=\"Sale_amt\", aggfunc=np.sum))\r", "nl": "Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details in the year 1986 where WHO region is Western Pacific and country is VietNam :\")\rprint(w_a_con[(w_a_con['Year']==1986) & (w_a_con['WHO region']=='Western Pacific') & (w_a_con['Country']=='Viet Nam')])\r", "nl": "Write a Pandas program to find out the alcohol consumption details in the year '1986' where WHO region is 'Western Pacific' and country is 'VietNam' from the world alcohol consumption dataset. "}
{"code": "def isPalindrome(string):\r\tleft_pos = 0\r\tright_pos = len(string) - 1\r\t\r\twhile right_pos >= left_pos:\r\t\tif not string[left_pos] == string[right_pos]:\r\t\t\treturn False\r\t\tleft_pos += 1\r\t\tright_pos -= 1\r\treturn True\rprint(isPalindrome('aza')) \r", "nl": "Write a Python function that checks whether a passed string is palindrome or not.\n"}
{"code": "def count_integer(list1):\r    ctr = 0\r    for i in list1:\r        if isinstance(i, int):\r            ctr = ctr + 1\r    return ctr\r\rlist1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]\r\rprint(\"Original list:\")\rprint(list1)\r\rprint(\"\\nNumber of integers in the said mixed list:\")\rprint(count_integer(list1))\r", "nl": "Write a Python program to count integer in a given mixed list. "}
{"code": "def test(lst):\r    result = all(str(x)[0] == str(lst[0])[0] for x in lst) \r    return result\rnums = [1234, 122, 1984, 19372, 100]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Check if first digit in each element of the said given list is same or not!\")\rprint(test(nums))\rnums = [1234, 922, 1984, 19372, 100]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Check if first digit in each element of the said given list is same or not!\")\rprint(test(nums))\rnums = ['aabc', 'abc', 'ab', 'a']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Check if first character in each element of the said given list is same or not!\")\rprint(test(nums))\rnums = ['aabc', 'abc', 'ab', 'ha']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Check if first character in each element of the said given list is same or not!\")\rprint(test(nums))\r", "nl": "Write a Python program to check if first digit/character of each element in a given list is same or not. "}
{"code": "i = int(input(\"Input an integer: \"))\ro = str(oct(i))[2:]\rh = str(hex(i))[2:]\rh = h.upper()\rb = str(bin(i))[2:]\rd = str(i)\rprint(\"Decimal Octal Hexadecimal (capitalized), Binary\")\rprint(d,'  ',o,' ',h,'                   ',b)\r", "nl": "Write a Python program to print four values decimal, octal, hexadecimal (capitalized), binary in a single line of a given integer. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: Third and fourth elements of the first and second rows \")\rprint(arra_data[0:2, 2:4])\r", "nl": "Write a NumPy program to extract third and fourth elements of the first and second rows from a given (4x4) array. "}
{"code": "import numpy as np\ra1=np.array([1,2,3,4])\ra2=np.array(['Red','Green','White','Orange'])\ra3=np.array([12.20,15,20,40])\rresult= np.core.records.fromarrays([a1, a2, a3],names='a,b,c')\rprint(result[0])\rprint(result[1])\rprint(result[2])\r", "nl": "Write a NumPy program to create a record array from a (flat) list of arrays. "}
{"code": "texts = [\"php\", \"w3r\", \"Python\", \"abcd\", \"Java\", \"aaa\"]\rprint(\"Orginal list of strings:\")\rprint(texts) \rresult = list(filter(lambda x: (x == \"\".join(reversed(x))), texts)) \rprint(\"\\nList of palindromes:\")\rprint(result) \r", "nl": "Write a Python program to find palindromes in a given list of strings using Lambda. "}
{"code": "import csv\rcsv.register_dialect('csv_dialect',\r                    delimiter='|',\r                    skipinitialspace=True,\r                    quoting=csv.QUOTE_ALL)\rwith open('temp.csv', 'r') as csvfile:\r   reader = csv.reader(csvfile, dialect='csv_dialect')\r   for row in reader:\r       print(row)\r", "nl": "Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-4-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1.set_index('Date')\rplt.figure(figsize=(6,6))\rplt.suptitle('Trading Volume of Alphabet Inc. stock,\\n01-04-2020 to 30-04-2020', fontsize=16, color='black')\rplt.xlabel(\"Date\",fontsize=12, color='black')\rplt.ylabel(\"Trading Volume\", fontsize=12, color='black') \rdf2['Volume'].plot(kind='bar');\rplt.show()\r", "nl": "Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates. "}
{"code": "def delete_all_occurrences(str1, ch):\r     result = str1.replace(ch, \"\")\r     return(result)\r\rstr_text = \"Delete all occurrences of a specified character in a given string\"\rprint(\"Original string:\")\rprint(str_text)\rprint(\"\\nModified string:\")\rch='a'\rprint(delete_all_occurrences(str_text, ch))\r", "nl": "Write a Python program to delete all occurrences of a specified character in a given string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df,index=[\"Manager\",\"SalesMan\"],values=[\"Units\",\"Sale_amt\"],\r               aggfunc=[np.sum],fill_value=0,margins=True)\rprint(table)\r", "nl": "Write a Pandas program to create a Pivot table and find manager wise, salesman wise total sale and also display the sum of all sale amount at the bottom. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nTime object with the same hour, minute, second, microsecond and timezone info.:\")\rprint(arrow.utcnow().timetz())\r", "nl": "Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. "}
{"code": "import pandas as pd\rsr1 = pd.Series([1, 2, 3, 4, 5])\rsr2 = pd.Series([2, 4, 6, 8, 10])\rprint(\"Original Series:\")\rprint(\"sr1:\")\rprint(sr1)\rprint(\"sr2:\")\rprint(sr2)\rprint(\"\\nItems of sr1 not present in sr2:\")\rresult = sr1[~sr1.isin(sr2)]\rprint(result)\r", "nl": "Write a Pandas program to get the items of a given series not present in another given series. "}
{"code": "def dividing_two_lists(l1,l2):\r    result = [x/y for x, y in zip(l1,l2)]\r    return result \rnums1 = [7,2,3,4,9,2,3]\rnums2 = [9,8,2,3,3,1,2]\rprint(\"Original list:\")\rprint(nums1)\rprint(nums1)\rprint(dividing_two_lists(nums1, nums2))\r", "nl": "Write a Python program to create a new list dividing two given lists of numbers. "}
{"code": "print(abs.__doc__)", "nl": "Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s). "}
{"code": "array_nums = [1, 2, 3, 5, 7, 8, 9, 10]\rprint(\"Original arrays:\")\rprint(array_nums)\rodd_ctr = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\reven_ctr = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\rprint(\"\\nNumber of even numbers in the above array: \", even_ctr)\rprint(\"\\nNumber of odd numbers in the above array: \", odd_ctr)\r", "nl": "Write a Python program to count the even, odd numbers in a given array of integers using Lambda. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Datetime representation:\")\rprint(a.datetime)\rb = a.timestamp\rprint(\"\\nTimestamp representation:\")\rprint(b)\r", "nl": "Write a Python program to get a datetime or timestamp representation from current datetime. "}
{"code": "str1 = 'A8238i823acdeOUEI'\rprint(any(c.islower() for c in str1))\r", "nl": "Write a Python program to check whether lowercase letters exist in a string. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rstudent_data = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\r\rprint(\"Original DataFrame:\")\rprint(student_data)\rprint('\\nSplit the said data on school_code wise:')\rgrouped_single = student_data.groupby(['school_code'])\rprint(\"Size of the grouped data - single column\")\rprint(grouped_single.size())\rprint('\\nSplit the said data on school_code and class wise:')\r\rgrouped_mul = student_data.groupby(['school_code', 'class'])\rprint(\"Size of the grouped data - multiple columns:\")\rprint(grouped_mul.size())\r", "nl": "Write a Pandas program to split the following given dataframe into groups based on single column and multiple columns. Find the size of the grouped data. "}
{"code": "import json\r\rwith open('states.json') as f:\r  state_data= json.load(f)\r\rfor state in state_data['states']:\r  del state['area_codes']\r\rwith open('new_states.json', 'w') as f:\r  json.dump(state_data, f, indent=2)\r", "nl": "Write a Python program to create a new JSON file from an existing JSON file. "}
{"code": "def move_Spaces_front(str1):\r  noSpaces_char = [ch for ch in str1 if ch!=' ']\r  spaces_char = len(str1) - len(noSpaces_char)\r  result = ' '*spaces_char\r  result = '\"'+result + ''.join(noSpaces_char)+'\"'\r  return(result)\r\rprint(move_Spaces_front(\"w3resource .  com  \"))\rprint(move_Spaces_front(\"   w3resource.com  \"))\r", "nl": "Write a Python program to move spaces to the front of a given string. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name_code': ['Company','Company a001','Company 123', '1234', 'Company 12'],\r    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nWhether all characters in the string are alphanumeric?\")\rdf['name_code_is_alphanumeric'] = list(map(lambda x: x.isalnum(), df['name_code']))\rprint(df)\r", "nl": "Write a Pandas program to check whether alpha numeric values present in a given column of a DataFrame. "}
{"code": "def list_of_dicts(marks):\r    keys = marks.keys()\r    vals = zip(*[marks[k] for k in keys])\r    result = [dict(zip(keys, v)) for v in vals]\r    return result\r\rmarks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}\rprint(\"Original dictionary of lists:\")\rprint(marks)\rprint(\"\\nSplit said dictionary of lists into list of dictionaries:\")\rprint(list_of_dicts(marks))\r", "nl": "Write a Python program to split a given dictionary of lists into list of dictionaries. "}
{"code": "import csv\rwith open('departments.csv', newline='') as csvfile:\r data = csv.DictReader(csvfile)\r print(\"ID Department Name\")\r print(\"---------------------------------\")\r for row in data:\r   print(row['department_id'], row['department_name'])\r", "nl": "Write a Python program to read specific columns of a given CSV file and print the content of the columns. "}
{"code": "import itertools\rc = itertools.count()\rprint(next(c))\rprint(next(c))\rprint(next(c))\rprint(next(c))\rprint(next(c))\r", "nl": "Write a Python program to create a list with infinite elements. "}
{"code": "import numpy as np\ra = np.array([97, 101, 105, 111, 117])\rb = np.array(['a','e','i','o','u'])\rprint(\"Original arrays\")\rprint(a)\rprint(b)\rprint(\"Elements from the second array  corresponding to elements in the first array  that are greater than 100 and less than 110:\")\rprint(b[(100 < a) & (a < 110)])\r", "nl": "Write a NumPy program to select indices satisfying multiple conditions in a NumPy array. "}
{"code": "from collections import defaultdict\rdef test(students):\r  obj = defaultdict(list)\r  for key, value in students.items():\r    obj[value].append(key)\r  return dict(obj)\r \rstudents = {\r  'Ora Mckinney': 8,\r  'Theodore Hollandl': 7,\r  'Mae Fleming': 7,\r  'Mathew Gilbert': 8,\r  'Ivan Little': 7,  \r}\rprint(test(students))\r", "nl": "Write a Python program to invert a given dictionary with non-unique hashable values. "}
{"code": "import numpy as np\rx = np.arange(24).reshape((2,3,4))\rprint(\"Array x:\")\rprint(x)\rprint(\"Array y:\")\ry = np.arange(4)\rprint(y)\rprint(\"Inner of x and y arrays:\")\rprint(np.inner(x, y))\r", "nl": "Write a NumPy program to create an inner product of two arrays. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.max)\rprint(table)\r", "nl": "Write a Pandas program to create a Pivot table and find the maximum sale value of the items. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index = ['t1', 't2', 't3', 't4', 't5', 't6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nConvert index of the said dataframe into a column:\")\rdf.reset_index(level=0, inplace=True)\rprint(df)\r", "nl": "Write a Pandas program to convert index of a given dataframe into a column. "}
{"code": "def sum_column(nums, C):\r    result = sum(row[C] for row in nums)\r    return result\r\rnums = [\r        [1,2,3,2],\r        [4,5,6,2],\r        [7,8,9,5],\r        ]\rprint(\"Original list of lists:\")\rprint(nums)\r\rcolumn = 0\rprint(\"\\nSum: 1st column of the said list of lists:\")\rprint(sum_column(nums, column))\rcolumn = 1\rprint(\"\\nSum: 2nd column of the said list of lists:\")\rprint(sum_column(nums, column))\rcolumn = 3\rprint(\"\\nSum: 4th column of the said list of lists:\")\rprint(sum_column(nums, column))\r", "nl": "Write a Python program to sum a specific column of a list in a given list of lists. "}
{"code": "def addition_subtrction(x, y):\r    return x + y, x - y\r \rnums1 = [6, 5, 3, 9]\rnums2 = [0, 1, 7, 7]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rresult = map(addition_subtrction, nums1, nums2)\rprint(\"\\nResult:\")\rprint(list(result))\r", "nl": "Write a Python program to add two given lists and find the difference between lists. Use map() function. "}
{"code": "import pandas as pd\rdate_range = pd.date_range('2020-01-01', periods=45)\rprint(\"Date range of perods 45:\")\rprint(date_range)\r", "nl": "Write a Pandas program to create a date range using a startpoint date and a number of periods. "}
{"code": "import numpy as np\rx = np.array([-1., 0, 1.])\rprint(\"Inverse sine:\", np.arcsin(x))\rprint(\"Inverse cosine:\", np.arccos(x))\rprint(\"Inverse tangent:\", np.arctan(x))\r", "nl": "Write a NumPy program to calculate inverse sine, inverse cosine, and inverse tangent for all elements in a given array. "}
{"code": "import pandas as pd\rs = pd.Series(data = [1,2,3,4,5,6,7,8,9,5,3])\rprint(\"Original Data Series:\")\rprint(s)\rprint(\"Mean of the said Data Series:\")\rprint(s.mean())\rprint(\"Standard deviation of the said Data Series:\")\rprint(s.std())\r", "nl": "Write a Pandas program to create the mean and standard deviation of the data of a given Series. "}
{"code": "a = [10,20,30,20,10,50,60,40,80,50,40]\r\rdup_items = set()\runiq_items = []\rfor x in a:\r    if x not in dup_items:\r        uniq_items.append(x)\r        dup_items.add(x)\r\rprint(dup_items)\r", "nl": "Write a Python program to remove duplicates from a list. "}
{"code": "from geopy.geocoders import Nominatim\rgeolocator = Nominatim(user_agent=\"geoapiExercises\")\rladd1 = \"27488 Stanford Avenue, North Dakota\"\rprint(\"Location address:\",ladd1)\rlocation = geolocator.geocode(ladd1)\rprint(\"Latitude and Longitude of the said address:\")\rprint((location.latitude, location.longitude))\rladd2 = \"380 New York St, Redlands, CA 92373\"\rprint(\"\\nLocation address:\",ladd2)\rlocation = geolocator.geocode(ladd2)\rprint(\"Latitude and Longitude of the said address:\")\rprint((location.latitude, location.longitude))\rladd3 = \"1600 Pennsylvania Avenue NW\"\rprint(\"\\nLocation address:\",ladd3)\rlocation = geolocator.geocode(ladd3)\rprint(\"Latitude and Longitude of the said address:\")\rprint((location.latitude, location.longitude))\r", "nl": "Write a Python program to find the latitude and longitude of a given location using Nominatim API and GeoPy package. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nString representing the date, controlled by an explicit format string:\")\rprint(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))\r", "nl": "Write a Python program to get hourly datetime between two hours. "}
{"code": "def wiggle_sort(arra_nums):\r    for i, _ in enumerate(arra_nums):\r        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):\r            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]\r\r    return arra_nums\r\rprint(\"Input the array elements: \")\rarra_nums = list(map(int, input().split()))\rprint(\"Original unsorted array:\")\rprint(arra_nums)\rprint(\"The said array after applying Wiggle sort:\")\rprint(wiggle_sort(arra_nums))\r", "nl": "Write a Python program to sort an unsorted array numbers using Wiggle sort. "}
{"code": "import numpy as np\ra = np.array([1,2,5])\rb = np.array([2,1,0])\rprint(\"Original 1-d arrays:\")\rprint(a)\rprint(b)\rprint \rresult = np.inner(a, b)\rprint(\"Inner product of the said vectors:\")\rx = np.arange(9).reshape(3, 3)\ry = np.arange(3, 12).reshape(3, 3)\rprint(\"Higher dimension arrays:\")\rprint(x)\rprint(y)\rresult = np.inner(x, y)\rprint(\"Inner product of the said vectors:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the inner product of vectors for 1-D arrays (without complex conjugation) and in higher dimension. "}
{"code": "import itertools as it\rdef list_max_min_pair(nums):\r    result_max = max(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])\r    result_min = min(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])\r    return result_max, result_min\r\rnums = [2,5,8,7,4,3,1,9,10,1]   \rprint(\"The original list: \") \rprint(nums)\rprint(\"\\nPairs of maximum and minimum product from the said list:\")\rprint(list_max_min_pair(nums))\r", "nl": "Write a Python program to find the pairs of maximum and minimum product from a given list. Use itertools module. "}
{"code": "list1 = [10, 10, 0, 0, 10]\rlist2 = [10, 10, 10, 0, 0]\rlist3 = [1, 10, 10, 0, 0]\r\rprint('Compare list1 and list2')\rprint(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))\rprint('Compare list1 and list3')\rprint(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))\r", "nl": "Write a python program to check whether two lists are circularly identical. "}
{"code": "import numpy as np\rx = np.zeros((4, 4))\rx[::2, 1::2] = 1\rx[1::2, ::2] = 1\rprint(x)\r", "nl": " Write a NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal. "}
{"code": "nums_list = [1,2,3,4]\rnums_tuple = (0, 1, 2, 3) \rprint(\"Original list and tuple:\")\rprint(nums_list)\rprint(nums_tuple)\rresult_list = list(map(str,nums_list))\rresult_tuple = tuple(map(str,nums_tuple))\rprint(\"\\nList of strings:\")\rprint(result_list)\rprint(\"\\nTuple of strings:\")\rprint(result_tuple)\r", "nl": "Write a Python program to convert a given list of integers and a tuple of integers in a list of strings. "}
{"code": "from functools import reduce \rfrom operator import getitem\rdef test(d, selectors):\r  return reduce(getitem, selectors, d) \rusers = {\r  'Carla ': {\r    'name': {\r      'first': 'Carla ',\r      'last': 'Russell' \r    },\r    'postIds': [1, 2, 3, 4, 5]\r  }\r}\rprint(test(users, ['Carla ', 'name', 'last']))\rprint(test(users, ['Carla ', 'postIds', 1]))\r", "nl": "Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. "}
{"code": "from bs4 import BeautifulSoup\rsoup = BeautifulSoup(\"<b>w3resource.com</b>\", \"lxml\")\rprint(\"Original Markup:\")\rprint(soup.b)\rtag = soup.new_tag(\"i\")\rtag.string = \"Python\"\rprint(\"\\nNew Markup, after inserting the text:\")\rsoup.b.string.insert_after(tag)\rprint(soup.b)\r", "nl": "Write a Python program to insert tags or strings immediately after specified tags or strings. "}
{"code": "from enum import IntEnum\rclass Country(IntEnum):\r    Afghanistan = 93\r    Albania = 355\r    Algeria = 213\r    Andorra = 376\r    Angola = 244\r    Antarctica = 672\rcountry_code_list = list(map(int, Country))\rprint(country_code_list)\r", "nl": "Write a Python program to get all values from an enum class. "}
{"code": "import random \rprint(\"Create a list of random integers:\")\rpopulation = range(0, 100)\rnums_list = random.sample(population, 10)\rprint(nums_list)\rno_elements = 4\rprint(\"\\nRandomly select\",no_elements,\"multiple items from the said list:\")\rresult_elements = random.sample(nums_list, no_elements)\rprint(result_elements)\rno_elements = 8\rprint(\"\\nRandomly select\",no_elements,\"multiple items from the said list:\")\rresult_elements = random.sample(nums_list, no_elements)\rprint(result_elements)\r", "nl": "Write a Python program to create a list of random integers and randomly select multiple items from the said list. Use random.sample()"}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a class=\"sister\" href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link1\">Lacie</a>\r<a class=\"sister\" href=\"http://example.com/tillie\"  id=\"link2\">Tillie</a>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc,\"lxml\")\rprint(\"\\nTags by CSS class:\")\rprint(soup.select(\".sister\"))\r", "nl": "Write a Python program to find tags by CSS class in a given html document. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Adj Close']]\rdf3 = df2.set_index('Date')\rdaily_changes = df3.pct_change(periods=1)\rdaily_changes['Adj Close'].plot(figsize=(10,7),legend=True,linestyle='--',marker='o')\rplt.suptitle('Daily % return of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.grid(True)\rplt.show() \r", "nl": "Write a Pandas program to create a plot to visualize daily percentage returns of Alphabet Inc. stock price between two specific dates. "}
{"code": "words = [\r   'red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes',\r   'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange',\r   'white', \"black\", 'pink', 'green', 'green', 'pink', 'green', 'pink',\r   'white', 'orange', \"orange\", 'red'\r]\rfrom collections import Counter\rword_counts = Counter(words)\rtop_four = word_counts.most_common(4)\rprint(top_four)\r", "nl": "Write a Python program to count the most common words in a dictionary. "}
{"code": "import numpy as np\rx = np.array([[0, 10, 20], [20, 30, 40]])\rprint(\"Original array: \")\rprint(x)\rprint(\"Values bigger than 10 =\", x[x>10])\rprint(\"Their indices are \", np.nonzero(x > 10))\r", "nl": "Write a NumPy program to get the values and indices of the elements that are bigger than 10 in a given array. "}
{"code": "for x in range(6):\r    if (x == 3 or x==6):\r        continue\r    print(x,end=' ')\rprint(\"\\n\")\r\t", "nl": "Write a Python program that prints all the numbers from 0 to 6 except 3 and 6."}
{"code": "def test(dictionary):\r    for key in dictionary:\r        dictionary[key].clear()\r    return dictionary\r\rdictionary = { \r               'C1' : [10,20,30], \r               'C2' : [20,30,40],\r               'C3' : [12,34]\r             }\rprint(\"\\nOriginal Dictionary:\")\rprint(dictionary)\rprint(\"\\nClear the list values in the said dictionary:\")\rprint(test(dictionary)) \r", "nl": "A Python Dictionary contains List as value. Write a Python program to clear the list values in the said dictionary. "}
{"code": "def reverse_list_of_lists(nums,lr,hr):\r    temp = []\r    for idx, el in enumerate(nums):\r        if idx >= lr and idx < hr:\r            temp.append(el)\r    result_max = max(temp) \r    result_min = min(temp) \r    return result_max, result_min\rnums = [4,3,0,5,3,0,2,3,4,2,4,3,5]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nIndex range:\")\rlr = 3\rhr = 8\rprint(lr,\"to\",hr)\rprint(\"\\nMaximum and minimum values of the said given list within index range:\")\rprint(reverse_list_of_lists(nums,lr,hr))\r", "nl": "Write a Python program to find the maximum and minimum values in a given list within specified index range. "}
{"code": "import pandas as pd\rseries1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\rseries2 = pd.Series([1, 3, 5, 7, 10])\rprint(\"Original Series:\")\rprint(series1)\rprint(series2)\rresult = [pd.Index(series1).get_loc(i) for i in series2]\rprint(\"Positions of items of series2 in series1:\")\rprint(result)\r", "nl": "Write a Pandas program to get the positions of items of a given series in another given series. "}
{"code": "from collections import Counter\rdef test(dictt):    \r    result = Counter(dictt.values())\r    return result    \r\rdictt = {\r 'V': 10,\r 'VI': 10,\r 'VII': 40,\r 'VIII': 20,\r 'IX': 70,\r 'X': 80,\r 'XI': 40,\r 'XII': 20, \r }\r\rprint(\"\\nOriginal Dictionary:\")\rprint(dictt)\rprint(\"\\nCount the frequency of the said dictionary:\")\rprint(test(dictt))\r", "nl": "Write a Python program to count the frequency in a given dictionary. "}
{"code": "import  sqlite3\rconn  =  sqlite3 . connect ( 'mydatabase.db' )\rcursor  =  conn.cursor ()\r#create the salesman table \rcursor.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r\rs_id = input('Salesman ID:')\rs_name = input('Name:')\rs_city = input('City:')\rs_commision = input('Commission:')\rcursor.execute(\"\"\"\rINSERT INTO salesman(salesman_id, name, city, commission)\rVALUES (?,?,?,?)\r\"\"\", (s_id, s_name, s_city, s_commision))\rconn.commit ()\rprint ( 'Data entered successfully.' )\rconn . close ()\rif (conn):\r  conn.close()\r  print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to insert values to a table from user input. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc, 'html.parser')\rprint(\"Length of the text of the first <h2> tag:\")\rprint(len(soup.find('h2').text))\r\r", "nl": "Write a Python program to find the length of the text of the first <h2> tag of a given html document. "}
{"code": "import numpy as np\rx = np.array([[0, 10, 20], [20, 30, 40]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Number of non zero elements in the above array:\")\rprint(np.count_nonzero(x))\r", "nl": "Write a NumPy program to get the number of nonzero elements in an array. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['A','B', 'C', 'D', 'A'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\r\rprint(\"Original DataFrame:\")\rprint(df)\r\rprint(\"\\nReplace A with c:\")\rdf = df.replace([\"A\", \"D\"], [\"X\", \"Y\"])\rprint(df)\r", "nl": "Write a Pandas program to replace more than one value with other values in a given DataFrame. "}
{"code": "import numpy as np\rm = np.mat(\"3 -2;1 0\")\rprint(\"Original matrix:\")\rprint(\"a\\n\", m)\rw, v = np.linalg.eig(m) \rprint( \"Eigenvalues of the said matrix\",w)\rprint( \"Eigenvectors of the said matrix\",v)\r", "nl": "Write a NumPy program to compute the eigenvalues and right eigenvectors of a given square array. "}
{"code": "from math import ceil\r\rdef chunk_list_into_n(nums, n):\r  size = ceil(len(nums) / n)\r  return list(\r    map(lambda x: nums[x * size:x * size + size],\r    list(range(n)))\r  )\rprint(chunk_list_into_n([1, 2, 3, 4, 5, 6, 7], 4))  \r", "nl": "Write a Python program to chunk a given list into n smaller lists. "}
{"code": "import numpy as np\rx = np.ones((3,3))\rprint(\"Original array:\")\rprint(x)\rprint(\"0 on the border and 1 inside in the array\")\rx = np.pad(x, pad_width=1, mode='constant', constant_values=0)\rprint(x)\r", "nl": "Write a NumPy program to add a border (filled with 0's) around an existing array. "}
{"code": "from array import array\rmy_array = array('i', [10, 20, 30, 40, 50])\rfor i in my_array:\r    print(i)\r", "nl": "Write a Python program to create an array contains six integers. Also print all the members of the array. "}
{"code": "my_list = [{},{},{}]\rmy_list1 = [{1,2},{},{}]\rprint(all(not d for d in my_list))\rprint(all(not d for d in my_list1))\r", "nl": "Write a Python program to check whether all dictionaries in a list are empty or not. "}
{"code": "import numpy as np\rn = 4\ri = 3\re = 10\rarray_nums1 = np.zeros((n,n))\rprint(\"Original array:\")\rprint(array_nums1)\rnp.put(array_nums1, np.random.choice(range(n*n), i, replace=False), e)\rprint(\"\\nPlace a specified element in specified time randomly:\")\rprint(array_nums1)\r", "nl": "Write a NumPy program to place a specified element in specified time randomly in a specified 2D array. "}
{"code": "rows = int(input(\"Input rows: \"))\rcolumns = int(input(\"Input columns: \"))\rmatrix = [[0]*columns for row in range(rows)]\rprint('Input number of elements in a row (1, 2, 3): ')\rfor row in range(rows):\r    lines = list(map(int, input().split()))\r    for column in range(columns):\r        matrix[row][column] = lines[column]\r\rsum = [0]*columns\rprint(\"sum for each column:\")\rfor column in range(columns):\r    for row in range(rows):\r        sum[column] += matrix[row][column]\r    print((sum[column]), ' ', end = '')\r", "nl": "Write a Python program to read a matrix from console and print the sum for each column. Accept matrix rows, columns and elements for each column separated with a space(for every row) as input from the user. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nSelect consecutive columns:\")\rprint(w_a_con.loc[:,\"Country\":\"Display Value\"].head())\rprint(\"\\nAlternate command:\")\rprint(w_a_con.iloc[:,2:5].head())\rprint(\"\\nSelect rows with Index label 0 to 9 with specific columns:\")\rprint(w_a_con.loc[0:9,[\"Year\",\"Country\",\"Display Value\"]])\r", "nl": "Write a Pandas program to select consecutive columns and also select rows with Index label 0 to 9 with some columns from world alcohol consumption dataset. "}
{"code": "class Rectangle():\r    def __init__(self, l, w):\r        self.length = l\r        self.width  = w\r\r    def rectangle_area(self):\r        return self.length*self.width\r\rnewRectangle = Rectangle(12, 10)\rprint(newRectangle.rectangle_area())\r", "nl": "rite a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'address': ['9910 Surrey <b>Avenue</b>','92 N. Bishop Avenue','9910 <br>Golden Star Avenue', '102 Dunbar <i></i>St.', '17 West Livingston Court']\r})\rprint(\"Original DataFrame:\")\rprint(df)\rdef remove_tags(string):\r    result = re.sub('<.*?>','',string)\r    return result\rdf['with_out_tags']=df['address'].apply(lambda cw : remove_tags(cw))\rprint(\"\\nSentences without tags':\")\rprint(df)\r", "nl": "Write a Pandas program to remove the html tags within the specified column of a given DataFrame. "}
{"code": "import numpy as np\rm = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\rv = np.array([1, 1, 0])\rprint(\"Original vector:\")\rprint(v)\rprint(\"Original matrix:\")\rprint(m)\rresult = np.empty_like(m) \rfor i in range(4):\r  result[i, :] = m[i, :] + v\rprint(\"\\nAfter adding the vector v to each row of the matrix m:\")\rprint(result)\r", "nl": "Write a NumPy program to add a vector to each row of a given matrix. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details in the year 1985:\")\rprint(w_a_con[w_a_con['Year']==1985].head(10))\rprint(\"\\nThe world alcohol consumption details in the year 1989:\")\rprint(w_a_con[w_a_con['Year']==1989].head(10))\r", "nl": "Write a Pandas program to find out the alcohol consumption of a given year from the world alcohol consumption dataset. "}
{"code": "def average_two_lists(nums1, nums2):\r    result = sum(nums1 + nums2) / len(nums1 + nums2) \r    return result\r\rnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\rnums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]\rprint(\"Original list:\")\rprint(nums1)\rprint(nums2)\r\rprint(\"\\nAverage of two lists:\")\rprint(average_two_lists(nums1, nums2))\r", "nl": "Write a Python program to compute average of two given lists. "}
{"code": "import numpy as np\rimport datetime\rstart = datetime.datetime(2000, 1, 1)\rdt_array = np.array([start + datetime.timedelta(hours=i) for i in range(24)])\rprint(dt_array)\r", "nl": "Write a NumPy program to create 24 python datetime.datetime objects (single object for every hour), and then put it in a numpy array. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx', skiprows = 20)\rdf\r", "nl": "Write a Pandas program to import some excel data (coalpublic2013.xlsx ) skipping first twenty rows into a Pandas dataframe. "}
{"code": "print(\"Add a value(7), 5 times, to a list:\")\rnums = []\rnums += 5 * ['7']\rprint(nums)\rnums1 = [1,2,3,4]\rprint(\"\\nAdd 5, 6 times, to a list:\")\rnums1 += 6 * [5]\rprint(nums1)\rprint(\"\\nAdd a list, 4 times, to a list of lists:\")\rnums1 = []\rnums1 += 4 * [[1,2,5]]\rprint(nums1)\rprint(\"\\nAdd a list, 4 times, to a list of lists:\")\rnums1 = [[5,6,7]]\rnums1 += 4 * [[1,2,5]]\rprint(nums1)\r", "nl": "Write a Python program to append the same value /a list multiple times to a list/list-of-lists. "}
{"code": "import numpy as np\rx = np.array([[ 0.42436315, 0.48558583, 0.32924763], [ 0.7439979,0.58220701,0.38213418], [ 0.5097581,0.34528799,0.1563123 ]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Replace all elements of the said array with .5 which are greater than .5\")\rx[x > .5] = .5\rprint(x)\r", "nl": "Write a NumPy program to replace all elements of NumPy array that are greater than specified array. "}
{"code": "def unique_product(list_data):\r    temp = list(set(list_data))\r    p = 1\r    for i in temp:\r        p *= i\r    return p\rnums = [10, 20, 30, 40, 20, 50, 60, 40]\rprint(\"Original List : \",nums)\rprint(\"Product of the unique numbers of the said list: \",unique_product(nums))\r", "nl": "Write a Python program to calculate the product of the unique numbers of a given list. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport seaborn as sns\r#Source: https://bit.ly/1l9yjm9\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rmost_sightings_years = df['Date_time'].dt.year.value_counts().head(10)\rdef is_top_years(year):\r   if year in most_sightings_years.index:\r       return year\rmonth_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')\rmonth_vs_year.columns = month_vs_year.columns.astype(int)\rprint(\"\\nHeatmap for comparison of the top 10 years in which the UFO was sighted vs each month:\")\rplt.figure(figsize=(10,8))\rax = sns.heatmap(month_vs_year, vmin=0, vmax=4)\rax.set_xlabel('Month').set_size(20)\rax.set_ylabel('Year').set_size(20)\r", "nl": "Write a Pandas program to create a heatmap (rectangular data as a color-encoded matrix) for comparison of the top 10 years in which the UFO was sighted vs each Month. "}
{"code": "import textwrap\rsample_text = '''\r    Python is a widely used high-level, general-purpose, interpreted,\r    dynamic programming language. Its design philosophy emphasizes\r    code readability, and its syntax allows programmers to express\r    concepts in fewer lines of code than possible in languages such\r    as C++ or Java.\r    '''\rtext_without_Indentation = textwrap.dedent(sample_text)\rprint()\rprint(text_without_Indentation )\rprint()\r", "nl": "Write a Python program to remove existing indentation from all of the lines in a given text. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rresult = df.sort_values(by=['first_name','last_name'],ascending=[0,1])\rresult\r", "nl": "Write a Pandas program to import given excel data (employee.xlsx ) into a Pandas dataframe and sort based on multiple given columns. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 37, 33, 30, 31, 32]})\r     \rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nDefault Index Range:\")\rprint(df.index)\rdf.index += 10 \rprint(\"\\nNew Index Range:\")\rprint(df.index)\rprint(\"\\nDataFrame with new index:\")\rprint(df)\r", "nl": "Write a Pandas program to start index with different value rather than 0 in a given DataFrame. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-4-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Open', 'Close']]\rdf3 = df2.set_index('Date')\rplt.figure(figsize=(20,20))\rdf3.plot(kind='bar');\rplt.suptitle('Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table(index=['sex'], columns=['pclass'], values='survived', aggfunc='count')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and calculate how many women and men were in a particular cabin class. "}
{"code": "def max_min_val(list_val):\r     max_val = max(i for i in list_val if isinstance(i, int)) \r     min_val = min(i for i in list_val if isinstance(i, int))\r     return(max_val, min_val)\r\rlist_val = ['Python', 3, 2, 4, 5, 'version'] \rprint(\"Original list:\")\rprint(list_val)\rprint(\"\\nMaximum and Minimum values in the said list:\")\rprint(max_min_val(list_val))\r", "nl": "Write a Python program to find the maximum and minimum values in a given heterogeneous list. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'salesman_id': [5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012],\r'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rresult = df.groupby(pd.cut(df['salesman_id'], \r                  bins=[0,5006,np.inf],  \r                  labels=['S1', 'S2']))['sale_jan'].sum().reset_index()\rprint(\"\\nGroupBy with condition of  two labels and ranges:\")\rprint(result)\r", "nl": "Write a Pandas program to split a given dataset using group by on specified column into two labels and ranges. "}
{"code": "def common_list_of_lists(lst):\r    temp = set(lst[0]).intersection(*lst)\r    return list(temp) \r\rnums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nCommon elements of the said list of lists:\")\rprint(common_list_of_lists(nums))\rchars = [['a','b','c'],['b','c','d'],['c','d','e']]\rprint(\"\\nOriginal list:\")\rprint(chars)\rprint(\"\\nCommon elements of the said list of lists:\")\rprint(common_list_of_lists(chars))\r", "nl": "Write a Python program to find common elements in a given list of lists. "}
{"code": "def is_Sublist(l, s):\r\tsub_set = False\r\tif s == []:\r\t\tsub_set = True\r\telif s == l:\r\t\tsub_set = True\r\telif len(s) > len(l):\r\t\tsub_set = False\r\r\telse:\r\t\tfor i in range(len(l)):\r\t\t\tif l[i] == s[0]:\r\t\t\t\tn = 1\r\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\t\t\t\t\tn += 1\r\t\t\t\t\r\t\t\t\tif n == len(s):\r\t\t\t\t\tsub_set = True\r\r\treturn sub_set\r\ra = [2,4,3,5,7]\rb = [4,3]\rc = [3,7]\rprint(is_Sublist(a, b))\rprint(is_Sublist(a, c))\r", "nl": "Write a Python program to check whether a list contains a sublist. "}
{"code": "import collections\rimport pprint\rfile_input = input('File Name: ')\rwith open(file_input, 'r') as info:\r  count = collections.Counter(info.read().upper())\r  value = pprint.pformat(count)\rprint(value)\r", "nl": "Write a Python program to count the number of each character of a given text of a text file. "}
{"code": "import numpy as np\ra = np.array([[0, 1, 3], [5, 7, 9]])\rb = np.array([[0, 2, 4], [6, 8, 10]])\rc = np.concatenate((a, b), 1)\rprint(c)\r", "nl": "Write a NumPy program to concatenate two 2-dimensional arrays. "}
{"code": "def remove_none(nums):\r    result = filter(lambda v: v is not None, nums)\r    return list(result)\r\rnums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nRemove None value from the said list:\")\rprint(remove_none(nums))\r", "nl": "Write a Python program to remove None value from a given list using lambda function. "}
{"code": "import decimal\rprint(\"Configure the rounding to round up:\")\rdecimal.getcontext().prec = 1\rdecimal.getcontext().rounding = decimal.ROUND_UP\rprint(decimal.Decimal(30) / decimal.Decimal(4))\rprint(\"\\nConfigure the rounding to round down:\")\rdecimal.getcontext().prec = 3\rdecimal.getcontext().rounding = decimal.ROUND_DOWN\rprint(decimal.Decimal(30) / decimal.Decimal(4))\rprint(\"\\nConfigure the rounding to round up:\")\rprint(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP))\rprint(\"\\nConfigure the rounding to round down:\")\rprint(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN))\r", "nl": "Write a Python program to configure the rounding to round up and round down a given decimal value. Use decimal.Decimal"}
{"code": "from heapq import nlargest\rmy_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}  \rthree_largest = nlargest(3, my_dict, key=my_dict.get)\rprint(three_largest) \r", "nl": "Write a Python program to find the highest 3 values of corresponding keys in a dictionary. "}
{"code": "import numpy as np\rimport pandas as pd\rnp_array = np.array([10, 20, 30, 40, 50])\rprint(\"NumPy array:\")\rprint(np_array)\rnew_series = pd.Series(np_array)\rprint(\"Converted Pandas series:\")\rprint(new_series)\r", "nl": "Write a Pandas program to convert a NumPy array to a Pandas series. "}
{"code": "import numpy as np\rarray_nums = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\rprint(\"Original array:\")\rprint(array_nums)\rprint(\"\\nNumber of items of the said array:\")\rprint(array_nums.size) \rprint(\"\\nArray dimensions:\")\rprint(array_nums.shape)\rprint(\"\\nNumber of array dimensions:\")\rprint(array_nums.ndim)\rprint(\"\\nMemory size of each element of the said array\")\rprint(array_nums.itemsize)\r", "nl": "Write a NumPy program to get the number of items, array dimensions, number of array dimensions and the memory size of each element of a given array. "}
{"code": "dict1 = {'c1': 'Red', 'c2': 'Green', 'c3':None}\rprint(\"Original Dictionary:\")\rprint(dict1)\rprint(\"New Dictionary after dropping empty items:\")\rdict1 = {key:value for (key, value) in dict1.items() if value is not None}\rprint(dict1)\r", "nl": "Write a Python program to drop empty Items from a given Dictionary. "}
{"code": "import pandas as pd\rseries1 = pd.Series(range(10))\rseries2 = pd.Series(list('pqrstuvwxy'))\rprint(\"Original Series:\")\rprint(series1)\rprint(series2)\rseries1.append(series2)\rdf = pd.concat([series1, series2], axis=1)\rprint(\"\\nStack two given series vertically and horizontally:\")\rprint(df)\r", "nl": "Write a Pandas program to stack two given series vertically and horizontally. "}
{"code": "import numpy as np\rx = np.triu(np.arange(2, 14).reshape(4, 3), -1)\rprint(x)\r", "nl": "Write a NumPy program to create an array which looks like below array. "}
{"code": "import numpy as np\rarray1 = np.array([0, 10, 20, 40, 60])\rprint(\"Array1: \",array1)\rarray2 = [10, 30, 40]\rprint(\"Array2: \",array2)\rprint(\"Common values between two arrays:\")\rprint(np.intersect1d(array1, array2))\r", "nl": "Write a NumPy program to find common values between two arrays. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'address': ['7277 Surrey Ave.','920 N. Bishop Ave.','9910 Golden Star St.', '25 Dunbar St.', '17 West Livingston Court']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_number(text):\r    num = re.findall(r'[0-9]+',text)\r    return \" \".join(num)\rdf['number']=df['address'].apply(lambda x: find_number(x))\rprint(\"\\Extracting numbers from dataframe columns:\")\rprint(df)\r", "nl": "Write a Pandas program to extract only number from the specified column of a given DataFrame. "}
{"code": "import requests\r\nresponse = requests.get(\"https://en.wikipedia.org/robots.txt\")\r\ntest = response.text\r\nprint(\"robots.txt for http://www.wikipedia.org/\")\r\nprint(\"===================================================\")\r\nprint(test)\r\n", "nl": "Write a Python program to download and display the content of robot.txt for en.wikipedia.org. "}
{"code": "def discriminant():\r    x_value = float(input('The x value: '))\r    y_value = float(input('The y value: '))\r    z_value = float(input('The z value: '))\r    discriminant = (y_value**2) - (4*x_value*z_value)\r    if discriminant > 0:\r        print('Two Solutions. Discriminant value is:', discriminant)\r    elif discriminant == 0:\r        print('One Solution. Discriminant value is:', discriminant)\r    elif discriminant < 0:\r        print('No Real Solutions. Discriminant value is:', discriminant)\r\r\rdiscriminant()\r", "nl": "Write a Python program to calculate the discriminant value. "}
{"code": "def test(lst):\r    result = []\r    ele_val = 0\r    for digit in lst:\r        if digit == 0:\r            if ele_val != 0:\r                result.append(ele_val)\r                ele_val = 0\r        else:\r            ele_val += digit \r    if ele_val>0:\r        result.append(ele_val) \r    return result\rnums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1,0,0,0]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:\")\rprint(test(nums))\r", "nl": "Write a Python program to compute the sum of non-zero groups (separated by zeros) of a given list of numbers. "}
{"code": "import itertools\rprint(list(itertools.permutations([1,2,3])))\r", "nl": "Write a Python program to generate all permutations of a list in Python. "}
{"code": "#Ref.https://bit.ly/3a657IZ\rfrom __future__ import annotations\rimport re\rdef natural_sort(input_list: list[str]) -> list[str]:\r    def alphanum_key(key):\r        return [int(s) if s.isdigit() else s.lower() for s in re.split(\"([0-9]+)\", key)]\r    return sorted(input_list, key=alphanum_key)\rstrs = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\rprint(\"\\nOriginal list:\")\rprint(strs)\rnatural_sort(strs)\rprint(\"Sorted order is:\", strs)\rstrs =  ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']\rprint(\"\\nOriginal list:\")\rprint(strs)\rnatural_sort(strs)\rprint(\"Sorted order is:\", strs)\rstrs =  ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\rprint(\"\\nOriginal list:\")\rprint(strs)\rnatural_sort(strs)\rprint(\"Sorted order is:\", strs)\rstrs =   ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\rprint(\"\\nOriginal list:\")\rprint(strs)\rnatural_sort(strs)\rprint(\"Sorted order is:\", strs) \r", "nl": "Write a Python program to sort unsorted strings using natural sort. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rdef highlight_max(s):\r    '''\r    highlight the maximum in a Series green.\r    '''\r    is_max = s == s.max()\r    return ['background-color: green' if v else '' for v in is_max]\r\rprint(\"\\nHighlight the maximum value in each column:\")\rdf.style.apply(highlight_max,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in each column. "}
{"code": "def test_duplicate(array_nums):\r    nums_set = set(array_nums)    \r    return len(array_nums) != len(nums_set)     \rprint(test_duplicate([1,2,3,4,5]))\rprint(test_duplicate([1,2,3,4, 4]))\rprint(test_duplicate([1,1,2,2,3,3,4,4,5]))\r", "nl": "Write a Python program to find whether a given array of integers contains any duplicate element. Return true if any value appears at least twice in the said array and return false if every element is distinct. "}
{"code": "from PIL import Image\rimport numpy as np\r\ra = np.full((512, 256, 3), 255, dtype=np.uint8)\rimage = Image.fromarray(a, \"RGB\")\rimage.save(\"white.png\", \"PNG\")\r", "nl": "Write a NumPy program to create a white image of size 512x256. "}
{"code": "from operator import itemgetter\r\rdef max_min_list_tuples(class_students):\r    return_max = max(class_students,key=itemgetter(1))[1] \r    return_min = min(class_students,key=itemgetter(1))[1] \r    return return_max, return_min\r   \rclass_students = [('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]\rprint(\"Original list with tuples:\")\rprint(class_students)\rprint(\"\\nMaximum and minimum values of the said list of tuples:\")\rprint(max_min_list_tuples(class_students))\r", "nl": "Write a Python program to find the maximum and minimum values in a given list of tuples. "}
{"code": "def test(lst, char):\r    result = [i for i in lst if i.startswith(char)]\r    return result\rtext = [\"abcd\", \"abc\", \"bcd\", \"bkie\", \"cder\", \"cdsw\", \"sdfsd\", \"dagfa\", \"acjd\"]\rprint(\"\\nOriginal list:\")\rprint(text)\rchar = \"a\"\rprint(\"\\nItems start with\",char,\"from the said list:\")\rprint(test(text, char))\rchar = \"d\"\rprint(\"\\nItems start with\",char,\"from the said list:\")\rprint(test(text, char))\rchar = \"w\"\rprint(\"\\nItems start with\",char,\"from the said list:\")\rprint(test(text, char))\r", "nl": "Write a Python program to find the items starts with specific character from a given list. "}
{"code": "def split_two_parts(n_list, L):\r    return n_list[:L], n_list[L:]\rn_list = [1,1,2,3,4,4,5, 1]\rprint(\"Original list:\") \rprint(n_list)\rfirst_list_length = 3\rprint(\"\\nLength of the first part of the list:\",first_list_length)\rprint(\"\\nSplited the said list into two parts:\")\rprint(split_two_parts(n_list, first_list_length))\r\r", "nl": "Write a Python program to split a given list into two parts where the length of the first part of the list is given. "}
{"code": "import itertools\rfrom functools import partial\rX = [10, 20, 20, 20]\rY = [10, 20, 30, 40]\rZ = [10, 30, 40, 20]\rT = 70\r\rdef check_sum_array(N, *nums):\r  if sum(x for x in nums) == N:\r    return (True, nums)\r  else:\r      return (False, nums)\rpro = itertools.product(X,Y,Z)\rfunc = partial(check_sum_array, T)\rsums = list(itertools.starmap(func, pro))\r\rresult = set()\rfor s in sums:\r    if s[0] == True and s[1] not in result:\r      result.add(s[1])\r      print(result)\r", "nl": "Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations. "}
{"code": "import itertools as it\rstart = 10\rstep = 1\rprint(\"The starting number is \", start, \"and step is \",step)\rmy_counter = it.count(start, step)\r# Following  loop will run for ever\rprint(\"The said function print never-ending items:\")\rfor i in my_counter:    \r    print(i)\r", "nl": "Write a Python program to construct an infinite iterator that returns evenly spaced values starting with a specified number and step. "}
{"code": "import numpy as np  \rnums = np.array([[5.54, 3.38, 7.99],\r              [3.54, 8.32, 6.99],\r              [1.54, 2.39, 9.29]])\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nNew array of equal shape and data type of the said array filled by 0:\")\rprint(np.zeros_like(nums))\r", "nl": "Write a NumPy program to create an array of equal shape and data type of a given array. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDataframe - table style and border around the table and not around the rows:\")\rdf.style.set_table_styles([{'selector':'','props':[('border','4px solid #7a7')]}])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style and border around the table and not around the rows. "}
{"code": "items = []\rnum = [x for x in input().split(',')]\rfor p in num:\r    x = int(p, 2)\r    if not x%5:\r        items.append(p)\rprint(','.join(items))\r", "nl": "rite a Python program which accepts a sequence of comma separated 4 digit binary numbers as its input and print the numbers that are divisible by 5 in a comma separated sequence. "}
{"code": "def sum_of_digits(nums):\r    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\r\rnums = [10,2,56]\rprint(\"Original tuple: \") \rprint(nums)\rprint(\"Sum of digits of each number of the said list of integers:\")\rprint(sum_of_digits(nums))\r\rnums = [10,20,4,5,'b',70,'a']\rprint(\"\\nOriginal tuple: \") \rprint(nums)\rprint(\"Sum of digits of each number of the said list of integers:\")\rprint(sum_of_digits(nums))\r\rnums = [10,20,-4,5,-70]\rprint(\"\\nOriginal tuple: \") \rprint(nums)\rprint(\"Sum of digits of each number of the said list of integers:\")\rprint(sum_of_digits(nums))\r", "nl": "Write a Python program to compute the sum of digits of each number of a given list. "}
{"code": "import pandas as pd\rimport datetime\rfrom datetime import datetime, date\rtoday = datetime(2012, 10, 30)\rprint(\"Current date:\", today)\rtomorrow = today + pd.Timedelta(days=1)\rprint(\"Tomorrow:\", tomorrow)\ryesterday = today - pd.Timedelta(days=1)\rprint(\"Yesterday:\", yesterday)\rdate1 = datetime(2016, 8, 2)\rdate2 = datetime(2016, 7, 19)\rprint(\"\\nDifference between two dates: \",(date1 - date2))\r", "nl": "Write a Pandas program to print the day after and before a specified date. Also print the days between two given dates. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_valid_dates(dt):\r    #format: mm-dd-yyyy\r    result = re.findall(r'\\b(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/([0-9]{4})\\b',dt)\r    return result\rdf['valid_dates']=df['date_of_sale'].apply(lambda dt : find_valid_dates(dt))\rprint(\"\\nValid dates (format: mm-dd-yyyy):\")\rprint(df)\r", "nl": "Write a Pandas program to extract date (format: mm-dd-yyyy) from a given column of a given DataFrame. "}
{"code": "def quickSort(data_list):\r   quickSortHlp(data_list,0,len(data_list)-1)\r\rdef quickSortHlp(data_list,first,last):\r   if first < last:\r\r       splitpoint = partition(data_list,first,last)\r\r       quickSortHlp(data_list,first,splitpoint-1)\r       quickSortHlp(data_list,splitpoint+1,last)\r\r\rdef partition(data_list,first,last):\r   pivotvalue = data_list[first]\r\r   leftmark = first+1\r   rightmark = last\r\r   done = False\r   while not done:\r\r       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:\r           leftmark = leftmark + 1\r\r       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:\r           rightmark = rightmark -1\r\r       if rightmark < leftmark:\r           done = True\r       else:\r           temp = data_list[leftmark]\r           data_list[leftmark] = data_list[rightmark]\r           data_list[rightmark] = temp\r\r   temp = data_list[first]\r   data_list[first] = data_list[rightmark]\r   data_list[rightmark] = temp\r\r\r   return rightmark\r\rdata_list = [54,26,93,17,77,31,44,55,20]\rquickSort(data_list)\rprint(data_list)\r", "nl": "Write a Python program to sort a list of elements using the quick sort algorithm. "}
{"code": "# Source: https://bit.ly/3qZqcwm\rdef almost_increasing_sequence(sequence):\r    if len(sequence) < 3:\r        return True\r\r    a, b, *sequence = sequence\r    skipped = 0\r    for c in sequence:\r        if a < b < c:  # XXX\r            a, b = b, c\r            continue\r        elif b < c:    # !XX\r            a, b = b, c\r        elif a < c:    # X!X\r            a, b = a, c\r        skipped += 1\r        if skipped == 2:\r            return False\r    return a < b\r\rprint(almost_increasing_sequence([]))\rprint(almost_increasing_sequence([1]))\rprint(almost_increasing_sequence([1, 2]))\rprint(almost_increasing_sequence([1, 2, 3]))\rprint(almost_increasing_sequence([3, 1, 2]))\rprint(almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]))\rprint(almost_increasing_sequence([1, 2, 3, 0]))\rprint(almost_increasing_sequence([1, 2, 0, 3]))\rprint(almost_increasing_sequence([10, 1, 2, 3, 4, 5]))\rprint(almost_increasing_sequence([1, 2, 10, 3, 4]))\rprint(almost_increasing_sequence([1, 2, 3, 12, 4, 5]))\r\rprint(almost_increasing_sequence([3, 2, 1]))\rprint(almost_increasing_sequence([1, 2, 0, -1]))\rprint(almost_increasing_sequence([5, 6, 1, 2]))\rprint(almost_increasing_sequence([1, 2, 3, 0, -1]))\rprint(almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]))\r", "nl": "Write a Python program to check if a given list is strictly increasing or not. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true. "}
{"code": "import random\rimport string\rprint(\"Generate a random color hex:\")\rprint(\"#{:06x}\".format(random.randint(0, 0xFFFFFF)))\rprint(\"\\nGenerate a random alphabetical string:\")\rmax_length = 255\rs = \"\"\rfor i in range(random.randint(1, max_length)):\r    s += random.choice(string.ascii_letters)\rprint(s)\rprint(\"Generate a random value between two integers, inclusive:\")\rprint(random.randint(0, 10))\rprint(random.randint(-7, 7))\rprint(random.randint(1, 1))\rprint(\"Generate a random multiple of 7 between 0 and 70:\")\rprint(random.randint(0, 10) * 7)\r", "nl": "Write a Python program to generate a random color hex, a random alphabetical string, random value between two integers (inclusive) and a random multiple of 7 between 0 and 70. Use random.randint()"}
{"code": "class IOString():\r    def __init__(self):\r        self.str1 = \"\"\r\r    def get_String(self):\r        self.str1 = input()\r\r    def print_String(self):\r        print(self.str1.upper())\r\rstr1 = IOString()\rstr1.get_String()\rstr1.print_String()\r", "nl": "Write a Python class which has two methods get_String and print_String. get_String accept a string from the user and print_String print the string in upper case. "}
{"code": "x,y=0,1\r\rwhile y<50:\r    print(y)\r    x,y = y,x+y\r\t", "nl": "Write a Python program to get the Fibonacci series between 0 to 50. "}
{"code": "def test(dictt):\r    result = list(map(list, dictt.items()))\r    return result    \r\rcolor_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}\rprint(\"\\nOriginal Dictionary:\")\rprint(color_dict)\rprint(\"Convert the said dictionary into a list of lists:\")\rprint(test(color_dict))\r\rcolor_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}\rprint(\"\\nOriginal Dictionary:\")\rprint(color_dict)\rprint(\"Convert the said dictionary into a list of lists:\")\rprint(test(color_dict))\r", "nl": "Write a Python program to convert a given dictionary into a list of lists. "}
{"code": "import numpy as np \rnums1 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)\rnums2 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)\rprint(\"Array1:\") \rprint(nums1) \rprint(\"\\nArray2:\") \rprint(nums2) \rnums1 = np.expand_dims(nums1, axis=0)\rnums2 = np.expand_dims(nums2, axis=0)\rnums = np.append(nums1, nums2, axis=0)\rprint(\"\\nCombined array:\")\rprint(nums)\r", "nl": "Write a NumPy program to create two arrays with shape (300,400, 5), fill values using unsigned integer (0 to 255). Insert a new axis that will appear at the beginning in the expanded array shape. Now combine the said two arrays into one. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.min)\rprint(table)\r", "nl": "Write a Pandas program to create a Pivot table and find the minimum sale value of the items. "}
{"code": "L = [{\"V\":\"S001\"}, {\"V\": \"S002\"}, {\"VI\": \"S001\"}, {\"VI\": \"S005\"}, {\"VII\":\"S005\"}, {\"V\":\"S009\"},{\"VIII\":\"S007\"}]\rprint(\"Original List: \",L)\ru_value = set( val for dic in L for val in dic.values())\rprint(\"Unique Values: \",u_value)\r", "nl": "Write a Python program to print all unique values in a dictionary. "}
{"code": "original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]\rprint(\"Original List: \")\rprint(original_list)\rnew_list = [{k: v for k, v in d.items() if k != 'key1'} for d in original_list]\rprint(\"New List: \")\rprint(new_list)\r", "nl": "Write a Python program to remove key values pairs from a list of dictionaries. "}
{"code": "import numpy as np\rx = np.zeros((5,5))\rprint(\"Original array:\")\rprint(x)\rprint(\"Row values ranging from 0 to 4.\")\rx += np.arange(5)\rprint(x)\r", "nl": "Write a NumPy program to create a 5x5 matrix with row values ranging from 0 to 4. "}
{"code": "def not_poor(str1):\r  snot = str1.find('not')\r  spoor = str1.find('poor')\r  \r\r  if spoor > snot and snot>0 and spoor>0:\r    str1 = str1.replace(str1[snot:(spoor+4)], 'good')\r    return str1\r  else:\r    return str1\rprint(not_poor('The lyrics is not that poor!'))\rprint(not_poor('The lyrics is poor!'))\r", "nl": "Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string. "}
{"code": "str1 = 'W3RESOURCE.COM'\rprint(str1[:4].lower() + str1[4:])\r", "nl": "Write a Python program to lowercase first n characters in a string. "}
{"code": "def find_first_duplicate(nums):\r    num_set = set()\r    no_duplicate = -1\r\r    for i in range(len(nums)):\r\r        if nums[i] in num_set:\r            return nums[i]\r        else:\r            num_set.add(nums[i])\r\r    return no_duplicate\r\rprint(find_first_duplicate([1, 2, 3, 4, 4, 5]))\rprint(find_first_duplicate([1, 2, 3, 4]))\rprint(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]))\r", "nl": "Write a Python program to find the first duplicate element in a given array of integers. Return -1 If there are no such elements. "}
{"code": "import random\rdef randomly_interleave(nums1, nums2):\r    result =  list(map(next, random.sample([iter(nums1)]*len(nums1) + [iter(nums2)]*len(nums2), len(nums1)+len(nums2))))\r    return result\rnums1 = [1,2,7,8,3,7]\rnums2 = [4,3,8,9,4,3,8,9]\rprint(\"Original lists:\") \rprint(nums1)\rprint(nums2)\rprint(\"\\nInterleave two given list into another list randomly:\")\rprint(randomly_interleave(nums1, nums2))\r", "nl": "Write a Python program to interleave two given list into another list randomly using map() function. "}
{"code": "def unique_list(text_str):\r    l = text_str.split()\r    temp = []\r    for x in l:\r        if x not in temp:\r            temp.append(x)\r    return ' '.join(temp)\r\rtext_str = \"Python Exercises Practice Solution Exercises\"\rprint(\"Original String:\")\rprint(text_str)\rprint(\"\\nAfter removing duplicate words from the said string:\")\rprint(unique_list(text_str))\r", "nl": "Write a Python program to remove duplicate words from a given string. "}
{"code": "import pandas as pd\rds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])\rprint(\"Original Series:\")\rprint(ds)\rprint(\"\\nIndex of 11 in the said series:\")\rx = ds[ds == 11].index[0]\rprint(x)\r", "nl": "Write a Pandas program to get the index of an element of a given Series. "}
{"code": "def test(lst,str1):\r    result = [el for el in lst if(el in str1)] \r    return bool(result)\r\r\rstr1 = \"https://www.w3resource.com/python-exercises/list/\"\rlst = ['.com', '.edu', '.tv']   \rprint(\"The original string and list: \") \rprint(str1)\rprint(lst)\rprint(\"\\nCheck if\",str1,\"contains an element, which is present in the list\",lst)\rprint(test(lst,str1))\rstr1 = \"https://www.w3resource.net\"\rlst = ['.com', '.edu', '.tv']   \rprint(\"\\nThe original string and list: \" + str1) \rprint(str1)\rprint(lst)\rprint(\"\\nCheck if\",str1,\"contains an element, which is present in the list\",lst)\rprint(test(lst,str1))\r", "nl": "Write a Python program to check if a given string contains an element, which is present in a list. "}
{"code": "import sqlite3 \rfrom sqlite3 import Error \rdef sql_connection():\r    try:\r      conn = sqlite3.connect('mydatabase.db')\r      return conn\r    except Error:\r      print(Error)\r \rdef sql_table(conn, rows):\r    cursorObj = conn.cursor()\r# Create the table\r    cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r    sqlite_insert_query = \"\"\"INSERT INTO salesman\r                          (salesman_id, name, city, commission) \r                          VALUES (?, ?, ?, ?);\"\"\"    \r    cursorObj.executemany(sqlite_insert_query, rows)\r    conn.commit()      \r    print(\"Number of records after inserting rows:\")\r    cursor = cursorObj.execute('select * from salesman;')\r    print(len(cursor.fetchall()))\r  \r# Insert records\rrows = [(5001,'James Hoog', 'New York', 0.15),\r         (5002,'Nail Knite', 'Paris', 0.25),\r         (5003,'Pit Alex', 'London', 0.15),\r         (5004,'Mc Lyon', 'Paris', 0.35),\r         (5005,'Paul Adam', 'Rome', 0.45)]\r                   \rsqllite_conn = sql_connection() \rsql_table(sqllite_conn, rows)\r    \rif (sqllite_conn):\r  sqllite_conn.close()\r  print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to insert a list of records into a given SQLite table. "}
{"code": "def pancake_sort(nums):\r    arr_len = len(nums)\r    while arr_len > 1:\r        mi = nums.index(max(nums[0:arr_len]))\r        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r        arr_len -= 1\r    return nums\r\ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rprint(pancake_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Pancake sort. "}
{"code": "def shift_first_last(lst):\r    x = lst.pop(0)\r    y = lst.pop()\r    lst.insert(0, y)\r    lst.insert(len(lst), x)\r    return lst\r\rnums = [1,2,3,4,5,6,7]\rprint(\"Original list:\")\rprint(nums)\rprint(\"Shift last element to first position and first element to last position of the said list:\")\rprint(shift_first_last(nums))\r\rchars = ['s','d','f','d','s','s','d','f']\rprint(\"\\nOriginal list:\")\rprint(chars)\rprint(\"Shift last element to first position and first element to last position of the said list:\")\rprint(shift_first_last(chars))\r", "nl": "Write a Python program to shift last element to first position and first element to last position in a given list. "}
{"code": "import numpy as np\rx = np.zeros((5, 5, 5)).astype(int) + 1\rprint(x)\r", "nl": "Write a NumPy program to create a 5x5x5 cube of 1's. "}
{"code": "import numpy as np\rx=np.array([ 0.26153123, 0.52760141, 0.5718299, 0.5927067, 0.7831874, 0.69746349,             \r  0.35399976, 0.99469633, 0.0694458, 0.54711478]) \rprint(\"Original array elements:\")\rprint(x)\rprint(\"Print array values with precision 3:\")\rnp.set_printoptions(precision=3)\rprint(x)\r", "nl": "Write a NumPy program to display NumPy array elements of floating values with given precision. "}
{"code": "import pandas as pd\rimport numpy as np\rnum_state = np.random.RandomState(100)\rnum_series = pd.Series(num_state.normal(10, 4, 20))\rprint(\"Original Series:\")\rprint(num_series)\rresult = np.percentile(num_series, q=[0, 25, 50, 75, 100])\rprint(\"\\nMinimum, 25th percentile, median, 75th, and maximum of a given series:\")\rprint(result)\r", "nl": "Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. "}
{"code": "import collections\rclass Solution(object):\r    def majorityElement(self, nums):\r        \"\"\"\r        :type nums: List[int]\r        :return type: int\r        \"\"\"\r        count_ele=collections.Counter(nums)\r        return count_ele.most_common()[0][0]\r\rresult = Solution().majorityElement([10,10,20,30,40,10,20,10])\rprint(result)\r", "nl": "Write a Python program to find the majority element from a given array of size n using Collections module. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = '<a href=\"http://example.com/\">HTML<i>w3resource.com</i></a>'\rsoup = BeautifulSoup(html_doc, \"lxml\")\rtag = soup.a\rprint(\"Original Markup:\")\rprint(tag.contents)\rtag.insert(2, \"CSS\") #2-> Position of the text (1, 2, 3\u2026)\rprint(\"\\nNew url after inserting the text:\")\rprint(tag.contents)\r", "nl": "Write a Python program to insert a new text within a url in a specified position. "}
{"code": "def l_strs_to_l_chars(lst):\r    result = [i for element in lst for i in element]\r    return result\r\rcolors = [\"red\", \"white\", \"a\", \"b\", \"black\", \"f\"]\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nConvert the said list of strings and characters to a single list of characters:\")\rprint(l_strs_to_l_chars(colors))\r", "nl": "Write a Python program to convert a given list of strings and characters to a single list of characters. "}
{"code": "from collections.abc import Iterable\rdef deep_flatten(lst):\r  return ([a for i in lst for a in\r          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])\rnums = [1, [2], [[3], [4], 5], 6]\rprint(\"Original list elements:\")\rprint(nums) \rprint()\rprint(\"Deep flatten the said list:\")\rprint(deep_flatten(nums))\rnums = [[[1, 2, 3], [4, 5]], 6]\rprint(\"\\nOriginal list elements:\")\rprint(nums) \rprint()\rprint(\"Deep flatten the said list:\")\rprint(deep_flatten(nums))\r", "nl": "Write a Python program to perform a deep flattens a list. "}
{"code": "num = [1,2,3,4]\rprint(['emp{0}'.format(i) for i in  num])\r", "nl": "Write a Python program to insert a given string at the beginning of all items in a list. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Datetime representation:\")\rprint(a.datetime)\rb = a.timestamp\rprint(\"\\nTimestamp representation:\")\rprint(b)\r", "nl": "Write a Python program to get a datetime or timestamp representation from current datetime. "}
{"code": "\rimport numpy as np\rx = np.zeros(10)\rprint(x)\rprint(\"Update sixth value to 11\")\rx[6] = 11\rprint(x)\r", "nl": "rite a NumPy program to create a null vector of size 10 and update sixth value to 11."}
{"code": "import re\rtxt = \"Enter at 1 20 Kearny Street. The security desk can direct you to floor 1 6. Please have your identification ready.\"\rprint(\"Original string:\")\rprint(txt)\rnew_txt = re.sub(r\"(?<=\\d)\\s(?=\\d)\", '', txt)\rprint('\\nAfter concatenating the consecutive numbers in the said string:')\rprint(new_txt)\r", "nl": "Write a Python program to concatenate the consecutive numbers in a given string. "}
{"code": "#Ref.https://bit.ly/3cce7iB\rfrom multiprocessing import Lock, Pipe, Process\r\r# lock used to ensure that two processes do not access a pipe at the same time\rprocessLock = Lock()\rdef oeProcess(position, value, LSend, RSend, LRcv, RRcv, resultPipe):\r    global processLock\r\r    # we perform n swaps since after n swaps we know we are sorted\r    # we *could* stop early if we are sorted already, but it takes as long to\r    # find out we are sorted as it does to sort the list with this algorithm\r    for i in range(0, 10):\r\r        if (i + position) % 2 == 0 and RSend is not None:\r            # send your value to your right neighbor\r            processLock.acquire()\r            RSend[1].send(value)\r            processLock.release()\r\r            # receive your right neighbor's value\r            processLock.acquire()\r            temp = RRcv[0].recv()\r            processLock.release()\r\r            # take the lower value since you are on the left\r            value = min(value, temp)\r        elif (i + position) % 2 != 0 and LSend is not None:\r            # send your value to your left neighbor\r            processLock.acquire()\r            LSend[1].send(value)\r            processLock.release()\r\r            # receive your left neighbor's value\r            processLock.acquire()\r            temp = LRcv[0].recv()\r            processLock.release()\r\r            # take the higher value since you are on the right\r            value = max(value, temp)\r    # after all swaps are performed, send the values back to main\r    resultPipe[1].send(value)\r\"\"\"\rthe function which creates the processes that perform the parallel swaps\rarr = the list to be sorted\r\"\"\"\rdef OddEvenTransposition(arr):\r    processArray = []\r    resultPipe = []\r    # initialize the list of pipes where the values will be retrieved\r    for _ in arr:\r        resultPipe.append(Pipe())\r    # creates the processes\r    # the first and last process only have one neighbor so they are made outside\r    # of the loop\r    tempRs = Pipe()\r    tempRr = Pipe()\r    processArray.append(\r        Process(\r            target=oeProcess,\r            args=(0, arr[0], None, tempRs, None, tempRr, resultPipe[0]),\r        )\r    )\r    tempLr = tempRs\r    tempLs = tempRr\r\r    for i in range(1, len(arr) - 1):\r        tempRs = Pipe()\r        tempRr = Pipe()\r        processArray.append(\r            Process(\r                target=oeProcess,\r                args=(i, arr[i], tempLs, tempRs, tempLr, tempRr, resultPipe[i]),\r            )\r        )\r        tempLr = tempRs\r        tempLs = tempRr\r\r    processArray.append(\r        Process(\r            target=oeProcess,\r            args=(\r                len(arr) - 1,\r                arr[len(arr) - 1],\r                tempLs,\r                None,\r                tempLr,\r                None,\r                resultPipe[len(arr) - 1],\r            ),\r        )\r    )\r    # start the processes\r    for p in processArray:\r        p.start()\r    # wait for the processes to end and write their values to the list\r    for p in range(0, len(resultPipe)):\r        arr[p] = resultPipe[p][0].recv()\r        processArray[p].join()\r    return arr\r# creates a reverse sorted list and sorts it\rdef main():\r    arr = list(range(10, 0, -1))\r    print(\"Initial List\")\r    print(*arr)\r    arr = OddEvenTransposition(arr)\r    print(\"\\nSorted List:\")\r    print(*arr)\rif __name__ == \"__main__\":\r    main()\r", "nl": "Write a Python program to sort unsorted numbers using Odd Even Transposition Parallel sort. "}
{"code": "import numpy as np\rarray1 = np.array([[11, 22, 33, 44, 55],\r             [66,  77,  88,  99, 100]])\rprint(\"Original arrays:\")\rprint(array1)\ri = [1,3,0,4,2]\rresult = array1[:,i]\rprint(\"New array:\")\rprint(result)\r", "nl": "Write a NumPy program to rearrange columns of a given NumPy 2D array using given index positions. "}
{"code": "def remove_dictionary(colors, r_id):\r    colors[:] = [d for d in colors if d.get('id') != r_id]\r    return colors\r\rcolors = [{\"id\" : \"#FF0000\", \"color\" : \"Red\"}, \r          {\"id\" : \"#800000\", \"color\" : \"Maroon\"}, \r          {\"id\" : \"#FFFF00\", \"color\" : \"Yellow\"}, \r          {\"id\" : \"#808000\", \"color\" : \"Olive\"}] \rprint('Original list of dictionary:')\rprint(colors)\rr_id = \"#FF0000\"\rprint(\"\\nRemove id\",r_id,\"from the said list of dictionary:\")\rprint(remove_dictionary(colors, r_id))\r", "nl": "Write a Python program to remove a specified dictionary from a given list. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001.','c000,2','c0003', 'c0003#', 'c0004,'],\r    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_punctuations(text):\r    result = re.findall(r'[!\"\\$%&\\'()*+,\\-.\\/:;=#@?\\[\\\\\\]^_`{|}~]*', text)\r    string=\"\".join(result)\r    return list(string)\rdf['nonalpha']=df['company_code'].apply(lambda x: find_punctuations(x))\rprint(\"\\nExtracting punctuation:\")\rprint(df)\r", "nl": "Write a Pandas program to extract only punctuations from the specified column of a given DataFrame. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: Second row\")\rprint(arra_data[1,:])\r", "nl": "Write a NumPy program to extract all the elements of the second row from a given (4x4) array. "}
{"code": "import numpy as np\rz= np.random.random((10,2))\rx,y = z[:,0], z[:,1]\rr = np.sqrt(x**2+y**2)\rt = np.arctan2(y,x)\rprint(r)\rprint(t)\r", "nl": "Write a NumPy program to convert cartesian coordinates to polar coordinates of a random 10x2 matrix representing cartesian coordinates. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rdef highlight_max(s):\r    '''\r    highlight the maximum in a Series green.\r    '''\r    is_max = s == s.max()\r    return ['background-color: green' if v else '' for v in is_max]\r\rprint(\"\\nHighlight the maximum value in last two columns:\")\rdf.style.apply(highlight_max,subset=pd.IndexSlice[:, ['D', 'E']])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in last two columns. "}
{"code": "color1 = [\"green\", \"orange\", \"black\", \"white\"]\rcolor2 = [\"green\", \"green\", \"green\", \"green\"]\r\rprint(all(c == 'blue' for c in color1))\rprint(all(c == 'green' for c in color2))\r", "nl": "Write a Python program to check if all items of a given list of strings is equal to a given string. "}
{"code": "def rgb_to_hex(r, g, b):\r  return ('{:02X}' * 3).format(r, g, b)\r \rprint(rgb_to_hex(255, 165, 1))\rprint(rgb_to_hex(255, 255, 255))\rprint(rgb_to_hex(0, 0, 0))\rprint(rgb_to_hex(0, 0, 128))\rprint(rgb_to_hex(192, 192, 192))\r", "nl": "Write a Python program to convert the values of RGB components to a hexadecimal color code. "}
{"code": "import numpy as np\ra = np.array([[1,2],[3,4]])\rprint(\"Original array:\")\rprint(a)\rresult =  np.linalg.det(a)\rprint(\"Determinant of the said array:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the determinant of an array. "}
{"code": "from bisect import bisect_left   \rdef Binary_Search(a, x): \r    i = bisect_left(a, x) \r    if i != len(a) and a[i] == x: \r        return i \r    else: \r        return -1\r\rnums = [1, 2, 3, 4, 8, 8, 10, 12] \rx = 8 \rnum_position = Binary_Search(nums, x) \rif num_position == -1: \r    print(x, \"is not present.\") \relse: \r    print(\"First occurrence of\", x, \"is present at index\", num_position)\r", "nl": "Write a Python program to find the first occurrence of a given number in a sorted list using Binary Search (bisect). "}
{"code": "import collections\rmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]\rprint(\"Original List : \",my_list)\rctr = collections.Counter(my_list)\rprint(\"Frequency of the elements in the List : \",ctr)\r", "nl": "Write a Python program to get the frequency of the elements in a list. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df) \rprint(\"\\nMissing values in purch_amt column:\")\rresult = df['purch_amt'].value_counts(dropna=False).loc[np.nan]\rprint(result)\r", "nl": "Write a Pandas program to count the number of missing values of a specified column in a given DataFrame. "}
{"code": "import datetime\rnow = datetime.datetime.now()\rprint (\"Current date and time : \")\rprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\r", "nl": "rite a Python program to display the current date and time."}
{"code": "import numpy as np\rprint(\"\\nTest element-wise for finiteness (not infinity or not Not a Number):\")\rprint(np.isfinite(1))\rprint(np.isfinite(0))\rprint(np.isfinite(np.nan))\rprint(\"\\nTest element-wise for positive or negative infinity:\")\rprint(np.isinf(np.inf))\rprint(np.isinf(np.nan))\rprint(np.isinf(np.NINF))\rprint(\"Test element-wise for NaN:\")\rprint(np.isnan([np.log(-1.),1.,np.log(0)]))\rprint(\"Test element-wise for NaT (not a time):\")\rprint(np.isnat(np.array([\"NaT\", \"2016-01-01\"], dtype=\"datetime64[ns]\")))\rprint(\"Test element-wise for negative infinity:\")\rx = np.array([-np.inf, 0., np.inf])\ry = np.array([2, 2, 2])\rprint(np.isneginf(x, y))\rprint(\"Test element-wise for positive infinity:\")\rx = np.array([-np.inf, 0., np.inf])\ry = np.array([2, 2, 2])\rprint(np.isposinf(x, y))\r", "nl": "Write a NumPy program to test element-wise of a given array for finiteness (not infinity or not Not a Number), positive or negative infinity, for NaN, for NaT (not a time), for negative infinity, for positive infinity. "}
{"code": "import numpy as np\rx = np.array([10, 20, 30], float)\rprint(\"Original array:\")\rprint(x)\rprint(\"Sum of the array elements:\")\rprint(x.sum())\rprint(\"Product of the array elements:\")\rprint(x.prod())\r", "nl": "Write a NumPy program to sum and compute the product of a NumPy array elements. "}
{"code": "from itertools import chain, zip_longest\rdef interleave_diff_len_lists(list1, list2, list3, list4):\r    return [x for x in chain(*zip_longest(list1, list2, list3, list4)) if x is not None]    \r    \rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [2, 5, 8]\rnums3 = [0, 1]\rnums4 = [3, 3, -1, 7]\r\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(nums3)\rprint(nums4)\r\rprint(\"\\nInterleave said lists of different lengths:\")\rprint(interleave_diff_len_lists(nums1, nums2, nums3, nums4))\r", "nl": "Write a Python program to interleave multiple given lists of different lengths using itertools module. "}
{"code": "def max_val(list_val):\r     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  \r     return(max_val)\r\rlist_val = ['Python', 3, 2, 4, 5, 'version'] \rprint(\"Original list:\")\rprint(list_val)\rprint(\"\\nMaximum values in the said list using lambda:\")\rprint(max_val(list_val))\r", "nl": "Write a Python program to find the maximum value in a given heterogeneous list using lambda. "}
{"code": "import numpy as np\rarray1 = np.array([0, 10, 20, 40, 60, 80])\rprint(\"Array1: \",array1)\rarray2 = [10, 30, 40, 50, 70]\rprint(\"Array2: \",array2)\rprint(\"Unique values that are in only one (not both) of the input arrays:\")\rprint(np.setxor1d(array1, array2))\r", "nl": "Write a NumPy program to find the set exclusive-or of two arrays. Set exclusive-or will return the sorted, unique values that are in only one (not both) of the input arrays. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.arange(9).reshape(3,3)\ry = x*3\rprint(\"Array-1\")\rprint(x)\rprint(\"Array-2\")\rprint(y)\rnew_array =  np.vstack((x,y))\rprint(\"\\nStack arrays in sequence vertically:\")\rprint(new_array)\r", "nl": "Write a NumPy program to stack arrays in sequence vertically. "}
{"code": "def max_n_nums(nums, n = 1):\r  return sorted(nums, reverse = True)[:n]\rnums = [1, 2, 3]\rprint(\"Original list elements:\")\rprint(nums)\rprint(\"Maximum values of the said list:\", max_n_nums(nums))\rnums = [1, 2, 3]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Two maximum values of the said list:\", max_n_nums(nums,2))\rnums = [-2, -3, -1, -2, -4, 0, -5]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Threee maximum values of the said list:\", max_n_nums(nums,3))\rnums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Two maximum values of the said list:\", max_n_nums(nums, 2))\r", "nl": "Write a Python program to get the n maximum elements from a given list of numbers. "}
{"code": "import numpy as np\ra = np.array([1, 0, np.nan, np.inf])\rprint(\"Original array\")\rprint(a)\rprint(\"Test element-wise for positive or negative infinity:\")\rprint(np.isinf(a))\r", "nl": "Write a NumPy program to\u00a0test element-wise for positive or negative infinity. "}
{"code": "def difference(n):\r    if n <= 17:\r        return 17 - n\r    else:\r        return (n - 17) * 2 \r\rprint(difference(22))\rprint(difference(14))\r", "nl": "Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference. "}
{"code": "import numpy as np\rx = np.array([[1,2,3], [4,5,np.nan], [7,8,9], [True, False, True]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Remove all non-numeric elements of the said array\")\rprint(x[~np.isnan(x).any(axis=1)])\r", "nl": "Write a NumPy program to remove all rows in a NumPy array that contain non-numeric values. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index =  [1, 2, 3, 4, 5, 6])\rprint(\"Original DataFrame with single index:\")\rprint(df)\rprint(\"\\nIndex of rows where specified column matches certain value:\")\rprint(df.index[df['school_code']=='s001'].tolist())\r", "nl": "Write a Pandas program to find the indexes of rows of a specified value of a given column in a DataFrame. "}
{"code": "def arclength():\r    pi=22/7\r    diameter = float(input('Diameter of circle: '))\r    angle = float(input('angle measure: '))\r    if angle >= 360:\r        print(\"Angle is not possible\")\r        return\r    arc_length = (pi*diameter) * (angle/360)\r    print(\"Arc Length is: \", arc_length)\r\rarclength()\r", "nl": "Write a Python program to calculate arc length of an angle. "}
{"code": "import numpy as np\rx = np.array([1,2,3])\ry = np.array([4,5])\rresult = np.transpose([np.tile(x, len(y)), np.repeat(y, len(x))])\rprint(result)\r", "nl": "Write a NumPy program to create a Cartesian product of two arrays into single array of 2D points. "}
{"code": "import numpy as np \r \rnums = np.array([[3, 2, np.nan, 1],\r              [10, 12, 10, 9],\r              [5, np.nan, 1, np.nan]])\r\rprint(\"Original array:\") \rprint(nums)\rprint(\"\\nFind the missing data of the said array:\")\rprint(np.isnan(nums))\r", "nl": "Write a NumPy program to find the missing data in a given array. "}
{"code": "import collections\reven_nums = (2, 4, 6, 8, 10)\reven_deque = collections.deque(even_nums)\rprint(\"Even numbers:\")\rprint(even_deque)\rmore_even_nums = (12, 14, 16, 18, 20)\reven_deque.extend(more_even_nums)\rprint(\"More even numbers:\")\rprint(even_deque)\r", "nl": "Write a Python program to add more number of elements to a deque object from an iterable object. "}
{"code": "import requests\rimport re\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nContent of elements that contain 'Python' string:\")\rstr1 = soup.find_all(string=re.compile('Python'))\rfor txt in str1:\r    print(\" \".join(txt.split()))\r", "nl": "Write a Python program to print content of elements that contain a specified string of a given web page. "}
{"code": "from array import array\ra = array(\"I\", (12,25))\rprint(\"Array buffer start address in memory and number of elements.\")\rprint(a.buffer_info())\r", "nl": "Write a Python program to get an array buffer information. "}
{"code": "import csv\rreader = csv.reader(open(\"employees.csv\"))\rno_lines= len(list(reader))\rprint(no_lines)\r", "nl": "Write a Python program to count the number of lines in a given CSV file. Use csv.reader"}
{"code": "def odd_even_transposition(arr: list) -> list:\r    arr_size = len(arr)\r    for _ in range(arr_size):\r        for i in range(_ % 2, arr_size - 1, 2):\r            if arr[i + 1] < arr[i]:\r                arr[i], arr[i + 1] = arr[i + 1], arr[i]\r\r    return arr\r            \rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rodd_even_transposition(nums)\rprint(\"Sorted order is:\", nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rodd_even_transposition(nums)\rprint(\"Sorted order is:\", nums)\r", "nl": "Write a Python program to sort an odd-even sort or odd-even transposition sort. "}
{"code": "x = 22\rprint(\"\\nOriginal Number: \", x)\rprint(\"Left aligned (width 10)   :\"+\"{:< 10d}\".format(x));\rprint(\"Right aligned (width 10)  :\"+\"{:10d}\".format(x));\rprint(\"Center aligned (width 10) :\"+\"{:^10d}\".format(x));\rprint()\r", "nl": "Write a Python program to display a number in left, right and center aligned of width 10. "}
{"code": "try:\r  x = 1\rexcept NameError:\r  print(\"Variable is not defined....!\")\relse:\r  print(\"Variable is defined.\")\rtry:\r  y\rexcept NameError:\r  print(\"Variable is not defined....!\")\relse:\r  print(\"Variable is defined.\")\r  ", "nl": "Write a Python program to determine whether variable is defined or not. "}
{"code": "import numpy as np\rx = np.array([-1, -4, 0, 2, 3, 4, 5, -6])\rprint(\"Original array:\")\rprint(x)\rprint(\"Replace the negative values of the said array with 0:\")\rx[x < 0] = 0\rprint(x)\r", "nl": "Write a NumPy program to replace the negative values in a NumPy array with 0. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-4-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Open', 'Close']]\rdf3 = df2.set_index('Date')\rplt.figure(figsize=(20,20))\rdf3.plot.bar(stacked=True);\rplt.suptitle('Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. "}
{"code": "list1 = ['a','b','c','d','e','f']\rlist2 = ['d','e','f','g','h']\rprint('Missing values in second list: ', ','.join(set(list1).difference(list2)))\rprint('Additional values in second list: ', ','.join(set(list2).difference(list1)))\r", "nl": "Write a Python program to find missing and additional values in two lists. "}
{"code": "def remove_spaces(str1):\r  str1 = str1.replace(' ','')\r  return str1\r    \rprint(remove_spaces(\"w 3 res ou r ce\"))\rprint(remove_spaces(\"a b c\"))\r", "nl": "rite a Python program to remove spaces from a given string. "}
{"code": "import pandas as pd\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df,index=[\"Region\", \"Item\"], values=\"Units\")\rprint(table.query('Item == [\"Television\",\"Home Theater\"]'))\r", "nl": "Write a Pandas program to create a Pivot table and find the region wise Television and Home Theater sold. "}
{"code": "import sqlite3 \rfrom sqlite3 import Error \rdef sql_connection():\r    try:\r      conn = sqlite3.connect('mydatabase.db')\r      return conn\r    except Error:\r      print(Error) \rdef sql_table(conn):\r    cursorObj = conn.cursor()\r# Create the table\r    cursorObj.execute(\"CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));\")\r# Insert records\r    cursorObj.executescript(\"\"\"\r    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);\r    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);\r    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);\r    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);\r    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);\r    \"\"\")    \r    cursorObj.execute(\"SELECT * FROM salesman\")\r    rows = cursorObj.fetchall()\r    print(\"Agent details:\")\r    for row in rows:\r        print(row)\r    print(\"\\nUpdate all commision to .55:\")\r    sql_update_query = \"\"\"Update salesman set commission = .55\"\"\"\r    cursorObj.execute(sql_update_query)\r    conn.commit()\r    print(\"Record Updated successfully \")    \r    cursorObj.execute(\"SELECT * FROM salesman\")\r    rows = cursorObj.fetchall()\r    print(\"\\nAfter updating Agent details:\")\r    for row in rows:\r        print(row)\rsqllite_conn = sql_connection()\rsql_table(sqllite_conn)\rif (sqllite_conn):\r  sqllite_conn.close()\r  print(\"\\nThe SQLite connection is closed.\")\r", "nl": "Write a Python program to update all the values of a specific column of a given SQLite table. "}
{"code": "a = 30\rb = 20\rprint(\"\\nBefore swap a = %d and b = %d\" %(a, b))\ra, b = b, a\rprint(\"\\nAfter swaping a = %d and b = %d\" %(a, b))\rprint()\r", "nl": "Write a Python program to swap two variables. "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\r                     'key2': ['K0', 'K1', 'K0', 'K1'],\r                     'P': ['P0', 'P1', 'P2', 'P3'],\r                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) \rdata2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\r                      'key2': ['K0', 'K0', 'K0', 'K0'],\r                      'R': ['R0', 'R1', 'R2', 'R3'],\r                      'S': ['S0', 'S1', 'S2', 'S3']})\rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerged Data (keys from data2):\")\rmerged_data = pd.merge(data1, data2, how='right', on=['key1', 'key2'])\rprint(merged_data)\rprint(\"\\nMerged Data (keys from data1):\")\rmerged_data = pd.merge(data2, data1, how='right', on=['key1', 'key2'])\rprint(merged_data)\r", "nl": "Write a Pandas program to join two dataframes using keys from right dataframe only. "}
{"code": "import numpy as np\rx = np.array([4, 5])\ry = np.array([7, 10])\rprint(\"Original vectors:\")\rprint(x)\rprint(y)\rprint(\"Inner product of said vectors:\")\rprint(np.dot(x, y))\r", "nl": "Write a NumPy program to compute the inner product of two given vectors. "}
{"code": "import pandas as pd\rthursdays  = pd.date_range('2020-01-01', \r                           '2020-12-31', freq=\"W-THU\")\rprint(\"All Thursdays between 2020-01-01 and 2020-12-31:\\n\")\rprint(thursdays.values)\r", "nl": "Write a Pandas program to calculate all Thursdays between two given days. "}
{"code": "def permute_string(str):\r    if len(str) == 0:\r        return ['']\r    prev_list = permute_string(str[1:len(str)])\r    next_list = []\r    for i in range(0,len(prev_list)):\r        for j in range(0,len(str)):\r            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r            if new_str not in next_list:\r                next_list.append(new_str)\r    return next_list\r\rprint(permute_string('ABCD'));\r", "nl": "Write a Python program to print all permutations of a given string (including duplicates). "}
{"code": "def test(dictt,keys):\r    return [list(d[k] for k in keys) for d in dictt] \r\rstudents = [\r        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, \r        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},\r        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, \r        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, \r        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}\r        ]\r\rprint(\"\\nOriginal Dictionary:\")\rprint(students)\rprint(\"\\nExtract values from the said dictionarie and create a list of lists using those values:\")\rprint(\"\\n\",test(students,('student_id', 'name', 'class')))\rprint(\"\\n\",test(students,('student_id', 'name')))\rprint(\"\\n\",test(students,('name', 'class')))\r", "nl": "Write a Python program to extract values from a given dictionaries and create a list of lists from those values. "}
{"code": "import numpy as np\rnum = np.arange(36)\rarr1 = np.reshape(num, [4, 9])\rprint(\"Original array:\")\rprint(arr1)\rresult  = arr1.sum(axis=0)\rprint(\"\\nSum of all columns:\")\rprint(result)\r", "nl": "Write a NumPy program to calculate the sum of all columns of a 2D NumPy array. "}
{"code": "def remove_char(str, n):\r      first_part = str[:n] \r      last_part = str[n+1:]\r      return first_part + last_part\rprint(remove_char('Python', 0))\rprint(remove_char('Python', 3))\rprint(remove_char('Python', 5))\r", "nl": "Write a Python program to remove the n"}
{"code": "from collections import OrderedDict\rdef remove_duplicate(str1):\r  return \"\".join(OrderedDict.fromkeys(str1))\r     \rprint(remove_duplicate(\"python exercises practice solution\"))\rprint(remove_duplicate(\"w3resource\"))\r", "nl": "Write a Python program to remove duplicate characters of a given string. "}
{"code": "import numpy as np\rarra1 = np.array([(\"Yasemin Rayner\", 88.5, 90),\r                 (\"Ayaana Mcnamara\", 87, 99),\r             (\"Jody Preece\", 85.5, 91)])\rprint(\"Original arrays:\")\rprint(arra1)\rprint(\"\\nRecord array;\")\rresult = np.core.records.fromarrays(arra1.T,\r                              names='col1, col2, col3',\r                              formats = 'S80, f8, i8')\rprint(result)\r", "nl": "Write a NumPy program to create a record array from a given regular array. "}
{"code": "import arrow\rprint(\"Ctime formatted representation of the date and time:\")\ra = arrow.utcnow().ctime()\rprint(a) \r", "nl": "Write a Python program to create a ctime formatted representation of the date and time using arrow module. "}
{"code": "print(\"Input the value of x & y\")\rx, y = map(int, input().split())\rprint(\"The value of x & y are: \",x,y)\r", "nl": "Write a Python program to input two integers in a single line. "}
{"code": "def is_abundant(n):\r    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r    return fctr_sum > n\rprint(is_abundant(12))\rprint(is_abundant(13))\r", "nl": "Write a Python program to find out, if the given number is abundant. "}
{"code": "import numpy as np\rx = np.random.random(10)\rprint(\"Original array:\")\rprint(x)\rx.sort()\rprint(\"Sorted array:\")\rprint(x)\r", "nl": "Write a NumPy program to create a random vector of size 10 and sort it. "}
{"code": "import numpy as np \rnums1 = np.array([[4.5, 3.5],\r                 [5.1, 2.3]])\rnums2 = np.array([[1],\r                  [2]])\rprint(\"Original arrays:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nConcatenating the said two arrays:\")\rprint(np.concatenate((nums1, nums2), axis=1))\r", "nl": "Write a NumPy program to create to concatenate two given arrays of shape (2, 2) and (2,1). "}
{"code": "def first_repeated_char(str1):\r  for index,c in enumerate(str1):\r    if str1[:index+1].count(c) > 1:\r      return c \r  return \"None\"\r\rprint(first_repeated_char(\"abcdabcd\"))\rprint(first_repeated_char(\"abcd\"))\r", "nl": "Write a Python program to find the first repeated character in a given string. "}
{"code": "def longest_word(filename):\r    with open(filename, 'r') as infile:\r              words = infile.read().split()\r    max_len = len(max(words, key=len))\r    return [word for word in words if len(word) == max_len]\r\rprint(longest_word('test.txt'))\r", "nl": "Write a python program to find the longest words. "}
{"code": "def personal_details():\r    name, age = \"Simon\", 19\r    address = \"Bangalore, Karnataka, India\"\r    print(\"Name: {}\\nAge: {}\\nAddress: {}\".format(name, age, address))\r\rpersonal_details()\r", "nl": "Write a Python program to display your details like name, age, address in three different lines. "}
{"code": "from itertools import groupby\rdef count_same_pair(nums):\r    result = [sum(1 for _ in group) for _, group in groupby(nums)]\r    return result\r\rnums = [1,1,2,2,2,4,4,4,5,5,5,5]\rprint(\"Original lists:\")\rprint(nums)\rprint(\"\\nFrequency of the consecutive duplicate elements:\")\rprint(count_same_pair(nums))\r", "nl": "Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. Use itertools module. "}
{"code": "import arrow\rprint(\"Daylight savings time adjustment:\")\ra = arrow.utcnow().dst()\rprint(a)\r", "nl": "Write a Python program to get the daylight savings time adjustment using arrow module. "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rprint(\"Create a MultiIndex:\")\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(sales_tuples)\rprint(\"\\nConstruct a series using the said MultiIndex levels: \")\rs = pd.Series(np.random.randn(8), index = sales_index)\rprint(s)\r", "nl": "Write a Pandas program to construct a series using the MultiIndex levels as the column and index. "}
{"code": "import csv\rprint(\"Write dictionaries to a CSV file:\")\rfw = open(\"test.csv\", \"w\", newline='')\rwriter = csv.DictWriter(fw, fieldnames=[\"Name\", \"Class\"])\rwriter.writeheader()\rwriter.writerow({\"Name\": \"Jasmine Barrett\", \"Class\": \"V\"})\rwriter.writerow({\"Name\": \"Garry Watson\", \"Class\": \"V\"})\rwriter.writerow({\"Name\": \"Courtney Caldwell\", \"Class\": \"VI\"})\rfw.close()\rfr = open(\"test.csv\", \"r\")\rcsv = csv.reader(fr, delimiter = \",\")\rfor row in csv:\r  print(row) \rfr.close()\r", "nl": "Write a Python program to write dictionaries and a list of dictionaries to a given CSV file. Use csv.reader"}
{"code": "def first_non_repeating_character(str1):\r  char_order = []\r  ctr = {}\r  for c in str1:\r    if c in ctr:\r      ctr[c] += 1\r    else:\r      ctr[c] = 1 \r      char_order.append(c)\r  for c in char_order:\r    if ctr[c] == 1:\r      return c\r  return None\r\rprint(first_non_repeating_character('abcdef'))\rprint(first_non_repeating_character('abcabcdef'))\rprint(first_non_repeating_character('aabbcc'))\r", "nl": "Write a Python program to find the first non-repeating character in given string. "}
{"code": "import collections as ct\rdef merge_dictionaries(color1,color2):\r    merged_dict = dict(ct.ChainMap({}, color1, color2))\r    return merged_dict\rcolor1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\rcolor2 = { \"G\": \"Green\", \"W\": \"White\" }\rprint(\"Original dictionaries:\")\rprint(color1,' ',color2)\rprint(\"\\nMerged dictionary:\")\rprint(merge_dictionaries(color1, color2))\r\rdef merge_dictionaries(color1,color2, color3):\r    merged_dict = dict(ct.ChainMap({}, color1, color2, color3))\r    return merged_dict\r\rcolor1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\rcolor2 = { \"G\": \"Green\", \"W\": \"White\" }\rcolor3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\r\rprint(\"\\nOriginal dictionaries:\")\rprint(color1,' ',color2, color3)\rprint(\"\\nMerged dictionary:\")\r# Duplicate colours have automatically removed.\rprint(merge_dictionaries(color1, color2, color3))\r", "nl": "Write a Python program to merge more than one dictionary in a single expression. "}
{"code": "import random \rnums = [1, 2, 3, 4, 5]\rprint(\"Original list:\")\rprint(nums)\rrandom.shuffle(nums)\rprint(\"Shuffle list:\")\rprint(nums)\rwords = ['red', 'black', 'green', 'blue']\rprint(\"\\nOriginal list:\")\rprint(words)\rrandom.shuffle(words)\rprint(\"Shuffle list:\")\rprint(words)\r", "nl": "Write a Python program to shuffle the elements of a given list. Use random.shuffle()"}
{"code": "import pandas as pd\r# World alcohol consumption data\rnew_w_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(new_w_a_con.head())\rprint(\"\\nFilter by matching multiple values in a given dataframe:\")\rflt_wine = new_w_a_con[\"WHO region\"].isin([\"Africa\", \"Eastern Mediterranean\", \"Europe\"])\rprint(new_w_a_con[flt_wine])\r", "nl": "Write a Pandas program to filter those records where WHO region matches with multiple values (Africa, Eastern Mediterranean, Europe) from world alcohol consumption dataset. "}
{"code": "def sort_matrix(M):\r    result = sorted(M, key=sum)\r    return result\r\rmatrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\rmatrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\r\rprint(\"Original Matrix:\")\rprint(matrix1)\rprint(\"\\nSort the said matrix in ascending order according to the sum of its rows\") \rprint(sort_matrix(matrix1))\rprint(\"\\nOriginal Matrix:\")\rprint(matrix2) \rprint(\"\\nSort the said matrix in ascending order according to the sum of its rows\") \rprint(sort_matrix(matrix2))\r", "nl": "Write a Python program to sort a given matrix in ascending order according to the sum of its rows. "}
{"code": "import requests\rr = requests.get('https://api.github.com/')\rresponse = r.json()\rprint(\"JSON value of the said response:\")\rprint(r.json())\rprint(\"\\nEach key of the response:\")\rprint(\"Current user url:\",response['current_user_url'])\rprint(\"Current user authorizations html url:\",response['current_user_authorizations_html_url'])\rprint(\"Authorizations url:\",response['authorizations_url'])\rprint(\"code_search_url:\",response['code_search_url'])\rprint(\"commit_search_url:\",response['commit_search_url'])\rprint(\"Emails url:\",response['emails_url'])\rprint(\"Emojis url:\",response['emojis_url'])\rprint(\"Events url:\",response['events_url'])\rprint(\"Feeds url:\",response['feeds_url'])\rprint(\"Followers url:\",response['followers_url'])\rprint(\"Following url:\",response['following_url'])\rprint(\"Gists url:\",response['gists_url'])\rprint(\"Issue search url:\",response['issue_search_url'])\rprint(\"Issues url:\",response['issues_url'])\rprint(\"Keys url:\",response['keys_url'])\rprint(\"label search url:\",response['label_search_url'])\rprint(\"Notifications url:\",response['notifications_url'])\rprint(\"Organization url:\",response['organization_url'])\rprint(\"Organization repositories url:\",response['organization_repositories_url'])\rprint(\"Organization teams url:\",response['organization_teams_url'])\rprint(\"Public gists url:\",response['public_gists_url'])\rprint(\"Rate limit url:\",response['rate_limit_url'])\rprint(\"Repository url:\",response['repository_url'])\rprint(\"Repository search url:\",response['repository_search_url'])\rprint(\"Current user repositories url:\",response['current_user_repositories_url'])\rprint(\"Starred url:\",response['starred_url'])\rprint(\"Starred gists url:\",response['starred_gists_url'])\rprint(\"User url:\",response['user_url'])\rprint(\"User organizations url:\",response['user_organizations_url'])\rprint(\"User repositories url:\",response['user_repositories_url'])\rprint(\"User search url:\",response['user_search_url'])\r", "nl": "Write a Python code to send a request to a web page, and print the JSON value of the response. Also print each key value of the response. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 7, 9])\rprint(\"Original array: \"+str(array_num))\rprint(\"Insert new value 4 before 3:\")\rarray_num.insert(1, 4)\rprint(\"New array: \"+str(array_num))\r", "nl": "Write a Python program to insert a new item before the second element in an existing array. "}
{"code": "import numpy as np\rmatrix = [[1, 0, 'aaa'], [0, 1, 'bbb'], [0, 1, 'ccc']]\rnp.savetxt('test', matrix, delimiter='  ', header='string', comments='', fmt='%s')\r", "nl": "Write a NumPy program to save as text a matrix which has in each row 2 float and 1 string at the end. "}
{"code": "x = 20\ry = 20\rz = 20\rif x == y == z == 20:\r    print(\"All variables have same value!\")  \r\t", "nl": "Write a Python program to check whether multiple variables have the same value. "}
{"code": "import io\r# Write a string to a buffer\routput = io.StringIO()\routput.write('Python Exercises, Practice, Solution')\r# Retrieve the value written\rprint(output.getvalue())\r# Discard buffer memory\routput.close()\r", "nl": "Write a Python program to write a string to a buffer and retrieve the value written, at the end discard buffer memory. "}
{"code": "from shutil import copyfile\rcopyfile('test.py', 'abc.py')\r", "nl": "Write a Python program to copy the contents of a file to another file . "}
{"code": "import numpy as np\rarr1 = np.random.random(size=(25, 25, 1))\rarr2 = np.random.random(size=(25, 25, 1))\rarr3 = np.random.random(size=(25, 25, 1))\rprint(\"Original arrays:\")\rprint(arr1)\rprint(arr2)\rprint(arr3)\rresult = np.concatenate((arr1, arr2, arr3), axis=-1)\rprint(\"\\nAfter concatenate:\")\rprint(result) \r", "nl": "Write a NumPy program to merge three given NumPy arrays of same shape. "}
{"code": "import numpy as np\rx = np.array([[1,2,3]])\rprint(x)\ry =  np.swapaxes(x,0,1)\rprint(y)\r", "nl": "Write a NumPy program to interchange two axes of an array. "}
{"code": "def decapitalize_first_letter(s, upper_rest = False):\r  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) \rprint(decapitalize_first_letter('Java Script'))\rprint(decapitalize_first_letter('Python'))\r", "nl": "Write a Python program to decapitalize the first letter of a given string. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nSelect first 2 rows:\")\rprint(w_a_con.iloc[:2])\rprint(\"\\nSelect first 2 columns:\")\rprint(w_a_con.iloc[:,:2].head())\rprint(\"\\nSelect 2 specific columns:\")\rprint(w_a_con[['Display Value', 'Year']])\r", "nl": "Write a Pandas program to select first 2 rows, 2 columns and specific two columns from World alcohol consumption dataset. "}
{"code": "import numpy as np\rx = np.array([1., 2., 3., 4.], np.float32)\rprint(\"Original array: \")\rprint(x)\rprint(\"\\ne^x, element-wise of the said:\")\rr = np.exp(x)\rprint(r)\r", "nl": "Write a NumPy program to compute e"}
{"code": "def move_start(nums, offset):\r  return nums[-offset:] + nums[:-offset] \rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))\rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))\rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))\rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))\rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))\rprint(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))\r", "nl": "Write a Python program to move the specified number of elements to the start of the given list. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.w3resource.com/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nFind and print all li tags:\\n\")\rfor tag in soup.find_all(\"li\"):\r    print(\"{0}: {1}\".format(tag.name, tag.text))\r", "nl": "Write a Python program to find and print all li tags of a given web page. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rsum_row=df[[\"Production\", \"Labor_Hours\"]].sum()\rdf_sum=pd.DataFrame(data=sum_row).T\rdf_sum=df_sum.reindex(columns=df.columns)\rdf_sum\r", "nl": "Write a Pandas program to add summation to a row of the given excel file. "}
{"code": "def make_bold(fn):\r    def wrapped():\r        return \"<b>\" + fn() + \"</b>\"\r    return wrapped\r\rdef make_italic(fn):\r    def wrapped():\r        return \"<i>\" + fn() + \"</i>\"\r    return wrapped\r\rdef make_underline(fn):\r    def wrapped():\r        return \"<u>\" + fn() + \"</u>\"\r    return wrapped\r@make_bold\r@make_italic\r@make_underline\rdef hello():\r    return \"hello world\"\rprint(hello()) ## returns \"<b><i><u>hello world</u></i></b>\"\r", "nl": "Write a Python program to make a chain of function decorators (bold, italic, underline etc.) in Python. "}
{"code": "student = ['Ricky Rivera', 98, 'Math', 90, 'Science']\rprint(\"Original list:\")\rprint(student)\rprint(\"\\nAfter deleting an element:, using index of the element:\")\rdel(student[0])\rprint(student)\r", "nl": "Write a Python program to remove an element from a given list. "}
{"code": "import collections\rstr1 = 'thequickbrownfoxjumpsoverthelazydog'\rd = collections.defaultdict(int)\rfor c in str1:\r    d[c] += 1\r\rfor c in sorted(d, key=d.get, reverse=True):\r  if d[c] > 1:\r      print('%s %d' % (c, d[c]))\r", "nl": "Write a Python program to count repeated characters in a string. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nIf a specified column starts with a specified string?\")\rdf['company_code_starts_with'] = list(\r    map(lambda x: x.startswith('ze'), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to check if a specified column starts with a specified string in a DataFrame. "}
{"code": "import numpy as np\rarray_nums1 = np.arange(20).reshape(4,5)\rarray_nums2 = np.array([[1,2,np.nan],[4,5,6],[np.nan, 7, np.nan]])\rprint(\"Original arrays:\")\rprint(array_nums1)\rprint(array_nums2)\rprint(\"\\nAll the nan of array_nums2 replaced by the mean of array_nums1:\")\rarray_nums2[np.isnan(array_nums2)]= np.nanmean(array_nums1)\rprint(array_nums2)\r", "nl": "Write a NumPy program to replace all the nan (missing values) of a given array with the mean of another array. "}
{"code": "mycode = 'print(\"hello world\")'\rcode = \"\"\"\rdef mutiply(x,y):\r    return x*y\r\rprint('Multiply of 2 and 3 is: ',mutiply(2,3))\r\"\"\"\rexec(mycode)\rexec(code)\r", "nl": "Write a Python program to execute a string containing Python code. "}
{"code": "int_val = 30\rif int_val.bit_length() <= 63:\r    print((-2 ** 63).bit_length())\r    print((2 ** 63).bit_length())\r\t", "nl": "Write a Python program to check whether an integer fits in 64 bits. "}
{"code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r    sum_range = 0                                                                                                                                                                                                         \r    for i in range(m, n+1, 1):                                                                                                                                                                                        \r        sum_range += nums[i]                                                                                                                                                                                                  \r    return sum_range   \r\rnums = [2,1,5,6,8,3,4,9,10,11,8,12]\rprint(\"Original list:\")\rprint(nums)\rm = 8\rn = 10\rprint(\"Range:\",m,\",\",n) \rprint(\"\\nSum of the specified range:\")\rprint(sum_Range_list(nums, m, n))\r", "nl": "Write a Python program to calculate the sum of the numbers in a list between the indices of a specified range. "}
{"code": "import pandas as pd\rfrom dateutil.parser import parse\rdate_series = pd.Series(['Jan 2015', 'Feb 2016', 'Mar 2017', 'Apr 2018', 'May 2019'])\rprint(\"Original Series:\")\rprint(date_series)\rprint(\"\\nNew dates:\")\rresult = date_series.map(lambda d: parse('11 ' + d))\rprint(result)\r", "nl": "Write a Pandas program to convert year-month string to dates adding a specified day of the month. "}
{"code": "import numpy as np\rfrom datetime import datetime\rdt = datetime.utcnow()\rprint(\"Current date:\")\rprint(dt)\rdt64 = np.datetime64(dt)\rts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')\rprint(\"Timestamp:\")\rprint(ts)\rprint(\"UTC from Timestamp:\")\rprint(datetime.utcfromtimestamp(ts))\r", "nl": "Write a NumPy program to convert numpy datetime64 to Timestamp. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rnew_w_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nRename all the column names:\")\rw_a_con.columns = ['year','who_region','country','beverage_types','display_values']\rprint(w_a_con.head())\rprint(\"\\nRenaming only some of the column names:\")\rnew_w_a_con.rename(columns = {\"WHO region\":\"WHO_region\",\"Display Value\":\"Display_Value\" },inplace = True)\rprint(new_w_a_con.head()) \r", "nl": "Write a Pandas program to rename all and only some of the column names from world alcohol consumption dataset. "}
{"code": "def min_n_nums(nums, n = 1):\r  return sorted(nums, reverse = False)[:n]\r\rnums = [1, 2, 3]\rprint(\"Original list elements:\")\rprint(nums)\rprint(\"Minimum values of the said list:\", min_n_nums(nums))\rnums = [1, 2, 3]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Two minimum values of the said list:\", min_n_nums(nums,2))\rnums = [-2, -3, -1, -2, -4, 0, -5]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Threee minimum values of the said list:\", min_n_nums(nums,3))\rnums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Two minimum values of the said list:\", min_n_nums(nums, 2))\r", "nl": "Write a Python program to get the n minimum elements from a given list of numbers. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r                                index = ['t1', 't2', 't3', 't4', 't5', 't6'])\rprint(\"Original DataFrame:\")\rprint(df)\rdf.index.name = 'Index_name'\rprint(\"\\nSaid DataFrame with a title or name of the index column:\")\rprint(df)\r", "nl": "Write a Pandas program to create a dataframe and set a title or name of the index column. "}
{"code": "import pandas as pd\rstudent_data1 = pd.DataFrame({\r        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],\r         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], \r        'marks': [200, 210, 190, 222, 199]})\r\rstudent_data2 = pd.DataFrame({\r        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],\r        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], \r        'marks': [201, 200, 198, 219, 201]})\r\rprint(\"Original DataFrames:\")\rprint(student_data1)\rprint(student_data2)\rmerged_data = pd.merge(student_data1, student_data2, on='student_id', how='outer')\rprint(\"Merged data (outer join):\")\rprint(merged_data)\r", "nl": "Write a Pandas program to join the two dataframes with matching records from both sides where available. "}
{"code": "import os\rpath = '/tmp/' + os.path.basename(__file__)\rprint('Creating link {} -> {}'.format(path, __file__))\ros.symlink(__file__, path)\rstat_info = os.lstat(path)\rprint('\\nFile Permissions:', oct(stat_info.st_mode))\rprint('\\nPoints to:', os.readlink(path))\r#removes the file path\ros.unlink(path)\r", "nl": "Write a Python program to create a symbolic link and read it to decide the original file pointed by the link. "}
{"code": "def reverse_strings_list(string_list):\r    result = [x[::-1] for x in string_list]\r    return result\r\rcolors_list = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]\rprint(\"\\nOriginal lists:\")\rprint(colors_list)\rprint(\"\\nReverse strings of the said given list:\")\rprint(reverse_strings_list(colors_list))\r", "nl": "Write a Python program to reverse strings in a given list of string values. "}
{"code": "import pandas as pd\rdates1 = pd.to_datetime([1329806505, 129806505, 1249892905,\r                1249979305, 1250065705], unit='s')\rprint(\"Convert integer or float epoch times to Timestamp and DatetimeIndex upto second:\")\rprint(dates1)\rprint(\"\\nConvert integer or float epoch times to Timestamp and DatetimeIndex upto milisecond:\")\rdates2 = pd.to_datetime([1249720105100, 1249720105200, 1249720105300,\r                1249720105400, 1249720105500], unit='ms')\rprint(dates2)\r", "nl": "Write a Pandas program to convert integer or float epoch times to Timestamp and DatetimeIndex. "}
{"code": "def nested_dictionary(l1, l2, l3):\r     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r     return result\r\rstudent_id = [\"S001\", \"S002\", \"S003\", \"S004\"] \rstudent_name = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] \rstudent_grade = [85, 98, 89, 92]\rprint(\"Original strings:\")\rprint(student_id)\rprint(student_name)\rprint(student_grade)\rprint(\"\\nNested dictionary:\")\rch='a'\rprint(nested_dictionary(student_id, student_name, student_grade))\r", "nl": "Write a Python program to convert more than one list to nested dictionary. "}
{"code": "def first_even_odd(nums):\r    first_even = next((el for el in nums if el%2==0),-1)\r    first_odd = next((el for el in nums if el%2!=0),-1)\r    return first_even,first_odd\r\rnums= [1,3,5,7,4,1,6,8]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nFirst even and odd number of the said list of numbers:\")\rprint(first_even_odd(nums))\r", "nl": "Write a Python program to find a first even and odd number in a given list of numbers. "}
{"code": "from operator import itemgetter\rdef index_on_inner_list(list_data, index_no):\r    result = sorted(list_data, key=itemgetter(index_no))\r    return result\rstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] \rprint (\"Original list:\")\rprint(students)\rindex_no = 0\rprint(\"\\nSort the said list of lists by a given index\",\"( Index = \",index_no,\") of the inner list\")\rprint(index_on_inner_list(students, index_no))\rindex_no = 2\rprint(\"\\nSort the said list of lists by a given index\",\"( Index = \",index_no,\") of the inner list\")\rprint(index_on_inner_list(students, index_no))\r", "nl": "Write a Python program to sort a list of lists by a given index of the inner list. "}
{"code": "def arithmetic_progression(n, x):\r  return list(range(n, x + 1, n))\r\rprint(arithmetic_progression(1, 15))\rprint(arithmetic_progression(3, 37))\rprint(arithmetic_progression(5, 25))\r", "nl": "Write a Python program to generate a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit. "}
{"code": "import numpy as np\rprint(\"Original array:\\n\")\rnums = np.random.randint(0,10,(3,3))\rprint(nums)\rprint(\"\\nSort the said array by the nth column: \")\rprint(nums[nums[:,1].argsort()])\r", "nl": "Write a NumPy program to sort an given array by the n"}
{"code": "import random\r\rdef bogosort(nums):\r    def isSorted(nums):\r        if len(nums) < 2:\r            return True\r        for i in range(len(nums) - 1):\r            if nums[i] > nums[i + 1]:\r                return False\r        return True\r\r    while not isSorted(nums):\r        random.shuffle(nums)\r    return nums\rnum1 = input('Input  comma separated numbers:\\n').strip()\rnums = [int(item) for item in num1.split(',')]\rprint(bogosort(nums))\r", "nl": "Write a Python program to sort a list of elements using Bogosort sort. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current Datetime:\")\rprint(a)\rprint(\"\\nFloating-point representation of the said Arrow object:\")\rf = arrow.utcnow().float_timestamp\rprint(f) \r", "nl": "Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nTime object with the same hour, minute, second, microsecond and timezone info.:\")\rprint(arrow.utcnow().timetz())\r", "nl": "Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. "}
{"code": "import numpy as np\rx = [10, 20, 30]\rprint(\"Original array:\")\rprint(x)\rx = np.append(x, [[40, 50, 60], [70, 80, 90]])\rprint(\"After append values to the end of the array:\")\rprint(x)\r", "nl": "Write a NumPy program to append values to the end of an array. "}
{"code": "import ast\rcolor =\"['Red', 'Green', 'White']\"\rprint(ast.literal_eval(color))\r", "nl": "Write a Python program to convert a string to a list. "}
{"code": "color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\rcolor = [x for (i,x) in enumerate(color) if i not in (0,4,5)]\rprint(color)\r", "nl": "Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. "}
{"code": "from re import sub\rdef snake_case(s):\r  return '_'.join(\r    sub('([A-Z][a-z]+)', r' \\1',\r    sub('([A-Z]+)', r' \\1',\r    s.replace('-', ' '))).split()).lower()\r\rprint(snake_case('JavaScript'))\rprint(snake_case('Foo-Bar'))\rprint(snake_case('foo_bar'))\rprint(snake_case('--foo.bar'))\rprint(snake_case('Foo-BAR'))\rprint(snake_case('fooBAR'))\rprint(snake_case('foo bar'))\r", "nl": "Write a Python program to convert a given string to snake case. "}
{"code": "def common_in_nested_lists(nested_list):\r    result = list(set.intersection(*map(set, nested_list)))\r    return result\rnested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]\rprint(\"\\nOriginal lists:\")\rprint(nested_list)\rprint(\"\\nCommon element(s) in nested lists:\")\rprint(common_in_nested_lists(nested_list))\r", "nl": "Write a Python program to find common element(s) in a given nested lists. "}
{"code": "import numpy as np\rx = np.array([200, 300, np.nan, np.nan, np.nan ,700])\ry = np.array([[1, 2, 3], [np.nan, 0, np.nan] ,[6,7,np.nan]] )\rprint(\"Original array:\")\rprint(x)\rprint(\"After removing nan values:\")\rresult = x[np.logical_not(np.isnan(x))]\rprint(result)\rprint(\"\\nOriginal array:\")\rprint(y)\rprint(\"After removing nan values:\")\rresult = y[np.logical_not(np.isnan(y))]\rprint(result)\r", "nl": "Write a NumPy program to remove nan values from a given array. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rstock_data = df1.set_index('Date')\rclose_px = stock_data['Adj Close']\rstock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() \rstock_data['SMA_40_days'] = stock_data.iloc[:,4].rolling(window=40).mean()\rplt.figure(figsize=[10,8])\rplt.grid(True)\rplt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\\n',fontsize=18, color='black')\rplt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')\rplt.plot(stock_data['SMA_30_days'],label='30 days simple moving average', color='red')\rplt.plot(stock_data['SMA_40_days'],label='40 days simple moving average', color='green')\rplt.legend(loc=2)\rplt.show()\r", "nl": "Write a Pandas program to create a plot of adjusted closing prices, thirty days and forty days simple moving average of Alphabet Inc. between two specific dates. "}
{"code": "import numpy as np\rm= np.arange(10,22).reshape((3, 4))\rprint(m)\r", "nl": "Write a NumPy program to create a 3x4 matrix filled with values from 10 to 21. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: Second and third elements of the second and third rows\")\rprint(arra_data[1:3, 1:3])\r", "nl": "Write a NumPy program to extract second and third elements of the second and third rows from a given (4x4) array. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table('survived', index='sex', columns='class')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival rate by gender on various classes. "}
{"code": "import numpy as np\rnums = np.array([1,2,3,4,5])\rprint(\"50th percentile (median):\")\rp = np.percentile(nums, 50)\rprint(p)\rprint(\"40th percentile:\")\rp = np.percentile(nums, 40)\rprint(p)\rprint(\"90th percentile:\")\rp = np.percentile(nums, 90)\rprint(p)\r", "nl": "Write a NumPy program to calculate percentiles for a sequence or single-dimensional NumPy array. "}
{"code": "import collections as clt\rdef check_break_list(nums, n):\r    coll_data = clt.Counter(nums)\r    for x in sorted(coll_data.keys()):\r        for index in range(1, n):\r            coll_data[x+index] = coll_data[x+index]  - coll_data[x]\r            if coll_data[x+index] < 0:\r                return False\r    return True\r\rnums = [1,2,3,4,5,6,7,8]\rn = 4\rprint(\"Original list:\",nums)\rprint(\"Number to devide the said list:\",n)\rprint(check_break_list(nums, n))\rnums = [1,2,3,4,5,6,7,8]\rn = 3\rprint(\"\\nOriginal list:\",nums)\rprint(\"Number to devide the said list:\",n)\rprint(check_break_list(nums, n))\r", "nl": "Write a Python program to break a given list of integers into sets of a given positive number. Return true or false. "}
{"code": "def insertionSort(nlist):\r   for index in range(1,len(nlist)):\r\r     currentvalue = nlist[index]\r     position = index\r\r     while position>0 and nlist[position-1]>currentvalue:\r         nlist[position]=nlist[position-1]\r         position = position-1\r\r     nlist[position]=currentvalue\r\rnlist = [14,46,43,27,57,41,45,21,70]\rinsertionSort(nlist)\rprint(nlist)\r", "nl": "Write a Python program to sort a list of elements using the insertion sort algorithm. "}
{"code": "str1 = \"sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5\"\rprint(\"Original string: \",str1)\rstr_num=[i for i in str1.split(' ')]\rlenght=len(str_num)\rnumbers=sorted([int(x) for x in str_num if x.isdigit()])\rprint('Numbers in sorted form:')\rfor i in ((filter(lambda x:x>lenght,numbers))):\r    print(i,end=' ')\r", "nl": "Write a Python program to find the numbers of a given string and store them in a list, display the numbers which are bigger than the length of the list in sorted form. Use lambda function to solve the problem. "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\r                     'key2': ['K0', 'K1', 'K0', 'K1'],\r                     'P': ['P0', 'P1', 'P2', 'P3'],\r                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) \rdata2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\r                      'key2': ['K0', 'K0', 'K0', 'K0'],\r                      'R': ['R0', 'R1', 'R2', 'R3'],\r                      'S': ['S0', 'S1', 'S2', 'S3']})\rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerge two dataframes with different columns:\")\rresult = pd.concat([data1,data2], axis=0, ignore_index=True)\rprint(result)\r", "nl": "Write a Pandas program to merge two given dataframes with different columns. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],\r'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],\r'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],\r'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nDrop those rows in which specific columns have missing values:\")\rresult = df.dropna(subset=['ord_no', 'customer_id'])\rprint(result)\r", "nl": "Write a Pandas program to drop those rows from a given DataFrame in which specific columns have missing values. "}
{"code": "def elements_difference(nums):\r    result = [j-i for i, j in zip(nums[:-1], nums[1:])]\r    return result\r\rnums1 = [1,2,3,4,5,6,7,8,9,10]\rnums2 = [2,4,6,8]\r\rprint(\"Original list:\")\rprint(nums1)\rprint(\"\\nDfference between elements (n+1th \u2013 nth) of the said list :\")\rprint(elements_difference(nums1))\rprint(\"\\nOriginal list:\")\rprint(nums2)\rprint(\"\\nDfference between elements (n+1th \u2013 nth) of the said list :\")\rprint(elements_difference(nums2))\r\r", "nl": "Write a Python program to find the difference between elements (n+1th - nth) of a given list of numeric values. "}
{"code": "import pandas as pd\rimport numpy as np\rimport datetime\rfrom datetime import datetime, date \rdates = ['2014-08-01','2014-08-02','2014-08-03','2014-08-04']\rtime_series = pd.Series(np.random.randn(4), dates)\rprint(time_series)\r", "nl": "Write a Pandas program to create a time-series from a given list of dates as strings. "}
{"code": "import pandas as pd\rdate_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])\rprint(\"Original Series:\")\rprint(date_series)\rprint(\"\\nSeries of date strings to a timeseries:\")\rprint(pd.to_datetime(date_series))\r", "nl": "Write a Pandas program to convert a series of date strings to a timeseries. "}
{"code": "import numpy as np \rnums = np.random.randint(10, size=(90, 30))\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nIncrease the number of items (10 edge elements) shown by the print statement:\")\rnp.set_printoptions(edgeitems=10)\rprint(nums)\r", "nl": "Write a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rdef highlight_min(s):\r    '''\r    highlight the minimum in a Series red.\r    '''\r    is_max = s == s.min()\r    return ['background-color: red' if v else '' for v in is_max]\r\rprint(\"\\nHighlight the minimum value in each column:\")\rdf.style.apply(highlight_min,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the minimum value in each column. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rdf['ord_date']= pd.to_datetime(df['ord_date']) \rprint(\"\\nQuartly purchase amount:\")\rresult = df.set_index('ord_date').groupby(pd.Grouper(freq='Q')).agg({'purch_amt':sum})\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups and calculate quarterly purchase amount. "}
{"code": "import numpy as np  \rnums = np.array([[5.54, 3.38, 7.99],\r              [3.54, 4.38, 6.99],\r              [1.54, 2.39, 9.29]])\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nSort the said array by row in ascending order:\")\rprint(np.sort(nums))\rprint(\"\\nSort the said array by column in ascending order:\")\rprint(np.sort(nums, axis=0))\r", "nl": "Write a NumPy program to sort a given array by row and column in ascending order. "}
{"code": "#https://bit.ly/2lxQysi\rimport re\rprint(\"Input number of data sets:\")\rclass c(int):\r    def __add__(self,n):\r        return c(int(self)+int(n))\r    def __sub__(self,n):\r        return c(int(self)-int(n))\r    def __mul__(self,n):\r        return c(int(self)*int(n))\r    def __truediv__(self,n):\r        return c(int(int(self)/int(n)))\r   \rfor _ in range(int(input())):\r  print(\"Input an expression:\")\r  print(eval(re.sub(r'(\\d+)',r'c(\\1)',input()[:-1])))\r", "nl": "Write a Python program that reads a given expression and evaluates it. "}
{"code": "import numpy as np\rx = np.ones((10, 10))\rx[1:-1, 1:-1] = 0\rprint(x)\r", "nl": "Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0. "}
{"code": "from itertools import groupby\rdef pack_consecutive_duplicates(l_nums):\r    return [list(group) for key, group in groupby(l_nums)]\rn_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]\rprint(\"Original list:\") \rprint(n_list)\rprint(\"\\nAfter packing consecutive duplicates of the said list elements into sublists:\")\rprint(pack_consecutive_duplicates(n_list)) \r\r", "nl": "Write a Python program to pack consecutive duplicates of a given list elements into sublists. "}
{"code": "def test(lst):\r    result =[]\r    for i in lst:\r        j = i.replace(' ','')\r        result.append(j)\r    return result\r\rtext = ['abc ', '  ', ' ', 'sdfds ', ' ', '     ', 'sdfds ', 'huy']\rprint(\"\\nOriginal list:\")\rprint(text)\rprint(\"Remove additional spaces from the said list:\")\rprint(test(text))\r", "nl": "Write a Python program to remove additional spaces in a given list. "}
{"code": "import numpy as np\rx = np.arange(12).reshape((2, 6))\rprint(\"\\nOriginal array:\")\rprint(x)\rr1 = np.percentile(x, 80, 1)\rprint(\"\\n80th percentile for all elements of the said array along the second axis:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute the 80th percentile for all elements in a given array along the second axis. "}
{"code": "import numpy as np\rx = np.random.random((5,3))\rprint(\"First array:\")\rprint(x)\ry = np.random.random((3,2))\rprint(\"Second array:\")\rprint(y)\rz = np.dot(x, y)\rprint(\"Dot product of two arrays:\")\rprint(z)\r", "nl": "Write a NumPy program to multiply a 5x3 matrix by a 3x2 matrix and create a real matrix product. "}
{"code": "import pandas as pd\rprint(\"Subtract two timestamps of same time zone:\")\rdate1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')\rdate2 = pd.Timestamp('2019-04-01 07:00', tz='US/Eastern')\rprint(\"Difference: \", (date2-date1))\rprint(\"\\nSubtract two timestamps of different time zone:\")\rdate1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')\rdate2 = pd.Timestamp('2019-03-01 07:00', tz='US/Pacific')\r# Remove the time zone and do the subtraction\rprint(\"Difference: \", (date1.tz_localize(None) - date2.tz_localize(None)))\r", "nl": "Write a Pandas program to subtract two timestamps of same time zone or different time zone. "}
{"code": "def weighted_average(nums, weights):\r  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)\rnums1 = [10, 50, 40]\rnums2 = [2, 5, 3]\rprint(\"Original list elements:\")\rprint(nums1) \rprint(nums2)\rprint(\"\\nWeighted average of the said two list of numbers:\")\rprint(weighted_average(nums1, nums2))\rnums1 = [82, 90, 76, 83]\rnums2 = [.2, .35, .45, 32]\rprint(\"\\nOriginal list elements:\")\rprint(nums1) \rprint(nums2)\rprint(\"\\nWeighted average of the said two list of numbers:\")\rprint(weighted_average(nums1, nums2))\r", "nl": "Write a Python program to get the weighted average of two or more numbers. "}
{"code": "def bigram_sequence(text_lst):\r    result = [a for ls in text_lst for a in zip(ls.split(\" \")[:-1], ls.split(\" \")[1:])]\r    return result\rtext = [\"Sum all the items in a list\", \"Find the second smallest number in a list\"]\rprint(\"Original list:\")\rprint(text)\rprint(\"\\nBigram sequence of the said list:\")\rprint(bigram_sequence(text))\r", "nl": "Write a Python program to form Bigrams of words in a given list of strings. "}
{"code": "class Node:\r    # Singly linked node\r    def __init__(self, data=None):\r        self.data = data\r        self.next = None\rclass singly_linked_list:\r    def __init__(self):\r        # Createe an empty list\r        self.tail = None\r        self.head = None\r        self.count = 0\r\r    def append_item(self, data):\r        #Append items on the list\r        node = Node(data)\r        if self.head:\r            self.head.next = node\r            self.head = node\r        else:\r            self.tail = node\r            self.head = node\r        self.count += 1\r    \r    def delete_item(self, data):\r        # Delete an item from the list\r        current = self.tail\r        prev = self.tail\r        while current:\r            if current.data == data:\r                if current == self.tail:\r                    self.tail = current.next\r                else:\r                    prev.next = current.next\r                self.count -= 1\r                return\r            prev = current\r            current = current.next\r    def iterate_item(self):\r        # Iterate the list.\r        current_item = self.tail\r        while current_item:\r            val = current_item.data\r            current_item = current_item.next\r            yield val\r\ritems = singly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Original list:\")\rfor val in items.iterate_item():\r    print(val)\r\rprint(\"\\nAfter removing the last item from the list:\")\ritems.delete_item('Java')\rfor val in items.iterate_item():\r    print(val)\r", "nl": "Write a Python program to delete the last item from a singly linked list. "}
{"code": "import pandas as pd\rfrom collections import Counter\rcolor_series = pd.Series(['Red', 'Green', 'Orange', 'Pink', 'Yellow', 'White'])\rprint(\"Original Series:\")\rprint(color_series)\rprint(\"\\nFiltered words:\")\rresult = mask = color_series.map(lambda c: sum([Counter(c.lower()).get(i, 0) for i in list('aeiou')]) >= 2)\rprint(color_series[result])\r", "nl": "Write a Pandas program to filter words from a given series that contain atleast two vowels. "}
{"code": "str1='122.22'\rprint(\"Original String: \",str1)\rprint(\"\\nAdded trailing zeros:\")\rstr1 = str1.ljust(8, '0')\rprint(str1)\rstr1 = str1.ljust(10, '0')\rprint(str1)\rprint(\"\\nAdded leading zeros:\")\rstr1='122.22'\rstr1 = str1.rjust(8, '0')\rprint(str1)\rstr1 = str1.rjust(10, '0')\rprint(str1)\r", "nl": "Write a Python program to add leading zeroes to a string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')    \rdf[df[\"Mine_Name\"].map(lambda x: x.startswith('P'))].head()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where \"Mine Name\" starts with \"P\". "}
{"code": "import numpy as np\rx = np.array([3.1, 3.5, 4.5, 2.9, -3.1, -3.5, -5.9])\rprint(\"Original array: \")\rprint(x)\rr1 = np.around(x)\rr2 = np.floor(x)\rr3 = np.ceil(x)\rr4 = np.trunc(x)\rr5 = [round(elem) for elem in x]\r\rprint(\"\\naround:   \", r1)\rprint(\"floor:    \",r2)\rprint(\"ceil:     \",r3)\rprint(\"trunc:    \",r4)\rprint(\"round:    \",r5)\r", "nl": "Write a NumPy program to calculate round, floor, ceiling, truncated and round (to the given number of decimals) of the input, element-wise of a given array. "}
{"code": "import numpy as np\rv = np.linspace(10, 49, 5)\rprint(\"Length 10 with values evenly distributed between 5 and 50:\")\rprint(v)\r", "nl": "Write a NumPy program to create a vector of length 10 with values evenly distributed between 5 and 50. "}
{"code": "def duplicate_letters(text):\r\tword_list = text.split()\r\tfor word in word_list:\r\t\tif len(word) > len(set(word)):\r\t\t\treturn False\r\treturn True\rtext = \"Filter out the factorials of the said list.\"\rprint(\"Original text:\")\rprint(text)\rprint(\"Check whether any word in the said sting contains duplicate characrters or not!\")\rprint(duplicate_letters(text))\rtext = \"Python Exercise.\"\rprint(\"\\nOriginal text:\")\rprint(text)\rprint(\"Check whether any word in the said sting contains duplicate characrters or not!\")\rprint(duplicate_letters(text))\rtext = \"The wait is over.\"\rprint(\"\\nOriginal text:\")\rprint(text)\rprint(\"Check whether any word in the said sting contains duplicate characrters or not!\")\rprint(duplicate_letters(text))\r", "nl": "Write a Python program to check whether any word in a given sting contains duplicate characrters or not. Return True or False. "}
{"code": "nums1 = [2,3,5,8,7,2,3]\rnums2 = [4,3,9,0,4,3,9]\rnums3 = [2,1,5,6,5,5,4]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(nums3)\rprint(\"Maximum value of the said three lists:\")\rprint(max(nums1+nums2+nums3))\rprint(\"Minimum value of the said three lists:\")\rprint(min(nums1+nums2+nums3)) \r", "nl": "Write a Python program to find the maximum and minimum value of the three given lists. "}
{"code": "import pandas as pd \rimport numpy as np\rsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],\r          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\rsales_tuples = list(zip(*sales_arrays))\rsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\rprint(sales_tuples)\rprint(\"\\nConstruct a Dataframe using the said MultiIndex levels: \")\rdf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\rprint(df)\rprint(\"\\nRename the columns name of the said dataframe\")\rdf1 = df.rename(columns={0: \"col1\", 1: \"col2\", 2:\"col3\", 3:\"col4\", 4:\"col5\"})\rprint(df1)\rprint(\"\\nRename specific labels of the main index of the DataFrame\")\rdf2 = df1.rename(index={\"sale2\": \"S2\", \"city2\": \"C2\"})\rprint(df2)\r", "nl": "Write a Pandas program to rename names of columns and specific labels of the Main Index of the MultiIndex dataframe. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-09-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1.set_index('Date')\rplt.figure(figsize=(5,5))\rplt.suptitle('Stock prices of Alphabet Inc.,\\n01-04-2020 to 30-09-2020', \\\r                 fontsize=18, color='black')\rplt.xlabel(\"Date\",fontsize=16, color='black')\rplt.ylabel(\"$ price\", fontsize=16, color='black')\r \rdf2['Close'].plot(color='green');\rplt.show()\r", "nl": "Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates. "}
{"code": "import numpy as np    \rx = np.array([1, 2, 3])\ry = np.array([2, 3, 4])\rprint(\"Original arrays:\")\rprint(x)\rprint(y)\rprint(\"Sequence of arrays along a new axis:\")\rprint(np.vstack((x, y)))\rx = np.array([[1], [2], [3]])\ry = np.array([[2], [3], [4]])\rprint(\"\\nOriginal arrays:\")\rprint(x)\rprint()\rprint(y)\rprint(\"Sequence of arrays along a new axis:\")\rprint(np.vstack((x, y)))\r", "nl": "Write a NumPy program to join a sequence of arrays along a new axis. "}
{"code": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\rprint(\"original List:\")\rprint(nums1)\rprint(\"\\nRotate the said list in left direction by 4:\")\rresult = nums1[3:] + nums1[:4]\rprint(result)\rprint(\"\\nRotate the said list in left direction by 2:\")\rresult = nums1[2:] + nums1[:2]\rprint(result)\rprint(\"\\nRotate the said list in Right direction by 4:\")\rresult = nums1[-3:] + nums1[:-4]\rprint(result)\rprint(\"\\nRotate the said list in Right direction by 2:\")\rresult = nums1[-2:] + nums1[:-2]\rprint(result)\r", "nl": "Write a Python program to rotate a given list by specified number of items to the right or left direction. "}
{"code": "str1 = 'https://www.w3resource.com/python-exercises/string'\rprint(str1.rsplit('/', 1)[0])\rprint(str1.rsplit('-', 1)[0])\r", "nl": "Write a Python program to get the last part of a string before a specified character. "}
{"code": "import numpy as np\rx = np.random.random((5,5))\rprint(\"Original Array:\")\rprint(x) \rxmin, xmax = x.min(), x.max()\rprint(\"Minimum and Maximum Values:\")\rprint(xmin, xmax)\r", "nl": "Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values. "}
{"code": "import numpy as np\rx = np.array([[2, 4, 6], [6, 8, 10]], np.int32)\rprint(x)\re1 = x.flat[3]\rprint(\"Forth e1ement of the array:\")\rprint(e1)\r", "nl": "Write a NumPy program to find the 4th element of a specified array. "}
{"code": "def max_length_list(input_list):\r    max_length = max(len(x) for x in input_list )\r    max_list = max(input_list, key = len)\r    return(max_length, max_list)\rdef min_length_list(input_list):\r    min_length = min(len(x) for x in input_list )\r    min_list = min(input_list, key = len)\r    return(min_length, min_list)\rlist1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nList with maximum length of lists:\")\rprint(max_length_list(list1))\rprint(\"\\nList with minimum length of lists:\")\rprint(min_length_list(list1))\rlist1 =  [[0], [1, 3], [5, 7], [9, 11], [3, 5, 7]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nList with maximum length of lists:\")\rprint(max_length_list(list1))\rprint(\"\\nList with minimum length of lists:\")\rprint(min_length_list(list1))\rlist1 =  [[12], [1, 3], [1, 34, 5, 7], [9, 11], [3, 5, 7]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nList with maximum length of lists:\")\rprint(max_length_list(list1))\rprint(\"\\nList with minimum length of lists:\")\rprint(min_length_list(list1))\r", "nl": "Write a Python program to find the list with maximum and minimum length. "}
{"code": "from urllib.request import urlopen\r\nfrom bs4 import BeautifulSoup\r\nimport re\r\n\r\nhtml = urlopen('https://en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer)')\r\nbs = BeautifulSoup(html, 'html.parser')\r\nimages = bs.find_all('img', {'src':re.compile('.jpg')})\r\nfor image in images: \r\n    print(image['src']+'\\n')\r\n", "nl": "Write a Python program to extract and display all the header tags from en.wikipedia.org/wiki/Main_Page. "}
{"code": "import random\rcolor_list = ['Red', 'Blue', 'Green', 'White', 'Black']\rprint(random.choice(color_list))\r", "nl": "Write a Python program to select an item randomly from a list. "}
{"code": "import numpy as np\rx = [1, 2, 3]\ry = [4, 5]\rz = [6, 7]\rprint(\"Original arrays:\")\rprint(\"Array-1\")\rprint(x)\rprint(\"Array-2\")\rprint(y)\rprint(\"Array-3\")\rprint(z)\rnew_array = np.array(np.meshgrid(x, y, z)).T.reshape(-1,3)\rprint(\"Combine array:\")\rprint(new_array)\r", "nl": "Write a NumPy program to build an array of all combinations of three NumPy arrays. "}
{"code": "def test(lst):\r    previous_digit = 0\r    ctr = 0\r    for digit in lst:\r        if previous_digit==0 and digit!=0:\r            ctr+=1\r        previous_digit = digit\r    return ctr\r\rnums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,5,9,9,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1]\r\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nNumber of groups of non-zero numbers separated by zeros of the said list:\")\rprint(test(nums)) \r", "nl": "Write a Python program to count the number of groups of non-zero numbers separated by zeros of a given list of numbers. "}
{"code": "def file_copy(src, dest):\r    with open(src) as f, open(dest, 'w') as d:\r        d.write(f.read())\r        file_copy(\"untitled0.py\", \"z.py\")\r        with open('z.py', 'r') as filehandle:\r            for line in filehandle:\r                print(line, end = '')\r", "nl": "Write a Python program to create a copy of its own source code. "}
{"code": "import requests\rres = requests.get('https://www.google.com/')\rprint(\"Response text of https://google.com/:\")\rprint(res.text)\rprint(\"\\n==============================================================================\")\rprint(\"\\nContent of the said url:\")\rprint(res.content)\rprint(\"\\n==============================================================================\")\rprint(\"\\nRaw data of the said url:\")\rr = requests.get('https://api.github.com/events', stream = True)\rprint(r.raw)\rprint(r.raw.read(15))\r", "nl": "Write a Python code to send a request to a web page, and print the response text and content. Also get the raw socket response from the server. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rresult = df.groupby('customer_id')['ord_date'].apply(list)\rprint(\"\\nGroup on 'customer_id' and display the list of order dates in group wise:\")\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups based on customer id and create a list of order date for each group. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table('sex',  'who', aggfunc = 'count')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find number of adult male, adult female and children. "}
{"code": "original_list = [10, 22, 44, 23, 4]\rnew_list = list(original_list)\rprint(original_list)\rprint(new_list)\r", "nl": "Write a Python program to clone or copy a list. "}
{"code": "import numpy as np\rx = np.array([-10.2, 122.2, .20])\rprint(\"Original array:\")\rprint(x)\rprint(\"Element-wise absolute value:\")\rprint(np.absolute(x))\r", "nl": "Write a NumPy program to calculate the absolute value element-wise. "}
{"code": "import numpy as np\rx = np.array(['Python', 'PHP', 'JS', 'Examples', 'html5', '5'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x)\rr1 = np.char.isdigit(x)\rr2 = np.char.islower(x)\rr3 = np.char.isupper(x)\rprint(\"Digits only =\", r1)\rprint(\"Lower cases only =\", r2)\rprint(\"Upper cases only =\", r3)\r", "nl": "Write a NumPy program to check whether each element of a given array is composed of digits only, lower case letters only and upper case letters only. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nYear:\")\rprint(df.Date_time.dt.year.head())\rprint(\"\\nMonth:\")\rprint(df.Date_time.dt.month.head())\rprint(\"\\nDay:\")\rprint(df.Date_time.dt.day.head())\rprint(\"\\nHour:\")\rprint(df.Date_time.dt.hour.head())\rprint(\"\\nMinute:\")\rprint(df.Date_time.dt.minute.head())\rprint(\"\\nSecond:\")\rprint(df.Date_time.dt.second.head())\rprint(\"\\nWeekday:\")\rprint(df.Date_time.dt.weekday_name.head())\r", "nl": "Write a Pandas program to extract year, month, day, hour, minute, second and weekday from unidentified flying object (UFO) reporting date. "}
{"code": "from bs4 import BeautifulSoup\rsoup = BeautifulSoup(\"<p>Python exercises.</p>\", \"lxml\")\rprint(\"Original Markup:\")\rprint(soup.p.string.wrap(soup.new_tag(\"i\")))\rprint(\"\\nNew Markup:\")\rprint(soup.p.wrap(soup.new_tag(\"div\")))\r", "nl": "Write a Python program to wrap an element in the specified tag and create the new wrapper. "}
{"code": "import numpy as np\rx = np.array([[20, 20, 20, 0],\r              [0, 20, 20, 20],\r              [0, 20, 20, 20],\r              [20, 20, 20, 0],\r              [10, 20, 20,20]])\rprint(\"Original array:\")\rprint(x)\ry = np.ascontiguousarray(x).view(np.dtype((np.void, x.dtype.itemsize * x.shape[1])))\r_, idx = np.unique(y, return_index=True)\r\runique_result = x[idx]\rprint(\"Unique rows of the above array:\")\rprint(unique_result)\r", "nl": "Write a NumPy program to find unique rows in a NumPy array. "}
{"code": "import numpy as np\rcomplex_num = [1 + 2j, 3 - 1j, 3 - 2j, 4 - 3j, 3 + 5j]\rprint(\"Original array:\")\rprint(complex_num)\rprint(\"\\nSorted a given complex array using the real part first, then the imaginary part.\")\rprint(np.sort_complex(complex_num))\r", "nl": "Write a NumPy program to sort a given complex array using the real part first, then the imaginary part. "}
{"code": "import pandas as pd\rs = pd.date_range('2021-01-01', periods=12, freq='BM')\rdf = pd.DataFrame(s, columns=['Date'])\rprint('last working days of each month of a specific year:')\rprint(df)\r", "nl": "Write a Pandas program to get a time series with the last working days of each month of a specific year. "}
{"code": "x = [1, 2, 3, 4, 5, 6]\rxlen = len(x)-1\rprint(x[xlen])\r", "nl": "Write a Python program to check whether the n-th element exists in a given list. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rstock_data = df1.set_index('Date')\rclose_px = stock_data['Adj Close']\rstock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() \rstock_data['EMA_20_days'] = stock_data.iloc[:,4].ewm(span=20,adjust=False).mean()\rplt.figure(figsize=[15,10])\rplt.grid(True)\rplt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\\n',fontsize=18, color='black')\rplt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')\rplt.plot(stock_data['SMA_30_days'],label='30 days Simple moving average', color='red')\rplt.plot(stock_data['EMA_20_days'],label='20 days Exponential moving average', color='green')\rplt.legend(loc=2)\rplt.show()\r", "nl": "Write a Pandas program to create a plot of adjusted closing prices, 30 days simple moving average and exponential moving average of Alphabet Inc. between two specific dates. "}
{"code": "import arrow\rprint(arrow.utcnow())\rprint(\"Hour ceiling:\")\rprint(arrow.utcnow().ceil('hour'))\rprint(\"\\nMinute ceiling:\")\rprint(arrow.utcnow().ceil('minute'))\rprint(\"\\nSecond ceiling:\")\rprint(arrow.utcnow().ceil('second')) \r", "nl": "Write a Python program to create a new Arrow object, representing the \"ceiling\" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. "}
{"code": "import numpy as np \rnums = np.arange(16, dtype='int').reshape(-1, 4)\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nNew array after swapping first and last rows of the said array:\")\rnew_nums = nums[::-1]\rprint(new_nums)\r", "nl": "Write a NumPy program to create a 4x4 array with random values, now create a new array from the said array swapping first and last rows. "}
{"code": "from bs4 import BeautifulSoup\rstr1 = \"<p>Some<b>bad<i>HTML Code</i></b></p>\"\rprint(\"Original string:\")\rprint(str1)\rsoup = BeautifulSoup(\"<p>Some<b>bad<i>HTML Code</i></b></p>\", \"xml\")\rprint(\"\\nFormatted Unicode string:\")\rprint(soup.prettify())\r", "nl": "Write a Python program to create a Beautiful Soup parse tree into a nicely formatted Unicode string, with a separate line for each HTML/XML tag and string. "}
{"code": "def find_index_of_all(lst, fn):\r  return [i for i, x in enumerate(lst) if fn(x)]\rprint(find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1))\r", "nl": "Write a Python program to find the indexes of all elements in the given list that satisfy the provided testing function. "}
{"code": "import pandas as pd\rstudent_data1 = pd.DataFrame({\r        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],\r         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], \r        'marks': [200, 210, 190, 222, 199]})\r\rstudent_data2 = pd.DataFrame({\r        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],\r        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], \r        'marks': [201, 200, 198, 219, 201]})\r\rexam_data = pd.DataFrame({\r        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13'],\r        'exam_id': [23, 45, 12, 67, 21, 55, 33, 14, 56, 83, 88, 12]})\r\rprint(\"Original DataFrames:\")\rprint(student_data1)\rprint(student_data2)\rprint(exam_data)\r\rprint(\"\\nJoin first two said dataframes along rows:\")\rresult_data = pd.concat([student_data1, student_data2])\rprint(result_data)\r\rprint(\"\\nNow join the said result_data and df_exam_data along student_id:\")\rfinal_merged_data = pd.merge(result_data, exam_data, on='student_id')\rprint(final_merged_data)\r", "nl": "Write a Pandas program to join the two given dataframes along rows and merge with another dataframe along the common column id. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\r\rprint(\"\\nAfter removing the duplicates of WHO region column:\")\rprint(w_a_con.drop_duplicates('WHO region'))\r", "nl": "Write a Pandas program to remove the duplicates from 'WHO region' column of World alcohol consumption dataset. "}
{"code": "import pandas as pd\rimport numpy as np\rdf1 = pd.read_excel('E:\\employee.xlsx',sheet_name=0)\rdf2 = pd.read_excel('E:\\employee.xlsx',sheet_name=1)\rdf3 = pd.read_excel('E:\\employee.xlsx',sheet_name=2)\rdf = pd.concat([df1, df2, df3])\rprint(df)\r", "nl": "Write a Pandas program to import three datasheets from a given excel data (coalpublic2013.xlsx ) and combine in to a single dataframe. "}
{"code": "import arrow\rprint(\"Current datetime:\")\rprint(arrow.utcnow())\rprint(\"\\nYYYY-MM-DD HH:mm:ss ZZ:\")\rprint(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))\rprint(\"\\nDD-MM-YYYY HH:mm:ss ZZ:\")\rprint(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))\rprint(arrow.utcnow().format('\\nMMMM DD, YYYY'))\rprint(arrow.utcnow().format())\r", "nl": "Write a Python program to create a string representation of the Arrow object, formatted according to a format string. "}
{"code": "import arrow\rprint(\"Daylight savings time adjustment:\")\ra = arrow.utcnow().dst()\rprint(a)\r", "nl": "Write a Python program to get the daylight savings time adjustment using arrow module. "}
{"code": "import numpy as np\rx = np.array([1e-99, 1e-100])\rprint(\"Original array: \")\rprint(x)\rprint(\"\\nNatural logarithm of one plus each element:\")\rprint(np.log1p(x))\r", "nl": "Write a NumPy program to compute the natural logarithm of one plus each element of a given array in floating-point accuracy. "}
{"code": "def test(dictionary):\r    dictionary['Math'] = [x+1 for x in dictionary['Math']]\r    dictionary['Physics'] = [x-2 for x in dictionary['Physics']]\r    return dictionary\r\rdictionary = { \r               'Math' : [88, 89, 90], \r               'Physics' : [92, 94, 89],\r               'Chemistry' : [90, 87, 93]\r             }\rprint(\"\\nOriginal Dictionary:\")\rprint(dictionary)\rprint(\"\\nUpdate the list values of the said dictionary:\")\rprint(test(dictionary))\r", "nl": "A Python Dictionary contains List as value. Write a Python program to update the list values in the said dictionary. "}
{"code": "import numpy as np\rarr1 = np.array([[10, 20 ,30], [40, 50, np.nan], [np.nan, 6, np.nan], [np.nan, np.nan, np.nan]])\rprint(\"Original array:\")\rprint(arr1)\rtemp = np.ma.masked_array(arr1,np.isnan(arr1))\rresult = np.mean(temp, axis=1)\rprint(\"Averages without NaNs along the said array:\")\rprint(result.filled(np.nan))\r", "nl": "Write a NumPy program to calculate averages without NaNs along a given array. "}
{"code": "from collections import defaultdict\rdef frequencies(lst):\r  freq = defaultdict(int)\r  for val in lst:\r    freq[val] += 1\r  return dict(freq) \rprint(frequencies(['a', 'b', 'f', 'a', 'c', 'e', 'a', 'a', 'b', 'e', 'f'])) \rprint(frequencies([3,4,7,5,9,3,4,5,0,3,2,3]))\r", "nl": "Write a Python program to create a dictionary with the unique values of a given list as keys and their frequencies as the values. "}
{"code": "from collections import Counter\rlanguage = ['PHP', 'PHP', 'Python', 'PHP', 'Python', 'JS', 'Python', 'Python','PHP', 'Python']\rprint(\"Original list:\")\rprint(language)\rcnt = Counter(language)\rprint(\"\\nMost common element of the said list:\")\rprint(cnt.most_common(1)[0][0])\r", "nl": "Write a Python program to find the most common element of a given list. "}
{"code": "import os\rprint(\"Access all environment variables:\")\rprint('*----------------------------------*')\rprint(os.environ)\rprint('*----------------------------------*')\rprint(\"Access a particular environment variable:\")\rprint(os.environ['HOME'])\rprint('*----------------------------------*')\rprint(os.environ['PATH'])\rprint('*----------------------------------*')\rprint('Value of the environment variable key:')\rprint(os.getenv('JAVA_HOME'))\rprint(os.getenv('PYTHONPATH'))\r", "nl": "Write a python program to access environment variables and value of the environment variable. "}
{"code": "nums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]\rprint(\"Original list: \", nums)\rprint(\"Result:\")\rlenght=len(nums)\rprint(sum(list(map(round,nums))* lenght)) \r", "nl": "Write a Python program to round every number of a given list of numbers and print the total sum multiplied by the length of the list. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nDescendants of the body tag (https://www.python.org):\\n\")\rroot = soup.html    \rroot_childs = [e.name for e in root.descendants if e.name is not None]\rprint(root_childs)\r\r", "nl": "Write a Python program to retrieve all descendants of the body tag from a given web page. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name': ['alberto','gino','ryan', 'Eesha', 'syed'],\r    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nAfter capitalizing name column:\")\rdf['name'] = list(map(lambda x: x.capitalize(), df['name']))\rprint(df)\r", "nl": "Write a Pandas program to capitalize all the string values of specified columns of a given DataFrame. "}
{"code": "import arrow\rprint(\"Test whether a given datetime is between two dates and times:\")\rstart = arrow.get(datetime(2017, 6, 5, 12, 30, 10))\rend = arrow.get(datetime(2017, 6, 5, 12, 30, 36))\rprint(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))\rstart = arrow.get(datetime(2017, 5, 5))\rend = arrow.get(datetime(2017, 5, 8))\rprint(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))\rstart = arrow.get(datetime(2017, 5, 5))\rend = arrow.get(datetime(2017, 5, 8))\rprint(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))\r", "nl": "Write a Python program to check whether a given datetime is between two dates and times using arrow module. "}
{"code": "x = 100\rprint(format(id(x), 'x'))\rs = 'w3resource'\rprint(format(id(s), 'x')) \r", "nl": "Write a Python program to get variable unique identification number or string. "}
{"code": "from datetime import date\rf_date = date(2014, 7, 2)\rl_date = date(2014, 7, 11)\rdelta = l_date - f_date\rprint(delta.days)\r", "nl": "Write a Python program to calculate number of days between two dates."}
{"code": "def uncommon_chars_concat(s1, s2):   \r     \r     set1 = set(s1) \r     set2 = set(s2) \r  \r     common_chars = list(set1 & set2) \r     result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars] \r     return(''.join(result))\r\rs1 = 'abcdpqr'\rs2 = 'xyzabcd'\rprint(\"Original Substrings:\\n\",s1+\"\\n\",s2)\rprint(\"\\nAfter concatenating uncommon characters:\")\rprint(uncommon_chars_concat(s1, s2))\r", "nl": "Write a Python program to create a string from two given strings concatenating uncommon characters of the said strings. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(pd.pivot_table(df,index=[\"Item\"], values=\"Units\", aggfunc=np.sum))\r", "nl": "Write a Pandas program to create a Pivot table and find the item wise unit sold. "}
{"code": "import numpy as np\rprint(np.all([[True,False],[True,True]]))\rprint(np.all([[True,True],[True,True]]))\rprint(np.all([10, 20, 0, -50]))\rprint(np.all([10, 20, -50]))\r", "nl": "Write a NumPy program to test whether all elements in an array evaluate to True. "}
{"code": "def remove_zeros_from_ip(ip_add):\r  new_ip_add = \".\".join([str(int(i)) for i in ip_add.split(\".\")])  \r  return new_ip_add ;\r\rprint(remove_zeros_from_ip(\"255.024.01.01\"))\rprint(remove_zeros_from_ip(\"127.0.0.01 \"))\r", "nl": "Write a Python program to remove leading zeros from an IP address. "}
{"code": "import numpy as np\rx= 12.0\rprint(np.atleast_1d(x))\rx = np.arange(6.0).reshape(2, 3)\rprint(np.atleast_1d(x))\rprint(np.atleast_1d(1, [3, 4]))\r", "nl": "Write a NumPy program to convert specified inputs to arrays with at least one dimension. "}
{"code": "from itertools import islice\rdef split_list(lst, n):\r    lst = iter(lst)\r    result = iter(lambda: tuple(islice(lst, n)), ())\r    return list(result)\r\rnums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]\rprint(\"Original list:\")\rprint(nums)\rn = 3\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\rn = 4\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\rn = 5\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\r", "nl": "Write a Python program to split a given list into specified sized chunks using itertools module. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"First four h2 tags from the webpage python.org.:\")\rprint(soup.find_all('a')[0:10])\r\r", "nl": "Write a Python program to find all the link tags and list the first ten from the webpage python.org. "}
{"code": "import pandas as pd\rdf_data = pd.DataFrame({'W':[68,75,86,80,None],'X':[78,75,None,80,86], 'Y':[84,94,89,86,86],'Z':[86,97,96,72,83]});\rsr_data = pd.Series([68, 75, 86, 80, None]) \rprint(\"Original DataFrame:\")\rprint(df_data)\rprint(\"\\nOriginal Series:\")\rprint(sr_data)\rprint(\"\\nCheck for inequality of the said series & dataframe:\")\rprint(df_data.ne(sr_data, axis = 0))\r", "nl": "Write a Pandas program to check inequality over the index axis of a given dataframe and a given series. "}
{"code": "def insert_end(str):\r\tsub_str = str[-2:]\r\treturn sub_str * 4\r\rprint(insert_end('Python'))\rprint(insert_end('Exercises'))\r", "nl": "Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). "}
{"code": "text = [\"a\", \"b\", \"c\", \"d\",\"e\", \"f\"]\rprint(\"Original list:\")\rprint(text)\rprint(\"\\nDisplay each element vertically of the said list:\")\rfor i in text:\r       print(i)\rnums = [[1, 2, 5], [4, 5, 8], [7, 3, 6]] \rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nDisplay each element vertically of the said list of lists:\")\rfor a,b,c in zip(*nums): \r    print(a, b, c)\r", "nl": "Write a Python program to display vertically each element of a given list, list of lists. "}
{"code": "def all_unique(test_list):\r    if len(test_list) > len(set(test_list)):\r        return False\r    return True\r\rnums1 = [1,2,4,6,8,2,1,4,10,12,14,12,16,17]\rprint (\"Original list:\")\rprint(nums1)\rprint(\"\\nIs the said list contains all unique elements!\")\rprint(all_unique(nums1)) \r\rnums2 = [2,4,6,8,10,12,14]\rprint (\"\\nOriginal list:\")\rprint(nums2)\rprint(\"\\nIs the said list contains all unique elements!\")\rprint(all_unique(nums2))\r", "nl": "Write a Python program to check if the elements of a given list are unique or not. "}
{"code": "def checkSubset(input_list1, input_list2): \r    return all(map(input_list1.__contains__, input_list2)) \r      \r\rlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \rlist2 = [[1, 3],[13,15,17]]   \rprint(\"Original list:\")\rprint(list1)\rprint(list2)\rprint(\"\\nIf the one of the said list is a subset of another.:\")\rprint(checkSubset(list1, list2)) \r\rlist1 = [\r           [\r             [1,2],[2,3]\r           ],\r           [\r             [3,4],[5,6]\r           ]\r         ]\rlist2 = [\r           [\r             [3,4], [5, 6]\r           ]\r         ]\rprint(\"Original list:\")\rprint(list1)\rprint(list2)\rprint(\"\\nIf the one of the said list is a subset of another.:\")\rprint(checkSubset(list1, list2)) \rlist1 = [\r           [\r             [1,2],[2,3]\r           ],\r           [\r             [3,4],[5,7]\r           ]\r         ]\rlist2 = [\r           [\r             [3,4], [5, 6]\r           ]\r         ]\rprint(\"Original list:\")\rprint(list1)\rprint(list2)\rprint(\"\\nIf the one of the said list is a subset of another.:\")\rprint(checkSubset(list1, list2))\r", "nl": "Write a Python program to check if a nested list is a subset of another nested list. "}
{"code": "import pandas as pd\rimport numpy as np\rimport matplotlib.pyplot as plt\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rdf.head(10).plot(kind='bar', figsize=(20,8))\rplt.show()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot comparing year, MSHA ID, Production and Labor_hours of first ten records. "}
{"code": "import numpy as np\rdef sum_matrix_Elements(m):\r    arra = np.array(m)   \r    element_sum = 0  \r    for p in range(len(arra)):  \r        for q in range(len(arra[p])):  \r            if arra[p][q] == 0 and p < len(arra)-1: \r                arra[p+1][q] = 0  \r            element_sum += arra[p][q]  \r    return element_sum\rm = [[1, 1, 0, 2],\r          [0, 3, 0, 3], \r          [1, 0, 4, 4]]\rprint(\"Original matrix:\")\rprint(m)\rprint(\"Sum:\")\rprint(sum_matrix_Elements(m))\r", "nl": "Write a NumPy program to add elements in a matrix. If an element in the matrix is 0, we will not add the element below this element. "}
{"code": "def min_by(lst, fn):\r  return min(map(fn, lst)) \rprint(min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) \r", "nl": "Write a Python program to get the minimum value of a list, after mapping each element to a value using a given function. "}
{"code": "import numpy as np\rx = np.array([1,2,3], dtype=np.float64)\rprint(\"Size of the array: \", x.size)\rprint(\"Length of one array element in bytes: \", x.itemsize)\rprint(\"Total bytes consumed by the elements of the array: \", x.nbytes)\r", "nl": "Write a NumPy program to find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements. "}
{"code": "import numpy as np\rx = np.array([10,-10,10,-10,-10,10])\ry = np.array([.85,.45,.9,.8,.12,.6])\rprint(\"Original arrays:\")\rprint(x)\rprint(y)\rresult = np.sum((x == 10) & (y > .5))\rprint(\"\\nNumber of instances of a value occurring in one array on the condition of another array:\")\rprint(result)\r", "nl": "Create two arrays of six elements. Write a NumPy program to count the number of instances of a value occurring in one array on the condition of another array. "}
{"code": "def list_count_4(nums):\r  count = 0  \r  for num in nums:\r    if num == 4:\r      count = count + 1\r\r  return count\r\rprint(list_count_4([1, 4, 6, 7, 4]))\rprint(list_count_4([1, 4, 6, 4, 7, 4]))", "nl": "Write a Python program to count the number 4 in a given list. "}
{"code": "d1 = {'a': 100, 'b': 200}\rd2 = {'x': 300, 'y': 200}\rd = d1.copy()\rd.update(d2)\rprint(d)\r", "nl": "Write a Python script to merge two Python dictionaries. "}
{"code": "import pandas as pd\repoch_t = 1621132355\rtime_stamp = pd.to_datetime(epoch_t, unit='s')\r# UTC (Coordinated Universal Time) is one of the well-known names of UTC+0 time zone which is 0h.\r# By default, time series objects of pandas do not have an assigned time zone.\rprint(\"Regular time stamp in UTC:\")\rprint(time_stamp)\rprint(\"\\nConvert the said timestamp in to US/Pacific:\")\rprint(time_stamp.tz_localize('UTC').tz_convert('US/Pacific'))\rprint(\"\\nConvert the said timestamp in to Europe/Berlin:\")\rprint(time_stamp.tz_localize('UTC').tz_convert('Europe/Berlin'))\r", "nl": "Write a Pandas program to convert unix/epoch time to a regular time stamp in UTC. Also convert the said timestamp in to a given time zone. "}
{"code": "import numpy as np\rx = np.random.random(15)\rprint(\"Original array:\")\rprint(x)\rx[x.argmax()] = -1\rprint(\"Maximum value replaced by -1:\")\rprint(x)\r", "nl": "Write a NumPy program to create random vector of size 15 and replace the maximum value by -1. "}
{"code": "import random\rimport datetime\rprint(\"Generate a random integer between 0 and 6:\")\rprint(random.randrange(5))\rprint(\"Generate random integer between 5 and 10, excluding 10:\")\rprint(random.randrange(start=5, stop=10))\rprint(\"Generate random integer between 0 and 10, with a step of 3:\")\rprint(random.randrange(start=0, stop=10, step=3))\rprint(\"\\nRandom date between two dates:\")\rstart_dt = datetime.date(2019, 2, 1)\rend_dt = datetime.date(2019, 3, 1)\rtime_between_dates = end_dt - start_dt\rdays_between_dates = time_between_dates.days\rrandom_number_of_days = random.randrange(days_between_dates)\rrandom_date = start_dt + datetime.timedelta(days=random_number_of_days)\rprint(random_date)\r", "nl": "Write a Python program to generate a random integer between 0 and 6 - excluding 6, random integer between 5 and 10 - excluding 10, random integer between 0 and 10, with a step of 3 and random date between two dates. Use random.randrange()"}
{"code": "from datetime import datetime\rfrom dateutil.parser import parse\rprint(\"Convert datatime to strings:\")\rstamp=datetime(2019,7,1)\rprint(stamp.strftime('%Y-%m-%d'))\rprint(stamp.strftime('%d/%b/%y'))\rprint(\"\\nConvert strings to datatime:\")\rprint(parse('Sept 17th 2019'))\rprint(parse('1/11/2019'))\rprint(parse('1/11/2019', dayfirst=True))\r", "nl": "Write a Pandas program to create a conversion between strings and datetime. "}
{"code": "x, y = 4, 3\rresult = x * x + 2 * x * y + y * y\rprint(\"({} + {}) ^ 2) = {}\".format(x, y, result))\r", "nl": "Write a Python program to solve (x + y) * (x + y). "}
{"code": "from urllib.request import urlopen\r\nfrom bs4 import BeautifulSoup\r\nhtml = urlopen(\"https://en.wikipedia.org/wiki/Python\")\r\nbsObj = BeautifulSoup(html)\r\nfor link in bsObj.findAll(\"a\"):\r\n  if 'href' in link.attrs:\r\n    print(link.attrs['href'])\r\n", "nl": "Write a Python program to get 90 days of visits broken down by browser for all sites on data.gov. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],\r    'company_phone_no': ['Company1-Phone no. 4695168357','Company2-Phone no. 8088729013','Company3-Phone no. 6204658086', 'Company4-Phone no. 5159530096', 'Company5-Phone no. 9037952371']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_phone_number(text):\r    ph_no = re.findall(r\"\\b\\d{10}\\b\",text)\r    return \"\".join(ph_no)\rdf['number']=df['company_phone_no'].apply(lambda x: find_phone_number(x))\rprint(\"\\Extracting numbers from dataframe columns:\")\rprint(df)\r", "nl": "Write a Pandas program to extract only phone number from the specified column of a given DataFrame. "}
{"code": "import pandas as pd\rdf = pd.DataFrame( {'id' : ['A','A','A','A','A','A','B','B','B','B','B'], \r                    'type' : [1,1,1,1,2,2,1,1,1,2,2], \r                    'book' : ['Math','Math','English','Physics','Math','English','Physics','English','Physics','English','English']})\r\rprint(\"Original DataFrame:\")\rprint(df)\rnew_df = df[['id', 'type', 'book']].drop_duplicates()\\\r                         .groupby(['id','type'])['book']\\\r                         .apply(list)\\\r                         .reset_index()\r\rnew_df['book'] = new_df.apply(lambda x: (','.join([str(s) for s in x['book']])), axis = 1)\rprint(\"\\nList all unique values in a group:\")\rprint(new_df)\r", "nl": "Write a Pandas program to split a given dataframe into groups and display target column as a list of unique values. "}
{"code": "def sort_matrix(M):\r    result = sorted(M, key=lambda matrix_row: sum(matrix_row)) \r    return result\r\rmatrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\rmatrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\r\rprint(\"Original Matrix:\")\rprint(matrix1)\rprint(\"\\nSort the said matrix in ascending order according to the sum of its rows\") \rprint(sort_matrix(matrix1))\rprint(\"\\nOriginal Matrix:\")\rprint(matrix2) \rprint(\"\\nSort the said matrix in ascending order according to the sum of its rows\") \rprint(sort_matrix(matrix2))\r", "nl": "Write a Python program to sort a given matrix in ascending order according to the sum of its rows using lambda. "}
{"code": "from collections import defaultdict\rclass_roll = [('v', 1), ('vi', 2), ('v', 3), ('vi', 4), ('vii', 1)]\rd = defaultdict(list)\rfor k, v in class_roll:\r    d[k].append(v)\rprint(sorted(d.items()))\r", "nl": "Write a Python program to group a sequence of key-value pairs into a dictionary of lists. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\r\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nDrop the columns where at least one element is missing:\")\rresult = df.dropna(axis='columns')\rprint(result)\r", "nl": "Write a Pandas program to drop the columns where at least one element is missing in a given DataFrame. "}
{"code": "my_dict = {'x':500, 'y':5874, 'z': 560}\r\rkey_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))\rkey_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))\r\rprint('Maximum Value: ',my_dict[key_max])\rprint('Minimum Value: ',my_dict[key_min])\r", "nl": "Write a Python program to get the maximum and minimum value in a dictionary. "}
{"code": "import numpy as np\rx = np.arange(16).reshape((4, 4))\rprint(\"Original array:\",x)\rprint(\"After splitting horizontally:\")\rprint(np.hsplit(x, [2, 6]))\r", "nl": "Write a NumPy program to split of an array of shape 4x4 it into two arrays along the second axis. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\rdf = pd.DataFrame({\r'book_name':['Book1','Book2','Book3','Book4','Book1','Book2','Book3','Book5'],\r'book_type':['Math','Physics','Computer','Science','Math','Physics','Computer','English'],\r'book_id':[1,2,3,4,1,2,3,5]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nNew column with count from groupby:\")\rresult = df.groupby([\"book_name\", \"book_type\"])[\"book_type\"].count().reset_index(name=\"count\")\rprint(result)\r", "nl": "Write a Pandas program to split a given dataframe into groups and create a new column with count from GroupBy. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table('survived', ['sex' , 'alone' ], [ 'embark_town', 'class' ])\rprint(result)\r\r", "nl": "Write a Pandas program to create a Pivot table and find the probability of survival by class, gender, solo boarding and port of embarkation. "}
{"code": "def change_char(str1):\r  char = str1[0]\r  str1 = str1.replace(char, '$')\r  str1 = char + str1[1:]\r\r  return str1\r\rprint(change_char('restart'))\r", "nl": "Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself. "}
{"code": "import numpy as np    \rx = np.arange(16).reshape(4,4)\rprint(\"Original arrays:\")\rprint(x)\rprint(\"\\nArray with size 2x2 from the said array:\")\rnew_array1 = np.resize(x,(2,2))\rprint(new_array1)\rprint(\"\\nArray with size 6x6 from the said array:\")\rnew_array2 = np.resize(x,(6,6))\rprint(new_array2)\r", "nl": "Write a NumPy program to create two arrays of size bigger and smaller than a given array. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details: average consumption of \\nbeverages per person >=4 and Beverage Types is Beer:\")\rprint(w_a_con[(w_a_con['Display Value'] >= 4) & ((w_a_con['Beverage Types'] == 'Beer') | (w_a_con['Beverage Types'] == 'Wine')| (w_a_con['Beverage Types'] == 'Spirits'))].head(10))\r", "nl": "Write a Pandas program to find out the records where consumption of beverages per person average >=4 and Beverage Types is Beer, Wine, Spirits from world alcohol consumption dataset. "}
{"code": "import numpy as np   \rnp.random.seed(32) \rnums = np.random.randint(low=0, high=256, size=(300, 400, 5), dtype=np.uint8)\rprint(nums)\r", "nl": "Write a NumPy program to create a three-dimension array with shape (300,400,5) and set to a variable. Fill the array elements with values using unsigned integer (0 to 255). "}
{"code": "my_dict = {}\r\rif not bool(my_dict):\r    print(\"Dictionary is empty\")\r\t", "nl": "Write a Python program to check a dictionary is empty or not. "}
{"code": "import numpy as np\rx1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x1)\rprint(\"Number of \u2018P\u2019:\")\rr = np.char.count(x1, \"P\")\rprint(r)\r", "nl": "Write a NumPy program to count the number of \"P\" in a given array, element-wise. "}
{"code": "def sum_by(lst, fn):\r  return sum(map(fn, lst))\rprint(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))\r", "nl": "Write a Python program to calculate the sum of a list, after mapping each element to a value using the provided function. "}
{"code": "import pandas as pd\r#Source: https://bit.ly/1l9yjm9\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rmost_sightings_years = df['Date_time'].dt.year.value_counts().head(10)\rdef is_top_years(year):\r   if year in most_sightings_years.index:\r       return year\rmonth_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')\rmonth_vs_year.index = month_vs_year.index.astype(int)\rmonth_vs_year.columns = month_vs_year.columns.astype(int)\rprint(\"\\nComparison of the top 10 years in which the UFO was sighted vs each month:\")\rprint(month_vs_year.head(10))\r", "nl": "Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs each Month. "}
{"code": "import numpy as np\rx = np.zeros((3, 1, 4))\rprint(np.squeeze(x).shape)\r", "nl": "Write a NumPy program to remove single-dimensional entries from a specified shape. "}
{"code": "import requests\rurl = 'http://httpbin.org/cookies'\r# A dictionary (my_cookies) of cookies to send to the specified url.\rmy_cookies = dict(cookies_are='Cookies parameter use to send cookies to the server')\rr = requests.get(url, cookies = my_cookies)\rprint(r.text)\r# Accessing cookies with Requests\r# url = 'http://WebsiteName/cookie/setting/url'\r# res = requests.get(url)\r# Value of cookies\r# print(res.cookies['cookie_name'])\r", "nl": "Write a Python code to send cookies to a given server and access cookies from the response of a server. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rorders_data = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(orders_data)\rresult = orders_data.groupby('customer_id').agg({'purch_amt': ['mean', 'min', 'max']})\rprint(\"\\nMean, min, and max values of purchase amount (purch_amt) group by customer id  (customer_id).\")\rprint(result)\r", "nl": "Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). "}
{"code": "price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\rprint( sorted(price, key=lambda x: float(x[1]), reverse=True))\r", "nl": "Write a Python program to sort a tuple by its float element. "}
{"code": "import numpy as np\rx = np.arange(7)\rprint(\"Original array:\")\rprint(x)\rprint(\"Element-wise remainder of division:\")\rprint(np.remainder(x, 5))\r", "nl": "Write a NumPy program to get the element-wise remainder of an array of division. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nString representing the date, controlled by an explicit format string:\")\rprint(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))\rprint(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))\r", "nl": "Write a Python program to get string representing the date, controlled by an explicit format string. "}
{"code": "def remove_column(nums, n):\r   for i in nums: \r    del i[n] \r   return nums\r\rlist1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\rn = 0\rprint(\"Original Nested list:\")\rprint(list1)\rprint(\"After removing 1st column:\")\rprint(remove_column(list1, n))\r\rlist2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\rn = 2\rprint(\"\\nOriginal Nested list:\")\rprint(list2)\rprint(\"After removing 3rd column:\")\rprint(remove_column(list2, n))\r", "nl": "Write a Python program to remove a specified column from a given nested list. "}
{"code": "from collections import Counter\rdef word_count(fname):\r        with open(fname) as f:\r                return Counter(f.read().split())\r\rprint(\"Number of words in the file :\",word_count(\"test.txt\"))\r", "nl": "Write a Python program to count the frequency of words in a file. "}
{"code": "from math import ceil\rdef chunk_list(lst, size):\r  return list(\r    map(lambda x: lst[x * size:x * size + size],\r      list(range(ceil(len(lst) / size)))))\rprint(chunk_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\r", "nl": "Write a Python program to chunk a given list into smaller lists of a specified size. "}
{"code": "import numpy as np \rnums = np.arange(16, dtype='int').reshape(-1, 4)\rprint(\"Original array:\")\rprint(nums)\rprint(\"\\nNew array after swapping first and last columns of the said array:\")\rnew_nums = nums[:, ::-1]\rprint(new_nums)\r", "nl": "Write a NumPy program to create a 4x4 array, now create a new array from the said array swapping first and last, second and third columns. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nTime object with the same hour, minute, second, microsecond:\")\rprint(arrow.utcnow().time())\rprint(\"\\nTimestamp representation of the Arrow object, in UTC time:\")\rprint(arrow.utcnow().timestamp)\r", "nl": "Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\nProleptic Gregorian ordinal of the date:\")\rprint(arrow.utcnow().toordinal())\r", "nl": "Write a Python program to get the proleptic Gregorian ordinal of a given date. "}
{"code": "def capitalize_first_last_letters(str1):\r     str1 = result = str1.title()\r     result =  \"\"\r     for word in str1.split():\r        result += word[:-1] + word[-1].upper() + \" \"\r     return result[:-1]  \r     \rprint(capitalize_first_last_letters(\"python exercises practice solution\"))\rprint(capitalize_first_last_letters(\"w3resource\"))\r", "nl": "Write a Python program to capitalize first and last letters of each word of a given string. "}
{"code": "starts_with = lambda x: True if x.startswith('P') else False\rprint(starts_with('Python'))\rstarts_with = lambda x: True if x.startswith('P') else False\rprint(starts_with('Java'))\r", "nl": "Write a Python program to find if a given string starts with a given character using Lambda. "}
{"code": "from itertools import groupby\rdef encode_str(input_str):\r    return [(len(list(n)), m) for m,n in groupby(input_str)]\r \rstr1 = \"AAASSSSKKIOOOORRRREEETTTTAAAABBBBBBDDDDD\" \rprint(\"Original string:\")\rprint(str1)\rprint(\"Result:\")\rprint(encode_str(str1))\r\rstr1 = \"jjjjiiiiooooosssnssiiiiwwwweeeaaaabbbddddkkkklll\" \rprint(\"\\nOriginal string:\")\rprint(str1)\rprint(\"Result:\")\rprint(encode_str(str1))\r", "nl": "Write a Python program to read a given string character by character and compress repeated character by storing the length of those character(s). "}
{"code": "import numpy as np\rx = np.random.random((3, 3, 3))\rprint(x)\r", "nl": "Write a NumPy program to create a 3x3x3 array filled with arbitrary values. "}
{"code": "x = 30\rprint('Value of x is \"{}\"'.format(x))\r", "nl": "Write a Python program to print a variable without spaces between values. "}
{"code": "def reverse_string(str1):\r    if len(str1) % 4 == 0:\r       return ''.join(reversed(str1))\r    return str1\r\rprint(reverse_string('abcd'))\rprint(reverse_string('python'))\r", "nl": "Write a Python function to reverses a string if it's length is a multiple of 4. "}
{"code": "import numpy as np\rx = np.array([-np.pi, -np.pi/2, np.pi/2, np.pi])\rr1 = np.degrees(x)\rr2 = np.rad2deg(x)\rassert np.array_equiv(r1, r2)\rprint(r1)\r", "nl": "Write a NumPy program to convert angles from radians to degrees for all elements in a given array. "}
{"code": "import numpy as np\rarra1 = np.random.randint(0,5,(12,12))\rprint(\"Original arrays:\")\rprint(arra1)\rn = 4\ri = 1 + (arra1.shape[0]-4)\rj = 1 + (arra1.shape[1]-4)\rresult = np.lib.stride_tricks.as_strided(arra1, shape=(i, j, n, n), strides = arra1.strides + arra1.strides)\rprint(\"\\nContiguous 4x4 blocks:\")\rprint(result)\r", "nl": "Write a NumPy program to extract all the contiguous 4x4 blocks from a given random 12x12 matrix. "}
{"code": "def gcd(x, y):\r   gcd = 1   \r   if x % y == 0:\r       return y   \r   for k in range(int(y / 2), 0, -1):\r       if x % k == 0 and y % k == 0:\r           gcd = k\r           break \r   return gcd\rprint(\"GCD of 12 & 17 =\",gcd(12, 17))\rprint(\"GCD of 4 & 6 =\",gcd(4, 6))\rprint(\"GCD of 336 & 360 =\",gcd(336, 360))\r", "nl": "Write a Python program to compute the greatest common divisor (GCD) of two positive integers. "}
{"code": "import numpy as np\rx1 = np.array([-1, 0, 1, 2])\rprint(\"Original array: \")\rprint(x1)\rx2 = -2.1\rprint(\"\\nSign of x1 to that of x2, element-wise:\")\rprint(np.copysign(x1, x2))\r", "nl": "Write a NumPy program to change the sign of a given array to that of a given array, element-wise. "}
{"code": "def sort_sublists(input_list):\r    input_list.sort()  # sort by sublist contents\r    input_list.sort(key=len)\r    return input_list\r\rlist1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nSort the list of lists by length and value:\")\rprint(sort_sublists(list1))\r", "nl": "Write a Python program to sort a given list of lists by length and value. "}
{"code": "def average_tuple(nums):\r    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))\r    return result\r\rnums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))\rprint (\"Original Tuple: \")\rprint(nums)\rprint(\"\\nAverage value of the numbers of the said tuple of tuples:\\n\",average_tuple(nums))\rnums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\rprint (\"\\nOriginal Tuple: \")\rprint(nums)\rprint(\"\\nAverage value of the numbers of the said tuple of tuples:\\n\",average_tuple(nums))\r\r", "nl": "Write a Python program to calculate the average value of the numbers in a given tuple of tuples using lambda. "}
{"code": "import numpy as np\rx = np.array([1, 2, 3, 4, 5, 6])\rprint(\"6 rows and 0 columns\")\rprint(x.shape)\r\ry = np.array([[1, 2, 3],[4, 5, 6],[7,8,9]])\rprint(\"(3, 3) -> 3 rows and 3 columns \")\rprint(y)\r\rx = np.array([1,2,3,4,5,6,7,8,9])\rprint(\"Change array shape to (3, 3) -> 3 rows and 3 columns \")\rx.shape = (3, 3)\rprint(x)\r", "nl": "Write a NumPy program to change the dimension of an array. "}
{"code": "import pandas as pd\rstr1 = 'abc def abcdef icd'\rprint(\"Original series:\")\rprint(str1)\rser = pd.Series(list(str1))\relement_freq = ser.value_counts()\rprint(element_freq)\rcurrent_freq = element_freq.dropna().index[-1]\rresult = \"\".join(ser.replace(' ', current_freq))\rprint(result)\r", "nl": "Write a Pandas program to replace missing white spaces in a given string with the least frequent character. "}
{"code": "import pandas as pd\rdate1 = pd.Timestamp('2019-01-01', tz='Europe/Berlin')\rdate2 = pd.Timestamp('2019-01-01', tz='US/Pacific')\rdate3 = pd.Timestamp('2019-01-01', tz='US/Eastern')\rprint(\"Time series data with time zone:\")\rprint(date1)\rprint(date2)\rprint(date3)\rprint(\"\\nTime series data without time zone:\")\rprint(date1.tz_localize(None))\rprint(date2.tz_localize(None))\rprint(date3.tz_localize(None))\r", "nl": "Write a Pandas program to remove the time zone information from a Time series data. "}
{"code": "import calendar\ry = int(input(\"Input the year : \"))\rm = int(input(\"Input the month : \"))\rprint(calendar.month(y, m))", "nl": "Write a Python program to print the calendar of a given month and year."}
{"code": "def file_lengthy(fname):\r        with open(fname) as f:\r                for i, l in enumerate(f):\r                        pass\r        return i + 1\rprint(\"Number of lines in the file: \",file_lengthy(\"test.txt\"))\r", "nl": "Write a Python program to count the number of lines in a text file. "}
{"code": "import numpy as np\rx = np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4])\rprint(\"Original array: \")\rprint(x)\rr1 = np.signbit(x)\rr2 = x < 0\rassert np.array_equiv(r1, r2)\rprint(r1)\r", "nl": "Write a NumPy program to check element-wise True/False of a given array where signbit is set. "}
{"code": "def sum_thrice(x, y, z):\r\r     sum = x + y + z\r  \r     if x == y == z:\r      sum = sum * 3\r     return sum\r\rprint(sum_thrice(1, 2, 3))\rprint(sum_thrice(3, 3, 3))\r", "nl": "Write a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum. "}
{"code": "#Ref.https://bit.ly/2YiegZB\rfrom bisect import bisect_left\rfrom functools import total_ordering\rfrom heapq import merge\r@total_ordering\rclass Stack(list):\r    def __lt__(self, other):\r        return self[-1] < other[-1]\r    def __eq__(self, other):\r        return self[-1] == other[-1]\rdef patience_sort(collection: list) -> list:\r    stacks = []\r    # sort into stacks\r    for element in collection:\r        new_stacks = Stack([element])\r        i = bisect_left(stacks, new_stacks)\r        if i != len(stacks):\r            stacks[i].append(element)\r        else:\r            stacks.append(new_stacks)\r\r    # use a heap-based merge to merge stack efficiently\r    collection[:] = merge(*[reversed(stack) for stack in stacks])\r    return collection            \rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rpatience_sort(nums)\rprint(\"Sorted order is:\", nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rpatience_sort(nums)\rprint(\"Sorted order is:\", nums)\r", "nl": "Write a Python program to sort unsorted numbers using Patience sorting. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rnew_w_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(new_w_a_con.head())\rprint(\"\\nSelect all rows which not appears in a given list:\")\rwho_region = [\"Africa\", \"Eastern Mediterranean\", \"Europe\"]\rflt_wine = ~new_w_a_con[\"WHO region\"].isin(who_region)\rprint(new_w_a_con[flt_wine])\r", "nl": "Write a Pandas program to filter those records which not appears in a given list from world alcohol consumption dataset. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rage = pd.cut(df['age'], [0, 10, 30, 60, 80])\rresult = df.pivot_table('survived', index=['sex',age], columns='pclass', aggfunc='count')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and count survival by gender, categories wise age of various classes. "}
{"code": "import numpy as np\rx = np.array([-.7, -1.5, -1.7, 0.3, 1.5, 1.8, 2.0])\rprint(\"Original array:\")\rprint(x)\rx = np.rint(x)\rprint(\"Round elements of the array to the nearest integer:\")\rprint(x)\r", "nl": "Write a NumPy program to round elements of the array to the nearest integer. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df) \rprint(\"\\nTotal missing values in a dataframe:\")\rtot_missing_vals = df.isnull().sum().sum()\rprint(tot_missing_vals)\r", "nl": "Write a Pandas program to count the missing values in a given DataFrame. "}
{"code": "def test(lst):\r    return [lst for lst in lst if isinstance(lst, int)]\rmixed_list = [34.67, 12, -94.89, \"Python\", 0, \"C#\"]\rprint(\"Original list:\", mixed_list)\rprint(\"After removing all the values except integer values from the said array of mixed values:\")\rprint(test(mixed_list)) \r", "nl": "Write a Python program to remove all the values except integer values from a given array of mixed values. "}
{"code": "def test(nums):\r    result = sorted([item for item in nums if item < 0])\r    return result[0]+result[1]\r\rnums = [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]\rprint(\"Original list elements:\")\rprint(nums)\rprint(\"Sum of two lowest negative numbers of the said array of integers: \",test(nums))\rnums = [-4, 5, -2, 0, 3, -1, 4 , 9]\rprint(\"\\nOriginal list elements:\")\rprint(nums)\rprint(\"Sum of two lowest negative numbers of the said array of integers: \",test(nums))\r", "nl": "Write a Python program to calculate the sum of two lowest negative numbers of a given array of integers. "}
{"code": "def test(lst):\r    result = {item[0]: item[1:] for item in lst}\r    return result\r\rstudents = [[1, 'Jean Castro', 'V'], [2, 'Lula Powell', 'V'], [3, 'Brian Howell', 'VI'], [4, 'Lynne Foster', 'VI'], [5, 'Zachary Simon', 'VII']]\r\rprint(\"\\nOriginal list of lists:\")\rprint(students)\rprint(\"\\nConvert the said list of lists to a dictionary:\")\rprint(test(students))\r", "nl": "Write a Python program to convert a given list of lists to a dictionary. "}
{"code": "import random\rdef random_select_nums(n_list, n):\r        return random.sample(n_list, n)\rn_list = [1,1,2,3,4,4,5,1]\rprint(\"Original list:\") \rprint(n_list)\rselec_nums = 3\rresult = random_select_nums(n_list, selec_nums)\rprint(\"\\nSelected 3 random numbers of the above list:\")\rprint(result) \r", "nl": "Write a Python program to extract a given number of randomly selected elements from a given list. "}
{"code": "from urllib.request import urlopen\r\nfrom urllib.error import HTTPError\r\nfrom bs4 import BeautifulSoup\r\ndef getTitle(url):\r\n    try:\r\n        html = urlopen(url)\r\n    except HTTPError as e:\r\n        return None\r\n    try:\r\n        bsObj = BeautifulSoup(html.read(), \"lxml\")\r\n        title = bsObj.body.h1\r\n    except AttributeError as e:\r\n        return None\r\n    return title\r\n    \r\n    title = getTitle(url)\r\n    if title == None:\r\n      return \"Title could not be found\"\r\n    else:\r\n      return title\r\n\r\nprint(getTitle(\"https://www.w3resource.com/\"))\r\nprint(getTitle(\"http://www.example.com/\"))\r\n", "nl": " Write a Python program to that retrieves an arbitary Wikipedia page of \"Python\" and creates a list of links on that page. "}
{"code": "import os\rfd = os.open( \"/tmp\", os.O_RDONLY )\ros.fchown( fd, 100, -1)\ros.fchown( fd, -1, 50)\rprint(\"Changed ownership successfully..\")\ros.close( fd )\r", "nl": "Write a Python program to alter the owner and the group id of a specified file. "}
{"code": "import numpy as np \rnp.random.seed(20) \rcbrt = np.cbrt(7)\rnd1 = 200 \rprint(cbrt * np.random.randn(10, 4) + nd1) \r", "nl": "Write a NumPy program to create a two-dimensional array with shape (8,5) of random numbers. Select random numbers from a normal distribution (200,7). "}
{"code": "def multiply(x, y):\r    if y < 0:\r        return -multiply(x, -y)\r    elif y == 0:\r        return 0\r    elif y == 1:\r        return x\r    else:\r        return x + multiply(x, y - 1)\r\rprint(multiply(3, 5));\r", "nl": "Write a Python program to multiply two integers without using the * operator in python. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'name_email': ['Alberto Franco [email\u00a0protected]','Gino Mcneill [email\u00a0protected]','Ryan Parkes [email\u00a0protected]', 'Eesha Hinton', 'Gino Mcneill [email\u00a0protected]']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_email(text):\r    email = re.findall(r'[\\w\\.-][email\u00a0protected][\\w\\.-]+',str(text))\r    return \",\".join(email)\rdf['email']=df['name_email'].apply(lambda x: find_email(x))\rprint(\"\\Extracting email from dataframe columns:\")\rprint(df)\r", "nl": "Write a Pandas program to extract email from a specified column of string type of a given DataFrame. "}
{"code": "import csv\rprint(\"\\nWith initial spaces after a delimiter:\\n\")\rwith open('departments.csv', 'r') as csvfile:\r   data = csv.reader(csvfile, skipinitialspace=False)\r   for row in data:\r     print(', '.join(row))\rprint(\"\\n\\nWithout initial spaces after a delimiter:\\n\")\rwith open('departments.csv', 'r') as csvfile:\r   data = csv.reader(csvfile, skipinitialspace=True)\r   for row in data:\r     print(', '.join(row))\r", "nl": "Write a Python program to read a given CSV files with initial spaces after a delimiter and remove those initial spaces. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'weight': [173, 192, 186, 167, 151, 159],\r    'height': [35, None, 33, 30, None, 32]},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nGroup by one column and remove those groups if all the values of a specific columns are not available:\")\rresult = df[(~df['height'].isna()).groupby(df['school_code']).transform('any')]\rprint(result)\r", "nl": "Write a Pandas program to split a given dataset, group by one column and remove those groups if all the values of a specific columns are not available. "}
{"code": "string = \"w3resource.com\"\rprint(string.startswith(\"w3r\"))\r", "nl": "Write a Python program to check whether a string starts with specified characters."}
{"code": "import numpy as np\rx = [1., 2., 3., 4.]\rprint(\"Original array:\")\rprint(x)\rprint(\"Largest integer smaller or equal to the division of the inputs:\")\rprint(np.floor_divide(x, 1.5))\r", "nl": "Write a NumPy program to get the largest integer smaller or equal to the division of the inputs. "}
{"code": "from collections import defaultdict\rdef max_aggregate(st_data):\r    temp = defaultdict(int)\r    for name, marks in st_data:\r        temp[name] += marks\r    return max(temp.items(), key=lambda x: x[1])\r\r\rstudents = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]\rprint(\"Original list:\")\rprint(students)\rprint(\"\\nMaximum aggregate value of the said list of tuple pair:\")\rprint(max_aggregate(students))\r", "nl": "Write a Python program to calculate the maximum aggregate from the list of tuples (pairs). "}
{"code": "import numpy as np\rx = np.random.randn(1000)\rprint(\"Average of the array elements:\")\rmean = x.mean()\rprint(mean)\rprint(\"Standard deviation of the array elements:\")\rstd = x.std()\rprint(std)\rprint(\"Variance of the array elements:\")\rvar = x.var()\rprint(var)\r", "nl": "Write a NumPy program to create a random array with 1000 elements and compute the average, variance, standard deviation of the array elements. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.arange(16.0).reshape(2, 2, 4)\rprint(x)\rnew_array1 = np.dsplit(x, 2)\rprint(\"\\nsplit array into multiple sub-arrays along the 3rd axis:\")\rprint(new_array1)\r", "nl": "Write a NumPy program to split array into multiple sub-arrays along the 3rd axis. "}
{"code": "import numpy as np\rx = np.array([[2, 4, 6], [6, 8, 10]], np.int32)\rprint(x)\rprint(\"Data type of the array x is:\",x.dtype)\r# Change the data type of x\ry = x.astype(float)\rprint(\"New Type: \",y.dtype)\rprint(y)\r", "nl": "Write a NumPy program to change the data type of an array. "}
{"code": "import numpy as np\rx = np.linspace(2.5, 6.5, 30)\rprint(x)\r", "nl": "Write a NumPy program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[np.nan,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[np.nan,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': [np.nan,'2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[np.nan,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001]})\r\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nDrop the rows where all elements are missing:\")\rresult = df.dropna(how='all')\rprint(result)\r", "nl": "Write a Pandas program to drop the rows where all elements are missing in a given DataFrame. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'text_code': ['t0001.','t0002','t0003', 't0004'],\r    'text_lang': ['She livedd a long life.', 'How oold is your father?', 'What is tthe problem?','TThhis desk is used by Tom.']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef rep_char(str1):\r    tchr = str1.group(0)\r    if len(tchr) > 1:\r        return tchr[0:1] # can change the value here on repetition\rdef unique_char(rep, sent_text):\r    convert = re.sub(r'(\\w)\\1+', rep, sent_text) \r    return convert\rdf['normal_text']=df['text_lang'].apply(lambda x : unique_char(rep_char,x))\rprint(\"\\nRemove repetitive characters:\")\rprint(df)\r", "nl": "Write a Pandas program to remove repetitive characters from the specified column of a given DataFrame. "}
{"code": "import copy\t\rdef remove_list_of_lists(color, N):\r    for x in color:\r        del x[N]\r    return color\r\rnums = [\r        [\"Red\",\"Maroon\",\"Yellow\",\"Olive\"],\r        [\"#FF0000\", \"#800000\", \"#FFFF00\", \"#808000\"],\r        [\"rgb(255,0,0)\",\"rgb(128,0,0)\",\"rgb(255,255,0)\",\"rgb(128,128,0)\"]\r       ]\rnums1 =  copy.deepcopy(nums)\rnums2 =  copy.deepcopy(nums)\rnums3 =  copy.deepcopy(nums)\r\rprint(\"Original list of lists:\")\rprint(nums)\rN = 0\rprint(\"\\nRemove 1st item from the said list of lists:\")\rprint(remove_list_of_lists(nums1, N))\rN = 1\rprint(\"\\nRemove 2nd item from the said list of lists:\")\rprint(remove_list_of_lists(nums2, N))\rN = 3\rprint(\"\\nRemove 4th item from the said list of lists:\")\rprint(remove_list_of_lists(nums3, N))\r", "nl": "Write a Python program to remove the specific item from a given list of lists. "}
{"code": "import pandas as pd\rimport numpy as np\rs1 = pd.Series(['100', '200', 'python', '300.12', '400'])\rprint(\"Original Data Series:\")\rprint(s1)\rprint(\"Series to an array\")\ra = np.array(s1.values.tolist())\rprint (a)\r", "nl": "Write a Pandas program to convert a given Series to an array. "}
{"code": "import numpy as np\rx = np.array(['Python PHP Java C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rr = np.char.split(x)\rprint(\"\\nSplit the element of the said array with spaces: \")\rprint(r)\r", "nl": "Write a NumPy program to split the element of a given array with spaces. "}
{"code": "from collections import defaultdict\rdef max_occurrences(nums):\r    dict = defaultdict(int)\r    for i in nums:\r        dict[i] += 1\r    result = max(dict.items(), key=lambda x: x[1]) \r    return result\rnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\rprint (\"Original list:\")\rprint(nums)\rprint(\"\\nItem with maximum frequency of the said list:\")\rprint(max_occurrences(nums))\r", "nl": "Write a Python program to find the item with maximum frequency in a given list. "}
{"code": "def check_element_in_list(lst, x, n):\r    t = 0\r    try:\r        for _ in range(n):\r            t = lst.index(x, t) + 1\r        return True\r    except ValueError:\r        return False\r\rnums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]\rprint(\"Original list:\")\rprint(nums)\rx = 3\rn = 4\rprint(\"\\nCheck if\",x,\"occurs at least\",n,\"times in a list:\")\rprint(check_element_in_list(nums,x,n))\rx = 0\rn = 5\rprint(\"\\nCheck if\",x,\"occurs at least\",n,\"times in a list:\")\rprint(check_element_in_list(nums,x,n))\rx = 8\rn = 3\rprint(\"\\nCheck if\",x,\"occurs at least\",n,\"times in a list:\")\rprint(check_element_in_list(nums,x,n))\r", "nl": "Write a Python program to check if a given element occurs at least n times in a list. "}
{"code": "def max_consecutive_0(input_str): \r     return  max(map(len,input_str.split('1')))\rstr1 = '111000010000110'\rprint(\"Original string:\" + str1)\rprint(\"Maximum length of consecutive 0\u2019s:\")\rprint(max_consecutive_0(str1))\rstr1 = '111000111'\rprint(\"Original string:\" + str1)\rprint(\"Maximum length of consecutive 0\u2019s:\")\rprint(max_consecutive_0(str1))\r", "nl": "Write a Python program to find maximum length of consecutive 0's in a given binary string. "}
{"code": "import sys\rdef Next_smallest_Palindrome(num):\r    numstr = str(num)\r    for i in range(num+1,sys.maxsize):\r        if str(i) == str(i)[::-1]:\r            return i\r\rprint(Next_smallest_Palindrome(99));\rprint(Next_smallest_Palindrome(1221));\r", "nl": "Write a python program to find the next smallest palindrome of a specified number. "}
{"code": "import itertools as it\rdef cycle_data(iter):\r    return it.cycle(iter)\r# Following  loops will run for ever    \r#List\rresult = cycle_data(['A','B','C','D'])\rprint(\"The said function print never-ending items:\")\rfor i in result:\r    print(i)\r\r#String\rresult = cycle_data('Python itertools')\rprint(\"The said function print never-ending items:\")\rfor i in result:\r    print(i)\r", "nl": "Write a Python program to generate an infinite cycle of elements from an iterable. "}
{"code": "import numpy as np\rx = np.array([1, 0, 0, 0])\rprint(\"Original array:\")\rprint(x)\rprint(\"Test whether any of the elements of a given array is non-zero:\")\rprint(np.any(x))\rx = np.array([0, 0, 0, 0])\rprint(\"Original array:\")\rprint(x)\rprint(\"Test whether any of the elements of a given array is non-zero:\")\rprint(np.any(x))\r", "nl": "Write a NumPy program to\u00a0test whether any of the elements of a given array is non-zero. "}
{"code": "from array import array\ra = array(\"I\", (12,25))\rprint(a.itemsize)\ra = array(\"f\", (12.236,36.36))\rprint(a.itemsize)\r", "nl": "Write a Python program to get the array size of types unsigned integer and float. "}
{"code": "str1 = \"w3resource\"\rfor index, char in enumerate(str1):\r    print(\"Current character\", char, \"position at\", index )\r", "nl": "Write a Python program to print the index of the character in a string. "}
{"code": "import csv\rcsv_string = \"\"\"1,2,3\r4,5,6\r7,8,9\r\"\"\"\rprint(\"Original string:\")\rprint(csv_string)\rlines = csv_string.splitlines()\rprint(\"List of CSV formatted strings:\")\rprint(lines)\rreader = csv.reader(lines)\rparsed_csv = list(reader)\rprint(\"\\nList representation of the CSV file:\")\rprint(parsed_csv)\r", "nl": "Write a Python program to parse a given CSV string and get the list of lists of string values. Use csv.reader"}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFrom the 'Year' column, access every other column:\")\rprint(w_a_con.loc[:,'Year'::2].head(10))\rprint(\"\\nAlternate solution:\")\rprint(w_a_con.iloc[:,0::2].head(10))\r", "nl": "Write a Pandas program to filter all records starting from the 'Year' column, access every other column from world alcohol consumption dataset. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nCurrent date of Ufo dataset:\")\rprint(df.Date_time.max())\rprint(\"\\nOldest date of Ufo dataset:\")\rprint(df.Date_time.min())\rprint(\"\\nNumber of days between Current date and oldest date of Ufo dataset:\")\rprint((df.Date_time.max() - df.Date_time.min()).days)\r", "nl": "Write a Pandas program to get the current date, oldest date and number of days between Current date and oldest date of Ufo dataset. "}
{"code": "def test(dictt):\r    result = {key: [idx for idx in val if not idx % 2]  \r          for key, val in dictt.items()}   \r    return result    \r\rstudents = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} \rprint(\"\\nOriginal Dictionary:\")\rprint(students)\rprint(\"Filter even numbers from said dictionary values:\")\rprint(test(students))\r\rstudents = {'V' : [1, 3, 5], 'VI' : [1, 5], 'VII' : [2, 7, 9]} \rprint(\"\\nOriginal Dictionary:\")\rprint(students)\rprint(\"Filter even numbers from said dictionary values:\")\rprint(test(students))\r", "nl": "Write a Python program to filter even numbers from a given dictionary values. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'student_id': ['S001','S001','S002','S002','S003','S003'],\r    'marks': [[88,89,90],[78,81,60],[84,83,91],[84,88,91],[90,89,92],[88,59,90]]})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nGroupby and aggregate over multiple lists:\")\rresult = df.set_index('student_id')['marks'].groupby('student_id').apply(list).apply(lambda x: np.mean(x,0))\rprint(result)\r", "nl": "Write a Pandas program to split the following dataset using group by on first column and aggregate over multiple lists on second column. "}
{"code": "import numpy as np \rnums1 = np.array([[2, 5, 2],\r              [1, 5, 5]])\rnums2 = np.array([[5, 3, 4],\r              [3, 2, 5]])\rprint(\"Array1:\") \rprint(nums1)\rprint(\"Array2:\") \rprint(nums2)\rprint(\"\\nArithmetic means of corresponding elements of said two arrays:\")\rprint(np.divide(np.add(nums1, nums2), 2))\r", "nl": "Write a NumPy program to calculate the arithmetic means of corresponding elements of two given arrays of same size. "}
{"code": "def count_element_in_list(input_list, x): \r    ctr = 0\r    for i in range(len(input_list)): \r        if x in input_list[i]: \r            ctr+= 1\r          \r    return ctr\r      \r\rlist1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]] \rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nCount 1 in the said list:\")\rprint(count_element_in_list(list1, 1)) \rprint(\"\\nCount 7 in the said list:\")\rprint(count_element_in_list(list1, 7)) \r\r\rlist1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] \rprint(\"\\nOriginal list:\")\rprint(list1)\rprint(\"\\nCount 'A' in the said list:\")\rprint(count_element_in_list(list1, 'A')) \rprint(\"\\nCount 'E' in the said list:\")\rprint(count_element_in_list(list1, 'E'))\r", "nl": "Write a Python program to count the number of sublists contain a particular element. "}
{"code": "import numpy as np  \rnums = np.array([[[1, 5, 2, 1],\r               [4, 3, 5, 6],\r               [6, 3, 0, 6],\r               [7, 3, 5, 0],\r               [2, 3, 3, 5]],\r              \r              [[2, 2, 3, 1],\r               [4, 0, 0, 5],\r               [6, 3, 2, 1],\r               [5, 1, 0, 0],               \r               [0, 1, 9, 1]],\r              \r              [[3, 1, 4, 2],\r               [4, 1, 6, 0],\r               [1, 2, 0, 6],\r               [8, 3, 4, 0],               \r               [2, 0, 2, 8]]]) \rprint(\"Array:\")\rprint(nums)\r", "nl": "Write a NumPy program to create a three-dimension array with shape (3,5,4) and set to a variable. "}
{"code": "import numpy as np\rnew_array = np.random.randint(5, size=(5,3))\rprint(\"Random set of rows from 2D array array:\")\rprint(new_array)\r", "nl": "Write a NumPy program to create random set of rows from 2D array. "}
{"code": "def difference_by(a, b, fn):\r  _b = set(map(fn, b))\r  return [item for item in a if fn(item) not in _b]\rfrom math import floor\rprint(difference_by([2.1, 1.2], [2.3, 3.4], floor)) \rprint(difference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))\r", "nl": "Write a Python program to get the difference between two given lists, after applying the provided function to each list element of both. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table(index=['sex'], columns=['pclass'], aggfunc='count')\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and calculate number of women and men were in a particular cabin class. "}
{"code": "def new_string(str):\r  if len(str) >= 2 and str[:2] == \"Is\":\r    return str\r  return \"Is\" + str\r\rprint(new_string(\"Array\"))\rprint(new_string(\"IsEmpty\"))\r", "nl": "Write a Python program to get a new string from a given string where \"Is\" has been added to the front. If the given string already begins with \"Is\" then return the string unchanged. "}
{"code": "def index_on_inner_list(list1, list2):\r    result = [x for x in list1 if x not in list2]\r    return result\r\rlist1 = [1,2,3,4,5,6,7,8,9,10]\rlist2 = [2,4,6,8]\r\rprint(\"Original lists:\")\rprint(\"list1:\", list1)\rprint(\"list2:\", list2)\r\rprint(\"\\nRemove all elements from 'list1' present in 'list2:\")\rprint(index_on_inner_list(list1, list2))\r", "nl": "Write a Python program to remove all elements from a given list present in another list. "}
{"code": "def concatenate_list_data(list):\r    result= ''\r    for element in list:\r        result += str(element)\r    return result\r\rprint(concatenate_list_data([1, 5, 12, 2]))\r", "nl": "Write a Python program to concatenate all elements in a list into a string and return it. "}
{"code": "import pandas as pd\rds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])\rprint(\"Original Series:\")\rprint(ds)\rprint(\"\\nPrint specified row from the said series using location based indexing:\")\rprint(\"\\nThird row:\")\rprint(ds.iloc[[2]])\rprint(\"\\nFifth row:\")\rprint(ds.iloc[[4]])\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]})\r\rprint(\"Original DataFrame with single index:\")\rprint(df)\rprint(\"\\nPrint specified row from the said DataFrame using location based indexing:\")\rprint(\"\\nThird row:\")\rprint(df.iloc[[2]])\rprint(\"\\nFifth row:\")\rprint(df.iloc[[4]])\r", "nl": "Write a Pandas program to select a specific row of given series/dataframe by integer index. "}
{"code": "import types\rdef func(): \r    return 1\r\rprint(isinstance(func, types.FunctionType))\rprint(isinstance(func, types.LambdaType))\rprint(isinstance(lambda x: x, types.FunctionType))\rprint(isinstance(lambda x: x, types.LambdaType))\rprint(isinstance(max, types.FunctionType))\rprint(isinstance(max, types.LambdaType))\rprint(isinstance(abs, types.FunctionType))\rprint(isinstance(abs, types.LambdaType))\r", "nl": "Write a Python program to check if a function is a user-defined function or not. Use types.FunctionType, types.LambdaType()"}
{"code": "x = {'key1': 1, 'key2': 3, 'key3': 2}\ry = {'key1': 1, 'key2': 2}\rfor (key, value) in set(x.items()) & set(y.items()):\r    print('%s: %s is present in both x and y' % (key, value))\r\t", "nl": "Write a Python program to match key values in two dictionaries. "}
{"code": "import textwrap\rsample_text ='''\r    Python is a widely used high-level, general-purpose, interpreted,\r    dynamic programming language. Its design philosophy emphasizes\r    code readability, and its syntax allows programmers to express\r    concepts in fewer lines of code than possible in languages such\r    as C++ or Java.\r    '''\rtext_without_Indentation = textwrap.dedent(sample_text)\rwrapped = textwrap.fill(text_without_Indentation, width=50)\r#wrapped += '\\n\\nSecond paragraph after a blank line.'\rfinal_result = textwrap.indent(wrapped, '> ')\rprint()\rprint(final_result)\rprint()\r", "nl": "Write a Python program to add a prefix text to all of the lines in a string. "}
{"code": "def group_similar_items(seq,el):\r    seq.append(seq.pop(seq.index(el)))\r    return seq \r\rcolors = ['red','green','white','black','orange']\rprint(\"Original list:\")\rprint(colors)\rel = \"white\"\rprint(\"Move\",el,\"at the end of the said list:\")\rprint(group_similar_items(colors, el))\r\rcolors = ['red','green','white','black','orange']\rprint(\"\\nOriginal list:\")\rprint(colors)\rel = \"red\"\rprint(\"Move\",el,\"at the end of the said list:\")\rprint(group_similar_items(colors, el))\r\rcolors = ['red','green','white','black','orange']\rprint(\"\\nOriginal list:\")\rprint(colors)\rel = \"black\"\rprint(\"Move\",el,\"at the end of the said list:\")\rprint(group_similar_items(colors, el))\r", "nl": "Write a Python program to move a specified element in a given list. "}
{"code": "import numpy as np\rx =  np.diagflat([4, 5, 6, 8])\rprint(x)\r", "nl": "Write a NumPy program to create a 2-D array whose diagonal equals [4, 5, 6, 8] and 0's elsewhere. "}
{"code": "def BabylonianAlgorithm(number):\r    if(number == 0):\r        return 0;\r\r    g = number/2.0;\r    g2 = g + 1;\r    while(g != g2):\r        n = number/ g;\r        g2 = g;\r        g = (g + n)/2;\r\r    return g;\rprint('The Square root of 0.3 =', BabylonianAlgorithm(0.3));\r", "nl": "Write a Python program to computing square roots using the Babylonian method. "}
{"code": "def Recurgcd(a, b):\r\tlow = min(a, b)\r\thigh = max(a, b)\r\r\tif low == 0:\r\t\treturn high\r\telif low == 1:\r\t\treturn 1\r\telse:\r\t\treturn Recurgcd(low, high%low)\rprint(Recurgcd(12,14))\r", "nl": "Write a Python program to find \u00a0the\u00a0greatest common divisor\u00a0(gcd) of two integers. "}
{"code": "import pandas as pd\rprint(\"Create an Interval Index using IntervalIndex.from_breaks:\")\rdf_interval = pd.DataFrame({\"X\":[1, 2, 3, 4, 5, 6, 7]},\r                            index = pd.IntervalIndex.from_breaks(\r                            [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3, 3.5]))    \rprint(df_interval)\rprint(df_interval.index)\r\rprint(\"\\nCreate an Interval Index using IntervalIndex.from_tuples:\")\rdf_interval = pd.DataFrame({\"X\":[1, 2, 3, 4, 5, 6, 7]},             \r                            index = pd.IntervalIndex.from_tuples(\r                            [(0, .5), (.5, 1), (1, 1.5), (1.5, 2), (2, 2.5), (2.5, 3), (3, 3.5)]))\rprint(df_interval)\rprint(df_interval.index)\r\rprint(\"\\nCreate an Interval Index using IntervalIndex.from_arrays:\")\rdf_interval = pd.DataFrame({\"X\":[1, 2, 3, 4, 5, 6, 7]},             \r                            index = pd.IntervalIndex.from_arrays(\r                            [0, .5, 1, 1.5, 2, 2.5, 3], [.5, 1, 1.5, 2, 2.5, 3, 3.5]))\rprint(df_interval)\rprint(df_interval.index) \r", "nl": "Write a Pandas program to create a DataFrame using intervals as an index. "}
{"code": "import numpy as np\rx = np.array([[20,20,20],[30,30,30],[40,40,40]])\rprint(\"Original array:\")\rprint(x)\rv = np.array([20,30,40])\rprint(\"Vector:\")\rprint(v)\rprint(x / v[:,None])\r", "nl": "Write a NumPy program to divide each row by a vector element. "}
{"code": "print(\"\"\"\ra string that you \"don't\" have to escape\rThis\ris a  ....... multi-line\rheredoc string --------> example\r\"\"\")\r", "nl": "Write a Python program to print the following 'here document'. "}
{"code": "import requests\rimport re\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nelement(s) that has #python-network id:\\n\")\rprint(soup.select_one(\"#python-network\"))\r", "nl": "Write a Python program to print the element(s) that has a specified id of a given web page. "}
{"code": "def larger_string(str, n):\r   result = \"\"\r   for i in range(n):\r      result = result + str\r   return result\r\rprint(larger_string('abc', 2))\rprint(larger_string('.py', 3))\r", "nl": "Write a Python program to get a string which is n (non-negative integer) copies of a given string. "}
{"code": "from itertools import groupby\rfrom operator import itemgetter\r\rword_list = ['be','have','do','say','get','make','go','know','take','see','come','think',\r     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']\r\rfor letter, words in groupby(sorted(word_list), key=itemgetter(0)):\r    print(letter)\r    for word in words:\r        print(word)\r", "nl": "Write a Python program to split a list based on first character of word. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: Third column\")\rprint(arra_data[:,2])\r", "nl": "Write a NumPy program to extract all the elements of the third column from a given (4x4) array. "}
{"code": "str_num = \"1234567890\"\rprint(\"Original string:\",str_num)\rprint('%.6s' % str_num)\rprint('%.9s' % str_num)\rprint('%.10s' % str_num)\r", "nl": "Write a Python program to format a specified string limiting the length of a string. "}
{"code": "is_num = lambda q: q.replace('.','',1).isdigit()\rprint(is_num('26587'))\rprint(is_num('4.2365'))\rprint(is_num('-12547'))\rprint(is_num('00'))\rprint(is_num('A001'))\rprint(is_num('001'))\rprint(\"\\nPrint checking numbers:\")\ris_num1 = lambda r: is_num(r[1:]) if r[0]=='-' else is_num(r)\rprint(is_num1('-16.4'))\rprint(is_num1('-24587.11'))\r", "nl": "Write a Python program to check whether a given string is number or not using Lambda. "}
{"code": "s = \"The quick brown fox jumps over the lazy dog.\"  \rprint(\"Original string:\")\rprint(s)\rprint(\"Number of occurrence of 'o' in the said string:\")\rprint(s.count(\"o\"))\r", "nl": "Write a Python program to count the number occurrence of a specific character in a string. "}
{"code": "import numpy as np\rx =  np.logspace(2., 5., 20, endpoint=False)\rprint(x)\r", "nl": "Write a NumPy program to create a 1-D array of 20 element spaced evenly on a log scale between 2. and 5., exclusive. "}
{"code": "import numpy as np    \rp = np.array([[0], [10], [20]]) \rq= np.array([10, 11, 12]) \rprint(\"Original arrays:\")\rprint(\"Array-1\")\rprint(p)\rprint(\"Array-2\")\rprint(q)\rprint(\"\\nNew Array:\")\rnew_array1 = p + q \rprint(new_array1)\r", "nl": "Write a NumPy program to broadcast on different shapes of arrays where a(,3) + b(3). "}
{"code": "import decimal\rprint(\"Configure the rounding to round to the floor:\")\rdecimal.getcontext().prec = 4\rdecimal.getcontext().rounding = decimal.ROUND_FLOOR\rprint(decimal.Decimal(20) / decimal.Decimal(6))\rprint(\"\\nConfigure the rounding to round to the ceiling:\")\rdecimal.getcontext().prec = 4\rdecimal.getcontext().rounding = decimal.ROUND_CEILING\rprint(decimal.Decimal(20) / decimal.Decimal(6))\r", "nl": "Write a Python program to configure the rounding to round to the floor, ceiling. Use decimal.ROUND_FLOOR, decimal.ROUND_CEILING"}
{"code": "import csv\rreader = csv.reader(open(\"employees.csv\"))\rfor row in reader:\r    print(row)\r", "nl": "Write a Python program to read and display the content of a given CSV file. Use csv.reader"}
{"code": "b = int(input(\"Input the base : \"))\rh = int(input(\"Input the height : \"))\r\rarea = b*h/2\r\rprint(\"area = \", area)\r", "nl": "Write a Python program that will accept the base and height of a triangle and compute the area. "}
{"code": "import numpy as np\rm = np.arange(6).reshape(2,3)\rprint(\"Original matrix:\")\rprint(m)\rresult =  np.trace(m)\rprint(\"Condition number of the said matrix:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the sum of the diagonal element of a given array. "}
{"code": "from bisect import bisect, bisect_left\rfrom collections import Counter\rclass Solution:\r    def three_Sum(self, nums):\r        \"\"\"\r        :type nums: List[int]\r        :rtype: List[List[int]]\r        \"\"\"\r        triplets = []\r        if len(nums) < 3:\r            return triplets\r        num_freq = Counter(nums)\r        nums = sorted(num_freq)  # Sorted unique numbers\r        max_num = nums[-1]\r        for i, v in enumerate(nums):\r            if num_freq[v] >= 2:\r                complement =  -2 * v\r                if complement in num_freq:\r                    if complement != v or num_freq[v] >= 3:\r                        triplets.append([v] * 2 + [complement])\r\r            # When all 3 numbers are different.\r            if v < 0:  # Only when v is the smallest\r                two_sum = -v\r\r                # Lower/upper bound of the smaller of remainingtwo.\r                lb = bisect_left(nums, two_sum - max_num, i + 1)\r                ub = bisect(nums, two_sum // 2, lb)                       \r                for u in nums[lb : ub]:\r                    complement = two_sum - u\r                    if complement in num_freq and u != complement:\r                        triplets.append([v, u, complement])\r        return triplets\rnums = [-20, 0, 20, 40, -20, -40, 80]\rs = Solution()\rresult = s.three_Sum(nums)\rprint(result)\rnums = [1, 2, 3, 4, 5, -6]\rresult = s.three_Sum(nums)\rprint(result)\r", "nl": "Write a Python program to find three integers which gives the sum of zero in a given array of integers using Binary Search (bisect). "}
{"code": "from collections import Counter\rdef find_parity_outliers(nums):\r  return [\r    x for x in nums\r    if x % 2 != Counter([n % 2 for n in nums]).most_common()[0][0]\r  ] \rprint(find_parity_outliers([1, 2, 3, 4, 6]))  \rprint(find_parity_outliers([1, 2, 3, 4, 5, 6, 7]))\r", "nl": "Write a Python program to find the items that are parity outliers in a given list. "}
{"code": "from array import *\rprint(\"Bytes to String: \")\rx = array('b', [119, 51, 114, 101,  115, 111, 117, 114, 99, 101])\rs = x.tobytes()\rprint(s)\r", "nl": "Write a Python program to convert an array to an array of machine values and return the bytes representation. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nChildren of the html tag (https://www.python.org):\\n\")\rroot = soup.html    \rroot_childs = [e.name for e in root.children if e.name is not None]\rprint(root_childs)\r\r", "nl": "Write a Python program to retrieve children of the html tag from a given web page. "}
{"code": "import pandas as pd\rstudent_data1  = pd.DataFrame({\r        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],\r         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], \r        'marks': [200, 210, 190, 222, 199]})\r\rs6 = pd.Series(['S6', 'Scarlette Fisher', 205], index=['student_id', 'name', 'marks'])\r\r\rdicts = [{'student_id': 'S6', 'name': 'Scarlette Fisher', 'marks': 203},\r         {'student_id': 'S7', 'name': 'Bryce Jensen', 'marks': 207}]\r\rprint(\"Original DataFrames:\")\rprint(student_data1)\rprint(\"\\nDictionary:\")\rprint(s6)\rcombined_data =  student_data1.append(dicts, ignore_index=True, sort=False)\rprint(\"\\nCombined Data:\")\rprint(combined_data)\r", "nl": "Write a Pandas program to append a list of dictioneries or series to a existing DataFrame and display the combined data. "}
{"code": "def shellSort(alist):\r    sublistcount = len(alist)//2\r    while sublistcount > 0:\r      for start_position in range(sublistcount):\r        gap_InsertionSort(alist, start_position, sublistcount)\r\r      print(\"After increments of size\",sublistcount, \"The list is\",nlist)\r\r      sublistcount = sublistcount // 2\r\rdef gap_InsertionSort(nlist,start,gap):\r    for i in range(start+gap,len(nlist),gap):\r\r        current_value = nlist[i]\r        position = i\r\r        while position>=gap and nlist[position-gap]>current_value:\r            nlist[position]=nlist[position-gap]\r            position = position-gap\r\r        nlist[position]=current_value\r\r\rnlist = [14,46,43,27,57,41,45,21,70]\rshellSort(nlist)\rprint(nlist)\r", "nl": "Write a Python program to sort a list of elements using shell sort algorithm. "}
{"code": "import numpy as np\ra = np.arange(9).reshape((3,3))\rprint(\"Original flattened array:\")\rprint(a)\rprint(\"Weighted average along the specified axis of the above flattened array:\")\rprint(np.average(a, axis=1, weights=[1./4, 2./4, 2./4]))\r", "nl": "Write a Python NumPy program to compute the weighted average along the specified axis of a given flattened array. "}
{"code": "my_dict = {'data1':100,'data2':-54,'data3':247}\rresult=1\rfor key in my_dict:    \r    result=result * my_dict[key]\r\rprint(result)\r", "nl": "Write a Python program to multiply all the items in a dictionary. "}
{"code": "def no_of_substring_with_equalEnds(str1): \r\tresult = 0; \r\tn = len(str1); \r\tfor i in range(n): \r\t\tfor j in range(i, n): \r\t\t\tif (str1[i] == str1[j]): \r\t\t\t\tresult = result + 1\r\treturn result \rstr1 = input(\"Input a string: \")\rprint(no_of_substring_with_equalEnds(str1))\r", "nl": "Write a Python program to count number of substrings with same first and last characters of a given string. "}
{"code": "n = 5\rl = [{} for _ in range(n)]\rprint(l)\r", "nl": "Write a Python program to create a list of empty dictionaries. "}
{"code": "def near_thousand(n):\r      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))\rprint(near_thousand(1000))\rprint(near_thousand(900))\rprint(near_thousand(800))   \rprint(near_thousand(2200))\r", "nl": "Write a Python program to test whether a number is within 100 of 1000 or 2000. "}
{"code": "#Ref.https://bit.ly/3pl5kyn\rimport random\r\r\rdef partition(A, left_index, right_index):\r    pivot = A[left_index]\r    i = left_index + 1\r    for j in range(left_index + 1, right_index):\r        if A[j] < pivot:\r            A[j], A[i] = A[i], A[j]\r            i += 1\r    A[left_index], A[i - 1] = A[i - 1], A[left_index]\r    return i - 1\rdef quick_sort_random(A, left, right):\r    if left < right:\r        pivot = random.randint(left, right - 1)\r        A[pivot], A[left] = (\r            A[left],\r            A[pivot],\r        )  # switches the pivot with the left most bound\r        pivot_index = partition(A, left, right)\r        quick_sort_random(\r            A, left, pivot_index\r        )  # recursive quicksort to the left of the pivot point\r        quick_sort_random(\r            A, pivot_index + 1, right\r        )  # recursive quicksort to the right of the pivot point\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 0, len(nums))\rprint(nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 0, len(nums))\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 0, len(nums))\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 1, len(nums))\rprint(nums)\rnums = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 0, len(nums))\rprint(nums)\rnums = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_random(nums, 2, len(nums))\rprint(nums)\r", "nl": "Write a Python program to sort unsorted numbers using Random Pivot Quick Sort. Picks the random index as the pivot. "}
{"code": "import numpy as np\rx = np.array([1, np.e, np.e**2])\rprint(\"Original array: \")\rprint(x)\rprint(\"\\nNatural log =\", np.log(x))\rprint(\"Common log =\", np.log10(x))\rprint(\"Base 2 log =\", np.log2(x))\r", "nl": "Write a NumPy program to compute natural, base 10, and base 2 logarithms for all elements in a given array. "}
{"code": "import numpy as np\rprint(\"Roots of the first polynomial:\")\rprint(np.roots([1, -2, 1]))\rprint(\"Roots of the second polynomial:\")\rprint(np.roots([1, -12, 10, 7, -10]))\r", "nl": "Write a NumPy program to find the roots of the following polynomials. "}
{"code": "import random \rprint(\"Generate a float between 0 and 1, inclusive:\")\rprint(random.uniform(0, 1))\rprint(\"\\nGenerate a random float within a range:\")\rrandom_float = random.uniform(1.0, 3.0)\rprint(random_float)\r", "nl": "Write a Python program to generate a float between 0 and 1, inclusive and generate a random float within a specific range. Use random.uniform()"}
{"code": "print(\"{:,}\".format(1000000))\rprint(\"{:,}\".format(10000))\r", "nl": "Write a Python program to print number with commas as thousands separators(from right side). "}
{"code": "import numpy as np \rnums = np.random.randn(10, 4)\rprint(\"Original arrays:\")\rprint(nums)\rprint(\"Set the array values with specified precision:\")\rnp.set_printoptions(precision=4)\rprint(nums)\r", "nl": "Write a NumPy program to create a 10x4 array filled with random floating point number values with and set the array values with specified precision. "}
{"code": "from itertools import combinations\rdef sub_lists(my_list):\r\tsubs = []\r\tfor i in range(0, len(my_list)+1):\r\t  temp = [list(x) for x in combinations(my_list, i)]\r\t  if len(temp)>0:\r\t    subs.extend(temp)\r\treturn subs\r\r\rl1 = [10, 20, 30, 40]\rl2 = ['X', 'Y', 'Z']\rprint(\"Original list:\")\rprint(l1)\rprint(\"S\")\rprint(sub_lists(l1))\rprint(\"Sublists of the said list:\")\rprint(sub_lists(l1))\rprint(\"\\nOriginal list:\")\rprint(l2)\rprint(\"Sublists of the said list:\")\rprint(sub_lists(l2))\r", "nl": "Write a Python program to generate all sublists of a list. "}
{"code": "def split_list(lst, n):\r    result = list((lst[i:i+n] for i in range(0, len(lst), n)))\r    return result\rnums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]\rprint(\"Original list:\")\rprint(nums)\rn = 3\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\rn = 4\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\rn = 5\rprint(\"\\nSplit the said list into equal size\",n)\rprint(split_list(nums,n))\r", "nl": "Write a Python program to split a given list into specified sized chunks. "}
{"code": "def strip_chars(str, chars):\r    return \"\".join(c for c in str if c not in chars)\r\rprint(\"\\nOriginal String: \")\rprint(\"The quick brown fox jumps over the lazy dog.\")\rprint(\"After stripping a,e,i,o,u\")      \rprint(strip_chars(\"The quick brown fox jumps over the lazy dog.\", \"aeiou\"))\rprint()\r", "nl": "Write a Python program to strip a set of characters from a string. "}
{"code": "def intersection_nested_lists(l1, l2):\r    result = [[n for n in lst if n in l1] for lst in l2]\r    return result\rnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\rnums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nIntersection of said nested lists:\")\rprint(intersection_nested_lists(nums1, nums2))\r", "nl": "Write a Python program to find the nested lists elements which are present in another list. "}
{"code": "import numpy as np\rx = np.array([10, 10, 20, 30, 30], float)\rprint(x)\rprint(\"Put 0 and 40 in first and fifth position of the above array\")\ry = np.array([0, 40, 60], float) \rx.put([0, 4], y)\rprint(\"Array x, after putting two values:\")\rprint(x)\r", "nl": "Write a NumPy program to take values from a source array and put them at specified indices of another array. "}
{"code": "def grouping_dictionary(l):\r    result = {}\r    for k, v in l:\r         result.setdefault(k, []).append(v)\r    return result\rcolors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nGrouping a sequence of key-value pairs into a dictionary of lists:\")\rprint(grouping_dictionary(colors))\r", "nl": "Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. "}
{"code": "import os\rprint([f for f in os.listdir('/home/students') if os.path.isfile(os.path.join('/home/students', f))])\r", "nl": "Write a Python program to find files and skip directories of a given directory. "}
{"code": "import numpy as np\rx = np.random.randint(0,2,6)\rprint(\"First array:\")\rprint(x)\ry = np.random.randint(0,2,6)\rprint(\"Second array:\")\rprint(y)\rprint(\"Test above two arrays are equal or not!\")\rarray_equal = np.allclose(x, y)\rprint(array_equal)\r", "nl": "Write a NumPy program to check two random arrays are equal or not. "}
{"code": "import collections\rdef min_window(str1, str2):\r    result_char, missing_char = collections.Counter(str2), len(str2)\r    i = p = q = 0\r    for j, c in enumerate(str1, 1):\r        missing_char -= result_char[c] > 0\r        result_char[c] -= 1\r        if not missing_char:\r            while i < q and result_char[str1[i]] < 0:\r                result_char[str1[i]] += 1\r                i += 1\r            if not q or j - i <= q - p:\r                p, q = i, j\r    return str1[p:q]\r           \rstr1 = \"PRWSOERIUSFK\"\rstr2 = \"OSU\"\rprint(\"Original Strings:\\n\",str1,\"\\n\",str2)\rprint(\"Minimum window:\")\rprint(min_window(str1,str2))\r", "nl": "Write a Python program to find the minimum window in a given string which will contain all the characters of another given string. "}
{"code": "import pandas as pd\rimport datetime\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rnow = pd.to_datetime('today')\rduration = datetime.timedelta(days=365*40)\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nCurrent date:\")\rprint(now)\rprint(\"\\nSighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days):\")\rdf =  df[now - df['Date_time'] <= duration]\rprint(df.head())\r", "nl": "Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days). "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current date:\")\rprint(a.date())\rprint(\"\\nCurrent time:\")\rprint(a.time())\r", "nl": "Write a Python program to get date and time properties from datetime function using arrow module. "}
{"code": "s = ['a', 'b', 'c', 'd']\rstr1 = ''.join(s)\rprint(str1)\r", "nl": "Write a Python program to convert a list of characters into a string. "}
{"code": "def test(itr, fn):\r  return dict(zip(itr, map(fn, itr)))\rprint(test([1, 2, 3, 4], lambda x: x * x))\r", "nl": "Write a Python program to map the values of a given list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. "}
{"code": "import numpy as np\rx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\rindex = [0, 3, 4]\rprint(\"Original array:\")\rprint(x)\rprint(\"Delete first, fourth and fifth elements:\")\rnew_x = np.delete(x, index)\rprint(new_x)\r", "nl": "Write a NumPy program to remove specific elements in a NumPy array. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rdf['date_documented'] = df['date_documented'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nDifference (in days) between documented date and reporting date of UFO:\")\rdf['Difference'] = (df['date_documented'] - df['Date_time']).dt.days\rprint(df)\r", "nl": "Write a Pandas program to get the difference (in days) between documented date and reporting date of unidentified flying object (UFO). "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Company','Company a001','Company 123', 'abcd', 'Company 12'],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\r\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nWhether Alphabetic values present in company_code column?\")\rdf['company_code_is_alpha'] = list(map(lambda x: x.isalpha(), df['company_code']))\rprint(df)\r", "nl": "Write a Pandas program to check whether alphabetic values present in a given column of a DataFrame. "}
{"code": "def unicode_to_str(lst):\r    result = [str(x) for x in lst]\r    return result\rstudents =  [u'S001', u'S002', u'S003', u'S004']\rprint(\"Original lists:\")\rprint(students)\rprint(\" Convert the said unicode list to a list contains strings:\")\rprint(unicode_to_str(students))\r", "nl": "Write a Python program to convert a given unicode list to a list contains strings. "}
{"code": "nums = [22.4, 4.0, 16.22, 9.10, 11.00, 12.22, 14.20, 5.20, 17.50]\rprint(\"Original list:\", nums)\rnumbers=list(map(round,nums))\rprint(\"Minimum value: \",min(numbers))\rprint(\"Maximum value: \",max(numbers))\rnumbers=list(set(numbers))\rnumbers=(sorted(map(lambda n:n*5,numbers)))\rprint(\"Result:\")\rfor numb in numbers:\r    print(numb,end=' ')\r", "nl": "Write a Python program to round the numbers of a given list, print the minimum and maximum numbers and multiply the numbers by 5. Print the unique numbers in ascending order separated by space. "}
{"code": "class dictObj(object):\r     def __init__(self):\r         self.x = 'red'\r         self.y = 'Yellow'\r         self.z = 'Green'\r     def do_nothing(self):\r         pass\rtest = dictObj()\rprint(test.__dict__)\r", "nl": "Write a Python program to get a dictionary from an object's fields. "}
{"code": "from difflib import SequenceMatcher \r  \rdef longest_Substring(s1,s2): \r  \r     seq_match = SequenceMatcher(None,s1,s2) \r  \r     match = seq_match.find_longest_match(0, len(s1), 0, len(s2)) \r  \r     # return the longest substring \r     if (match.size!=0): \r          return (s1[match.a: match.a + match.size])  \r     else: \r          return ('Longest common sub-string not present')  \r\rs1 = 'abcdefgh'\rs2 = 'xswerabcdwd'\rprint(\"Original Substrings:\\n\",s1+\"\\n\",s2)\rprint(\"\\nCommon longest sub_string:\")\rprint(longest_Substring(s1,s2))\r", "nl": "Write a Python program to find the longest common sub-string from two given strings. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],\r'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],\r'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],\r'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nKeep the rows with at least 2 NaN values of the said DataFrame:\")\rresult = df.dropna(thresh=2)\rprint(result)\r", "nl": "Write a Pandas program to keep the rows with at least 2 NaN values in a given DataFrame. "}
{"code": "def power(a,b):\r\tif b==0:\r\t\treturn 1\r\telif a==0:\r\t\treturn 0\r\telif b==1:\r\t\treturn a\r\telse:\r\t\treturn a*power(a,b-1)\r\rprint(power(3,4))\r", "nl": "Write a Python program to calculate the value of 'a' to the power 'b'. "}
{"code": "import itertools as it\rimport operator as op\r\rdef factorials_nums(n):\r    result = list(it.accumulate(it.chain([1], range(1, 1 + n)), op.mul))\r    return result;\r    \r \rprint(\"Factorials of 5 :\", factorials_nums(5))\rprint(\"Factorials of 9 :\", factorials_nums(9))\r", "nl": "Write a Python program to find the factorial of a number using itertools module. "}
{"code": "def add_string(str1):\r  length = len(str1)\r\r  if length > 2:\r    if str1[-3:] == 'ing':\r      str1 += 'ly'\r    else:\r      str1 += 'ing'\r\r  return str1\rprint(add_string('ab'))\rprint(add_string('abc'))\rprint(add_string('string'))\r", "nl": "Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged. "}
{"code": "import itertools\rn = 10\rdef fibonacci_nums(x=0, y=1):\r    yield x\r    while True:\r        yield y\r        x, y = y, x + y\rprint(\"First 10 Fibonacci numbers:\")\rresult = list(itertools.islice(fibonacci_nums(), n))\rprint(result)\rsquare = lambda x: x * x \rprint(\"\\nAfter squaring said numbers of the list:\")\rprint(list(map(square, result)))\r", "nl": "Write a Python program to compute the square of first N Fibonacci numbers, using map function and generate a list of the numbers. "}
{"code": "import numpy as np\rx = np.array([1, 3, 5, 0, -1, -7, 0, 5])\rprint(\"Original array;\")\rprint(x)\rr1 = np.sign(x)\rr2 = np.copy(x)\rr2[r2 > 0] = 1\rr2[r2 < 0] = -1\rassert np.array_equal(r1, r2)\rprint(\"Element-wise indication of the sign for all elements of the said array:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute an element-wise indication of the sign for all elements in a given array. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rr = arrow.now('US/Mountain')\rprint(\"\\nNaive datetime representation:\")\rprint(r.naive)\r", "nl": "Write a Python program to create a na\u00efve (without time zone) datetime representation of the Arrow object. "}
{"code": "def test(lst, marks):\r    result = [d[marks] for d in lst if marks in d]\r \r    return result\r\rmarks = [{'Math': 90, 'Science': 92}, \r         {'Math': 89, 'Science': 94}, \r         {'Math': 92, 'Science': 88}]\r\rprint(\"\\nOriginal Dictionary:\")\rprint(marks)\rsubj = \"Science\"\rprint(\"\\nExtract a list of values from said list of dictionaries where subject =\",subj)\rprint(test(marks, subj))\r\rprint(\"\\nOriginal Dictionary:\")\rprint(marks)\rsubj = \"Math\"\rprint(\"\\nExtract a list of values from said list of dictionaries where subject =\",subj)\rprint(test(marks, subj))\r", "nl": "Write a Python program to extract a list of values from a given list of dictionaries. "}
{"code": "def pascal_triangle(n):\r   trow = [1]\r   y = [0]\r   for x in range(max(n,0)):\r      print(trow)\r      trow=[l+r for l,r in zip(trow+y, y+trow)]\r   return n>=1\rpascal_triangle(6) \r", "nl": "a href=\"#EDITOR\">Go to the editor</a>"}
{"code": "def common_data(list1, list2):\r     result = False\r     for x in list1:\r         for y in list2:\r             if x == y:\r                 result = True\r                 return result\rprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\rprint(common_data([1,2,3,4,5], [6,7,8,9]))\r", "nl": "Write a Python function that takes two lists and returns True if they have at least one common member. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Open','Close','High','Low']]\rplt.figure(figsize=(25,25))\rdf2.plot.hist(stacked=True, bins=200)\rplt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates with more bins. "}
{"code": "def test(keys, values):\r  return dict(zip(keys, values))\r\rl1 = ['a', 'b', 'c', 'd', 'e', 'f']\rl2 = [1, 2, 3, 4, 5]     \rprint(\"Original lists:\")\rprint(l1)\rprint(l2)\rprint(\"\\nCombine the values of the said two lists into a dictionary:\")\rprint(test(l1, l2))\r", "nl": "Write a Python program to combine two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values. The values of the first list need to be unique and hashable. "}
{"code": "num1 = [1, 3, 5, 7, 9, 10]\rnum2 = [2, 4, 6, 8]\rnum1[-1:] = num2\rprint(num1)\r", "nl": "Write a Python program to replace the last element in a list with another list. "}
{"code": "# License https://bit.ly/2InTS3W\r#     a\r#    / \\\r#   b  c\r#  / \\\r# d  e\redges = {'a': ['c', 'b'], 'b': ['d', 'e'], 'c': [], 'd': [], 'e': []}\rvertices = ['a', 'b', 'c', 'd', 'e']\rdef topological_sort(start, visited, sort):\r    \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\"\r    current = start\r    # add current to visited\r    visited.append(current)\r    neighbors = edges[current]\r    for neighbor in neighbors:\r        # if neighbor not in visited, visit\r        if neighbor not in visited:\r            sort = topological_sort(neighbor, visited, sort)\r    # if all neighbors visited add current to sort\r    sort.append(current)\r    # if all vertices haven't been visited select a new one to visit\r    if len(visited) != len(vertices):\r        for vertice in vertices:\r            if vertice not in visited:\r                sort = topological_sort(vertice, visited, sort)\r    # return sort\r    return sort\r\rsort = topological_sort('a', [], [])\rprint(sort)\r", "nl": "Write a Python program to sort a list of elements using Topological sort. "}
{"code": "import pandas as pd\rs1 = pd.Series(['100', '200', 'python', '300.12', '400'])\rprint(\"Original Data Series:\")\rprint(s1)\rprint(\"Change the said data type to numeric:\")\rs2 = pd.to_numeric(s1, errors='coerce')\rprint(s2)\r", "nl": "Write a Pandas program to change the data type of given a column or a Series. "}
{"code": "import numpy as np\rfrom ast import literal_eval\rudict = \"\"\"{\"column0\":{\"a\":1,\"b\":0.0,\"c\":0.0,\"d\":2.0},\r   \"column1\":{\"a\":3.0,\"b\":1,\"c\":0.0,\"d\":-1.0},\r   \"column2\":{\"a\":4,\"b\":1,\"c\":5.0,\"d\":-1.0},\r   \"column3\":{\"a\":3.0,\"b\":-1.0,\"c\":-1.0,\"d\":-1.0}\r  }\"\"\"\rt = literal_eval(udict)\rprint(\"\\nOriginal dictionary:\")\rprint(t)\rprint(\"Type: \",type(t))\rresult_nparra = np.array([[v[j] for j in ['a', 'b', 'c', 'd']] for k, v in t.items()])\rprint(\"\\nndarray:\")\rprint(result_nparra)\rprint(\"Type: \",type(result_nparra))\r", "nl": "Write a NumPy program to convert a Python dictionary to a NumPy ndarray. "}
{"code": "def max_by(lst, fn):\r  return max(map(fn, lst))\rprint(max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) \r", "nl": "Write a Python program to get the maximum value of a list, after mapping each element to a value using a given function. "}
{"code": "from collections import deque\rimport re\r\r__operators__ = \"+-/*\"\r__parenthesis__ = \"()\"\r__priority__ = {\r    '+': 0,\r    '-': 0,\r    '*': 1,\r    '/': 1,\r}\r\rdef test_higher_priority(operator1, operator2):\r    return __priority__[operator1] >= __priority__[operator2]\r\rprint(test_higher_priority('*','-'))\rprint(test_higher_priority('+','-'))\rprint(test_higher_priority('+','*'))\rprint(test_higher_priority('+','/'))\rprint(test_higher_priority('*','/'))\r", "nl": "Write a Python program to check the priority of the four operators (+, -, *, /). "}
{"code": "import textwrap\rs = input(\"Input a string: \")\rw = int(input(\"Input the width of the paragraph: \").strip())\rprint(\"Result:\")\rprint(textwrap.fill(s,w))\r", "nl": "Write a Python program to wrap a given string into a paragraph of given width. "}
{"code": "from collections import Counter\rclasses = (\r    ('V', 1),\r    ('VI', 1),\r    ('V', 2),\r    ('VI', 2),\r    ('VI', 3),\r    ('VII', 1),\r)\rstudents = Counter(class_name for class_name, no_students in classes)\rprint(students)\r", "nl": "Write a Python program to count the number of students of individual class. "}
{"code": "def union_by_el(x, y, fn):\r  _x = set(map(fn, x))\r  return list(set(x + [item for item in y if fn(item) not in _x])) \rfrom math import floor\rprint(union_by_el([4.1], [2.2, 4.3], floor))\r", "nl": "Write a Python program to get every element that exists in any of the two given lists once, after applying the provided function to each element of both. "}
{"code": "from operator import itemgetter\r \rDEBUG = False # like the built-in __debug__\r \rdef spermutations(n):\r    \"\"\"permutations by swapping. Yields: perm, sign\"\"\"\r    sign = 1\r    p = [[i, 0 if i == 0 else -1] # [num, direction]\r         for i in range(n)]\r \r    if DEBUG: print(' #', p)\r    yield tuple(pp[0] for pp in p), sign\r \r    while any(pp[1] for pp in p): # moving\r        i1, (n1, d1) = max(((i, pp) for i, pp in enumerate(p) if pp[1]),\r                           key=itemgetter(1))\r        sign *= -1\r        if d1 == -1:\r            # Swap down\r            i2 = i1 - 1\r            p[i1], p[i2] = p[i2], p[i1]\r            # If this causes the chosen element to reach the First or last\r            # position within the permutation, or if the next element in the\r            # same direction is larger than the chosen element:\r            if i2 == 0 or p[i2 - 1][0] > n1:\r                # The direction of the chosen element is set to zero\r                p[i2][1] = 0\r        elif d1 == 1:\r            # Swap up\r            i2 = i1 + 1\r            p[i1], p[i2] = p[i2], p[i1]\r            # If this causes the chosen element to reach the first or Last\r            # position within the permutation, or if the next element in the\r            # same direction is larger than the chosen element:\r            if i2 == n - 1 or p[i2 + 1][0] > n1:\r                # The direction of the chosen element is set to zero\r                p[i2][1] = 0\r        if DEBUG: print(' #', p)\r        yield tuple(pp[0] for pp in p), sign\r \r        for i3, pp in enumerate(p):\r            n3, d3 = pp\r            if n3 > n1:\r                pp[1] = 1 if i3 < i2 else -1\r                if DEBUG: print(' # Set Moving')\r \r \rif __name__ == '__main__':\r    from itertools import permutations\r \r    for n in (3, 4):\r        print('\\nPermutations and sign of %i items' % n)\r        sp = set()\r        for i in spermutations(n):\r            sp.add(i[0])\r            print('Permutation: %r Sign: %2i' % i)\r            #if DEBUG: raw_input('?')\r        # Test\r        p = set(permutations(range(n)))\r        assert sp == p, 'Two methods of generating permutations do not agree'\r", "nl": "Write a Python program to generate permutations of n items in which successive permutations differ from each other by the swapping of any two items. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 3, 7, 9, 3])\rprint(\"Original array: \"+str(array_num))\rprint(\"Number of occurrences of the number 3 in the said array: \"+str(array_num.count(3)))\r", "nl": "Write a Python program to get the number of occurrences of a specified element in an array. "}
{"code": "def find_substring(str1, sub_str):\r   if any(sub_str in s for s in str1):\r       return True\r   return False\r\rcolors = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\rprint(\"Original list:\")\rprint(colors)\rsub_str = \"ack\"\rprint(\"Substring to search:\")\rprint(sub_str)\rprint(\"Check if a substring presents in the said list of string values:\")\rprint(find_substring(colors, sub_str))\rsub_str = \"abc\"\rprint(\"Substring to search:\")\rprint(sub_str)\rprint(\"Check if a substring presents in the said list of string values:\")\rprint(find_substring(colors, sub_str))\r", "nl": "Write a Python program to check if a substring presents in a given list of string values. "}
{"code": "students = {'Aex':{'class':'V',\r        'rolld_id':2},\r        'Puja':{'class':'V',\r        'roll_id':3}}\rfor a in students:\r    print(a)\r    for b in students[a]:\r        print (b,':',students[a][b])\r\t\t", "nl": "Write a Python program to print a dictionary line by line. "}
{"code": "import copy\rnums_x = [1, [2, 3, 4]]\rprint(\"Original list: \", nums_x)\rnums_y = copy.copy(nums_x)\rprint(\"\\nCopy of the said list:\")\rprint(nums_y)\rprint(\"\\nChange the value of an element of the original list:\")\rnums_x[1][1] = 10\rprint(nums_x)\rprint(\"\\nSecond list:\")\rprint(nums_y)\rnums =  [[1], [2]]\rnums_copy = copy.copy(nums)\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nCopy of the said list:\")\rprint(nums_copy)\rprint(\"\\nChange the value of an element of the original list:\")\rnums[0][0] = 0\rprint(\"\\nFirst list:\")\rprint(nums)\rprint(\"\\nSecond list:\")\rprint(nums_copy)\r", "nl": "Write a Python program to create a shallow copy of a given list. Use copy.copy"}
{"code": "x = [10, 20, 30]\ry = [40, 50, 60]\rx[:0] =y\rprint(x)\r", "nl": "Write a Python program to extend a list without append. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rr = arrow.now('US/Mountain')\rprint(\"\\nNaive datetime representation:\")\rprint(r.naive)\r", "nl": "Write a Python program to create a na\u00efve (without time zone) datetime representation of the Arrow object. "}
{"code": "import numpy as np\rx1 = np.array(['Python', 'PHP', 'JS', 'EXAMPLES', 'HTML'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x1)\rprint(\"count the lowest index of \u2018P\u2019:\")\rr = np.char.find(x1, \"P\")\rprint(r)\r", "nl": "Write a NumPy program to count the lowest index of \"P\" in a given array, element-wise. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.RandomState(100)\rnum_series = pd.Series(np.random.randint(1, 5, [15]))\rprint(\"Original Series:\")\rprint(num_series)\rprint(\"Top 2 Freq:\", num_series.value_counts())\rresult = num_series[~num_series.isin(num_series.value_counts().index[:1])] = 'Other'\rprint(num_series)\r", "nl": "Write a Pandas program to display most frequent value in a given series and replace everything else as 'Other' in the series. "}
{"code": "def intersection_of_two_string(str1, str2):\r    result = \"\"\r    for ch in str1:\r        if ch in str2 and not ch in result:\r            result += ch\r    return result\r\rstr1 = 'Python3'\rstr2 = 'Python2.7'\rprint(\"Original strings:\")\rprint(str1)\rprint(str2)\rprint(\"\\nIntersection of two said String:\") \rprint(intersection_of_two_string(str1, str2))\r", "nl": "Write a Python program find the common values that appear in two given strings. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\n3-tuple - ISO year, ISO week number, ISO weekday:\")\rprint(arrow.utcnow().isocalendar())\rprint(\"\\nISO 8601 formatted representation of the date and time:\")\rprint(arrow.utcnow().isoformat())\r", "nl": "Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. "}
{"code": "import numpy as np\rarray1 = [0, 1, 6, 1, 4, 1, 2, 2, 7] \rprint(\"Original array:\")\rprint(array1)\rprint(\"Number of occurrences of each value in array: \")\rprint(np.bincount(array1))\r", "nl": "Write a Python program to count number of occurrences of each value in a given array of non-negative integers. "}
{"code": "import pkg_resources\rinstalled_packages = pkg_resources.working_set\rinstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\r     for i in installed_packages])\rfor m in installed_packages_list:\r    print(m)\r", "nl": "Write a Python program to get a list of locally installed Python modules. "}
{"code": "array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]\rarray_nums2 = [1, 2, 4, 8, 9]\rprint(\"Original arrays:\")\rprint(array_nums1)\rprint(array_nums2)\rresult = list(filter(lambda x: x in array_nums1, array_nums2)) \rprint (\"\\nIntersection of the said arrays: \",result)\r", "nl": "Write a Python program to find intersection of two given arrays using Lambda. "}
{"code": "from collections import Counter\ritem_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]\rresult = Counter()\rfor d in item_list:\r    result[d['item']] += d['amount']\rprint(result) \r", "nl": "Write a Python program to combine values in python list of dictionaries. "}
{"code": "import numpy as np\r#using no.full\rx = np.full((3, 5), 2, dtype=np.uint)\rprint(x)\r#using no.ones\ry = np.ones([3, 5], dtype=np.uint) *2\rprint(y)\r", "nl": "Write a NumPy program to create a new array of 3*5, filled with 2. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nStarting from the 2nd row, access every 5th row:\")\rprint(w_a_con.iloc[1::5].head(10))\r", "nl": "Write a Pandas program to filter all records starting from the 2nd row, access every 5th row from world alcohol consumption dataset. "}
{"code": "import numpy as np\rdef test_array_dimensions(ar1,ar2):\r try:\r   ar1 + ar2\r except ValueError:\r   return \"Different dimensions\"\r else:\r   return \"Same dimensions\"\rar1 = np.arange(20).reshape(4,5)\rar2 = np.arange(20).reshape(4,5)\rprint(test_array_dimensions(ar1, ar2))\rar1 = np.arange(20).reshape(5,4)\rar2 = np.arange(20).reshape(4,5)\rprint(test_array_dimensions(ar1, ar2))\r", "nl": "Write a NumPy program to check whether the dimensions of two given arrays are same or not. "}
{"code": "import pandas as pd\rimport numpy as np\rimport datetime\rfrom datetime import datetime, date\rdates = [datetime(2011, 9, 1), datetime(2011, 9, 2)]\rprint(\"Time-series with two index labels:\")\rtime_series = pd.Series(np.random.randn(2), dates)\rprint(time_series)\rprint(\"\\nType of the index:\")\rprint(type(time_series.index))\r", "nl": "Write a Pandas program to create a time-series with two index labels and random values. Also print the type of the index. "}
{"code": "import numpy as np\rfrom numpy import linalg as LA\ra = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])\rprint(\"Original matrix:\")\rprint(a)\rprint(\"The condition number of the said matrix:\")\rprint(LA.cond(a))\r", "nl": "Write a NumPy program to compute the condition number of a given matrix. "}
{"code": "import numpy as np\rx = 10\rprint(\"View inputs as arrays with at least two dimensions:\")\rprint(np.atleast_1d(x))\rx = np.arange(4.0).reshape(2, 2)\rprint(np.atleast_1d(x))\rprint(\"View inputs as arrays with at least three dimensions:\")\rx =15\rprint(np.atleast_3d(x))\rx = np.arange(3.0)\rprint(np.atleast_3d(x))\r", "nl": "Write a NumPy program to view inputs as arrays with at least two dimensions, three dimensions. "}
{"code": "import pandas as pd\rfrom datetime import date\rnow = pd.to_datetime(str(date.today()), format='%Y-%m-%d')\rprint(\"Today's date:\")\rprint(now)\r", "nl": "Write a Pandas program to create the todays date. "}
{"code": "import numpy as np\rnums = np.zeros(shape=(5, 6), dtype='int')\rprint(\"Original array:\")\rprint(nums)\rnums[::2, ::2] = 3\rnums[1::2, ::2] = 7\rprint(\"\\nNew array:\")\rprint(nums)\r", "nl": "Write a NumPy program to create a new array of given shape (5,6) and type, filled with zeros. "}
{"code": "import numpy as np\rimport os\ra = np.arange(20)\rnp.save('temp_arra.npy', a)\rprint(\"Check if 'temp_arra.npy' exists or not?\")\rif os.path.exists('temp_arra.npy'):\r    x2 = np.load('temp_arra.npy')\r    print(np.array_equal(a, x2))\r", "nl": "Write a NumPy program to save a given array to a binary file . "}
{"code": "def extract_nth_element(test_list, n):\r    result = [x[n] for x in test_list]\r    return result\r\rstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] \rprint (\"Original list:\")\rprint(students)\rn = 0\rprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\rprint(extract_nth_element(students, n))\r\rn = 2\rprint(\"\\nExtract nth element ( n =\",n,\") from the said list of tuples:\")\rprint(extract_nth_element(students, n))\r", "nl": "Write a Python program to extract the nth element from a given list of tuples. "}
{"code": "import numpy as np\rx = np.array([[10, 20, 30], [20, 40, 50]])\rprint(\"Original array:\")\rprint(x)\ry = np.ravel(x)\rprint(\"New flattened array:\")\rprint(y)\r", "nl": "Write a NumPy program to create a contiguous flattened array. "}
{"code": "n=int(input(\"Input a Number: \"))\rList=range(-1,n*n+9,2)\ri=2\rwhile List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\rprint(List[1:n+1])\r", "nl": "Write a Python program to print the first n Lucky Numbers. "}
{"code": "def factorial(n):\r    if n == 0:\r        return 1\r    else:\r        return n * factorial(n-1)\rn=int(input(\"Input a number to compute the factiorial : \"))\rprint(factorial(n))\r", "nl": "Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument. "}
{"code": "num_list = [1, 2, 3, 4]\rnew_dict = current = {}\rfor name in num_list:\r    current[name] = {}\r    current = current[name]\rprint(new_dict)\r", "nl": "Write a Python program to convert a list into a nested dictionary of keys. "}
{"code": "students = []\rsec_name = []\rsecond_low = 0\rn = int(input(\"Input number of students: \"))\rfor _ in range(n):\r   s_name = input(\"Name: \")\r   score = float(input(\"Grade: \"))\r   students.append([s_name,score])\rprint(\"\\nNames and Grades of all students:\")\rprint(students)\rorder =sorted(students, key = lambda x: int(x[1]))\rfor i in range(n):\r   if order[i][1] != order[0][1]:\r       second_low = order[i][1]\r       break\rprint(\"\\nSecond lowest grade: \",second_low)\rsec_student_name = [x[0] for x in order if x[1] == second_low]\rsec_student_name.sort()\rprint(\"\\nNames:\")\rfor s_name in sec_student_name:\r   print(s_name)\r", "nl": "Write a Python program to find the second lowest grade of any student(s) from the given names and grades of each student using lists and lambda. Input number of students, names and grades of each student. "}
{"code": "import arrow\rprint(\"Test whether a given datetime is between two dates and times:\")\rstart = arrow.get(datetime(2017, 6, 5, 12, 30, 10))\rend = arrow.get(datetime(2017, 6, 5, 12, 30, 36))\rprint(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))\rstart = arrow.get(datetime(2017, 5, 5))\rend = arrow.get(datetime(2017, 5, 8))\rprint(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))\rstart = arrow.get(datetime(2017, 5, 5))\rend = arrow.get(datetime(2017, 5, 8))\rprint(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))\r", "nl": "Write a Python program to check whether a given datetime is between two dates and times using arrow module. "}
{"code": "def tuple_int_str(tuple_str):\r    result = tuple(map(lambda x: (int(x[0]), int(x[2])), tuple_str))\r    return result     \rtuple_str =  (('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))\rprint(\"Original tuple values:\")\rprint(tuple_str)\rprint(\"\\nNew tuple values:\")\rprint(tuple_int_str(tuple_str))\r", "nl": "Write a Python program to convert string element to integer inside a given tuple using lambda. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'tweets': ['#Obama says goodbye','Retweets for #cash','A political endorsement in #Indonesia', '1 dog = many #retweets', 'Just a simple #egg']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_hash(text):\r    hword=re.findall(r'(?<=#)\\w+',text)\r    return \" \".join(hword)\rdf['hash_word']=df['tweets'].apply(lambda x: find_hash(x))\rprint(\"\\Extracting#@word from dataframe columns:\")\rprint(df)\r", "nl": "Write a Pandas program to extract hash attached word from twitter text from the specified column of a given DataFrame. "}
{"code": "from itertools import takewhile\rdef first_index(l1, n):\r    return len(list(takewhile(lambda x: x[1] <= n, enumerate(l1))))\r\r\rnums = [12,45,23,67,78,90,100,76,38,62,73,29,83]\rprint(\"Original list:\")\rprint(nums)\rn = 73\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 21\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 80\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 55\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\r", "nl": "Write a Python program to get the index of the first element, which is greater than a specified element using itertools module. "}
{"code": "#Ref:https://bit.ly/3qNYxh9\rdef binary_search(lst, item, start, end):\r    if start == end:\r        return start if lst[start] > item else start + 1\r    if start > end:\r        return start\r\r    mid = (start + end) // 2\r    if lst[mid] < item:\r        return binary_search(lst, item, mid + 1, end)\r    elif lst[mid] > item:\r        return binary_search(lst, item, start, mid - 1)\r    else:\r        return mid\rdef insertion_sort(lst):\r    length = len(lst)\r    for index in range(1, length):\r        value = lst[index]\r        pos = binary_search(lst, value, 0, index - 1)\r        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + 1 :]\r    return lst\rdef merge(left, right):\r    if not left:\r        return right\r\r    if not right:\r        return left\r    if left[0] < right[0]:\r        return [left[0]] + merge(left[1:], right)\r    return [right[0]] + merge(left, right[1:])\r\rdef tim_sort(lst):\r    length = len(lst)\r    runs, sorted_runs = [], []\r    new_run = [lst[0]]\r    sorted_array = []\r    i = 1\r    while i < length:\r        if lst[i] < lst[i - 1]:\r            runs.append(new_run)\r            new_run = [lst[i]]\r        else:\r            new_run.append(lst[i])\r        i += 1\r    runs.append(new_run)\r    for run in runs:\r        sorted_runs.append(insertion_sort(run))\r    for run in sorted_runs:\r        sorted_array = merge(sorted_array, run)\r    return sorted_array\rlst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Timsort the said list becomes:\")\rsorted_lst = tim_sort(lst)\rprint(sorted_lst)\rlst =  \"Python\"\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Timsort the said list becomes:\")\rsorted_lst = tim_sort(lst)\rprint(sorted_lst)\rlst = (1.1, 1, 0, -1, -1.1)\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"After applying Timsort the said list becomes:\")\rsorted_lst = tim_sort(lst)\rprint(sorted_lst)\r", "nl": "Write a Python program to sort unsorted numbers using Timsort. "}
{"code": "def test(lst, fn = lambda x: x):\r  return all(not fn(x) for x in lst)\rprint(test([1, 0, 2, 3], lambda x: x >= 3 ))\rprint(test([1, 0, 2, 3], lambda x: x < 0 ))\rprint(test([2, 2, 4, 4]))\r", "nl": "Write a Python program to check if a given function returns True for at least one element in the list. "}
{"code": "from math import floor, log\rdef geometric_progression(end, start=1, step=2):\r  return [start * step ** i for i in range(floor(log(end / start)\r          / log(step)) + 1)] \rprint(geometric_progression(256))\rprint(geometric_progression(256, 3))\rprint(geometric_progression(256, 1, 4))\r", "nl": "Write a Python program to initialize a list containing the numbers in the specified range where start and end are inclusive and the ratio between two terms is step. Returns an error if step equals 1. "}
{"code": "import pandas as pd\rdates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))\rprint(\"Month of December 2020:\")\rprint(dates)\rdates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))\rprint(\"\\nMaximum date: \", dates.max())\rprint(\"Minimum date: \", dates.min())\rprint(\"Maximum index: \", dates.idxmax())\rprint(\"Minimum index: \", dates.idxmin())\r", "nl": "Write a Pandas program to create a whole month of dates in daily frequencies. Also find the maximum, minimum timestamp and indexs. "}
{"code": "def radix_sort(nums):\r    RADIX = 10\r    placement = 1\r    max_digit = max(nums)\r\r    while placement < max_digit:\r      buckets = [list() for _ in range( RADIX )]\r      for i in nums:\r        tmp = int((i / placement) % RADIX)\r        buckets[tmp].append(i)\r      a = 0\r      for b in range( RADIX ):\r        buck = buckets[b]\r        for i in buck:\r          nums[a] = i\r          a += 1\r      placement *= RADIX\r    return nums\ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rprint(radix_sort(nums))\r", "nl": "Write a Python program to sort a list of elements using Radix sort. "}
{"code": "import pandas as pd\rs = pd.Series(['100', '200', 'python', '300.12', '400'])\rprint(\"Original Data Series:\")\rprint(s)\rprint(\"\\nData Series after adding some data:\")\rnew_s = s.append(pd.Series(['500', 'php']))\rprint(new_s)\r", "nl": "Write a Pandas program to add some data to an existing Series. "}
{"code": "import arrow\rutc = arrow.utcnow()\rpacific=arrow.now('US/Pacific')\rnyc=arrow.now('America/Chicago').tzinfo\rprint(pacific.astimezone(nyc))\r", "nl": "Write a Python program to create a datetime object, converted to the specified timezone using arrow module. "}
{"code": "from collections import defaultdict\rclass_list = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']\rid_list = [1, 2, 2, 3]\rtemp = defaultdict(set)\rfor c, i in zip(class_list, id_list):\r    temp[c].add(i)\rprint(temp)\r", "nl": "Write a Python program to create a dictionary from two lists without losing duplicate values. "}
{"code": "def test(obj, fn):\r  return dict((k, fn(v)) for k, v in obj.items())\r \rusers = {\r  'Theodore': { 'user': 'Theodore', 'age': 45 },\r  'Roxanne': { 'user': 'Roxanne', 'age': 15 },\r  'Mathew': { 'user': 'Mathew', 'age': 21 },\r}\rprint(\"\\nOriginal dictionary elements:\")\rprint(users)\rprint(\"\\nDictionary with the same keys:\")\rprint(test(users, lambda u : u['age']))\r", "nl": "Write a Python program to create a dictionary with the same keys as the given dictionary and values generated by running the given function for each value. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rstock_data = df1.set_index('Date')\rtop_plt = plt.subplot2grid((5,4), (0, 0), rowspan=3, colspan=4)\rtop_plt.plot(stock_data.index, stock_data[\"Close\"])\rplt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]')\rbottom_plt = plt.subplot2grid((5,4), (3,0), rowspan=1, colspan=4)\rbottom_plt.bar(stock_data.index, stock_data['Volume'])\rplt.title('\\nAlphabet Inc. Trading Volume', y=-0.60)\rplt.gcf().set_size_inches(12,8)\r", "nl": "Write a Pandas program to create a plot of stock price and trading volume of Alphabet Inc. between two specific dates. "}
{"code": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\rprint(\"Original list of integers:\")\rprint(nums)\rprint(\"\\nSquare every number of the said list:\")\rsquare_nums = list(map(lambda x: x ** 2, nums))\rprint(square_nums)\rprint(\"\\nCube every number of the said list:\")\rcube_nums = list(map(lambda x: x ** 3, nums))\rprint(cube_nums)\r", "nl": "Write a Python program to square and cube every number in a given list of integers using Lambda. "}
{"code": "import numpy as np \rprint(\"Generate a uniform random sample with replacement:\") \rprint(np.random.choice(7, 5))\rprint(\"\\nGenerate a uniform random sample without replacement:\") \rprint(np.random.choice(7, 5, replace=False))\rprint(\"\\nGenerate a non-uniform random sample with replacement:\") \rprint(np.random.choice(7, 5, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))\rprint(\"\\nGenerate a uniform random sample without replacement:\") \rprint(np.random.choice(7, 5, replace=False, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))  \r", "nl": "Write a NumPy program to generate a uniform, non-uniform random sample from a given 1-D array with and without replacement. "}
{"code": "import json\rprint(json.dumps({'Alex': 1, 'Suresh': 2, 'Agnessa': 3}))\r", "nl": "Write a Python program to use double quotes to display strings. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 7, 9])\rprint(\"Original array: \"+str(array_num))\rprint(\"Current memory address and the length in elements of the buffer: \"+str(array_num.buffer_info()))\rprint(\"The size of the memory buffer in bytes: \"+str(array_num.buffer_info()[1] * array_num.itemsize))\r", "nl": "Write a Python program to get the current memory address and the length in elements of the buffer used to hold an array's contents and also find the size of the memory buffer in bytes. "}
{"code": "import numpy as np\rfrom numpy import linalg as LA\ra = np.array([[1, 0], [1, 2]])\rprint(\"Original 2-d array\")\rprint(a)\rprint(\"Determinant of the said 2-D array:\")\rprint(np.linalg.det(a))\r", "nl": "Write a NumPy program to compute the determinant of a given square array. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rstudent_data = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    ' height ': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\r\rprint(\"Original DataFrame:\")\rprint(student_data)\rprint('\\nMean, min, and max value of age for each school with customized column names:')\rgrouped_single = student_data.groupby('school_code').agg(Age_Mean = ('age','mean'),Age_Max=('age',max),Age_Min=('age',min))\rprint(grouped_single)\r", "nl": "Write a Pandas program to split the following dataframe into groups by school code and get mean, min, and max value of age with customized column name for each school. "}
{"code": "def filter_data(students):\r    result = dict(filter(lambda x: (x[1][0], x[1][1]) > (6.0, 70), students.items()))\r    return result  \rstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\rprint(\"Original Dictionary:\")\rprint(students)\rprint(\"\\nHeight> 6ft and Weight> 70kg:\")\rprint(filter_data(students))\r", "nl": "Write a Python program to filter the height and width of students, which are stored in a dictionary using lambda. "}
{"code": "import numpy as np\rnums = np.array([[[1, 2, 3, 4],\r               [0, 1, 3, 4],\r               [5, 0, 3, 2]]])\rprint('Shape of the said array:')\rprint(nums.shape) \rprint(\"\\nAfter removing the first dimension of the shape of the said array:\")\r", "nl": "Write a NumPy program to remove the first dimension from a given array of shape (1,3,4). "}
{"code": "import numpy as np\rprint(\"Polynomial value when x = 2:\")\rprint(np.polyval([1, -2, 1], 2))\rprint(\"Polynomial value when x = 3:\")\rprint(np.polyval([1, -12, 10, 7, -10], 3))\r", "nl": "Write a NumPy program to compute the following polynomial values. "}
{"code": "def file_size(fname):\r        import os\r        statinfo = os.stat(fname)\r        return statinfo.st_size\r\rprint(\"File size in bytes of a plain file: \",file_size(\"test.txt\"))\r", "nl": "Write a Python program to get the file size of a plain file. "}
{"code": "from itertools import groupby \rdef remove_all_consecutive(str1): \r\tresult_str = [] \r\tfor (key,group) in groupby(str1): \r\t\tresult_str.append(key) \r\r\treturn ''.join(result_str)\r\t\rstr1 = 'xxxxxyyyyy'\rprint(\"Original string:\" + str1)\rprint(\"After removing consecutive duplicates: \" + str1)\rprint(remove_all_consecutive(str1))\r", "nl": "Write a Python program to remove all consecutive duplicates of a given string. "}
{"code": "from collections import Counter, OrderedDict\rclass OrderedCounter(Counter,OrderedDict):\r   pass\rword_array = []\rn = int(input(\"Input number of words: \"))\rprint(\"Input the words: \")\rfor i in range(n):\r   word_array.append(input().strip())\rword_ctr = OrderedCounter(word_array)\rprint(len(word_ctr))\rfor word in word_ctr:\r   print(word_ctr[word],end=' ')\r", "nl": "Write a Python program that accept some words and count the number of distinct words. Print the number of distinct words and number of occurrences for each distinct word according to their appearance. "}
{"code": "import pandas as pd\r#Source: https://bit.ly/32kGinQ\rdf = pd.read_csv(r'ufo.csv')\rdf['date_documented'] = df['date_documented'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\r# Add a new column instance, this adds a value to each instance of ufo sighting\rdf['instance'] = 1\r\r# set index to time, this makes df a time series df and then you can apply pandas time series functions.\rdf.set_index(df['date_documented'], drop=True, inplace=True)\r\r# create another df by resampling the original df and counting the instance column by Month ('M' is resample by month)\rufo2 = pd.DataFrame(df['instance'].resample('M').count())\r\r# just to find month of resampled observation\rufo2['date_documented'] = pd.to_datetime(ufo2.index.values)\r\rufo2['month'] = ufo2['date_documented'].apply(lambda x: x.month)\rprint(\"Average mean of  the UFO (unidentified flying object) sighting was reported:\")\rprint(ufo2.groupby(by='month').mean())\r", "nl": "Write a Pandas program to get the average mean of the UFO (unidentified flying object) sighting was reported. "}
{"code": "def reverse_list_of_lists(list1):\r    return list1[::-1]\rcolors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nReverse said list of lists:\")\rprint(reverse_list_of_lists(colors))\rnums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nReverse said list of lists:\")\rprint(reverse_list_of_lists(nums))\r", "nl": "Write a Python program to reverse a given list of lists. "}
{"code": "num = [1, 2, 3]\rcolor = ['red', 'white', 'black']\rfor (a,b) in zip(num, color):\r     print(a, b)\r\t ", "nl": "Write a Python program to iterate over two lists simultaneously. "}
{"code": "def list_of_dicts(marks):\r    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))\r    return list(result)\rmarks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}\rprint(\"Original dictionary of lists:\")\rprint(marks)\rprint(\"\\nSplit said dictionary of lists into list of dictionaries:\")\rprint(list_of_dicts(marks))\r", "nl": "Write a Python program to split a given dictionary of lists into list of dictionaries using map function. "}
{"code": "def second_largest(numbers):\r  if (len(numbers)<2):\r    return\r  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r    return\r  dup_items = set()\r  uniq_items = []\r  for x in numbers:\r    if x not in dup_items:\r      uniq_items.append(x)\r      dup_items.add(x)\r  uniq_items.sort()    \r  return  uniq_items[-2]   \rprint(second_largest([1,2,3,4,4]))\rprint(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))\rprint(second_largest([2,2]))\rprint(second_largest([1]))\r", "nl": "Write a Python program to find the second largest number in a list. "}
{"code": "import pandas as pd\rdf = pd.DataFrame( {'id' : [1, 2, 1, 1, 2, 1, 2], \r                    'type' : [10, 15, 11, 20, 21, 12, 14], \r                    'book' : ['Math','English','Physics','Math','English','Physics','English']})\r\rprint(\"Original DataFrame:\")\rprint(df)\rresult = df.groupby(['id', 'type', 'book']).size().unstack(fill_value=0)\rprint(\"\\nResult:\")\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups based on all columns and calculate Groupby value counts on the dataframe. "}
{"code": "def index_on_inner_list(list_data, index_no):\r    result = sorted(list_data, key=lambda x: x[index_no])\r    return result\rstudents = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] \rprint (\"Original list:\")\rprint(students)\rindex_no = 0\rprint(\"\\nSort the said list of lists by a given index\",\"( Index = \",index_no,\") of the inner list\")\rprint(index_on_inner_list(students, index_no))\rindex_no = 2\rprint(\"\\nSort the said list of lists by a given index\",\"( Index = \",index_no,\") of the inner list\")\rprint(index_on_inner_list(students, index_no))\r", "nl": "Write a Python program to sort a list of lists by a given index of the inner list using lambda. "}
{"code": "import itertools\rdef test(dictt):\r    result = list(map(dict, itertools.combinations(dictt.items(), 2)))\r    return result    \r\rstudents = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} \rprint(\"\\nOriginal Dictionary:\")\rprint(students)\rprint(\"\\nCombinations of key-value pairs of the said dictionary:\")\rprint(test(students))\r\rstudents = {'V' : [1, 3, 5], 'VI' : [1, 5]} \rprint(\"\\nOriginal Dictionary:\")\rprint(students)\rprint(\"\\nCombinations of key-value pairs of the said dictionary:\")\rprint(test(students))\r", "nl": "Write a Python program to get all combinations of key-value pairs in a given dictionary. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rtable = pd.pivot_table(df,index=\"Region\",values=\"Sale_amt\", aggfunc = np.sum)\rprint(table)\r", "nl": "Write a Pandas program to create a Pivot table and find the region wise total sale. "}
{"code": "num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}\rsorted_dict = {x: sorted(y) for x, y in num.items()}\rprint(sorted_dict)\r", "nl": "Write a Python program to sort a list alphabetically in a dictionary. "}
{"code": "#Ref.https://bit.ly/3r32ezJ\rfrom __future__ import annotations\r\r\rdef merge_insertion_sort(collection: list[int]) -> list[int]:\r    \"\"\"Pure implementation of merge-insertion sort algorithm in Python\r    :param collection: some mutable ordered collection with heterogeneous\r    comparable items inside\r    :return: the same collection ordered by ascending\r    Examples:\r    >>> merge_insertion_sort([0, 5, 3, 2, 2])\r    [0, 2, 2, 3, 5]\r    >>> merge_insertion_sort([99])\r    [99]\r    >>> merge_insertion_sort([-2, -5, -45])\r    [-45, -5, -2]\r    \"\"\"\r\r    def binary_search_insertion(sorted_list, item):\r        left = 0\r        right = len(sorted_list) - 1\r        while left <= right:\r            middle = (left + right) // 2\r            if left == right:\r                if sorted_list[middle] < item:\r                    left = middle + 1\r                break\r            elif sorted_list[middle] < item:\r                left = middle + 1\r            else:\r                right = middle - 1\r        sorted_list.insert(left, item)\r        return sorted_list\r\r    def sortlist_2d(list_2d):\r        def merge(left, right):\r            result = []\r            while left and right:\r                if left[0][0] < right[0][0]:\r                    result.append(left.pop(0))\r                else:\r                    result.append(right.pop(0))\r            return result + left + right\r\r        length = len(list_2d)\r        if length <= 1:\r            return list_2d\r        middle = length // 2\r        return merge(sortlist_2d(list_2d[:middle]), sortlist_2d(list_2d[middle:]))\r\r    if len(collection) <= 1:\r        return collection\r\r    \"\"\"\r    Group the items into two pairs, and leave one element if there is a last odd item.\r    Example: [999, 100, 75, 40, 10000]\r                -> [999, 100], [75, 40]. Leave 10000.\r    \"\"\"\r    two_paired_list = []\r    has_last_odd_item = False\r    for i in range(0, len(collection), 2):\r        if i == len(collection) - 1:\r            has_last_odd_item = True\r        else:\r            \"\"\"\r            Sort two-pairs in each groups.\r            Example: [999, 100], [75, 40]\r                        -> [100, 999], [40, 75]\r            \"\"\"\r            if collection[i] < collection[i + 1]:\r                two_paired_list.append([collection[i], collection[i + 1]])\r            else:\r                two_paired_list.append([collection[i + 1], collection[i]])\r\r    \"\"\"\r    Sort two_paired_list.\r    Example: [100, 999], [40, 75]\r                -> [40, 75], [100, 999]\r    \"\"\"\r    sorted_list_2d = sortlist_2d(two_paired_list)\r\r    \"\"\"\r    40 < 100 is sure because it has already been sorted.\r    Generate the sorted_list of them so that you can avoid unnecessary comparison.\r    Example:\r           group0 group1\r           40     100\r           75     999\r        ->\r           group0 group1\r           [40,   100]\r           75     999\r    \"\"\"\r    result = [i[0] for i in sorted_list_2d]\r\r    \"\"\"\r    100 < 999 is sure because it has already been sorted.\r    Put 999 in last of the sorted_list so that you can avoid unnecessary comparison.\r    Example:\r           group0 group1\r           [40,   100]\r           75     999\r        ->\r           group0 group1\r           [40,   100,   999]\r           75\r    \"\"\"\r    result.append(sorted_list_2d[-1][1])\r\r    \"\"\"\r    Insert the last odd item left if there is.\r    Example:\r           group0 group1\r           [40,   100,   999]\r           75\r        ->\r           group0 group1\r           [40,   100,   999,   10000]\r           75\r    \"\"\"\r    if has_last_odd_item:\r        pivot = collection[-1]\r        result = binary_search_insertion(result, pivot)\r\r    \"\"\"\r    Insert the remaining items.\r    In this case, 40 < 75 is sure because it has already been sorted.\r    Therefore, you only need to insert 75 into [100, 999, 10000],\r    so that you can avoid unnecessary comparison.\r    Example:\r           group0 group1\r           [40,   100,   999,   10000]\r            ^ You don't need to compare with this as 40 < 75 is already sure.\r           75\r        ->\r           [40,   75,    100,   999,   10000]\r    \"\"\"\r    is_last_odd_item_inserted_before_this_index = False\r    for i in range(len(sorted_list_2d) - 1):\r        if result[i] == collection[-i]:\r            is_last_odd_item_inserted_before_this_index = True\r        pivot = sorted_list_2d[i][1]\r        # If last_odd_item is inserted before the item's index,\r        # you should forward index one more.\r        if is_last_odd_item_inserted_before_this_index:\r            result = result[: i + 2] + binary_search_insertion(result[i + 2 :], pivot)\r        else:\r            result = result[: i + 1] + binary_search_insertion(result[i + 1 :], pivot)\r\r    return result\r\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Merge-insertion Sort the said list becomes:\")\rprint(merge_insertion_sort(nums))\rprint(nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Merge-insertion  Sort the said list becomes:\")\rprint(merge_insertion_sort(nums))\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Merge-insertion  Sort the said list becomes:\")\rprint(merge_insertion_sort(nums))\r\rchars = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(chars)\rprint(\"After applying Merge-insertion  Sort the said list becomes:\")\rprint(merge_insertion_sort(chars))\r", "nl": "Write a Python program to sort unsorted numbers using Merge-insertion sort. "}
{"code": "import numpy as np\rimport os\rx = np.arange(12).reshape(4, 3)\rprint(\"Original array:\")\rprint(x)\rheader = 'col1 col2 col3'\rnp.savetxt('temp.txt', x, fmt=\"%d\", header=header) \rprint(\"After loading, content of the text file:\")\rresult = np.loadtxt('temp.txt')\rprint(result)\r", "nl": "Write a NumPy program to save a given array to a text file and load it. "}
{"code": "def sum_lists_diff_length(test_list):\r    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]\r    return result\r\rnums = [[1,2,4],[2,4,4],[1,2]]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Sum said lists with different lengths:\")\rprint(sum_lists_diff_length(nums))\r\rnums = [[1],[2,4,4],[1,2],[4]]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Sum said lists with different lengths:\")\rprint(sum_lists_diff_length(nums))\r", "nl": "Write a Python program to sum two or more lists, the lengths of the lists may be different. "}
{"code": "import arrow\rprint(arrow.utcnow())\rprint(\"Hour ceiling:\")\rprint(arrow.utcnow().floor('hour'))\rprint(\"\\nMinute ceiling:\")\rprint(arrow.utcnow().floor('minute'))\rprint(\"\\nSecond ceiling:\")\rprint(arrow.utcnow().floor('second'))\r", "nl": "Write a Python program to create a new Arrow object, representing the \"floor\" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. "}
{"code": "def pythagoras(opposite_side,adjacent_side,hypotenuse):\r        if opposite_side == str(\"x\"):\r            return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))\r        elif adjacent_side == str(\"x\"):\r            return (\"Adjacent = \" + str(((hypotenuse**2) - (opposite_side**2))**0.5))\r        elif hypotenuse == str(\"x\"):\r            return (\"Hypotenuse = \" + str(((opposite_side**2) + (adjacent_side**2))**0.5))\r        else:\r            return \"You know the answer!\"\r    \rprint(pythagoras(3,4,'x'))\rprint(pythagoras(3,'x',5))\rprint(pythagoras('x',4,5))\rprint(pythagoras(3,4,5))\r", "nl": "Write a Python program to get the third side of right angled triangle from two given sides. "}
{"code": "def add_tags(tag, word):\r\treturn \"<%s>%s</%s>\" % (tag, word, tag)\rprint(add_tags('i', 'Python'))\rprint(add_tags('b', 'Python Tutorial'))\r", "nl": "Write a Python function to create the HTML string with tags around the word(s). "}
{"code": "def lcm(x, y):\r  if x > y:\r      z = x\r  else:\r      z = y\r  while(True):\r      if((z % x == 0) and (z % y == 0)):\r          lcm = z\r          break\r      z += 1\r  return lcm\rprint(lcm(4, 6))\rprint(lcm(15, 17))\r", "nl": "Write a Python program to get the least common multiple (LCM) of two positive integers. "}
{"code": "def count_chars(str):\r     upper_ctr, lower_ctr, number_ctr, special_ctr = 0, 0, 0, 0\r     for i in range(len(str)):\r          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r          elif str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\r          elif str[i] >= '0' and str[i] <= '9': number_ctr += 1\r          else: special_ctr += 1\r     return upper_ctr, lower_ctr, number_ctr, special_ctr\r           \rstr = \"@W3Resource.Com\"\rprint(\"Original Substrings:\",str)\ru, l, n, s = count_chars(str)\rprint('\\nUpper case characters: ',u)\rprint('Lower case characters: ',l)\rprint('Number case: ',n)\rprint('Special case characters: ',s)\r", "nl": "Write a Python program to count Uppercase, Lowercase, special character and numeric values in a given string. "}
{"code": "list1 = [220, 330, 500]\rlist2 = [12, 17, 21]\rprint(all(x >= 200 for x in list1))\rprint(all(x >= 25 for x in list2))\r", "nl": "Write a Python program to find all the values in a list are greater than a specified number. "}
{"code": "def elementswise_join(l1, l2):\r    result = [x + y for x, y in zip(l1, l2)]\r    return result\r\rnums1 = [[10,20], [30,40], [50,60], [30,20,80]]\rnums2 = [[61], [12,14,15], [12,13,19,20], [12]]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nJoin the said two lists element wise:\")\rprint(elementswise_join(nums1, nums2))\r\rlist1 = [['a','b'], ['b','c','d'], ['e', 'f']]\rlist2 = [['p','q'], ['p','s','t'], ['u','v','w']]\rprint(\"\\nOriginal lists:\")\rprint(list1)\rprint(list2)\rprint(\"\\nJoin the said two lists element wise:\")\rprint(elementswise_join(list1, list2))\r", "nl": "Write a Python program to join two given list of lists of same length, element wise. "}
{"code": "import numpy as np\rnums = np.array([1,0,2,0,3,0,4,5,6,7,8])\rprint(\"Original array:\")\rprint(nums)\rprint(\"Indices of elements equal to zero of the said array:\")\rresult = np.where(nums == 0)[0]\rprint(result)\r", "nl": "Write a NumPy program to find indices of elements equal to zero in a NumPy array. "}
{"code": "import arrow\rprint(\"\\nSearch a date from a string:\")\rd1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')\rprint(d1)\r", "nl": "Write a Python program to search a date from a given string using arrow module. "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\r                     'key2': ['K0', 'K1', 'K0', 'K1'],\r                     'P': ['P0', 'P1', 'P2', 'P3'],\r                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) \rdata2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\r                      'key2': ['K0', 'K0', 'K0', 'K0'],\r                      'R': ['R0', 'R1', 'R2', 'R3'],\r                      'S': ['S0', 'S1', 'S2', 'S3']})\rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerged Data (keys from data1):\")\rmerged_data = pd.merge(data1, data2, how='left', on=['key1', 'key2'])\rprint(merged_data)\rprint(\"\\nMerged Data (keys from data2):\")\rmerged_data = pd.merge(data2, data1, how='left', on=['key1', 'key2'])\rprint(merged_data)\r", "nl": "Write a Pandas program to join (left join) the two dataframes using keys from left dataframe only. "}
{"code": "def heap_data(nums, index, heap_size):\r    largest_num = index\r    left_index = 2 * index + 1\r    right_index = 2 * index + 2\r    if left_index < heap_size and nums[left_index] > nums[largest_num]:\r        largest_num = left_index\r\r    if right_index < heap_size and nums[right_index] > nums[largest_num]:\r        largest_num = right_index\r    if largest_num != index:\r        nums[largest_num], nums[index] = nums[index], nums[largest_num]\r        heap_data(nums, largest_num, heap_size)\rdef heap_sort(nums):\r    n = len(nums)\r    for i in range(n // 2 - 1, -1, -1):\r        heap_data(nums, i, n)\r    for i in range(n - 1, 0, -1):\r        nums[0], nums[i] = nums[i], nums[0]\r        heap_data(nums, 0, i)\r    return nums\ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rheap_sort(nums)\rprint(nums)\r", "nl": "Write a Python program to sort a list of elements using Heap sort. "}
{"code": "from itertools import combinations \rdef max_aggregate(l_data):\r    max_pair = max(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])\r    min_pair = min(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])\r    return max_pair,min_pair\rnums = [1,3,4,5,4,7,9,11,10,9]\rprint(\"Original list:\")\rprint(nums)\rresult = max_aggregate(nums)\rprint(\"\\nMaximum aggregation pair of the said list of tuple pair:\")\rprint(result[0])\rprint(\"\\nMinimum aggregation pair of the said list of tuple pair:\")\rprint(result[1])\r", "nl": "Write a Python program to find the maximum, minimum aggregation pair in given list of integers. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5004,5003,5002,5004,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nGroupby to find first order date for each group(salesman_id):\")\rresult = df.groupby('salesman_id')['ord_date'].min()\rprint(result)\r", "nl": "Write a Pandas program to split the following dataset using group by on 'salesman_id' and find the first order date for each group. "}
{"code": "def create_largest_number(lst):\r    if all(val == 0 for val in lst):\r        return '0'\r    result = ''.join(sorted((str(val) for val in lst), reverse=True,\r                      key=lambda i: i*( len(str(max(lst))) * 2 // len(i))))\r    return result\rnums = [3, 40, 41, 43, 74, 9]\rprint(\"Original list:\")\rprint(nums)\rprint(\"Largest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\r\rnums = [10, 40, 20, 30, 50, 60]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Largest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\rnums = [8, 4, 2, 9, 5, 6, 1, 0]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"Largest possible number using the elements of the said list of positive integers:\")\rprint(create_largest_number(nums))\r", "nl": "Write a Python program to create the largest possible number using the elements of a given list of positive integers. "}
{"code": "import numpy as np    \ra = np.array([[1,2,3],[4,3,1]])\rprint(\"Original array:\")\rprint(a)\ri,j = np.unravel_index(a.argmax(), a.shape)\rprint(\"Index of a maximum element in a numpy array along one axis:\")\rprint(a[i,j])\r", "nl": "Write a NumPy program to get the index of a maximum element in a NumPy array along one axis. "}
{"code": "import arrow\rprint(\"Current datetime:\")\rprint(arrow.utcnow())\rearlier = arrow.utcnow().shift(hours=-4)\rprint(earlier.humanize())\rlater = earlier.shift(hours=3)\rprint(later.humanize(earlier))\r", "nl": "Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. "}
{"code": "list1 = [1, 3, 5, 7, 9]\rlist2=[1, 2, 4, 6, 7, 8]\rdiff_list1_list2 = list(set(list1) - set(list2))\rdiff_list2_list1 = list(set(list2) - set(list1))\rtotal_diff = diff_list1_list2 + diff_list2_list1\rprint(total_diff)\r", "nl": "Write a Python program to get the difference between the two lists. "}
{"code": "import numpy as np\rarray=np.zeros(10)\rprint(\"An array of 10 zeros:\")\rprint(array)\rarray=np.ones(10)\rprint(\"An array of 10 ones:\")\rprint(array)\rarray=np.ones(10)*5\rprint(\"An array of 10 fives:\")\rprint(array)\r", "nl": "Write a NumPy program to create an array of 10 zeros,10 ones, 10 fives. "}
{"code": "def sum_difference(n=2):\r    sum_of_squares = 0\r    square_of_sum = 0\r    for num in range(1, n+1):\r        sum_of_squares += num * num\r        square_of_sum += num\r\r    square_of_sum = square_of_sum ** 2\r\r    return square_of_sum - sum_of_squares\r\r\rprint(sum_difference(12))\r", "nl": "Write a Python program to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.(default value of number=2). "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Open','Close','High','Low']]\rplt.figure(figsize=(30,30))\rdf2.hist();\rplt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to create a stacked histograms plot with more bins of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. "}
{"code": "from array import array\rimport binascii\rarray1 = array('i', [7, 8, 9, 10])\rprint('array1:', array1)\ras_bytes = array1.tobytes()\rprint('Bytes:', binascii.hexlify(as_bytes))\rarray2 = array('i')\rarray2.frombytes(as_bytes)\rprint('array2:', array2)\r", "nl": "Write a Python program to read a string and interpreting the string as an array of machine values. "}
{"code": "import numpy as np\rnp_array = np.array([[1, 2, 3], [2, 1, 2]], np.int32)\rprint(\"Original Numpy array:\")\rprint(np_array)\rprint(\"Type: \",type(np_array))\rprint(\"Sequence: 1,2\",)\rresult = repr(np_array).count(\"1, 2\")\rprint(\"Number of occurrences of the said sequence:\",result)\r", "nl": "Create a 2-dimensional array of size 2 x 3, composed of 4-byte integer elements. Write a NumPy program to find the number of occurrences of a sequence in the said array. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')    \rdf[df[\"MSHA ID\"]==102901].head()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find a specific MSHA ID. "}
{"code": "def bubbleSort(nlist):\r    for passnum in range(len(nlist)-1,0,-1):\r        for i in range(passnum):\r            if nlist[i]>nlist[i+1]:\r                temp = nlist[i]\r                nlist[i] = nlist[i+1]\r                nlist[i+1] = temp\r\rnlist = [14,46,43,27,57,41,45,21,70]\rbubbleSort(nlist)\rprint(nlist)\r", "nl": "Write a Python program to sort a list of elements using the bubble sort algorithm. "}
{"code": "import numpy as np\rx = np.array([-1.6, -1.5, -0.3, 0.1, 1.4, 1.8, 2.0])\rprint(\"Original array:\")\rprint(x)\rprint(\"Floor values of the above array elements:\")\rprint(np.floor(x))\rprint(\"Ceil values of the above array elements:\")\rprint(np.ceil(x))\rprint(\"Truncated values of the above array elements:\")\rprint(np.trunc(x))\r", "nl": "Write a NumPy program to get the floor, ceiling and truncated values of the elements of a numpy array. "}
{"code": "import json\rdef is_complex_num(objct):\r    if '__complex__' in objct:\r        return complex(objct['real'], objct['img'])\r    return objct\r\rcomplex_object =json.loads('{\"__complex__\": true, \"real\": 4, \"img\": 5}', object_hook = is_complex_num)\rsimple_object =json.loads('{\"real\": 4, \"img\": 3}', object_hook = is_complex_num)\rprint(\"Complex_object: \",complex_object)\rprint(\"Without complex object: \",simple_object)\r", "nl": "Write a Python program to check whether a JSON string contains complex object or not. "}
{"code": "def odd_values_string(str):\r  result = \"\" \r  for i in range(len(str)):\r    if i % 2 == 0:\r      result = result + str[i]\r  return result\r\rprint(odd_values_string('abcdef'))\rprint(odd_values_string('python'))\r", "nl": "Write a Python program to remove the characters which have odd index values of a given string. "}
{"code": "import decimal\rprint(\"Configure the rounding to round to the nearest, with ties going to the nearest even integer:\")\rdecimal.getcontext().prec = 1\rdecimal.getcontext().rounding = decimal.ROUND_HALF_EVEN\rprint(decimal.Decimal(10) / decimal.Decimal(4))\r", "nl": "Write a Python program to configure the rounding to round to the nearest, with ties going to the nearest even integer. Use decimal.ROUND_HALF_EVEN"}
{"code": "import numpy as np\rx, y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))\rd = np.sqrt(x*x+y*y)\rsigma, mu = 1.0, 0.0\rg = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\rprint(\"2D Gaussian-like array:\")\rprint(g)\r", "nl": "Write a NumPy program to generate a generic 2D Gaussian-like array. "}
{"code": "from geopy import distance\rlondon = (\"51.5074\u00b0 N, 0.1278\u00b0 W\")\rnewyork = (\"40.7128\u00b0 N, 74.0060\u00b0 W\")\rprint(\"Distance between London and New York city (in km):\")\rprint(distance.distance(london, newyork).km,\" kms\")\r", "nl": "Write a Python program to calculate the distance between London and New York city. "}
{"code": "import numpy as np\rdef cube(e):\r    it = np.nditer([e, None])\r    for a, b in it:\r        b[...] = a*a*a\r    return it.operands[1]\rprint(cube([1,2,3]))\r", "nl": "Write a NumPy program to create a function cube which cubes all the elements of an array. "}
{"code": "def reverse_string_words(text):\r    for line in text.split('\\n'):\r        return(' '.join(line.split()[::-1]))\rprint(reverse_string_words(\"The quick brown fox jumps over the lazy dog.\"))\rprint(reverse_string_words(\"Python Exercises.\"))\r", "nl": "Write a Python program to reverse words in a string. "}
{"code": "def test(dictt, N):\r    result = sorted(dictt, key=dictt.get, reverse=True)[:N]\r    return result \rdictt = {'a':5, 'b':14, 'c': 32, 'd':35, 'e':24, 'f': 100, 'g':57, 'h':8, 'i': 100}\rprint(\"\\nOriginal Dictionary:\")\rprint(dictt)\rN = 1\rprint(\"\\n\",N,\"maximum value(s) in the said dictionary:\")\rprint(test(dictt, N))\rN = 2\rprint(\"\\n\",N,\"maximum value(s) in the said dictionary:\")\rprint(test(dictt, N))\rN = 5\rprint(\"\\n\",N,\"maximum value(s) in the said dictionary:\")\rprint(test(dictt, N))\r", "nl": "Write a Python program to find the specified number of maximum values in a given dictionary. "}
{"code": "import os\rprint('Iterate over a root level path:')\rpath = '/tmp/'\rfor root, dirs, files in os.walk(path):\r print(root)\r", "nl": "Write a Python program to iterate over a root level path and print all its sub-directories and files, also loop over specified dirs and files. "}
{"code": "def remove_characters(str1,c):\r    return ''.join([el for el in str1 if el == c])\rtext = \"Python Exercises\"\rprint(\"Original string\")\rprint(text)\rexcept_char = \"P\"\rprint(\"Remove all characters except\",except_char,\"in the said string:\")\rprint(remove_characters(text,except_char))\rtext = \"google\"\rprint(\"\\nOriginal string\")\rprint(text)\rexcept_char = \"g\"\rprint(\"Remove all characters except\",except_char,\"in the said string:\")\rprint(remove_characters(text,except_char))\rtext = \"exercises\"\rprint(\"\\nOriginal string\")\rprint(text)\rexcept_char = \"e\"\rprint(\"Remove all characters except\",except_char,\"in the said string:\")\rprint(remove_characters(text,except_char))\r", "nl": "Write a Python code to remove all characters except a specified character in a given string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table(index='sex', columns='class', aggfunc={'survived':sum, 'fare':'mean'})\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find number of survivors and average rate grouped by gender and class. "}
{"code": "def test(dict, val):\r  return list(key for key, value in dict.items() if value == val)\r\rstudents = {\r  'Theodore': 19,\r  'Roxanne': 20,\r  'Mathew': 21,\r  'Betty': 20\r}\r\rprint(\"\\nOriginal dictionary elements:\")\rprint(students)\rprint(\"\\nFind all keys in the said dictionary that have the specified value:\")\rprint(test(students, 20))\r", "nl": "Write a Python program to find all keys in the provided dictionary that have the given value. "}
{"code": "import numpy as np\rx = np.arange(100)\rprint(\"Original array:\")\rprint(x)\ra = np.random.uniform(0,100)\rprint(\"Value to compare:\")\rprint(a)\rindex = (np.abs(x-a)).argmin()\rprint(x[index])\r", "nl": "Write a NumPy program to find the closest value (to a given scalar) in an array. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name': ['Alberto  Franco','Gino Ann Mcneill','Ryan  Parkes', 'Eesha Artur Hinton', 'Syed  Wharton'],\r    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rdf[[\"first\", \"middle\", \"last\"]] = df[\"name\"].str.split(\" \", expand = True)\rprint(\"\\nNew DataFrame:\")\rprint(df)\r", "nl": "Write a Pandas program to split a string of a column of a given DataFrame into multiple columns. "}
{"code": "import pandas as pd\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(df)\rpd.pivot_table(df,index=[\"Region\",\"SalesMan\"])\r", "nl": "Write a Pandas program to create a Pivot table with multiple indexes from a given excel sheet (Salesdata.xlsx). "}
{"code": "#Source:https://bit.ly/30PS62m\rimport itertools as it\r \rdef fizz_buzz(n):\r    fizzes = it.cycle([\"\"] * 2 + [\"Fizz\"])\r    buzzes = it.cycle([\"\"] * 4 + [\"Buzz\"])\r    fizzes_buzzes = (fizz + buzz for fizz, buzz in zip(fizzes, buzzes))\r    result = (word or n for word, n in zip(fizzes_buzzes, it.count(1)))\r    for i in it.islice(result, 100):\r        print(i)\r\rn = 50\rfizz_buzz(n)\r", "nl": "Write a Python program which iterates the integers from 1 to a given number and print \"Fizz\" for multiples of three, print \"Buzz\" for multiples of five, print \"FizzBuzz\" for multiples of both three and five using itertools module. "}
{"code": "import copy\rnums_x = {\"a\":1, \"b\":2, 'cc':{\"c\":3}}\rprint(\"Original dictionary: \", nums_x)\rnums_y = copy.copy(nums_x)\rprint(\"\\nCopy of the said list:\")\rprint(nums_y)\rprint(\"\\nChange the value of an element of the original dictionary:\")\rnums_x[\"cc\"][\"c\"] = 10\rprint(nums_x)\rprint(\"\\nSecond dictionary:\")\rprint(nums_y)\r\rnums = {\"x\":1, \"y\":2, 'zz':{\"z\":3}}\rnums_copy = copy.copy(nums)\rprint(\"\\nOriginal dictionary :\")\rprint(nums)\rprint(\"\\nCopy of the said list:\")\rprint(nums_copy)\rprint(\"\\nChange the value of an element of the original dictionary:\")\rnums[\"zz\"][\"z\"] = 10\rprint(\"\\nFirst dictionary:\")\rprint(nums)\rprint(\"\\nSecond dictionary (copy):\")\rprint(nums_copy)\r", "nl": "Write a Python program to create a shallow copy of a given dictionary. Use copy.copy"}
{"code": "nums = [5, 15, 35, 8, 98]\rfor num_index, num_val in enumerate(nums):\r    print(num_index, num_val)\r\t", "nl": "Write a Python program access the index of a list. "}
{"code": "#Source bit.ly/33MAeHe\rdef remove_list_range(input_list, left_range, rigth_range):\r   result = [i for i in input_list if (min(i)>=left_range and max(i)<=rigth_range)]\r   return result\rlist1 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]\rleft_range = 13\rrigth_range = 17\rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nAfter removing sublists from a given list of lists, which contains an element outside the given range:\")\rprint(remove_list_range(list1, left_range, rigth_range))\r", "nl": "Write a Python program to remove sublists from a given list of lists, which contains an element outside a given range. "}
{"code": "import arrow\rprint(\"Current datetime:\")\rprint(arrow.utcnow())\rprint(\"\\nYYYY-MM-DD HH:mm:ss ZZ:\")\rprint(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))\rprint(\"\\nDD-MM-YYYY HH:mm:ss ZZ:\")\rprint(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))\rprint(arrow.utcnow().format('\\nMMMM DD, YYYY'))\rprint(arrow.utcnow().format())\r", "nl": "Write a Python program to create a string representation of the Arrow object, formatted according to a format string. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult=df.groupby('sex')[['survived']].mean()\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and find survival rate by gender. "}
{"code": "pi=22/7\rradian = float(input('Radius of sphere: '))\rsur_area = 4 * pi * radian **2\rvolume = (4/3) * (pi * radian ** 3)\rprint(\"Surface Area is: \", sur_area)\rprint(\"Volume is: \", volume)\r", "nl": "Write a Python program to calculate surface volume and area of a sphere. "}
{"code": "def change_cases(s):\r  return str(s).upper(), str(s).lower()\r \rchrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}\rprint(\"Original Characters:\\n\",chrars)\r \rresult = map(change_cases, chrars)\rprint(\"\\nAfter converting above characters in upper and lower cases\\nand eliminating duplicate letters:\")\rprint(set(result))\r", "nl": "Write a Python program to convert all the characters in uppercase and lowercase and eliminate duplicate letters from a given sequence. Use map() function. "}
{"code": "import collections\reven_nums = (2, 4, 6)\rprint(\"Original tuple:\")\rprint(even_nums)\rprint(type(even_nums))\reven_nums_deque = collections.deque(even_nums)\rprint(\"\\nOriginal deque:\")\rprint(even_nums_deque)\reven_nums_deque.append(8)\reven_nums_deque.append(10)\reven_nums_deque.append(12)\reven_nums_deque.appendleft(2)\rprint(\"New deque from an existing iterable object:\")\rprint(even_nums_deque)\rprint(type(even_nums_deque))\r", "nl": "Write a Python program to create a deque from an existing iterable object. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name_code': ['c0001','1000c','b00c2', 'b2c02', 'c2222'],\r    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nIndex of a substring in a specified column of a dataframe:\")\rdf['Index'] = list(map(lambda x: x.find('c', 0, 5), df['name_code']))\rprint(df)\r", "nl": "Write a Pandas program to find the index of a substring of DataFrame with beginning and end position. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF ', '  ', 'abcd', ' '],\r    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})\r\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nIs space is present?\")\rdf['company_code_is_title'] = list(map(lambda x: x.isspace(), df['company_code']))\rprint(df)\r\r", "nl": "Write a Pandas program to check whether only space is present in a given column of a DataFrame. "}
{"code": "import numpy as np\rx = np.array([1, 3, 5, 7, 0])\rprint(\"Original array: \")\rprint(x)\rprint(\"Difference between neighboring elements, element-wise of the said array.\")\rprint(np.diff(x))\r", "nl": "Write a NumPy program to calculate the difference between neighboring elements, element-wise of a given array. "}
{"code": "def count_char_position(str1): \r    count_chars = 0\r    for i in range(len(str1)):\r        if ((i == ord(str1[i]) - ord('A')) or \r            (i == ord(str1[i]) - ord('a'))): \r            count_chars += 1\r    return count_chars \r  \rstr1 = input(\"Input a string: \")\rprint(\"Number of characters of the said string at same position as in English alphabet:\")\rprint(count_char_position(str1))\r", "nl": "Write a Python program to count characters at same position in a given string (lower and uppercase characters) as in English alphabet. "}
{"code": "import numpy as np\rx = np.array([1, 8, 3, 5])\rprint(\"Vector-1\")\rprint(x)\ry= np.random.randint(0, 11, 4)\rprint(\"Vector-2\")\rprint(y)\rresult = x * y\rprint(\"Multiply the values of two said vectors:\")\rprint(result)\r", "nl": "Write a NumPy program to multiply the values of two given vectors. "}
{"code": "from collections import OrderedDict\rtext_str = \"Python Exercises Practice Solution Exercises\"\rprint(\"Original String:\")\rprint(text_str)\rprint(\"\\nAfter removing duplicate words from the said string:\")\rresult = ' '.join(OrderedDict((w,w) for w in text_str.split()).keys())\rprint(result)\r", "nl": "Write a Python program to remove duplicate words from a given string use collections module. "}
{"code": "import numpy as np\ra = np.array([1, 0, np.nan, np.inf])\rprint(\"Original array\")\rprint(a)\rprint(\"Test a given array element-wise for finiteness :\")\rprint(np.isfinite(a))\r", "nl": "Write a NumPy program to\u00a0test a given array element-wise for finiteness (not infinity or not a Number). "}
{"code": "import numpy as np\rx= np.array([[12.0, 12.51], [2.34, 7.98], [25.23, 36.50]])\rprint(\"Original array elements:\")\rprint(x)\rprint(\"Convert float values to integer values:\")\rprint(x.astype(int))\r", "nl": "Write a NumPy program to convert a NumPy array of float values to a NumPy array of integer values. "}
{"code": "def word_count(str):\r    counts = dict()\r    words = str.split()\r\r    for word in words:\r        if word in counts:\r            counts[word] += 1\r        else:\r            counts[word] = 1\r\r    counts_x = sorted(counts.items(), key=lambda kv: kv[1])\r    #print(counts_x)\r    return counts_x[-2]\r \rprint(word_count(\"Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.\"))\r", "nl": "Write a Python program to find the second most repeated word in a given string. "}
{"code": "def top_product(nums1, nums2, N):\r    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r    return result\rnums1 = [1, 2, 3, 4, 5, 6]\rnums2 = [3, 6, 8, 9, 10, 6]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2,\"\\n\")\rN = 3\rprint(N,\"Number of largest products from the said two lists:\")\rprint(top_product(nums1, nums2, N))\rN = 4\rprint(N,\"Number of largest products from the said two lists:\")\rprint(top_product(nums1, nums2, N))\r", "nl": "Write a Python program to find the specified number of largest products from two given list, multiplying an element from each list. "}
{"code": "import pandas as pd\rimport re as re\rpd.set_option('display.max_columns', 10)\rdf = pd.DataFrame({\r    'company_code': ['c0001#','[email\u00a0protected]^2','$c0003', 'c0003', '&c0004'],\r    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']\r    })\rprint(\"Original DataFrame:\")\rprint(df)\rdef find_nonalpha(text):\r    result = re.findall(\"[^A-Za-z0-9 ]\",text)\r    return result\rdf['nonalpha']=df['company_code'].apply(lambda x: find_nonalpha(x))\rprint(\"\\Extracting only non alphanumeric characters from company_code:\")\rprint(df)\r", "nl": "Write a Pandas program to extract only non alphanumeric characters from the specified column of a given DataFrame. "}
{"code": "import pandas as pd\rimport numpy as np\rimport matplotlib.pyplot as plt\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rsorted_by_production = df.sort_values(['Production'], ascending=False).head(10)\rsorted_by_production['Production'].head(10).plot(kind=\"barh\")\rplt.show()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot where each bar will represent one of the top 10 production. "}
{"code": "from itertools import combinations_with_replacement\r \rdef combinations_colors(l, n):\r    return combinations_with_replacement(l,n)\rl = [\"Red\",\"Green\",\"Blue\"]\rprint(\"Original List: \",l)\rn=1\rprint(\"\\nn = 1\")\rprint(list(combinations_colors(l, n)))\rn=2\rprint(\"\\nn = 2\")\rprint(list(combinations_colors(l, n)))\rn=3\rprint(\"\\nn = 3\")\rprint(list(combinations_colors(l, n)))\r", "nl": "Write a Python program to chose specified number of colours from three different colours and generate all the combinations with repetitions. "}
{"code": "def elementswise_left_join(l1, l2):\r    f_len = len(l1)-(len(l2) - 1)\r    for i in range(0, len(l2), 1):\r        if f_len - i >= len(l1):\r            break\r        else:\r            l1[i] = l1[i] + l2[i]\r    return l1\r\rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [3, 3, -1, 7]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_left_join(nums1,nums2))\r\rnums3 = [1, 2, 3, 4, 5, 6]\rnums4 = [2, 4, -3]\rprint(\"\\nOriginal lists:\")\rprint(nums3)\rprint(nums4)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_left_join(nums3,nums4))\r", "nl": "Write a Python program to add two given lists of different lengths, start from left. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-4-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Open']]\rplt.figure(figsize=(15,15))\rdf2.plot.hist(orientation='horizontal', cumulative=True)\rplt.suptitle('Opening stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-04-2020', fontsize=12, color='black')\rplt.show()\r", "nl": "Write a Pandas program to draw a horizontal and cumulative histograms plot of opening stock prices of Alphabet Inc. between two specific dates. "}
{"code": "array = [[ ['*' for col in range(6)] for col in range(4)] for row in range(3)]\rprint(array)\r", "nl": "Write a Python program to generate a 3*4*6 3D array whose each element is *. "}
{"code": "from collections import defaultdict\rfrom math import floor\rdef test(lst, fn):\r  d = defaultdict(list)\r  for el in lst:\r    d[fn(el)].append(el)\r  return dict(d)\rnums = [7,23, 3.2, 3.3, 8.4]\rprint(\"Original list & function:\")\rprint(nums,\" Function name: floor:\")\rprint(\"Group the elements of the said list based on the given function:\")\rprint(test(nums, floor))\rprint(\"\\n\")\rprint(\"Original list & function:\")\rcolors = ['Red', 'Green', 'Black', 'White', 'Pink']\rprint(colors,\" Function name: len:\")\rprint(\"Group the elements of the said list based on the given function:\")\rprint(test(colors, len))\r", "nl": "Write a Python program to group the elements of a given list based on the given function. "}
{"code": "my_list = [10, 20, 30, 40, 20, 50, 60, 40]\rprint(\"Original List : \",my_list)\rmy_set = set(my_list)\rmy_new_list = list(my_set)\rprint(\"List of unique numbers : \",my_new_list)\r", "nl": "Write a Python program to get unique values from a list. "}
{"code": "class Node:\r    # Singly linked node\r    def __init__(self, data=None):\r        self.data = data\r        self.next = None\rclass singly_linked_list:\r    def __init__(self):\r        # Createe an empty list\r        self.tail = None\r        self.head = None\r        self.count = 0\r\t\r    def append_item(self, data):\r        #Append items on the list\r        node = Node(data)\r        if self.head:\r            self.head.next = node\r            self.head = node\r        else:\r            self.tail = node\r            self.head = node\r        self.count += 1\r    \r    def __getitem__(self, index):\r        if index > self.count - 1:\r            return \"Index out of range\"\r        current_val = self.tail\r        for n in range(index):\r            current_val = current_val.next\r        return current_val.data\r\r\ritems = singly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\r\rprint(\"Search using index:\")\rprint(items[0])\rprint(items[1])\rprint(items[4])\rprint(items[5])\rprint(items[10])\r", "nl": "Write a Python program to access a specific item in a singly linked list using index value. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nSelect random number of rows:\")\rprint(w_a_con.sample(5))\rprint(\"\\nSelect fraction of randome rows:\")\rprint(w_a_con.sample(frac=0.02))\r", "nl": "Write a Pandas program to select random number of rows, fraction of random rows from World alcohol consumption dataset. "}
{"code": "import numpy as np\rx = np.diag([1, 2, 3, 4, 5])\rprint(x)\r", "nl": "Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5. "}
{"code": "import numpy as np\rprint(\"sine: array of angles given in degrees\")\rprint(np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))\rprint(\"cosine: array of angles given in degrees\")\rprint(np.cos(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))\rprint(\"tangent: array of angles given in degrees\")\rprint(np.tan(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))\r", "nl": "Write a NumPy program to compute the trigonometric sine, cosine and tangent array of angles given in degrees. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"\\nNames of all HTML tags (https://www.python.org):\\n\")\rfor child in soup.recursiveChildGenerator():\r    if child.name:\r        print(child.name)\r\r", "nl": "Write a Python program to print the names of all HTML tags of a given web page going through the document tree. "}
{"code": "import sqlite3\rimport io\rconn = sqlite3.connect('mydatabase.db')\rwith io.open('clientes_dump.sql', 'w') as f:\r   for linha in conn.iterdump():\r       f.write('%s\\n' % linha)\rprint('Backup performed successfully.')\rprint('Saved as mydatabase_dump.sql')\rconn.close()\r", "nl": "Write a Python program to create a backup of a SQLite database. "}
{"code": "def matrix_dimensions(test_list):\r    row = len(test_list)\r    column = len(test_list[0])\r    return row,column\r\rlst = [[1,2],[2,4]]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"Dimension of the said matrix:\")\rprint(matrix_dimensions(lst))\rlst = [[0,1,2],[2,4,5]]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"Dimension of the said matrix:\")\rprint(matrix_dimensions(lst))\rlst = [[0,1,2],[2,4,5],[2,3,4]]\rprint(\"\\nOriginal list:\")\rprint(lst)\rprint(\"Dimension of the said matrix:\")\rprint(matrix_dimensions(lst)) \r", "nl": "Write a Python program to find the dimension of a given matrix. "}
{"code": "from bisect import bisect_right   \rdef BinarySearch(a, x): \r    i = bisect_right(a, x) \r    if i != len(a)+1 and a[i-1] == x: \r        return (i-1) \r    else: \r        return -1 \rnums = [1, 2, 3, 4, 8, 8, 10, 12] \rx = 8\rnum_position   = BinarySearch(nums, x) \rif num_position == -1: \r    print(\"not presetn!\") \relse: \r    print(\"Last occurrence of\", x, \"is present at\", num_position)\r", "nl": "Write a Python program to find the index position of the last occurrence of a given number in a sorted list using Binary Search (bisect). "}
{"code": "import os.path\rprint(os.path.expanduser('~'))\r", "nl": "Write a Python program to list home directory without absolute path. "}
{"code": "def check_same_contents(nums1, nums2):\r  for x in set(nums1 + nums2):\r    if nums1.count(x) != nums2.count(x):\r      return False\r  return True\rnums1 = [1, 2, 4]\rnums2 = [2, 4, 1]\rprint(\"Original list elements:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nCheck two said lists contain the same elements regardless of order!\")\rprint(check_same_contents(nums1, nums2))\rnums1 = [1, 2, 3]\rnums2 = [1, 2, 3]\rprint(\"\\nOriginal list elements:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nCheck two said lists contain the same elements regardless of order!\")\rprint(check_same_contents(nums1, nums2))\rnums1 = [1, 2, 3]\rnums2 = [1, 2, 4]\rprint(\"\\nOriginal list elements:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nCheck two said lists contain the same elements regardless of order!\")\rprint(check_same_contents(nums1, nums2))\r", "nl": "Write a Python program to check if two given lists contain the same elements regardless of order. "}
{"code": "import numpy as np\rx = np.zeros((3, 4))\ry = np.expand_dims(x, axis=1).shape\rprint(y)\r", "nl": "Write a NumPy program to insert a new axis within a 2-D array. "}
{"code": "color_list_1 = set([\"White\", \"Black\", \"Red\"])\rcolor_list_2 = set([\"Red\", \"Green\"])\rprint(\"Original set elements:\")\rprint(color_list_1)\rprint(color_list_2)\rprint(\"\\nDifferenct of color_list_1 and color_list_2:\")\rprint(color_list_1.difference(color_list_2))\rprint(\"\\nDifferenct of color_list_2 and color_list_1:\")\rprint(color_list_2.difference(color_list_1))\r", "nl": "Write a Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2. "}
{"code": "import sys\rimport os\rdef file_read_from_tail(fname,lines):\r        bufsize = 8192\r        fsize = os.stat(fname).st_size\r        iter = 0\r        with open(fname) as f:\r                if bufsize > fsize:\r                        bufsize = fsize-1\r                        data = []\r                        while True:\r                                iter +=1\r                                f.seek(fsize-bufsize*iter)\r                                data.extend(f.readlines())\r                                if len(data) >= lines or f.tell() == 0:\r                                        print(''.join(data[-lines:]))\r                                        break\r\rfile_read_from_tail('test.txt',2)\r", "nl": "Write a Python program to read last n lines of a file. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rprint(\"Sum: \",df[\"Production\"].sum()) \rprint(\"Mean: \",df[\"Production\"].mean())\rprint(\"Maximum: \",df[\"Production\"].max())\rprint(\"Minimum: \",df[\"Production\"].min()) \r", "nl": "Write a Pandas program to find the sum, mean, max, min value of 'Production (short tons)' column of coalpublic2013.xlsx file. "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nFilter rows based on row numbers ended with 0, like 0, 10, 20, 30:\")\rprint(w_a_con.filter(regex='0$', axis=0))\r", "nl": "Write a Pandas program to filter rows based on row numbers ended with 0, like 0, 10, 20, 30 from world alcohol consumption dataset. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\rpd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],\r'sales_id':[5002,5003,5004,5003,5002,5001,5005,5007,5008,5004,5005,5001]})\rprint(\"Original DataFrame:\")\rprint(df)\rgroups = df.groupby(['customer_id', pd.cut(df.sales_id, 3)])\rresult = groups.size().unstack()\rprint(result)\r", "nl": "Write a Pandas program to split a given dataframe into groups with bin counts. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],\r'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],\r'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],\r'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nKeep the said DataFrame with valid entries:\")\rresult = df.dropna(inplace=False)\rprint(result)\r", "nl": "Write a Pandas program to keep the valid entries of a given DataFrame. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport seaborn as sns\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rdf[\"ufo_yr\"] = df.Date_time.dt.year\ryears_data = df.ufo_yr.value_counts()\ryears_index = years_data.index  # x ticks\ryears_values = years_data.get_values()\rplt.figure(figsize=(15,8))\rplt.xticks(rotation = 60)\rplt.title('UFO Sightings by Year')\rplt.xlabel(\"Year\")\rplt.ylabel(\"Number of reports\")\ryears_plot = sns.barplot(x=years_index[:60],y=years_values[:60], palette = \"Reds\")\r", "nl": "Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) Sightings year. "}
{"code": "import numpy as np\rx = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rrstripped_char = np.char.rstrip(x)\rprint(\"\\nRemove the trailing whitespaces : \", rstripped_char)\r", "nl": "Write a NumPy program to remove the trailing whitespaces of all the elements of a given array. "}
{"code": "s = sum([10,20,30])\rprint(\"\\nSum of the container: \", s)\rprint()\r", "nl": "Write a Python program to calculate the sum of all items of a container (tuple, list, set, dictionary). "}
{"code": "import numpy as np\ra = np.array([1, 0, np.nan, np.inf])\rprint(\"Original array\")\rprint(a)\rprint(\"Test element-wise for NaN:\")\rprint(np.isnan(a))\r", "nl": "Write a NumPy program to\u00a0test element-wise for NaN of a given array. "}
{"code": "import numpy as np    \rx = np.reshape(np.arange(16),(4,4))\rprint(\"Original arrays:\")\rprint(x)\rprint(\"Sliced elements:\")\rresult = x[[0,1,2],[0,1,3]]\rprint(result)\r", "nl": "Write a NumPy program to find the index of the sliced elements as follows from a given 4x4 array. "}
{"code": "import pandas as pd\rimport numpy as np\rnp.random.seed(24)\rdf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\rdf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\r               axis=1)\rdf.iloc[0, 2] = np.nan\rdf.iloc[3, 3] = np.nan\rdf.iloc[4, 1] = np.nan\rdf.iloc[9, 4] = np.nan\rprint(\"Original array:\")\rprint(df)\rprint(\"\\nDifferent background color:\")\rcoldict = {'B':'red', 'D':'yellow'}\r\rdef highlight_cols(x):\r    #copy df to new - original data are not changed\r    df = x.copy()\r    #select all values to default value - red color\r    df.loc[:,:] = 'background-color: red'\r    #overwrite values grey color\r    df[['B','C', 'E']] = 'background-color: grey'\r    #return color df\r    return df    \r\rdf.style.apply(highlight_cols, axis=None)\r", "nl": "Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns with different colors. "}
{"code": "import numpy as np\rx = np.array([1., 2., 3., 4.], np.float32)\rprint(\"Original array: \")\rprint(x)\rprint(\"\\nexp(x)-1 for all elements of the said array:\")\rr1 = np.expm1(x)\rr2 = np.exp(x) - 1.\rassert np.allclose(r1, r2)\rprint(r1)\r", "nl": "Write a NumPy program to calculate exp(x) - 1 for all elements in a given array. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],\r    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nCount occurrence of 2 in date_of_birth column:\")\rdf['count'] = list(map(lambda x: x.count(\"2\"), df['name_code']))\rprint(df)\r", "nl": "Write a Pandas program to count of occurrence of a specified substring in a DataFrame column. "}
{"code": "import string\rdef letters_file_line(n):\r   with open(\"words1.txt\", \"w\") as f:\r       alphabet = string.ascii_uppercase\r       letters = [alphabet[i:i + n] + \"\\n\" for i in range(0, len(alphabet), n)]\r       f.writelines(letters)\rletters_file_line(3)\r", "nl": "Write a Python program to create a file where all letters of English alphabet are listed by specified number of letters on each line. "}
{"code": "def heterogeneous_list_to_str(lst):\r    result = ','.join(str(x) for x in lst)\r    return result\rh_data = [\"Red\", 100, -50, \"green\", \"w,3,r\", 12.12, False]\rprint(\"Original list:\")\rprint(h_data)\rprint(\"\\nConvert the heterogeneous list of scalars into a string:\")\rprint(heterogeneous_list_to_str(h_data))\r", "nl": "Write a Python program to convert a given heterogeneous list of scalars into a string. "}
{"code": "def combinations_list(colors):\r    if len(colors) == 0:\r        return [[]]\r    result = []\r    for el in combinations_list(colors[1:]):\r        result += [el, el+[colors[0]]]\r    return result\rcolors = ['orange', 'red', 'green', 'blue']\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nAll possible combinations of the said list\u2019s elements:\")\rprint(combinations_list(colors))\r", "nl": "Write a Python program to get all possible combinations of the elements of a given list. "}
{"code": "import numpy as np\rarray1 = ['PHP','JS','C++']\rarray2 = ['Python','C#', 'NumPy']    \rprint(\"Original arrays:\")          \rprint(array1)\rprint(array2)          \rresult  = np.r_[array1[:-1], [array1[-1]+array2[0]], array2[1:]]   \rprint(\"\\nAfter Combining:\")       \rprint(result)\r", "nl": "Write a NumPy program to combine last element with first element of two given ndarray with different shapes. "}
{"code": "from collections import Counter \rdef max_least_char(str1):\r    temp = Counter(str1) \r    max_char = max(temp, key = temp.get)\r    min_char = min(temp, key = temp.get)\r    return (max_char, min_char)\r\rstr1 = \"hello world\"\rprint (\"Original string: \")\rprint(str1)\rresult = max_least_char(str1)\rprint(\"\\nMost common character of the said string:\",result[0])\rprint(\"Least common character of the said string:\",result[1])\r", "nl": "Write a Python program to count most and least common characters in a given string. "}
{"code": "def prime_eratosthenes(n):\r    prime_list = []\r    for i in range(2, n+1):\r        if i not in prime_list:\r            print (i)\r            for j in range(i*i, n+1, i):\r                prime_list.append(j)\r\rprint(prime_eratosthenes(100));\r", "nl": "Write a Python program using Sieve of Eratosthenes method for computing primes upto a specified number. "}
{"code": "import numpy as np\rx = np.array([10, 20, 30], float)\rprint(\"Original array:\")\rprint(x)\rs = x.tostring()\rprint(\"Binary string array:\")\rprint(s)\rprint(\"Array using fromstring():\")\ry = np.fromstring(s)\rprint(y)\r", "nl": "Write a NumPy program to convert the raw data in an array to a binary string and then create an array. "}
{"code": "student_list = {'S  001': ['Math', 'Science'], 'S    002': ['Math', 'English']}\rprint(\"Original dictionary: \",student_list)\rstudent_dict = {x.translate({32: None}): y for x, y in student_list.items()}\rprint(\"New dictionary: \",student_dict)\r", "nl": "Write a Python program to remove spaces from dictionary keys. "}
{"code": "#Ref.https://bit.ly/36fvcEw\rdef quick_sort_3partition(sorting: list, left: int, right: int) -> None:\r    if right <= left:\r        return\r    a = i = left\r    b = right\r    pivot = sorting[left]\r    while i <= b:\r        if sorting[i] < pivot:\r            sorting[a], sorting[i] = sorting[i], sorting[a]\r            a += 1\r            i += 1\r        elif sorting[i] > pivot:\r            sorting[b], sorting[i] = sorting[i], sorting[b]\r            b -= 1\r        else:\r            i += 1\r    quick_sort_3partition(sorting, left, a - 1)\r    quick_sort_3partition(sorting, b + 1, right)\rdef three_way_radix_quicksort(sorting: list) -> list:\r    if len(sorting) <= 1:\r        return sorting\r    return (\r        three_way_radix_quicksort([i for i in sorting if i < sorting[0]])\r        + [i for i in sorting if i == sorting[0]]\r        + three_way_radix_quicksort([i for i in sorting if i > sorting[0]])\r    )\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Random Pivot Quick Sort the said list becomes:\")\rquick_sort_3partition(nums, 0, len(nums)-1)\rprint(nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Multi-key quicksort the said list becomes:\")\rquick_sort_3partition(nums, 0,  len(nums)-1)\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Multi-key quicksort the said list becomes:\")\rquick_sort_3partition(nums, 0, len(nums)-1)\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Multi-key quicksort the said list becomes:\")\rquick_sort_3partition(nums, 1,  len(nums)-1)\rprint(nums)\rnums = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Multi-key quicksort the said list becomes:\")\rquick_sort_3partition(nums, 0, len(nums)-1)\rprint(nums)\rnums = ['z','a','y','b','x','c']\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Multi-key quicksort the said list becomes:\")\rquick_sort_3partition(nums, 2,  len(nums)-1)\rprint(nums) \r", "nl": "Write a Python program to sort unsorted numbers using Multi-key quicksort. "}
{"code": "def sum_div(number):\r    divisors = [1]\r    for i in range(2, number):\r        if (number % i)==0:\r            divisors.append(i)\r    return sum(divisors)\rprint(sum_div(8))\rprint(sum_div(12))\r", "nl": "Write a Python program to returns sum of all divisors of a number. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Close']]\rdf3 = df2.set_index('Date')\rdata_filled = df3.asfreq('D', method='ffill')\rdata_returns = data_filled.pct_change()\rdata_std = data_returns.rolling(window=30, min_periods=30).std()\rplt.figure(figsize=(20,20))\rdata_std.plot();\rplt.suptitle('Volatility over a period of time  of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.grid(True)\rplt.show() \r", "nl": "Write a Pandas program to plot the volatility over a period of time of Alphabet Inc. stock price between two specific dates. "}
{"code": "from itertools import groupby\rdef modified_encode(alist):\r        def ctr_ele(el):\r            if len(el)>1: return [len(el), el[0]]\r            else: return el[0]\r        return [ctr_ele(list(group)) for key, group in groupby(alist)]\r\rn_list = [1,1,2,3,4,4,5, 1]\rprint(\"Original list:\") \rprint(n_list)\rprint(\"\\nList reflecting the modified run-length encoding from the said list:\")\rprint(modified_encode(n_list))\r\rn_list = 'aabcddddadnss'\rprint(\"\\nOriginal String:\") \rprint(n_list)\rprint(\"\\nList reflecting the modified run-length encoding from the said string:\")\rprint(modified_encode(n_list))\r\r", "nl": "Write a Python program to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters. "}
{"code": "import numpy as np\rv = np.arange(15,55)\rprint(\"Original vector:\")\rprint(v)\rprint(\"All values except the first and last of the said vector:\")\rprint(v[1:-1])\r", "nl": "Write a NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last. "}
{"code": "import itertools\roriginal_list = [[2,4,3],[1,5,6], [9], [7,9,0]]\rnew_merged_list = list(itertools.chain(*original_list))\rprint(new_merged_list)\r", "nl": "Write a Python program to flatten a shallow list. "}
{"code": "def test_number5(x, y):\r   if x == y or abs(x-y) == 5 or (x+y) == 5:\r       return True\r   else:\r       return False\rprint(test_number5(7, 2))\rprint(test_number5(3, 2))\rprint(test_number5(2, 2))\rprint(test_number5(7, 3))\rprint(test_number5(27, 53))\r", "nl": "Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5. "}
{"code": "def test(list1, list2):\r    result =  set(list1).intersection(list2)\r    return list(result)\rlist1 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] \rlist2 =  [('red', 'green'), ('orange', 'pink')] \rprint(\"\\nOriginal lists:\")\rprint(list1)\rprint(list2)\rprint(\"\\nCommon tuples between two said lists\")\rprint(test(list1,list2)) \rlist1 =  [('red', 'green'), ('orange', 'pink')] \rlist2 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] \rprint(\"\\nOriginal lists:\")\rprint(list1)\rprint(list2)\rprint(\"\\nCommon tuples between two said lists\")\rprint(test(list1,list2))\r", "nl": "Write a Python program to find the common tuples between two given lists. "}
{"code": "def change_sring(str1):\r      return str1[-1:] + str1[1:-1] + str1[:1]\r\t  \rprint(change_sring('abcd'))\rprint(change_sring('12345'))\r", "nl": "Write a Python program to change a given string to a new string where the first and last chars have been exchanged. "}
{"code": "def pluck(lst, key):\r  return [x.get(key) for x in lst]\r \rsimpsons = [\r  { 'name': 'Areeba', 'age': 8 },\r  { 'name': 'Zachariah', 'age': 36 },\r  { 'name': 'Caspar', 'age': 34 },\r  { 'name': 'Presley', 'age': 10 }\r]\rprint(pluck(simpsons, 'age'))\r", "nl": "Write a Python program to convert a given list of dictionaries into a list of values corresponding to the specified key. "}
{"code": "import pandas as pd\rresult = pd.timedelta_range(0, periods=30, freq=\"1H20T\")\rprint(\"For a frequency of 1 hours 20 minutes, here we have combined the hour (H) and minute (T):\\n\")\rprint(result)\r", "nl": "Write a Pandas program to create a time series combining hour and minute. "}
{"code": "x = 0.25\ry = -0.25\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number with percentage: \"+\"{:.2%}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number with percentage: \"+\"{:.2%}\".format(y));\rprint()\r", "nl": "Write a Python program to format a number with a percentage. "}
{"code": "import itertools as it\rdef combinations_data(iter, length):\r    return it.combinations(iter, length)\r#List\rresult = combinations_data(['A','B','C','D'], 1)\rprint(\"\\nCombinations of an given iterable of length 1:\")\rfor i in result:\r    print(i)\r\r#String\rresult = combinations_data(\"Python\", 1)\rprint(\"\\nCombinations of an given iterable of length 1:\")\rfor i in result:\r    print(i)\r    \r#List\rresult = combinations_data(['A','B','C','D'], 2)\rprint(\"\\nCombinations of an given iterable of length 2:\")\rfor i in result:\r    print(i)\r\r#String\rresult = combinations_data(\"Python\", 2)\rprint(\"\\nCombinations of an given iterable of length 2:\")\rfor i in result:\r    print(i)\r", "nl": "Write a Python program to generate combinations of a given length of given iterable. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],\r    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],\r    'age': [18.5, 21.2, 22.5, 22, 23]\r})\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nCount occurrence of 22 in date_of_birth column:\")\rdf['Index'] = list(map(lambda x: x.find('22'), df['name_code']))\rprint(df)\r", "nl": "Write a Pandas program to find the index of a given substring of a DataFrame column. "}
{"code": "import numpy as np\rarra1 = np.ones((25,25))\rk = 5\rprint(\"Original arrays:\")\rprint(arra1)\rresult = np.add.reduceat(np.add.reduceat(arra1, np.arange(0, arra1.shape[0], k), axis=0),\r                                      np.arange(0, arra1.shape[1], k), axis=1)\rprint(\"\\nBlock-sum (5x5) of the said array:\")\rprint(result)\r", "nl": "Write a NumPy program to get the block-sum (block size is 5x5) from a given array of shape 25x25. "}
{"code": "from array import array\rnum_array = array('i', [10,20,30,40,50])\rprint(\"Length of the array is:\")\rprint(len(num_array))\r", "nl": "Write a Python program to get the length of an array. "}
{"code": "import numpy as np\rx = np.array([1,2,3,4,5])\rprint(\"Original array:\")\rprint(x)\rprint(\"Magnitude of the vector:\")\rprint(np.linalg.norm(x))\r", "nl": "Write a NumPy program to get the magnitude of a vector in NumPy. "}
{"code": "def remove_words(in_list, char_list):\r    new_list = []\r    for line in in_list:\r        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])\r        new_list.append(new_words)\r    return new_list\r     \rstr_list = ['Red color', 'Orange#', 'Green', 'Orange @', \"White\"]\rprint(\"Original list:\")\rprint(\"list1:\",str_list)\rchar_list = ['#', 'color', '@']\rprint(\"\\nCharacter list:\")\rprint(char_list)\rprint(\"\\nNew list:\")\rprint(remove_words(str_list, char_list))\r", "nl": "Write a Python program to remove words from a given list of strings containing a character or string. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint('\\nChange the name of an aggregated metric:')\rgrouped_single = df.groupby('school_code').agg({'age': [(\"mean_age\",\"mean\"), (\"min_age\", \"min\"), (\"max_age\",\"max\")]})\rprint(grouped_single)\r", "nl": "Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group, also change the column name of the aggregated metric. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). "}
{"code": "l = []\rif not l:\r  print(\"List is empty\")\r  ", "nl": "Write a Python program to check a list is empty or not. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1.set_index('Date')\rx= ['Close']; y = ['Volume']\rplt.figure(figsize=[15,10])\rdf2.plot.scatter(x, y, s=50);\rplt.grid(True)\rplt.title('Trading Volume/Price of Alphabet Inc. stock,\\n01-04-2020 to 30-09-2020', fontsize=14, color='black')\rplt.xlabel(\"Stock Price\",fontsize=12, color='black')\rplt.ylabel(\"Trading Volume\", fontsize=12, color='black') \rplt.show()\r", "nl": "Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates. "}
{"code": "def magic_square_test(my_matrix):\r    iSize = len(my_matrix[0])\r    sum_list = []\r    \r    #Horizontal Part:\r    sum_list.extend([sum (lines) for lines in my_matrix])   \r\r    #Vertical Part:\r    for col in range(iSize):\r        sum_list.append(sum(row[col] for row in my_matrix))\r    \r    #Diagonals Part\r    result1 = 0\r    for i in range(0,iSize):\r        result1 +=my_matrix[i][i]\r    sum_list.append(result1)  \r    \r    result2 = 0\r    for i in range(iSize-1,-1,-1):\r        result2 +=my_matrix[i][i]\r    sum_list.append(result2)\r\r    if len(set(sum_list))>1:\r        return False\r    return True\r\rm=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] \rprint(magic_square_test(m));\r\rm=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]\rprint(magic_square_test(m));\r\rm=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]\rprint(magic_square_test(m));\r", "nl": "Write a Python program to calculate magic square. "}
{"code": "list1 = [1, 2, 3, 0]\rlist2 = ['Red', 'Green', 'Black']\rfinal_list = list1 + list2\rprint(final_list)\r", "nl": "Write a Python program to append a list to the second list. "}
{"code": "import numpy as np\rx = np.sqrt([1+0j])\ry = np.sqrt([0+1j])\rprint(\"Original array:x \",x)\rprint(\"Original array:y \",y)\rprint(\"Real part of the array:\")\rprint(x.real)\rprint(y.real)\rprint(\"Imaginary part of the array:\")\rprint(x.imag)\rprint(y.imag)\r", "nl": "Write a NumPy program to find the real and imaginary parts of an array of complex numbers. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\ntime.struct_time, in the current timezone:\")\rprint(arrow.utcnow().timetuple())\r", "nl": "Write a Python program to parse a string representing a time according to a format. "}
{"code": "import numpy as np\rx = np.array([1, 2, 3, 4, 5, 6])\ry = np.reshape(x,(3,2))\rprint(\"Reshape 3x2:\")\rprint(y)\rz = np.reshape(x,(2,3))\rprint(\"Reshape 2x3:\")\rprint(z)\r", "nl": "Write a NumPy program to create a new shape to an array without changing its data. "}
{"code": "from geopy.geocoders import Nominatim\rgeolocator = Nominatim(user_agent=\"geoapiExercises\")\rlald = \"47.470706, -99.704723\"\rprint(\"Latitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\rlald = \"34.05728435, -117.194132331602\"\rprint(\"\\nLatitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\rlald = \"38.8976998, -77.0365534886228\"\rprint(\"\\nLatitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\rlald = \"55.7558\u00b0 N, 37.6173\u00b0 E\"\rprint(\"\\nLatitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\rlald = \"35.6762\u00b0 N, 139.6503\u00b0 E\"\rprint(\"\\nLatitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\rlald = \"41.9185\u00b0 N, 45.4777\u00b0 E\"\rprint(\"\\nLatitude and Longitude:\",lald)\rlocation = geolocator.geocode(lald)\rprint(\"Location address of the said Latitude and Longitude:\")\rprint(location)\r", "nl": "Write a Python program to find the location address of a specified latitude and longitude using Nominatim API and Geopy package. "}
{"code": "def flatten_list(n_list):\r    result_list = []\r    if not n_list: return result_list\r    stack = [list(n_list)]\r    while stack:\r        c_num = stack.pop()\r        next = c_num.pop()\r        if c_num: stack.append(c_num)\r        if isinstance(next, list):\r            if next: stack.append(list(next))\r        else: result_list.append(next)\r    result_list.reverse()\r    return result_list \rn_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]\rprint(\"Original list:\") \rprint(n_list)\rprint(\"\\nFlatten list:\")\rprint(flatten_list(n_list))\r", "nl": "Write a Python program to flatten a given nested list structure. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc, 'html.parser')\rprint(\"The text in the first paragraph tag:\")\rprint(soup.find_all('p')[0].text)\r\r", "nl": "Write a Python program to extract the text in the first paragraph tag of a given html document. "}
{"code": "def first_index(l1, n):\r    return next(a[0] for a in enumerate(l1) if a[1] > n)\r \rnums = [12,45,23,67,78,90,100,76,38,62,73,29,83]\rprint(\"Original list:\")\rprint(nums)\rn = 73\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 21\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 80\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\rn = 55\rprint(\"\\nIndex of the first element which is greater than\",n,\"in the said list:\")\rprint(first_index(nums,n))\r", "nl": "Write a Python program to get the index of the first element which is greater than a specified element. "}
{"code": "s = input(\"Input a string\")\rd=l=0\rfor c in s:\r    if c.isdigit():\r        d=d+1\r    elif c.isalpha():\r        l=l+1\r    else:\r        pass\rprint(\"Letters\", l)\rprint(\"Digits\", d)\r", "nl": "rite a Python program that accepts a string and calculate the number of digits and letters. "}
{"code": "import numpy as np\rx= np.arange(12).reshape(3, 4)\rprint(\"Original array elements:\")\rprint(x)\rfor a in np.nditer(x, op_flags=['readwrite']):\r    a[...] = 3 * a\rprint(\"New array elements:\")\rprint(x)\r", "nl": "Write a NumPy program to create an array of (3, 4) shape, multiply every element value by 3 and display the new array. "}
{"code": "import numpy as np\rfvalues = [0, 12, 45.21, 34, 99.91]\rF = np.array(fvalues)\rprint(\"Values in Fahrenheit degrees:\")\rprint(F)\rprint(\"Values in  Centigrade degrees:\") \rprint(5*F/9 - 5*32/9)\r", "nl": "Write a NumPy program to convert the values of Centigrade degrees into Fahrenheit degrees. Centigrade values are stored into a NumPy array. "}
{"code": "import numpy as np\rx = np.arange(5)\rprint(\"\\nOriginal array:\")\rprint(x)\rweights = np.arange(1, 6)\rr1 = np.average(x, weights=weights)\rr2 = (x*(weights/weights.sum())).sum()\rassert np.allclose(r1, r2)\rprint(\"\\nWeighted average of the said array:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute the weighted of a given array. "}
{"code": "import numpy as np\ra = np.array([1,2,3])\rb = np.array([0,1,0])\rprint(\"Original 1-d arrays:\")\rprint(a)\rprint(b)\rresult =  np.kron(a, b)\rprint(\"Kronecker product of the said arrays:\")\rprint(result)\rx = np.arange(9).reshape(3, 3)\ry = np.arange(3, 12).reshape(3, 3)\rprint(\"Original Higher dimension:\")\rprint(x)\rprint(y)\rresult = np.kron(x, y)\rprint(\"Kronecker product  of the said arrays:\")\rprint(result)\r", "nl": "Write a NumPy program to compute the Kronecker product of two given mulitdimension arrays. "}
{"code": "def sort_numeric_strings(nums_str):\r    result = [int(x) for x in nums_str]\r    result.sort()\r    return result\rnums_str = ['4','12','45','7','0','100','200','-12','-500']\rprint(\"Original list:\")\rprint(nums_str)\rprint(\"\\nSort the said list of strings(numbers) numerically:\")\rprint(sort_numeric_strings(nums_str))\r", "nl": "Write a Python program to sort a given list of strings(numbers) numerically. "}
{"code": "from collections import Counter\rcolor1 = [\"red\", \"orange\", \"green\", \"blue\", \"white\"]\rcolor2 = [\"black\", \"yellow\", \"green\", \"blue\"]\rcounter1 = Counter(color1)\rcounter2 = Counter(color2)\rprint(\"Color1-Color2: \",list(counter1 - counter2))\rprint(\"Color2-Color1: \",list(counter2 - counter1))\r", "nl": "Write a Python program to compute the difference between two lists. "}
{"code": "import numpy as np\rnums = np.array([[5.54, 3.38, 7.99],\r              [3.54, 8.32, 6.99],\r              [1.54, 2.39, 9.29]])\rprint(\"Original array:\")\rprint(nums)\rn = 8.32\rr = 18.32\rprint(\"\\nReplace elements of the said array which are equal to \",n,\"with\",r)\rprint(np.where(nums == n, r, nums))\rprint(\"\\nReplace elements with of the said array which are less than\",n,\"with\",r)\rprint(np.where(nums < n, r, nums))\rprint(\"\\nReplace elements with of the said array which are greater than\",n,\"with\",r)\rprint(np.where(nums > n, r, nums))\r", "nl": "Write a NumPy program to replace all numbers in a given array which is equal, less and greater to a given number. "}
{"code": "def bifurcate_by(lst, fn):\r  return [\r    [x for x in lst if fn(x)],\r    [x for x in lst if not fn(x)]\r  ]\rprint(bifurcate_by(['red', 'green', 'black', 'white'], lambda x: x[0] == 'w'))\r", "nl": "Write a Python program to split values into two groups, based on the result of the given filtering function. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.loc[df['who']=='child'].isnull().sum()\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and check missing values of children. "}
{"code": "my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]\rprint(\"Original List: \")\rprint(my_list)\rmy_list.sort(key=lambda e: e['key']['subkey'], reverse=True)\rprint(\"Sorted List: \")\rprint(my_list)\r", "nl": "Write a Python program to sort a list of nested dictionaries. "}
{"code": "import numpy as np\rx = np.array([10, 10, 20, 20, 30, 30])\rprint(\"Original array:\")\rprint(x)\rprint(\"Unique elements of the above array:\")\rprint(np.unique(x))\rx = np.array([[1, 1], [2, 3]])\rprint(\"Original array:\")\rprint(x)\rprint(\"Unique elements of the above array:\")\rprint(np.unique(x))\r", "nl": "Write a NumPy program to get the unique elements of an array. "}
{"code": "def remove_column(nums, n):\r   result = [i.pop(n) for i in nums]\r   return result \r\rlist1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\rn = 0\rprint(\"Original Nested list:\")\rprint(list1)\rprint(\"Extract 1st column:\")\rprint(remove_column(list1, n))\r\rlist2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]\rn = 2\rprint(\"\\nOriginal Nested list:\")\rprint(list2)\rprint(\"Extract 3rd column:\")\rprint(remove_column(list2, n))\r", "nl": "Write a Python program to extract a specified column from a given nested list. "}
{"code": "x = 3.1415926\ry = -12.9999\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number with no decimal places: \"+\"{:.0f}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number with no decimal places: \"+\"{:.0f}\".format(y));\rprint()\r", "nl": "Write a Python program to print the following floating numbers with no decimal places. "}
{"code": "dict_num = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\rprint(\"key  value  count\")\rfor count, (key, value) in enumerate(dict_num.items(), 1):\r    print(key,'   ',value,'    ', count)\r", "nl": "Write a Python program to get the key, value and item in a dictionary. "}
{"code": "import numpy as np\rx = np.arange(12, 38)\rprint(x)\r", "nl": "Write a NumPy program to create an array with values ranging from 12 to 38."}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_csv('titanic.csv')\rresult = df.pivot_table( 'survived' , [ 'sex' , 'alone' ] , 'class' )\rprint(result)\r", "nl": "Write a Pandas program to create a Pivot table and separate the gender according to whether they traveled alone or not to get the probability of survival. "}
{"code": "def strings_to_listOflists(str):\r    result = map(list, str)\r    return list(result)\r\rcolors = [\"Red\", \"Green\", \"Black\", \"Orange\"]\rprint('Original list of strings:')\rprint(colors)\rprint(\"\\nConvert the said list of strings into list of lists:\")\rprint(strings_to_listOflists(colors))\r", "nl": "Write a Python program to convert a given list of strings into list of lists using map function. "}
{"code": "def chars_mix_up(a, b):\r  new_a = b[:2] + a[2:]\r  new_b = a[:2] + b[2:]\r\r  return new_a + ' ' + new_b\rprint(chars_mix_up('abc', 'xyz'))\r", "nl": "Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. "}
{"code": "import pandas as pd\rfrom dateutil.parser import parse\rdate_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])\rprint(\"Original Series:\")\rprint(date_series)\rdate_series = date_series.map(lambda x: parse(x))\rprint(\"Day of month:\")\rprint(date_series.dt.day.tolist())\rprint(\"Day of year:\")\rprint(date_series.dt.dayofyear.tolist())\rprint(\"Week number:\")\rprint(date_series.dt.weekofyear.tolist())\rprint(\"Day of week:\")\rprint(date_series.dt.weekday_name.tolist())\r", "nl": "Write a Pandas program to get the day of month, day of year, week number and day of week from a given series of date strings. "}
{"code": "#Ref.https://bit.ly/3iJWk3w\rfrom __future__ import annotations\r\rdef rec_insertion_sort(collection: list, n: int):\r    # Checks if the entire collection has been sorted\r    if len(collection) <= 1 or n <= 1:\r        return\r    insert_next(collection, n - 1)\r    rec_insertion_sort(collection, n - 1)\rdef insert_next(collection: list, index: int):\r    # Checks order between adjacent elements\r    if index >= len(collection) or collection[index - 1] <= collection[index]:\r        return\r    # Swaps adjacent elements since they are not in ascending order\r    collection[index - 1], collection[index] = (\r        collection[index],\r        collection[index - 1],\r    )\r    insert_next(collection, index + 1)\rnums = [4, 3, 5, 1, 2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Insertion Sort the said list becomes:\")\rrec_insertion_sort(nums, len(nums))\rprint(nums)\rnums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Insertion Sort the said list becomes:\")\rrec_insertion_sort(nums, len(nums))\rprint(nums)\rnums = [1.1, 1, 0, -1, -1.1, .1]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"After applying Recursive Insertion Sort the said list becomes:\")\rrec_insertion_sort(nums, len(nums))\rprint(nums)\r", "nl": "Write a Python program to sort a given collection of numbers and its length in ascending order using Recursive Insertion Sort. "}
{"code": "import numpy as np\rnp.random.seed(42) \rstudent = np.array([['stident_id', 'Class', 'Name'],\r              ['01', 'V', 'Debby Pramod'],\r              ['02', 'V', 'Artemiy Ellie'],\r              ['03', 'V', 'Baptist Kamal'],\r              ['04', 'V', 'Lavanya Davide'],\r              ['05', 'V', 'Fulton Antwan'],\r              ['06', 'V', 'Euanthe Sandeep'],\r              ['07', 'V', 'Endzela Sanda'],\r              ['08', 'V', 'Victoire Waman'],\r              ['09', 'V', 'Briar Nur'],\r              ['10', 'V', 'Rose Lykos']]) \rprint(\"Original array:\")\rprint(student)\rnp.random.shuffle(student[2:8])\rprint(\"Shuffle the said array rows starting from 3rd to 9th\")\rprint(student)\r", "nl": "Write a NumPy program to create a 11x3 array filled with student information (id, class and name) and shuffle the said array rows starting from 3"}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nSighting years of the unidentified flying object:\")\rdf[\"Year\"] = df.Date_time.dt.year\rprint(df.head(10))\r", "nl": "Write a Pandas program to get all the sighting years of the unidentified flying object (ufo) and create the year as column. "}
{"code": "myDict = {'a':1,'b':2,'c':3,'d':4}\rprint(myDict)\rif 'a' in myDict: \r    del myDict['a']\rprint(myDict)\r", "nl": "Write a Python program to remove a key from a dictionary. "}
{"code": "from collections import Counter\rimport re\rtext = \"\"\"The Python Software Foundation (PSF) is a 501(c)(3) non-profit \rcorporation that holds the intellectual property rights behind\rthe Python programming language. We manage the open source licensing \rfor Python version 2.1 and later and own and protect the trademarks \rassociated with Python. We also run the North American PyCon conference \rannually, support other Python conferences around the world, and \rfund Python related development with our grants program and by funding \rspecial projects.\"\"\"\rwords = re.findall('\\w+',text)\rprint(Counter(words).most_common(10))\r", "nl": "Write a Python program to find the occurrences of 10 most common words in a given text. "}
{"code": "from geopy.geocoders import Nominatim\rgeolocator = Nominatim(user_agent=\"geoapiExercises\")\rdef city_state_country(coord):\r    location = geolocator.reverse(coord, exactly_one=True)\r    address = location.raw['address']\r    city = address.get('city', '')\r    state = address.get('state', '')\r    country = address.get('country', '')\r    return city, state, country\rprint(city_state_country(\"47.470706, -99.704723\"))\r", "nl": "Write a Python function to get the city, state and country name of a specified latitude and longitude using Nominatim API and Geopy package. "}
{"code": "import pandas as pd\rimport datetime\rfrom datetime import datetime, date\rsdt = datetime(2020, 1, 1)\redt = datetime(2020, 12, 31)\rdateset = pd.period_range(sdt, edt, freq='M')\rprint(\"All monthly boundaries of a given year:\")\rprint(dateset) \rprint(\"\\nStart and end time for each period object in the said index:\")\rfor d in dateset: \r    print (\"{0} {1}\".format(d.start_time, d.end_time)) \r", "nl": "Write a Pandas program to create a period index represent all monthly boundaries of a given year. Also print start and end time for each period object in the said index. "}
{"code": "student_data  = [('Alberto Franco','15/05/2002','35kg'), ('Gino Mcneill','17/05/2002','37kg'), ('Ryan Parkes','16/02/1999', '39kg'), ('Eesha Hinton','25/09/1998', '35kg')]\rprint(\"Original data:\")\rprint(student_data)\rstudents_data_name = list(map(lambda x:x[0], student_data))\rstudents_data_dob = list(map(lambda x:x[1], student_data))\rstudents_data_weight = list(map(lambda x:int(x[2][:-2]), student_data))\rprint(\"\\nStudent name:\")\rprint(students_data_name)\rprint(\"Student name:\")\rprint(students_data_dob)\rprint(\"Student weight:\")\rprint(students_data_weight)\r", "nl": "Write a Python program to create a new list taking specific elements from a tuple and convert a string value to integer. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current Datetime:\")\rprint(a)\rprint(\"\\nFloating-point representation of the said Arrow object:\")\rf = arrow.utcnow().float_timestamp\rprint(f) \r", "nl": "Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. "}
{"code": "import numpy as np    \rimport matplotlib.pyplot as plt\rarr = np.random.randint(1, 50, 10)\ry, x = np.histogram(arr, bins=np.arange(51))\rfig, ax = plt.subplots()\rax.plot(x[:-1], y)\rfig.show()\r", "nl": "Write a NumPy program to compute the line graph of a set of data. "}
{"code": "import re\rstr1 = 'KDeoALOklOOHserfLoAJSIskdsf'\rprint(\"Original string:\")\rprint(str1)\rprint(\"After removing lowercase letters, above string becomes:\")\rremove_lower = lambda text: re.sub('[a-z]', '', text)\rresult =  remove_lower(str1)\rprint(result)\r", "nl": "Write a Python program to remove lowercase substrings from a given string. "}
{"code": "str1 = 'The quick brown fox jumps over the lazy dog.'\rprint()\rprint(str1.count(\"fox\"))\rprint()\r", "nl": "Write a Python program to count occurrences of a substring in a string. "}
{"code": "import csv\rfields = []\rrows = []\rwith open('departments.csv', newline='') as csvfile:\r data = csv.reader(csvfile, delimiter=' ', quotechar=',')\r # Following command skips the first row of the CSV file.\r fields = next(data)\r for row in data:\r   print(', '.join(row))\rprint(\"\\nTotal no. of rows: %d\"%(data.line_num))\rprint('Field names are:')\rprint(', '.join(field for field in fields))\r", "nl": "Write a Python program that reads each row of a given csv file and skip the header of the file. Also print the number of rows and the field names. "}
{"code": "import pandas as pd\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'weight': [35, 32, 33, 30, 31, 32]},\r     index = ['t1', 't2', 't3', 't4', 't5', 't6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nSet school code 's004' to 's005':\")\rdf.at['t6', 'school_code'] = 's005'\rprint(df)\rprint(\"\\nSet date_of_birth of 'Alberto Franco' to '16/05/2002':\")\rdf.at['t1', 'date_of_birth'] = '16/05/2002'\rprint(df)\r", "nl": "Write a Pandas program to set value in a specific cell in a given dataframe using index. "}
{"code": "from urllib.request import urlopen\r\nfrom bs4 import BeautifulSoup\r\nhtml = urlopen('https://www.wikipedia.org/')\r\nbs = BeautifulSoup(html, \"html.parser\")\r\nnameList = bs.findAll('a', {'class' : 'link-box'})\r\nfor name in nameList:\r\n  print(name.get_text())\r\n  ", "nl": " Write a Python program to check whether a page contains a title or not. "}
{"code": "import pandas as pd\rdtr = pd.date_range('2018-01-01', periods=12, freq='H')\rprint(\"Hourly frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='min')\rprint(\"\\nMinutely frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='S')\rprint(\"\\nSecondly frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='2H')\rprint(\"nMultiple Hourly frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='5min')\rprint(\"\\nMultiple Minutely frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='BQ')\rprint(\"\\nMultiple Secondly frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='w')\rprint(\"\\nWeekly frequency:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='2h20min')\rprint(\"\\nCombine together day and intraday offsets-1:\")\rprint(dtr)\rdtr = pd.date_range('2018-01-01', periods=12, freq='1D10U')\rprint(\"\\nCombine together day and intraday offsets-2:\")\rprint(dtr)\r", "nl": "Write a Pandas program to generate sequences of fixed-frequency dates and time spans. "}
{"code": "import collections\rnum = [2,2,4,6,6,8,6,10,4]\rprint(sum(collections.Counter(num).values()))\r", "nl": "Write a Python program to sum of all counts in a collections."}
{"code": "def find_Index(str1, pos):\r    if len(pos) > len(str1):\r        return 'Not found'\r\r    for i in range(len(str1)):\r\r        for j in range(len(pos)):\r\r            if str1[i + j] == pos[j] and j == len(pos) - 1:\r                return i\r                \r            elif str1[i + j] != pos[j]:\r                break\r\r    return 'Not found'\rprint(find_Index(\"Python Exercises\", \"Ex\"))\rprint(find_Index(\"Python Exercises\", \"yt\"))\rprint(find_Index(\"Python Exercises\", \"PY\"))\r", "nl": "Write a Python program to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found'. "}
{"code": "import pandas as pd\rimport numpy as np\rdf1 = pd.read_excel('E:\\employee.xlsx',sheet_name=0)\rdf2 = pd.read_excel('E:\\employee.xlsx',sheet_name=1)\rdf3 = pd.read_excel('E:\\employee.xlsx',sheet_name=2)\rdf = pd.concat([df1, df2, df3])\rdf.to_excel('e:\\output.xlsx', index=False)\r", "nl": "Write a Pandas program to import three datasheets from a given excel data (employee.xlsx ) into a single dataframe and export the result into new Excel file. "}
{"code": "import collections, re\rn = int(input(\"Number of subjects: \"))\ritem_order = collections.OrderedDict()\rfor i in range(n):\r   sub_marks_list = re.split(r'(\\d+)$',input(\"Input Subject name and marks: \").strip())\r   subject_name = sub_marks_list[0]\r   item_price = int(sub_marks_list[1])\r   if subject_name not in item_order:\r       item_order[subject_name]=item_price\r   else:\r       item_order[subject_name]=item_order[subject_name]+item_price\r           \rfor i in item_order:\r   print(i+str(item_order[i]))\r", "nl": "Write a Python program that accept name of given subject and marks. Input number of subjects in first line and subject name,marks separated by a space in next line. Print subject name and marks in order of its first occurrence. "}
{"code": "def match_words(words):\r  ctr = 0\r\r  for word in words:\r    if len(word) > 1 and word[0] == word[-1]:\r      ctr += 1\r  return ctr\r\rprint(match_words(['abc', 'xyz', 'aba', '1221']))\r", "nl": "Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. "}
{"code": "import pandas as pd\rimport numpy as np\rnums = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\rprint(\"Original series:\")\rprint(nums)\rprint(\"\\nPositions of the values surrounded by smaller values on both sides:\")\rtemp = np.diff(np.sign(np.diff(nums)))\rresult = np.where(temp == -2)[0] + 1\rprint(result)\r", "nl": "Write a Pandas program to find the positions of the values neighboured by smaller values on both sides in a given series. "}
{"code": "x = 3\ry = 123\rprint(\"\\nOriginal Number: \", x)\rprint(\"Formatted Number(right padding, width 2): \"+\"{:*< 3d}\".format(x));\rprint(\"Original Number: \", y)\rprint(\"Formatted Number(right padding, width 6): \"+\"{:*< 7d}\".format(y));\rprint()\r", "nl": "Write a Python program to print the following integers with '*' on the right of specified width. "}
{"code": "import numpy as np\rimport numpy as np\ra = [1, 2, 3, 4]\rprint(\"Original array\")\rprint(a)\rx = np.asfarray(a)\rprint(\"Array converted to a float type:\")\rprint(x)\r", "nl": "Write a NumPy program to convert an array to a float type. "}
{"code": "from operator import eq\rdef count_same_pair(nums1, nums2):\r    result = sum(map(eq, nums1, nums2))\r    return result\r\rnums1 = [1,2,3,4,5,6,7,8]\rnums2 = [2,2,3,1,2,6,7,9]\rprint(\"Original lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nNumber of same pair of the said two given lists:\")\rprint(count_same_pair(nums1, nums2))\r", "nl": "Write a Python program to count the same pair in two given lists. use map() function. "}
{"code": "def three_sum(nums):\r  result = []\r  nums.sort()\r  for i in range(len(nums)-2):\r    if i> 0 and nums[i] == nums[i-1]:\r      continue\r    l, r = i+1, len(nums)-1\r    while l < r:\r      s = nums[i] + nums[l] + nums[r]\r      if s > 0:\r        r -= 1\r      elif s < 0:\r          l += 1\r      else:\r        # found three sum\r        result.append((nums[i], nums[l], nums[r]))\r        # remove duplicates\r        while l < r and nums[l] == nums[l+1]:\r          l+=1\r          while l < r and nums[r] == nums[r-1]:\r            r -= 1\r            l += 1\r            r -= 1\r          return result\r\rx = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]\rprint(three_sum(x))\r", "nl": "Write a Python program to find unique triplets whose three elements gives the sum of zero from an array of n integers. "}
{"code": "import csv     \rfw = open(\"test.csv\", \"w\", newline='')\rwriter = csv.writer(fw, delimiter = \",\")\rwriter.writerow([\"a\",\"b\",\"c\"])\rwriter.writerow([\"d\",\"e\",\"f\"])\rwriter.writerow([\"g\",\"h\",\"i\"])\rfw.close()\r \rfr = open(\"test.csv\", \"r\")\rcsv = csv.reader(fr, delimiter = \",\")\rfor row in csv:\r  print(row) \rfr.close()\r", "nl": "Write a Python program to write (without writing separate lines between rows) and read a CSV file with specified delimiter. Use csv.reader"}
{"code": "import itertools as it\rdef drop_while(nums):\r    return it.takewhile(lambda x : x < 0, nums)\rnums = [-1,-2,-3,4,-10,2,0,5,12]\rprint(\"Original list: \",nums)\rresult = drop_while(nums)\rprint(\"Drop elements from the said list as long as the elements are negative\\n\",list(result))\r#Alternate solution\rdef negative_num(x):\r    return x < 0\rdef drop_while(nums):\r    return it.dropwhile(negative_num, nums)\rnums = [-1,-2,-3,4,-10,2,0,5,12]\rprint(\"Original list: \",nums)\rresult = drop_while(nums)\rprint(\"Drop elements from the said list as long as the elements are negative\\n\",list(result))\r", "nl": "Write a Python program to make an iterator that drops elements from the iterable as long as the elements are negative; afterwards, returns every element. "}
{"code": "import pandas as pd\rimport numpy as np\rimport seaborn as sns\rimport matplotlib.pyplot as plt\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rplt.figure(figsize=(16,10))\rsns.heatmap(df.isnull(), cbar=False, cmap=\"YlGnBu\")\rplt.show()\r", "nl": "Write a Pandas program to create a hitmap for more information about the distribution of missing values in a given DataFrame. "}
{"code": "import pandas as pd\rdata1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\r                     'key2': ['K0', 'K1', 'K0', 'K1'],\r                     'P': ['P0', 'P1', 'P2', 'P3'],\r                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) \rdata2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\r                      'key2': ['K0', 'K0', 'K0', 'K0'],\r                      'R': ['R0', 'R1', 'R2', 'R3'],\r                      'S': ['S0', 'S1', 'S2', 'S3']})\rprint(\"Original DataFrames:\")\rprint(data1)\rprint(\"--------------------\")\rprint(data2)\rprint(\"\\nMerged Data (many-to-many join case):\")\rresult = pd.merge(data1, data2, on='key1')\rprint(result)\r", "nl": "Write a Pandas program to create a combination from two dataframes where a column id combination appears more than once in both dataframes."}
{"code": "import arrow\rprint(arrow.utcnow())\rprint(\"Hour ceiling:\")\rprint(arrow.utcnow().ceil('hour'))\rprint(\"\\nMinute ceiling:\")\rprint(arrow.utcnow().ceil('minute'))\rprint(\"\\nSecond ceiling:\")\rprint(arrow.utcnow().ceil('second')) \r", "nl": "Write a Python program to create a new Arrow object, representing the \"ceiling\" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. "}
{"code": "def moveSpaces(str1): \r    no_spaces = [char for char in str1 if char!=' ']   \r    space= len(str1) - len(no_spaces)\r    # Create string with spaces\r    result = ' '*space    \r    return result + ''.join(no_spaces)\r  \rs1 = \"Python Exercises\"\rprint(\"Original String:\\n\",s1)\r\rprint(\"\\nAfter moving all spaces to the front:\")\rprint(moveSpaces(s1))\r", "nl": "Write a Python program to move all spaces to the front of a given string in single traversal. "}
{"code": "def test_includes_all(nums, lsts):\r  for x in lsts:\r    if x not in nums:\r      return False\r  return True\rprint(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))\rprint(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))\r", "nl": "Write a Python program to check if all the elements of a list are included in another given list. "}
{"code": "import numpy as np\rx = np.eye(3)\rprint(x)\r", "nl": "Write a NumPy program to create a 3x3 identity matrix, i.e. diagonal elements are 1, the rest are 0. "}
{"code": "nums = []\rfor i in range(3):\r    nums.append([])\r    for j in range(1, 4):\r        nums[i].append(j)\rprint(\"3X3 grid with numbers:\")\rprint(nums)\r", "nl": "Write a Python program to create a 3X3 grid with numbers. "}
{"code": "sample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\rsample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\rprint(\"Result:\")\rprint(len(''.join(sample_names)))\r", "nl": "Write a Python program that sum the length of the names of a given list of names after removing the names that starts with an lowercase letter. Use lambda function. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Year:\")\rprint(a.year)\rprint(\"\\nMonth:\")\rprint(a.month)\rprint(\"\\nDate:\")\rprint(a.day)\r", "nl": "Write a Python program to extract year, month and date value from current datetime using arrow module. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Open','Close','High','Low']]\r#df3 = df2.set_index('Date')\rplt.figure(figsize=(25,25))\rdf2.plot.hist(alpha=0.5)\rplt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')\rplt.show()\r", "nl": "Write a Pandas program to create a histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. "}
{"code": "#https://bit.ly/2lVhlLX\r\n# via: https://analytics.usa.gov/\r\nimport requests\r\nurl = 'https://analytics.usa.gov/data/live/realtime.json'\r\nj = requests.get(url).json()\r\nprint(\"Number of people visiting a U.S. government website-\")\r\nprint(\"Active Users Right Now:\")\r\nprint(j['data'][0]['active_visitors'])\r\n  ", "nl": " Write a Python program to list all language names and number of related articles in the order they appear in wikipedia.org. "}
{"code": "import numpy as np    \rprint(\"\\nOriginal arrays:\")\rx = np.array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\r       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\rprint(x)\rprint(\"\\nNumber of dimensions:\")\rprint(x.ndim)\rprint(\"Number of elements:\")\rprint(x.size)\rprint(\"Number of bytes for each element in the said array:\")\rprint(x.itemsize) \r", "nl": "Write a NumPy program to count the number of dimensions, number of elements and number of bytes for each element in a given array. "}
{"code": "import pandas as pd\rq_start_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQS-JUN')\rq_end_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQ-JUN')\rprint(\"All the business quarterly begin dates of 2020:\")\rprint(q_start_dates.values)\rprint(\"\\nAll the business quarterly end dates of 2020:\")\rprint(q_end_dates.values)\r", "nl": "Write a Pandas program to find the all the business quarterly begin and end dates of a specified year. "}
{"code": "def sum_math_v_vi_average(list_of_dicts):\r    for d in list_of_dicts:\r        n1 = d.pop('V')\r        n2 = d.pop('VI')\r        d['V+VI'] = (n1 + n2)/2\r    return list_of_dicts \rstudent_details= [\r  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},\r  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},\r  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}\r]\rprint(sum_math_v_vi_average(student_details))\r", "nl": "Write a Python program to replace dictionary values with their average. "}
{"code": "def convert_to_int(lst):\r    result = [dict([a, int(x)] for a, x in b.items()) for b in lst]\r    return result\r\rdef convert_to_float(lst):\r    result = [dict([a, float(x)] for a, x in b.items()) for b in lst]\r    return result\r\rnums =[{ 'x':'10' , 'y':'20' , 'z':'30' }, { 'p':'40', 'q':'50', 'r':'60'}]\rprint(\"Original list:\")\rprint(nums)\rprint(\"\\nString values of a given dictionary, into integer types:\")\rprint(convert_to_int(nums))\rnums =[{ 'x':'10.12', 'y':'20.23', 'z':'30'}, { 'p':'40.00', 'q':'50.19', 'r':'60.99'}]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"\\nString values of a given dictionary, into float types:\")\rprint(convert_to_float(nums))\r", "nl": "Write a Python program to convert string values of a given dictionary, into integer/float datatypes. "}
{"code": "def remove_words(list1, remove_words):\r    for word in list(list1):\r        if word in remove_words:\r            list1.remove(word)\r    return list1        \rcolors = ['red', 'green', 'blue', 'white', 'black', 'orange']\rremove_colors = ['white', 'orange']\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nRemove words:\")\rprint(remove_colors)\rprint(\"\\nAfter removing the specified words from the said list:\")\rprint(remove_words(colors, remove_colors))\r", "nl": "Write a Python program to remove specific words from a given list. "}
{"code": "import numpy as np\rx1 = np.array(['Hello', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)\rx2 = np.array(['Hello', 'php', 'Java', 'examples', 'html'], dtype=np.str)\rprint(\"\\nArray1:\")\rprint(x1)\rprint(\"Array2:\")\rprint(x2)\rprint(\"\\nEqual test:\")\rr = np.char.equal(x1, x2)\rprint(r)\rprint(\"\\nNot equal test:\")\rr = np.char.not_equal(x1, x2)\rprint(r)\rprint(\"\\nLess equal test:\")\rr = np.char.less_equal(x1, x2)\rprint(r)\rprint(\"\\nGreater equal test:\")\rr = np.char.greater_equal(x1, x2)\rprint(r)\rprint(\"\\nLess test:\")\rr = np.char.less(x1, x2)\rprint(r)\r", "nl": "Write a NumPy program to test equal, not equal, greater equal, greater and less test of all the elements of two given arrays. "}
{"code": "def reverse_list_lists(nums):\r    for l in nums:\r        l.sort(reverse = True)\r    return nums    \rnums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\rprint(\"Original list of lists:\")\rprint(nums)\rprint(\"\\nReverse each list in the said list of lists:\")\rprint(reverse_list_lists(nums))\r", "nl": "Write a Python program to reverse each list in a given list of lists. "}
{"code": "import pandas as pd\rimport numpy as np\rnum_series = pd.Series(np.arange(15) + np.random.normal(1, 10, 15))\rprint(\"Original series:\")\rprint(num_series)\rautocorrelations = [num_series.autocorr(i).round(2) for i in range(11)]\rprint(\"\\nAutocorrelations of the said series:\")\rprint(autocorrelations[1:])\r", "nl": "Write a Pandas program to compute the autocorrelations of a given numeric series. "}
{"code": "import numpy as np\rx = np.array(['Python\\Exercises, Practice, Solution'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rr = np.char.splitlines(x)\rprint(r)\r", "nl": "Write a NumPy program to split the element of a given array to multiple lines. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from w3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc, 'html.parser')\rprint(\"Text of the first <a> tag:\")\rprint(soup.find('a').text)\r\r", "nl": "Write a Python program to find the text of the first <a> tag of a given html text. "}
{"code": "from collections import Counter\rd1 = {'a': 100, 'b': 200, 'c':300}\rd2 = {'a': 300, 'b': 200, 'd':400}\rd = Counter(d1) + Counter(d2)\rprint(d)\r", "nl": "Write a Python program to combine two dictionary adding values for common keys. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rresult = df.sort_values('hire_date')\rresult\r", "nl": "Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and to sort the records by the hire_date column. "}
{"code": "import numpy as np  \rnp.random.seed(10)\rprint(np.random.rand(40))\r", "nl": "Write a NumPy program to create a one dimensional array of forty pseudo-randomly generated values. Select random numbers from a uniform distribution between 0 and 1. "}
{"code": "import numpy as np\rprint(\"numpy.float32 to python float\")\rx = np.float32(0)\rprint(type(x))\rpyval = x.item()\rprint(type(pyval))\r", "nl": "Write a NumPy program to convert numpy dtypes to native python types. "}
{"code": "def every_nth(nums, nth):\r  return nums[nth - 1::nth]\rprint(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\rprint(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\rprint(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\rprint(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\r", "nl": "Write a Python program to get the every nth element in a given list. "}
{"code": "import numpy as np\rprint(\"Number of weekdays in March 2017:\")\rprint(np.busday_count('2017-03', '2017-04'))\r", "nl": "Write a NumPy program to find the number of weekdays in March 2017. "}
{"code": "def sort_mixed_list(mixed_list):\r    int_part = sorted([i for i in mixed_list if type(i) is int])\r    str_part = sorted([i for i in mixed_list if type(i) is str])\r    return int_part + str_part\rmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]\rprint(\"Original list:\")\rprint(mixed_list)\rprint(\"\\nSort the said  mixed list of integers and strings:\")\rprint(sort_mixed_list(mixed_list))\r", "nl": "Write a Python program to sort a given mixed list of integers and strings. Numbers must be sorted before strings. "}
{"code": "def reverse_string(str1):\r    return ''.join(reversed(str1))\rprint()\rprint(reverse_string(\"abcdef\"))\rprint(reverse_string(\"Python Exercises.\"))\rprint()\r", "nl": "Write a Python program to reverse a string. "}
{"code": "color = ['Red', 'Green', 'Black']\rprint(\"Original List: \",color)\rcolor = [v for elt in color for v in ('c', elt)]\rprint(\"Original List: \",color)\r", "nl": "Write a Python program to insert an element before each element of a list. "}
{"code": "import numpy as np\rnum = np.arange(36)\rarr1 = np.reshape(num, [4, 9])\rprint(\"Original array:\")\rprint(arr1)\rresult  = np.where(np.any(arr1>10, axis=1))\rprint(\"\\nRow numbers where at least one item is larger than 10:\")\rprint(result)\r", "nl": "Write a NumPy program to get the row numbers in given array where at least one item is larger than a specified value. "}
{"code": "import numpy as np\rstudent_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])\rprint(\"Original array:\")\rprint(student_id)\ri = np.argsort(student_id)\rprint(\"Indices of the sorted elements of a given array:\")\rprint(i)\r", "nl": "Write a NumPy program to get the indices of the sorted elements of a given array. "}
{"code": "def test(list1):\r    result =   [tuple(v for v in i if not isinstance(v, str)) for i in list1]\r    return list(result)\r\rmarks = [(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]\rprint(\"\\nOriginal list:\")\rprint(marks)\rprint(\"\\nRemove all strings from the said list of tuples:\")\rprint(test(marks))\r", "nl": "Write a Python program to remove all strings from a given list of tuples. "}
{"code": "from collections import Counter\rx = Counter({'Math':81, 'Physics':83, 'Chemistry':87})\rprint(x.most_common())\r", "nl": "Write a Python program to sort Counter by value. "}
{"code": "import re\ritems = [\"example (.com)\", \"w3resource\", \"github (.com)\", \"stackoverflow (.com)\"]\rfor item in items:\r    print(re.sub(r\" ?\\([^)]+\\)\", \"\", item))\r\t", "nl": "Write a Python program to remove the parenthesis area in a string. "}
{"code": "import numpy as np\rx = np.arange(12).reshape((2, 6))\rprint(\"\\nOriginal array:\")\rprint(x)\rr1 =  np.median(x)\rprint(\"\\nMedian of said array:\")\rprint(r1)\r", "nl": "Write a NumPy program to compute the median of flattened given array. "}
{"code": "def bytearray_to_hexadecimal(list_val):\r     result = ''.join('{:02x}'.format(x) for x in list_val)  \r     return(result)\r\rlist_val = [111, 12, 45, 67, 109] \rprint(\"Original Bytearray :\")\rprint(list_val)\rprint(\"\\nHexadecimal string:\")\rprint(bytearray_to_hexadecimal(list_val))\r", "nl": "Write a Python program to convert a given Bytearray to Hexadecimal string. "}
{"code": "def max_min_sublist(lst):\r    max_result = (max(lst, key=sum))\r    min_result = (min(lst, key=sum))\r    return max_result,min_result\r\rnums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]\rprint(\"Original list:\")\rprint(nums)\rresult = max_min_sublist(nums)\rprint(\"\\nMaximum sum of sub list of the said list of lists:\")\rprint(result[0])\rprint(\"\\nMinimum sum of sub list of the said list of lists:\")\rprint(result[1])\r", "nl": "Write a Python program to calculate the maximum and minimum sum of a sublist in a given list of lists. "}
{"code": "def sum(x, y):\r    sum = x + y\r    if sum in range(15, 20):\r        return 20\r    else:\r        return sum\r\rprint(sum(10, 6))\rprint(sum(10, 2))\rprint(sum(10, 12))\r", "nl": "Write a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20. "}
{"code": "def decimal_to_binary_list(n):\r    result = [int(x) for x in list('{0:0b}'.format(n))]\r    return result\rn = 8\rprint(\"Original Number:\",n)\rprint(\"Decimal number (\",n,\") to binary list:\")\rprint(decimal_to_binary_list(n))\rn = 45\rprint(\"\\nOriginal Number:\",n)\rprint(\"Decimal number (\",n,\") to binary list:\")\rprint(decimal_to_binary_list(n))\rn = 100\rprint(\"\\nOriginal Number:\",n)\rprint(\"Decimal number (\",n,\") to binary list:\")\rprint(decimal_to_binary_list(n))\r", "nl": "Write a Python program to convert a given decimal number to binary list. "}
{"code": "import pandas as pd\rds1 = pd.Series([2, 4, 6, 8, 10])\rds2 = pd.Series([1, 3, 5, 7, 10])\rprint(\"Series1:\")\rprint(ds1)\rprint(\"Series2:\")\rprint(ds2)\rprint(\"Compare the elements of the said Series:\")\rprint(\"Equals:\")\rprint(ds1 == ds2)\rprint(\"Greater than:\")\rprint(ds1 > ds2)\rprint(\"Less than:\")\rprint(ds1 < ds2)\r", "nl": "Write a Pandas program to compare the elements of the two Pandas Series. "}
{"code": "import numpy as np\ra = np.arange(1, 10).reshape((3, 3))\rprint(\"Original array:\")\rprint(a)\rprint(\"Frobenius norm and the condition number:\")\rprint(np.linalg.norm(a, 'fro'))\rprint(np.linalg.cond(a, 'fro'))\r", "nl": "Write a NumPy program to calculate the Frobenius norm and the condition number of a given array. "}
{"code": "import itertools\rdef permutations_all(l):\r    for values in itertools.permutations(l):\r        print(values)\r\rpermutations_all([1])\rprint(\"\\n\")\rpermutations_all([1,2])\rprint(\"\\n\")\rpermutations_all([1,2,3])\r", "nl": "Write a Python program to generate all possible permutations of n different objects. "}
{"code": "import arrow\rprint(\"Current datetime:\")\rprint(arrow.utcnow())\rearlier = arrow.utcnow().shift(hours=-4)\rprint(earlier.humanize())\rlater = earlier.shift(hours=3)\rprint(later.humanize(earlier))\r", "nl": "Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. "}
{"code": "import numpy as np\rx = np.arange(21)\rprint(\"Original vector:\")\rprint(x)\rprint(\"After changing the sign of the numbers in the range from 9 to 15:\")\rx[(x >= 9) & (x <= 15)] *= -1\rprint(x)\r", "nl": "Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range from 9 to 15. "}
{"code": "import numpy as np\rnums = np.array([1.2e-7, 1.5e-6, 1.7e-5])\rprint(\"Original arrays:\")\rprint(nums)\rprint(\"Set the precision value to 10:\")\rnp.set_printoptions(suppress=True, precision=10)\rprint(nums)\r", "nl": "Write a NumPy program to create an array using scientific notation numbers. Set the precision value to 6 and print the array. "}
{"code": "import pandas as pd\rdtt = pd.date_range('2018-01-01', periods=3, freq='H')\rdtt = dtt.tz_localize('UTC')\rprint(dtt)\rprint(\"\\nFrom UTC to America/Los_Angeles:\")\rdtt = dtt.tz_convert('America/Los_Angeles')\rprint(dtt)\r", "nl": "Write a Pandas program to manipulate and convert date times with timezone information. "}
{"code": "def is_even_num(l):\r    enum = []\r    for n in l:\r        if n % 2 == 0:\r            enum.append(n)\r    return enum\rprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\r", "nl": "Write a Python program to print the even numbers from a given list. "}
{"code": "import pandas as pd\rdf = pd.DataFrame( {'X' : [10, 10, 10, 20, 30, 30, 10], \r                    'Y' : [10, 15, 11, 20, 21, 12, 14], \r                    'Z' : [22, 20, 18, 20, 13, 10, 0]})\rprint(\"Original DataFrame:\")\rprint(df)\rresult= df.groupby('X').aggregate(lambda tdf: tdf.unique().tolist())\rprint(result)\r", "nl": "Write a Pandas program to split the following dataframe into groups based on first column and set other column values into a list of values. "}
{"code": "def sort_by_indexes(lst, indexes, reverse=False):\r  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \\\r          x[0], reverse=reverse)]\r\rl1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']\rl2 = [3, 2, 6, 4, 1, 5]\rprint(sort_by_indexes(l1, l2))  \rprint(sort_by_indexes(l1, l2, True))\r", "nl": "Write a Python program to sort one list based on another list containing the desired indexes. "}
{"code": "d=dict()\rfor x in range(1,16):\r    d[x]=x**2\rprint(d)  \r", "nl": "Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. "}
{"code": "import types\rclass C:\r    def x():\r        return 1\r    def y():\r        return 1    \r        \rdef b():\r    return 2\r\rprint(isinstance(C().x, types.MethodType))\rprint(isinstance(C().y, types.MethodType))\rprint(isinstance(b, types.MethodType))\rprint(isinstance(max, types.MethodType))\rprint(isinstance(abs, types.MethodType))\r", "nl": "Write a Python program to check if a given value is a method of a user-defined class. Use types.MethodType()"}
{"code": "def printValues():\r\tl = list()\r\tfor i in range(1,31):\r\t\tl.append(i**2)\r\tprint(l[5:])\rprintValues()\r", "nl": "Write a Python program to generate and print a list except for the first 5 elements, where the values are square of numbers between 1 and 30 (both included). "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rdf2 = df.set_index(['hire_date'])\rresult = df2[\"2005\"]\rresult\r", "nl": "Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees of a specified year. "}
{"code": "import collections\r# declare an empty deque object\rdq_object = collections.deque()\r# Add elements to the deque - left to right\rdq_object.append(2)\rdq_object.append(4)\rdq_object.append(6)\rdq_object.append(8)\rdq_object.append(10)\rprint(\"Deque before rotation:\")\rprint(dq_object)\r# Rotate once in negative direction\rdq_object.rotate(-1)\rprint(\"\\nDeque after 1 negative rotation:\")\rprint(dq_object)\r# Rotate twice in negative direction\rdq_object.rotate(-2)\rprint(\"\\nDeque after 2 negative rotations:\")\rprint(dq_object)\r", "nl": "Write a Python program to rotate a Deque Object specified number (negative) of times. "}
{"code": "import numpy as np\rx = np.array([1, 4, 0], float)\ry = np.array([2, 2, 1], float)\rprint(\"Matrices and vectors.\")\rprint(\"x:\")\rprint(x)\rprint(\"y:\")\rprint(y)\rprint(\"Inner product of x and y:\")\rprint(np.inner(x, y))\rprint(\"Outer product of x and y:\")\rprint(np.outer(x, y))\rprint(\"Cross product of x and y:\")\rprint(np.cross(x, y))\r", "nl": "Write a NumPy program to generate inner, outer, and cross products of matrices and vectors. "}
{"code": "import numpy as np\rx = np.arange(50)\rprint(\"Array from 0 to 50:\")\rprint(x)\rx = np.arange(10, 50)\rprint(\"Array from 10 to 50:\")\rprint(x)\r", "nl": "Write a NumPy program to create a 1-D array going from 0 to 50 and an array from 10 to 50. "}
{"code": "import itertools as it\rdef tee_data(iter, n):\r    return it.tee(iter, n)\r#List\rresult = tee_data(['A','B','C','D'], 5)\rprint(\"Generate iterables specified number of times:\")\rfor i in result:\r    print(list(i))\r\r#String\rresult = tee_data(\"Python itertools\", 4)\rprint(\"\\nGenerate iterables specified number of times:\")\rfor i in result:\r    print(list(i))\r", "nl": "Write a Python program to split an iterable and generate iterables specified number of times. "}
{"code": "import numpy as np\rstudent_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])\rstudent_height = np.array([40., 42., 45., 41., 38., 40., 42.0])\r#Sort by studen_id then by student_height\rindices = np.lexsort((student_id, student_height))\rprint(\"Sorted indices:\")\rprint(indices)\rprint(\"Sorted data:\")\rfor n in indices:\r  print(student_id[n], student_height[n])\r", "nl": "Write a NumPy program to sort the student id with increasing height of the students from given students id and height. Print\nthe integer indices that describes the sort order by multiple columns and the sorted data. "}
{"code": "def smallest_num_in_list( list ):\r    min = list[ 0 ]\r    for a in list:\r        if a < min:\r            min = a\r    return min\rprint(smallest_num_in_list([1, 2, -8, 0]))\r", "nl": "Write a Python program to get the smallest number from a list. "}
{"code": "# License: https://bit.ly/2V5W81t \rdef cycleSort(vector):\r    \"Sort a vector in place and return the number of writes.\"\r    writes = 0\r \r    # Loop through the vector to find cycles to rotate.\r    for cycleStart, item in enumerate(vector):\r \r        # Find where to put the item.\r        pos = cycleStart\r        for item2 in vector[cycleStart + 1:]:\r            if item2 < item:\r                pos += 1\r \r        # If the item is already there, this is not a cycle.\r        if pos == cycleStart:\r            continue\r \r        # Otherwise, put the item there or right after any duplicates.\r        while item == vector[pos]:\r            pos += 1\r        vector[pos], item = item, vector[pos]\r        writes += 1\r \r        # Rotate the rest of the cycle.\r        while pos != cycleStart:\r \r            # Find where to put the item.\r            pos = cycleStart\r            for item2 in vector[cycleStart + 1:]:\r                if item2 < item:\r                    pos += 1\r \r            # Put the item there or right after any duplicates.\r            while item == vector[pos]:\r                pos += 1\r            vector[pos], item = item, vector[pos]\r            writes += 1\r \r    return writes\r \r \rif __name__ == '__main__':\r    x = [0, 1, 2, 2, 2, 2, 1, 9, 3.5, 5, 8, 4, 7, 0, 6]\r    xcopy = x[::]\r    writes = cycleSort(xcopy)\r    if xcopy != sorted(x):\r        print('Wrong order!')\r    else:\r        print('%r\\nIs correctly sorted using cycleSort to'\r              '\\n%r\\nUsing %i writes.' % (x, xcopy, writes))\r", "nl": "Write a Python program to sort a list of elements using Cycle sort. "}
{"code": "import numpy as np\rarra_data = np.arange(0,16).reshape((4, 4))\rprint(\"Original array:\")\rprint(arra_data)\rprint(\"\\nExtracted data: First row\")\rprint(arra_data[0])\r", "nl": "Write a NumPy program to extract all the elements of the first row from a given (4x4) array. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport seaborn as sns\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-9-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf1 = df.loc[new_df]\rdf2 = df1[['Date', 'Adj Close']]\rdf3 = df2.set_index('Date')\rdaily_changes = df3.pct_change(periods=1)\rsns.distplot(daily_changes['Adj Close'].dropna(),bins=100,color='purple')\rplt.suptitle('Daily % return of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.grid(True)\rplt.show()\r", "nl": "Write a Pandas program to create a histogram to visualize daily return distribution of Alphabet Inc. stock price between two specific dates. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc,\"lxml\")\rprint(\"\\nBeneath directly head tag:\")\rprint(soup.select(\"head > title\"))\rprint()\rprint(\"\\nBeneath directly p tag:\")\rprint(soup.select(\"p > a\")) \r", "nl": "Write a Python program to find tag(s) directly beneath other tag(s) in a given html document. "}
{"code": "from itertools import product \r\rdef permutations_colors(inp, n):\r    for x in product(inp, repeat=n):\r        c = ''.join(x)\r        print(c,end=', ')\r\rstr1 = \"Red\"\rprint(\"Original String: \",str1)\rprint(\"Permutations of specified elements, drawn from specified values:\")\rn=1\rprint(\"\\nn = 1\")\rpermutations_colors(str1,n)\rn=2\rprint(\"\\nn = 2\")\rpermutations_colors(str1,n)\rn=3\rprint(\"\\nn = 3\")\rpermutations_colors(str1,n)\r\rlst1 = [\"Red\",\"Green\",\"Black\"]\rprint(\"\\n\\nOriginal list: \",lst1)\rprint(\"Permutations of specified elements, drawn from specified values:\")\rn=1\rprint(\"\\nn = 1\")\rpermutations_colors(lst1,n)\rn=2\rprint(\"\\nn = 2\")\rpermutations_colors(lst1,n)\rn=3\rprint(\"\\nn = 3\")\rpermutations_colors(lst1,n)\r", "nl": "Write a Python program generate permutations of specified elements, drawn from specified values. "}
{"code": "def index_on_inner_list(list1, list2):\r    result = list(filter(lambda x: x not in list2, list1))\r    return result\rlist1 = [1,2,3,4,5,6,7,8,9,10]\rlist2 = [2,4,6,8]\rprint(\"Original lists:\")\rprint(\"list1:\", list1)\rprint(\"list2:\", list2)\rprint(\"\\nRemove all elements from 'list1' present in 'list2:\")\rprint(index_on_inner_list(list1, list2))\r", "nl": "Write a Python program to remove all elements from a given list present in another list using lambda. "}
{"code": "import numpy as np\rx = np.arange(10)\rnp.random.shuffle(x)\rprint(x)\rprint(\"Same result using permutation():\")\rprint(np.random.permutation(10))\r", "nl": "Write a NumPy program to shuffle numbers between 0 and 10 (inclusive). "}
{"code": "import pandas as pd\rseries1 = pd.Series([1, 3, 5, 8, 10, 11, 15])\rprint(\"Original Series:\")\rprint(series1)\rprint(\"\\nDifference of differences between consecutive numbers of the said series:\")\rprint(series1.diff().tolist())\rprint(series1.diff().diff().tolist())\r", "nl": "Write a Pandas program to compute difference of differences between consecutive numbers of a given series. "}
{"code": "import pandas as pd\rimport re as re\rdf = pd.DataFrame({\r    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],\r    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],\r    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']\r})\rprint(\"Original DataFrame:\")\rprint(df)\rdef pick_only_key_sentence(str1, word):\r    result = re.findall(r'([^.]*'+word+'[^.]*)', str1)\r    return result\rdf['filter_sentence']=df['address'].apply(lambda x : pick_only_key_sentence(x,'Avenue'))\rprint(\"\\nText with the word 'Avenue':\")\rprint(df)\r", "nl": "Write a Pandas program to extract the sentences where a specific word is present in a given column of a given DataFrame. "}
{"code": "import os\rimport sys\rimport time\rpath = 'g:\\\\testpath\\\\'\rprint('Path Name ({}):'.format(path))\rprint('Size:', stat_info.st_size)\rprint('Permissions:', oct(stat_info.st_mode))\rprint('Owner:', stat_info.st_uid)\rprint('Device:', stat_info.st_dev)\rprint('Created     :', time.ctime(stat_info.st_ctime))\rprint('Last modified:', time.ctime(stat_info.st_mtime))\rprint('Last accessed:', time.ctime(stat_info.st_atime))\r", "nl": "Write a Python program to get the size, permissions, owner, device, created, last modified and last accessed date time of a specified path. "}
{"code": "import numpy as np\rprint(np.any([[False,False],[False,False]]))\rprint(np.any([[True,True],[True,True]]))\rprint(np.any([10, 20, 0, -50]))\rprint(np.any([10, 20, -50]))\r", "nl": "Write a NumPy program to test whether any array element along a given axis evaluates to True."}
{"code": "import numpy as np\ra = np.array((10,20,30))\rb = np.array((40,50,60))\rc = np.column_stack((a, b))\rprint(c)\r", "nl": "Write a NumPy program to convert 1-D arrays as columns into a 2-D array. "}
{"code": "import numpy\rdata = numpy.asarray([ [10,20,30], [40,50,60], [70,80,90] ])\rnumpy.savetxt(\"test.csv\", data, delimiter=\",\")\r", "nl": "Write a NumPy program to convert a NumPy array into a csv file. "}
{"code": "def insert_sting_middle(str, word):\r\treturn str[:2] + word + str[2:]\r\rprint(insert_sting_middle('[[]]', 'Python'))\rprint(insert_sting_middle('{{}}', 'PHP'))\rprint(insert_sting_middle('<<>>', 'HTML'))\r", "nl": "Write a Python function to insert a string in the middle of a string. "}
{"code": "def average_by(lst, fn = lambda x: x):\r  return sum(map(fn, lst), 0.0) / len(lst)\r\rprint(average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))\rprint(average_by([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))\r", "nl": "Write a Python program to calculate the average of a given list, after mapping each element to a value using the provided function. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rdf = pd.read_csv(\"alphabet_stock_data.csv\")\rstart_date = pd.to_datetime('2020-4-1')\rend_date = pd.to_datetime('2020-09-30')                         \rdf['Date'] = pd.to_datetime(df['Date']) \rnew_df = (df['Date']>= start_date) & (df['Date']<= end_date)\rdf2 = df.loc[new_df]\rplt.figure(figsize=(10,10))\rdf2.plot(x='Date', y=['Open', 'Close']);\rplt.suptitle('Opening/Closing stock prices of Alphabet Inc.,\\n 01-04-2020 to 30-09-2020', fontsize=12, color='black')\rplt.xlabel(\"Date\",fontsize=12, color='black')\rplt.ylabel(\"$ price\", fontsize=12, color='black')\rplt.show()\r\r", "nl": "Write a Pandas program to create a line plot of the opening, closing stock prices of Alphabet Inc. between two specific dates. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')    \rdf[df[\"MSHA ID\"].isin([102976,103380])].head()\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find all records that include two specific MSHA ID. "}
{"code": "def test_prime(n):\r    if (n==1):\r        return False\r    elif (n==2):\r        return True;\r    else:\r        for x in range(2,n):\r            if(n % x==0):\r                return False\r        return True             \rprint(test_prime(9))\r", "nl": "Write a Python function that takes a number as a parameter and check the number is prime or not. "}
{"code": "my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}\rfor row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):\r    print(*row)\r", "nl": "Write a Python program to print a dictionary in table format. "}
{"code": "import requests\rr = requests.get('https://api.github.com/')\rresponse = r.headers\rprint(\"Headers information of the said response:\")\rprint(response)\rprint(\"\\nVarious Key-value pairs information of the said resource and request:\")\r\rprint(\"Date: \",r.headers['date'])\rprint(\"server: \",r.headers['server'])\rprint(\"status: \",r.headers['status'])\rprint(\"cache-control: \",r.headers['cache-control'])\rprint(\"vary: \",r.headers['vary'])\rprint(\"x-github-media-type: \",r.headers['x-github-media-type'])\rprint(\"access-control-expose-headers: \",r.headers['access-control-expose-headers'])\rprint(\"strict-transport-security: \",r.headers['strict-transport-security'])\rprint(\"x-content-type-options: \",r.headers['x-content-type-options'])\rprint(\"x-xss-protection: \",r.headers['x-xss-protection'])\rprint(\"referrer-policy: \",r.headers['referrer-policy'])\rprint(\"content-security-policy: \",r.headers['content-security-policy'])\rprint(\"content-encoding: \",r.headers['content-encoding'])\rprint(\"X-Ratelimit-Remaining: \",r.headers['X-Ratelimit-Remaining'])\rprint(\"X-Ratelimit-Reset: \",r.headers['X-Ratelimit-Reset'])\rprint(\"X-Ratelimit-Used: \",r.headers['X-Ratelimit-Used'])\rprint(\"Accept-Ranges:\",r.headers['Accept-Ranges'])\rprint(\"X-GitHub-Request-Id:\",r.headers['X-GitHub-Request-Id'])\r", "nl": "Write a Python code to send a request to a web page, and print the information of headers. Also parse these values and print key-value pairs holding various information. "}
{"code": "import numpy as np\rx = np.array([[1.12, 2.0, 3.45], [2.33, 5.12, 6.0]], float) \rprint(\"Original array:\")\rprint(x)\rprint(2 in x)\rprint(0 in x)\rprint(6 in x)\rprint(2.3 in x)\rprint(5.12 in x)\r", "nl": "Write a NumPy program to test whether specified values are present in an array. "}
{"code": "print()\rprint(\"\\#{'}${\\\"}@/\")\rprint(\"\\#{'}${\"'\"'\"}@/\")\rprint(r\"\"\"\\#{'}${\"}@/\"\"\")\rprint('\\#{\\'}${\"}@/')\rprint('\\#{'\"'\"'}${\"}@/')\rprint(r'''\\#{'}${\"}@/''')\rprint()\r", "nl": "Write a Python program to define a string containing special characters in various forms. "}
{"code": "def alternate_elements(list_data):\r    result=[]\r    for item in list_data[::2]:\r        result.append(item)\r    return result \rcolors = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\rprint(\"Original list:\")\rprint(colors)\rprint(\"List with alternate elements from the said list:\")\rprint(alternate_elements(colors))\rnums = [2,0,3,4,0,2,8,3,4,2]\rprint(\"\\nOriginal list:\")\rprint(nums)\rprint(\"List with alternate elements from the said list:\")\rprint(alternate_elements(nums))\r", "nl": "Write a Python program to create a list taking alternate elements from a given list. "}
{"code": "def tuples_to_list_str(lst):\r    result = [(\"%s \"*len(el)%el).strip() for el in lst]\r    return result   \rcolors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]\rprint(\"Original list of tuples:\")\rprint(colors)\rprint(\"\\nConvert the said list of tuples to a list of strings:\")\rprint(tuples_to_list_str(colors))\rnames = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]\rprint(\"\\nOriginal list of tuples:\")\rprint(names)\rprint(\"\\nConvert the said list of tuples to a list of strings:\")\rprint(tuples_to_list_str(names))\r", "nl": "Write a Python program to convert a given list of tuples to a list of strings. "}
{"code": "def make_map(s):\r    temp_map = {}\r    for char in s:\r        if char not in temp_map:\r            temp_map[char] = 1\r        else:\r            temp_map[char] +=1 \r    return temp_map        \rdef make_anagram(str1, str2):\r    str1_map1 = make_map(str1)\r    str2_map2 = make_map(str2)\r \r    ctr = 0\r    for key in str2_map2.keys():\r        if key not in str1_map1:\r            ctr += str2_map2[key]\r        else:\r            ctr += max(0, str2_map2[key]-str1_map1[key])\r \r    for key in str1_map1.keys():\r        if key not in str2_map2:\r            ctr += str1_map1[key]\r        else:\r            ctr += max(0, str1_map1[key]-str2_map2[key]) \r    return ctr \rstr1 = input(\"Input string1: \")\rstr2 = input(\"Input string2: \")\rprint(make_anagram(str1, str2))\r", "nl": "Write a Python program to make two given strings (lower case, may or may not be of the same length) anagrams removing any characters from any of the strings. "}
{"code": "import json\r\rjobj_dict =  '{\"name\": \"David\", \"age\": 6, \"class\": \"I\"}'\rjobj_list =   '[\"Red\", \"Green\", \"Black\"]'\rjobj_string = '\"Python Json\"'\rjobj_int = '1234'\rjobj_float =  '21.34'\rpython_dict =  json.loads(jobj_dict)\rpython_list = json.loads(jobj_list)\rpython_str =  json.loads(jobj_string)\rpython_int =   json.loads(jobj_int)\rpython_float = json.loads(jobj_float)\r\rprint(\"Python dictionary: \", python_dict)\rprint(\"Python list: \", python_list)\rprint(\"Python string: \", python_str)\rprint(\"Python integer: \", python_int)\rprint(\"Python float: \", python_float)\r", "nl": "Write a Python program to convert JSON encoded data into Python objects. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\r\rurls = []\rfor h in soup.find_all('li'):\r    a = h.find('a')\r    urls.append(a.attrs['href'])\rprint(urls)\r\r", "nl": "Write a Python program to extract all the URLs from the webpage python.org that are nested within <li> tags from . "}
{"code": "def counting_sort(array1, max_val):\r    m = max_val + 1\r    count = [0] * m                \r    \r    for a in array1:\r    # count occurences\r        count[a] += 1             \r    i = 0\r    for a in range(m):            \r        for c in range(count[a]):  \r            array1[i] = a\r            i += 1\r    return array1\r\rprint(counting_sort( [1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7 ))\r", "nl": "Write a Python program for counting sort. "}
{"code": "import numpy as np\riterable = (x for x in range(10))\rprint(np.fromiter(iterable, np.int))\r", "nl": "Write a NumPy program to create a NumPy array of 10 integers from a generator. "}
{"code": "import arrow\ra = arrow.utcnow()\rprint(\"Current datetime:\")\rprint(a)\rprint(\"\\n3-tuple - ISO year, ISO week number, ISO weekday:\")\rprint(arrow.utcnow().isocalendar())\rprint(\"\\nISO 8601 formatted representation of the date and time:\")\rprint(arrow.utcnow().isoformat())\r", "nl": "Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. "}
{"code": "from collections import Counter\rfrom itertools import chain\rnums = [\r        [1,2,3,2],\r        [4,5,6,2],\r        [7,1,9,5],\r       ]\r    \rprint(\"Original list of lists:\")\rprint(nums)\rprint(\"\\nFrequency of the elements in the said list of lists:\")\rresult = Counter(chain.from_iterable(nums))\rprint(result)\r", "nl": "Write a Python program to get the frequency of the elements in a given list of lists. Use collections module. "}
{"code": "list_of_colors = ['Red', 'White', 'Black']  \rcolors = '-'.join(list_of_colors)\rprint()\rprint(\"All Colors: \"+colors)\rprint()\r", "nl": "Write a Python program to concatenate N strings. "}
{"code": "def harmonic_sum(n):\r  if n < 2:\r    return 1\r  else:\r    return 1 / n + (harmonic_sum(n - 1))\r    \rprint(harmonic_sum(7))\rprint(harmonic_sum(4))\r", "nl": "Write a Python program to calculate the harmonic sum of n-1. "}
{"code": "def keys_only(students):\r  return list(students.keys()) \rstudents = {\r  'Laura': 10,\r  'Spencer': 11,\r  'Bridget': 9,\r  'Howard ': 10,\r}\rprint(\"Original directory elements:\")\rprint(students)\rprint(\"\\nFlat list of all the keys of the said dictionary:\")\rprint(keys_only(students))\r", "nl": "Write a Python program to create a given flat list of all the keys in a flat dictionary. "}
{"code": "import numpy as np\rx= np.arange(12).reshape(3, 4)\rprint(\"Original array elements:\")\rprint(x)\rprint(\"Above array in small chuncks:\")\rfor a in np.nditer(x, flags=['external_loop'], order='F'):\r    print(a)\r", "nl": "Write a NumPy program to create an array of (3, 4) shape and convert the array elements in smaller chunks. "}
{"code": "import os\rprint(\"Test a path exists or not:\")\rpath = r'g:\\\\testpath\\\\a.txt'\rprint(os.path.exists(path))\rpath = r'g:\\\\testpath\\\\p.txt'\rprint(os.path.exists(path))\rprint(\"\\nFile name of the path:\")\rprint(os.path.basename(path))\rprint(\"\\nDir name of the path:\")\rprint(os.path.dirname(path))\r", "nl": "Write a Python program to test whether a given path exists or not. If the path exist find the filename and directory portion of the said path. "}
{"code": "import os\rprint('Current dir:', os.getcwd())\rprint('\\nChange the dir (moving up one):', os.pardir)\ros.chdir(os.pardir)\rprint('Current dir:', os.getcwd())\rprint('\\nChange the dir (moving up one):', os.pardir)\ros.chdir(os.pardir)\rprint('Current dir:', os.getcwd())\r", "nl": "Write a Python program to retrieve the current working directory and change the dir (moving up one). "}
{"code": "import pandas as pd\rtime_series = pd.date_range('1/1/2021', periods = 36, freq='3M')\rprint(\"Time series using three months frequency:\")\rprint(time_series) \r", "nl": "Write a Pandas program to create a time series using three months frequency. "}
{"code": "import pandas as pd\r#Source: https://bit.ly/1l9yjm9\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rmost_sightings_years = df['Date_time'].dt.year.value_counts().head(10)\rdef is_top_years(year):\r   if year in most_sightings_years.index:\r       return year\rhour_v_year = df.pivot_table(columns=df['Date_time'].dt.hour,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')\rhour_v_year.columns = hour_v_year.columns.astype(int)\rhour_v_year.columns = hour_v_year.columns.astype(str) + \":00\"\rhour_v_year.index = hour_v_year.index.astype(int)\rprint(\"\\nComparison of the top 10 years in which the UFO was sighted vs the hours of the day:\")\rprint(hour_v_year.head(10))\r", "nl": "Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs the hours of the day. "}
{"code": "import numpy as np\ra = np.arange(10,22).reshape((3, 4))\rprint(\"Original array:\")\rprint(a)\rprint(\"Each element of the array is:\")\rfor x in np.nditer(a):\r  print(x,end=\" \")\r", "nl": "Write a NumPy program to create a 3X4 array using and iterate over it. "}
{"code": "import numpy as np\rarray1 = [[0, 1], [2, 3]]\rarray2 = [[4, 5], [0, 3]]\rprint(\"Original arrays:\")\rprint(array1)\rprint(array2)\rprint(\"Average values of two said numpy arrays:\")\rresult = (np.array(array1) + np.array(array2)) / 2\rprint(result)\r", "nl": "Write a NumPy program to calculate average values of two given NumPy arrays. "}
{"code": "import numpy as np\rnp_array = np.array([[1,2,3], [4,5,6] , [7,8,9], [10, 11, 12]])\rtest_array = np.array([4,5,6])\rprint(\"Original Numpy array:\")\rprint(np_array)\rprint(\"Searched array:\")\rprint(test_array)\rprint(\"Index of the searched array in the original array:\")\rprint(np.where((np_array == test_array).all(1))[0])\r", "nl": "Write a NumPy program to search the index of a given array in another given array. "}
{"code": "def count_elements_lists(nums):\r    nums = [item for sublist in nums for item in sublist]\r    dic_data = {}\r    for num in nums:\r        if num in dic_data.keys():\r            dic_data[num] += 1\r        else:\r            key = num\r            value = 1\r            dic_data[key] = value\r    return dic_data\r\rnums = [\r        [1,2,3,2],\r        [4,5,6,2],\r        [7,8,9,5],\r       ]    \rprint(\"Original list of lists:\")\rprint(nums)\rprint(\"\\nFrequency of the elements in the said list of lists:\")\rprint(count_elements_lists(nums))\r", "nl": "Write a Python program to get the frequency of the elements in a given list of lists. "}
{"code": "import collections\rc1 = collections.Counter([1, 2, 3, 4, 5])\rc2 = collections.Counter([4, 5, 6, 7, 8])\rprint('C1:', c1)\rprint('C2:', c2)\rprint('\\nCombined counts:')\rprint(c1 + c2)\rprint('\\nSubtraction:')\rprint(c1 - c2)\rprint('\\nIntersection (taking positive minimums):')\rprint(c1 & c2)\rprint('\\nUnion (taking maximums):')\rprint(c1 | c2)\r", "nl": "Write a Python program to perform Counter arithmetic and set operations for aggregating results. "}
{"code": "import itertools as it \r\rdef group_similar_items(seq):\r    result =  [list(el) for _, el in it.groupby(seq, lambda x: x.split('_')[0])]\r    return result \r\rcolors = ['red_1', 'red_2', 'green_1', 'green_2', 'green_3', 'orange_1', 'orange_2']\rprint(\"Original list:\")\rprint(colors)\rprint(\"\\nGroup similar items of the said list:\")\rprint(group_similar_items(colors))\r\rcolors = ['red_1', 'green-1', 'green_2', 'green_3', 'orange-1', 'orange_2']\rprint(\"\\nOriginal list:\")\rprint(colors)\rprint(\"\\nGroup similar items of the said list:\")\rprint(group_similar_items(colors))\r", "nl": "Write a Python program to create group of similar items of a given list. "}
{"code": "def vowel(text):\r    vowels = \"aeiuoAEIOU\"\r    print(len([letter for letter in text if letter in vowels]))\r    print([letter for letter in text if letter in vowels])\rvowel('w3resource');\r", "nl": "Write a Python program to count and display the vowels of a given text. "}
{"code": "pi=22/7\rheight = float(input('Height of cylinder: '))\rradian = float(input('Radius of cylinder: '))\rvolume = pi * radian * radian * height\rsur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)\rprint(\"Volume is: \", volume)\rprint(\"Surface Area is: \", sur_area)\r", "nl": "Write a Python program to calculate surface volume and area of a cylinder. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(pd.pivot_table(df,index = [\"Region\",\"Manager\"], values = [\"Sale_amt\"],aggfunc=np.sum))\r", "nl": "Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise. "}
{"code": "def  gnome_sort(nums):\r    if len(nums) <= 1:\r        return nums\r        \r    i = 1\r    \r    while i < len(nums):\r        if nums[i-1] <= nums[i]:\r            i += 1\r        else:\r            nums[i-1], nums[i] = nums[i], nums[i-1]\r            i -= 1\r            if (i == 0):\r                i = 1\r           \ruser_input = input(\"Input numbers separated by a comma:\\n\").strip()\rnums = [int(item) for item in user_input.split(',')]\rgnome_sort(nums)\rprint(nums)\r", "nl": "Write a Python program to sort a list of elements using Gnome sort. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r    'school_code': ['s001','s002','s003','s001','s002','s004'],\r    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],\r    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],\r    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],\r    'age': [12, 12, 13, 13, 14, 12],\r    'height': [173, 192, 186, 167, 151, 159],\r    'weight': [35, 32, 33, 30, 31, 32],\r    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},\r    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])\rprint(\"Original DataFrame:\")\rprint(df)\rprint(\"\\nSplit the data on school_code:\");\rgp = df.groupby('school_code')\rprint(\"\\nList of all the keys:\")\rprint(gp.groups.keys())\r", "nl": "Write a Pandas program to split a given dataframe into groups and list all the keys from the GroupBy object. "}
{"code": "import pandas as pd\rstudent_data1 = pd.DataFrame({\r        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],\r         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], \r        'marks': [200, 210, 190, 222, 199]})\r\rstudent_data2 = pd.DataFrame({\r        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],\r        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], \r        'marks': [201, 200, 198, 219, 201]})\r\rprint(\"Original DataFrames:\")\rprint(student_data1)\rprint(student_data2)\rmerged_data = pd.merge(student_data1, student_data2, on='student_id', how='inner')\rprint(\"Merged data (inner join):\")\rprint(merged_data)\r", "nl": "Write a Pandas program to join the two dataframes using the common column of both dataframes. "}
{"code": "import numpy as np \r\rstr1 = np.array([['Python','NumPy','Exercises'],\r                 ['Python','Pandas','Exercises'],\r                 ['Python','Machine learning','Python']])\rprint(\"Original array of string values:\") \rprint(str1)\rprint(\"\\nCount 'Python' row wise in the above array of string values:\")\rprint(np.char.count(str1, 'Python'))\r", "nl": "Write a NumPy program to count a given word in each row of a given array of string values. "}
{"code": "import numpy as np\rx = np.arange(4, dtype=np.int64)\ry = np.full_like(x, 10)\rprint(y)\r", "nl": "Write a NumPy program to create an array of 10's with the same shape and type of a given array. "}
{"code": "import numpy as np\rarra = np.array([[ 1,  1,  0],\r                 [ 0,  0,  0],\r                 [ 0,  2,  3],\r                 [ 0,  0,  0],\r                 [ 0, -1,  1],\r                 [ 0,  0,  0]])\r\rprint(\"Original array:\")\rprint(arra)\rtemp = {(0, 0, 0)}\rresult = []\rfor idx, row in enumerate(map(tuple, arra)):\r    if row not in temp:\r        result.append(idx)\rprint(\"\\nNon-zero unique rows:\")\rprint(arra[result])\r", "nl": "Write a NumPy program to find and store non-zero unique rows in an array after comparing each row with other row in a given matrix. "}
{"code": "num = [1, 2, 3, 4, 5]\rprint(*num)\r", "nl": "Write a Python program to print a list of space-separated elements. "}
{"code": "from heapq import nlargest\rfrom operator import itemgetter\ritems = {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}\rfor name, value in nlargest(3, items.items(), key=itemgetter(1)):\r    print(name, value)\r\t", "nl": "Write a Python program to get the top three items in a shop. "}
{"code": "def insert_spec_position(x, n_list, pos):\r    return n_list[:pos-1]+[x]+n_list[pos-1:]\rn_list = [1,1,2,3,4,4,5,1]\rprint(\"Original list:\") \rprint(n_list)\rkth_position = 3\rx = 12\rresult = insert_spec_position(x, n_list, kth_position)\rprint(\"\\nAfter inserting an element at kth position in the said list:\")\rprint(result)\r", "nl": "Write a Python program to insert an element at a specified position into a given list. "}
{"code": "def every(lst, fn = lambda x: x):\r  return all(map(fn, lst))\rprint(every([4, 2, 3], lambda x: x > 1))\rprint(every([4, 2, 3], lambda x: x < 1))\rprint(every([4, 2, 3], lambda x: x == 1))\r", "nl": "Write a Python program to check if a given function returns True for every element in a list. "}
{"code": "import pandas as pd\rimport numpy as np\rnum_series = pd.Series(np.take(list('0123456789'), np.random.randint(10, size=40)))\rprint(\"Original Series:\")\rprint(num_series)\rprint(\"Frequency of each unique value of the said series.\")\rresult = num_series.value_counts()\rprint(result)\r", "nl": "Write a Pandas program to calculate the frequency counts of each unique value of a given series. "}
{"code": "import numpy as np\rfirst_names =    ('Margery', 'Betsey', 'Shelley', 'Lanell', 'Genesis')\rlast_names = ('Woolum', 'Battle', 'Plotner', 'Brien', 'Stahl')\rx = np.lexsort((first_names, last_names))\rprint(x)\r", "nl": "Write a NumPy program to sort pairs of first name and last name return their indices. (first by last name, then by first name). "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],\r'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],\r'customer_id':['C3001','C3001','D3005','D3001','C3005','D3001','C3005','D3001','D3005','C3001','D3005','D3005'],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rdef customer_id_C(x):\r    return (x.str[0] == 'C').sum()\rresult = df.groupby(['salesman_id'])\\\r  .agg(customer_id_start_C = ('customer_id', customer_id_C),\r       customer_id_list = ('customer_id', lambda x: ', '.join(x)),\r       purchase_amt_gap   = ('purch_amt', lambda x: x.max()-x.min())\r      )\rprint(\"\\nNumber of customers  starting with \u2018C\u2019, the list of all products and the difference of maximum purchase amount and minimum purchase amount:\")\rprint(result)\r", "nl": "Write a Pandas program to split the following datasets into groups on customer id and calculate the number of customers starting with 'C', the list of all products and the difference of maximum purchase amount and minimum purchase amount. "}
{"code": "import csv\rdata = csv.DictReader(open(\"departments.csv\"))\rprint(\"CSV file as a dictionary:\\n\")\rfor row in data:\r   print(row)\r", "nl": "Write a Python program to read a given CSV file as a dictionary. "}
{"code": "import pandas as pd\rimport numpy as np\rpi = pd.Series(np.random.randn(36), \r               pd.period_range('1/1/2029', \r                               '12/31/2031', freq='M'))\rprint(\"PeriodIndex which represents all the calendar month periods in 2029 and 2030:\")\rprint(pi)\rprint(\"\\nValues for all periods in 2030:\")\rprint(pi['2030'])\r", "nl": "Write a Pandas program create a series with a PeriodIndex which represents all the calendar month periods in 2029 and 2031. Also print the values for all periods in 2030. "}
{"code": "def sort_numeric_strings(nums_str):\r    result = sorted(nums_str, key=lambda el: int(el))\r    return result\rnums_str = ['4','12','45','7','0','100','200','-12','-500']\rprint(\"Original list:\")\rprint(nums_str)\rprint(\"\\nSort the said list of strings(numbers) numerically:\")\rprint(sort_numeric_strings(nums_str))\r", "nl": "Write a Python program to sort a given list of strings(numbers) numerically using lambda. "}
{"code": "def count_list(input_list): \r    return len(input_list) \r      \rlist1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] \rlist2 = [[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]   \rprint(\"Original list:\")\rprint(list1)\rprint(\"\\nNumber of lists in said list of lists:\")\rprint(count_list(list1))\rprint(\"\\nOriginal list:\")\rprint(list2)\rprint(\"\\nNumber of lists in said list of lists:\")\rprint(count_list(list2))\r", "nl": "Write a Python program to count number of lists in a given list of lists. "}
{"code": "import arrow\rutc = arrow.utcnow()\rpacific=arrow.now('US/Pacific')\rnyc=arrow.now('America/Chicago').tzinfo\rprint(pacific.astimezone(nyc))\r", "nl": "Write a Python program to create a datetime object, converted to the specified timezone using arrow module. "}
{"code": "def sort_sublists(input_list):\r    result = list(map(sorted, input_list)) \r    return result\rcolor1 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]\rprint(\"\\nOriginal list:\")\rprint(color1)  \rprint(\"\\nAfter sorting each sublist of the said list of lists:\")\rprint(sort_sublists(color1))\r", "nl": "Write a Python program to sort each sublist of strings in a given list of lists. "}
{"code": "import numpy as np\rimport pandas as pd\rdf = pd.read_excel('E:\\SaleData.xlsx')\rprint(pd.pivot_table(df,index=[\"Region\", \"Item\"], values=\"Units\", aggfunc=np.sum))\r", "nl": "Write a Pandas program to create a Pivot table and find the region wise, item wise unit sold. "}
{"code": "from collections import defaultdict\rdef count_by(lst, fn = lambda x: x):\r  count = defaultdict(int)\r  for val in map(fn, lst):\r    count[val] += 1\r  return dict(count)\rfrom math import floor\rprint(count_by([6.1, 4.2, 6.3], floor)) \rprint(count_by(['one', 'two', 'three'], len))\r", "nl": "Write a Python program to group the elements of a list based on the given function and returns the count of elements in each group. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = \"\"\"\r<html>\r<head>\r<meta http-equiv=\"Content-Type\" content=\"text/html;\rcharset=iso-8859-1\">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=\"https://www.w3resource.com/html/HTML-tutorials.php\">Learn HTML from\rw3resource.com</a></p>\r<p><a href=\"https://www.w3resource.com/css/CSS-tutorials.php\">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r\"\"\"\rsoup = BeautifulSoup(html_doc,\"lxml\")\rprint(\"\\na tag(s) Beneath body tag:\")\rprint(soup.select(\"body a\"))\rprint(\"\\nBeneath html head:\")\rprint(soup.select(\"html head title\"))\r", "nl": "Write a Python program to find tag(s) beneath other tag(s) in a given html document. "}
{"code": "def sort_mixed_list(mixed_list):\r    mixed_list.sort(key=lambda e: (isinstance(e, str), e))\r    return mixed_list\rmixed_list = [19,'red',12,'green','blue', 10,'white','green',1]\rprint(\"Original list:\")\rprint(mixed_list)\rprint(\"\\nSort the said  mixed list of integers and strings:\")\rprint(sort_mixed_list(mixed_list))\r", "nl": "Write a Python program to sort a given mixed list of integers and strings using lambda. Numbers must be sorted before strings. "}
{"code": "def decode(alist):\r    def aux(g):\r        if isinstance(g, list):\r            return [(g[1], range(g[0]))]\r        else:\r            return [(g, [0])]\r    return [x for g in alist for x, R in aux(g) for i in R]\rn_list = [[2, 1], 2, 3, [2, 4], 5, 1]\rprint(\"Original encoded list:\") \rprint(n_list)\rprint(\"\\nDecode a run-length encoded said list:\")\rprint(decode(n_list))\r", "nl": "Write a Python program to decode a run-length encoded given list. "}
{"code": "import pandas as pd\rimport datetime as dt\rimport numpy as np\rdf = pd.DataFrame(index=pd.DatetimeIndex(start=dt.datetime(2019,1,1,0,0,1),\r   end=dt.datetime(2019,1,1,10,0,1), freq='H'))\\\r   .reset_index().rename(columns={'index':'datetime'})\rprint(\"Sample datetime data:\")\rprint(df.head(10))\rdf['ts'] = df.datetime.values.astype(np.int64) // 10 ** 9\rprint(\"\\nConvert datetime to timestamp:\")\rprint (df)\r", "nl": "Write a Pandas program to convert given datetime to timestamp. "}
{"code": "import numpy as np\rx = np.arange(6)\rprint(\"\\nOriginal array:\")\rprint(x)\rr1 = np.mean(x)\rr2 = np.average(x)\rassert np.allclose(r1, r2)\rprint(\"\\nMean: \", r1)\rr1 = np.std(x)\rr2 = np.sqrt(np.mean((x - np.mean(x)) ** 2 ))\rassert np.allclose(r1, r2)\rprint(\"\\nstd: \", 1)\rr1= np.var(x)\rr2 = np.mean((x - np.mean(x)) ** 2 )\rassert np.allclose(r1, r2)\rprint(\"\\nvariance: \", r1)\r", "nl": "Write a NumPy program to compute the mean, standard deviation, and variance of a given array along the second axis. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\r\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"\\nDrop the rows where at least one element is missing:\")\rresult = df.dropna()\rprint(result)\r", "nl": "Write a Pandas program to drop the rows where at least one element is missing in a given DataFrame. "}
{"code": "import numpy as np    \rn= 4\rnums = np.arange(-6, 6)\rprint(\"\\nOriginal array:\")\rprint(nums)\rprint(\"\\nPosition of the index:\")\rprint(np.argmax(nums>n/2))\r", "nl": "Write a NumPy program to find the position of the index of a specified value greater than existing value in NumPy array. "}
{"code": "def intersection_by(a, b, fn):\r  _b = set(map(fn, b))\r  return [item for item in a if fn(item) in _b]\rfrom math import floor\rprint(intersection_by([2.1, 1.2], [2.3, 3.4], floor))\r", "nl": "Write a Python program to get a list of elements that exist in both lists, after applying the provided function to each list element of both. "}
{"code": "import arrow\ri = arrow.get(1857900545)\rprint(\"Date from integers: \")\rprint(i)\rf = arrow.get(1857900545.234323)\rprint(\"\\nDate from floats: \")\rprint(f)\rs = arrow.get('1857900545')\rprint(\"\\nDate from Strings: \")\rprint(s)\r", "nl": "Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. "}
{"code": "class Node(object):\r    # Singly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r        self.count += 1\r    \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.data\r            current = current.next\r            yield item_val\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)   \r        \r    def insert_start(self, data):        \r        if self.head is not None:\r            new_node = Node(data, None, None)\r            new_node.next = self.head\r            self.head.prev = new_node\r            self.head = new_node\r            self.count += 1\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\ritems.append_item('SQL')\r\rprint(\"Original list:\")\ritems.print_foward()\rprint(\"\\nAppend item in front of the list:\")\ritems.insert_start(\"Perl\")\ritems.print_foward()\r", "nl": "Write a Python program to insert an item in front of a given doubly linked list. "}
{"code": "x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\rprint(x[::2])\r", "nl": "Write a Python program to select the odd items of a list. "}
{"code": "import numpy as numpy\rarray = numpy.array([24, 27, 30, 29, 18, 14])\rprint(\"Original array:\")\rprint(array)\rargsort_array = array.argsort()\rranks_array = numpy.empty_like(argsort_array)\rranks_array[argsort_array] = numpy.arange(len(array))\rprint(\"\\nRank of each item of the said array:\")\rprint(ranks_array)\r", "nl": "Write a NumPy program to create an array that represents the rank of each item of a given array. "}
{"code": "import pandas as pd\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rorders_data = pd.DataFrame({\r'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],\r'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],\r'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],\r'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})\rprint(\"Original Orders DataFrame:\")\rprint(orders_data)\rprint(\"\\nGroup by two columns and count by each row:\")\rresult = orders_data.groupby(['salesman_id','customer_id']).size().reset_index().groupby(['salesman_id','customer_id'])[[0]].max()\rprint(result)\r", "nl": "Write a Pandas program to split a dataset to group by two columns and count by each row. "}
{"code": "import numpy as np\rx = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)\rprint(\"Original Array:\")\rprint(x)\rencoded_char = np.char.encode(x, 'cp500')\rdecoded_char = np.char.decode(encoded_char,'cp500')\rprint(\"\\nencoded =\", encoded_char)\rprint(\"decoded =\", decoded_char)\r", "nl": "Write a NumPy program to encode all the elements of a given array in cp500 and decode it again. "}
{"code": "import os\rprint(\"Parent\u2019s process id:\",os.getppid())\ruid = os.getuid()\rprint(\"\\nUser ID of the current process:\", uid)\ruid = 1400\ros.setuid(uid)\rprint(\"\\nUser ID changed\")\rprint(\"User ID of the current process:\", os.getuid())\r", "nl": "Write a Python program to find the parent's process id, real user ID of the current process and change real user ID. "}
{"code": "import socket\raddr = '127.0.0.2561'\rtry:\r    socket.inet_aton(addr)\r    print(\"Valid IP\")\rexcept socket.error:\r    print(\"Invalid IP\")\r", "nl": "Write a Python program to valid a IP address. "}
{"code": "C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\rdef list_slice(S, step):\r    return [S[i::step] for i in range(step)]\rprint(list_slice(C,3))\r", "nl": "Write a Python program to split a list every Nth element. "}
{"code": "from itertools import zip_longest\r\rdef elementswise_left_join(l1, l2):\r    result = [a + b for a,b in zip_longest(l1, l2, fillvalue=0)][::1]\r    return result\r\rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [3, 3, -1, 7]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_left_join(nums1, nums2))\r\rnums3 = [1, 2, 3, 4, 5, 6]\rnums4 = [2, 4, -3]\rprint(\"\\nOriginal lists:\")\rprint(nums3)\rprint(nums4)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_left_join(nums3, nums4))\r", "nl": "Write a Python program to add two given lists of different lengths, start from left , using itertools module. "}
{"code": "color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\rwith open('abc.txt', \"w\") as myfile:\r        for c in color:\r                myfile.write(\"%s\\n\" % c)\r\rcontent = open('abc.txt')\rprint(content.read())\r", "nl": "Write a Python program to write a list to a file. "}
{"code": "def max_occurrences(nums):\r    max_val = 0\r    result = nums[0] \r    for i in nums:\r        occu = nums.count(i)\r        if occu > max_val:\r            max_val = occu\r            result = i \r    return result\r\rnums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]\rprint (\"Original list:\")\rprint(nums)\rprint(\"\\nItem with maximum occurrences of the said list:\")\rprint(max_occurrences(nums)) \r", "nl": "Write a Python program to find the item with maximum occurrences in a given list. "}
{"code": "import numpy as np\rx = np.array([0, 1, 2])\ry = np.array([2, 1, 0])\rprint(\"\\nOriginal array1:\")\rprint(x)\rprint(\"\\nOriginal array1:\")\rprint(y)\rprint(\"\\nCovariance matrix of the said arrays:\\n\",np.cov(x, y))\r", "nl": "Write a NumPy program to compute the covariance matrix of two given arrays. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\coalpublic2013.xlsx')\rdf.tail(n=10)\r", "nl": "Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and display the last ten rows. "}
{"code": "import numpy as np\ra = np.arange(1.0, 2.0, 36.2)\rnp.savetxt('file.out', a, delimiter=',')\r", "nl": "Write a NumPy program to save a NumPy array to a text file. "}
{"code": "import pandas as pd\rimport numpy as np\rdf = pd.read_excel('E:\\employee.xlsx')\rresult = df.set_index(['hire_date'])\rresult\r", "nl": "Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and convert the data to use the hire_date as the index. "}
{"code": "import arrow\rfrom datetime import datetime\rfrom dateutil import tz\rprint(\"\\nCreate a date from a given date and a given time zone:\")\rd1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')\rprint(d1)\rprint(\"\\nCreate a date from a given date and a time zone object from a string representation:\")\rd2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))\rprint(d2)\rd3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))\rprint(\"\\nCreate a date using current datetime and a specified time zone:\")\rprint(d3)\r", "nl": "Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. "}
{"code": "import numpy as np\rnp.set_printoptions(linewidth=100)\rstudent =  np.array([['01', 'V', 'Debby Pramod', 30.21],\r ['02', 'V', 'Artemiy Ellie', 29.32],\r ['03', 'V', 'Baptist Kamal', 31.00],\r ['04', 'V', 'Lavanya Davide', 30.22],\r ['05', 'V', 'Fulton Antwan', 30.21],\r ['06', 'V', 'Euanthe Sandeep', 31.00],\r ['07', 'V', 'Endzela Sanda', 32.00],\r ['08', 'V', 'Victoire Waman', 29.21],\r ['09', 'V', 'Briar Nur', 30.00],\r ['10', 'V', 'Rose Lykos', 32.00]])\rprint(\"Original array:\")\rprint(student)\rchar='E'\rresult = student[np.char.startswith(student[:,2], char)]\rprint(\"\\nTotal weight, where student name starting with\",char)\rprint(np.round(result[:, 3].astype(float).sum(), 2))\rchar='D'\rresult = student[np.char.startswith(student[:,2], char)]\rprint(\"\\nTotal weight, where student name starting with\",char)\rprint(np.round(result[:, 3].astype(float).sum(), 2))\r", "nl": "Write a NumPy program to extract all the rows to compute the student weight from a given array (student information) where a specific column starts with a given character. "}
{"code": "import numpy as np\rn = np.zeros((4,4))\rprint(\"%d bytes\" % (n.size * n.itemsize))\r", "nl": "Write a NumPy program to find the memory size of a NumPy array. "}
{"code": "import json\r\rdef encode_complex(object):\r    # check using isinstance method\r    if isinstance(object, complex):\r        return [object.real, object.imag]\r    # raised error if object is not complex\r    raise TypeError(repr(object) + \" is not JSON serialized\")\r\rcomplex_obj = json.dumps(2 + 3j, default=encode_complex)\rprint(complex_obj) \r", "nl": "Write a Python program to check whether an instance is complex or not. "}
{"code": "num = [7,8, 120, 25, 44, 20, 27]\rnum = [x for x in num if x%2!=0]\rprint(num)\r", "nl": "Write a Python program to print the numbers of a specified list after removing even numbers from it. "}
{"code": "from bs4 import BeautifulSoup\rsoup = BeautifulSoup(\"<b>w3resource.com</b>\", \"lxml\")\rprint(\"Original Markup:\")\rprint(soup.b)\rtag = soup.new_tag(\"i\")\rtag.string = \"Python\"\rprint(\"\\nNew Markup, before inserting the text:\")\rsoup.b.string.insert_before(tag)\rprint(soup.b)\r", "nl": "Write a Python program to insert tags or strings immediately before specified tags or strings. "}
{"code": "from array import *\rarray_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])\rprint(\"Original array: \"+str(array_num))\rnum_list = array_num.tolist()\rprint(\"Convert the said array to an ordinary list with the same items:\")\rprint(num_list)\r", "nl": "Write a Python program to convert an array to an ordinary list with the same items. "}
{"code": "import string, sys\rdef ispangram(str1, alphabet=string.ascii_lowercase):\r    alphaset = set(alphabet)\r    return alphaset <= set(str1.lower())\r \rprint ( ispangram('The quick brown fox jumps over the lazy dog')) \r", "nl": "Write a Python function to check whether a string is a pangram or not. "}
{"code": "from collections import deque\rdq = deque('aeiou')\rfor element in dq:\r   print(element)\r", "nl": "Write a Python program to create a new deque with three items and iterate over the deque's elements. "}
{"code": "import numpy as np\rimport PIL\rimg_data = PIL.Image.open('w3resource-logo.png' )\rimg_arr = np.array(img_data) \rprint(img_arr)\r", "nl": "Write a NumPy program to convert a PIL Image into a NumPy array. "}
{"code": "import pandas as pd\rimport matplotlib.pyplot as plt\rimport matplotlib as mpl\rimport matplotlib.cm as cm\r#Source: https://bit.ly/2XDY2XN\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rmost_sightings_years = df['Date_time'].dt.year.value_counts().head(10)\rdef is_top_years(year):\r   if year in most_sightings_years.index:\r       return year\rmonth_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')\rmonth_vs_year.index = month_vs_year.index.astype(int)\rmonth_vs_year.columns = month_vs_year.columns.astype(int)\rprint(\"\\nComparison of the top 10 years in which the UFO was sighted vs each month:\")\rdef pie_heatmap(table, cmap='coolwarm_r', vmin=None, vmax=None,inner_r=0.25, pie_args={}):\r   n, m = table.shape\r   vmin= table.min().min() if vmin is None else vmin\r   vmax= table.max().max() if vmax is None else vmax\r\r   centre_circle = plt.Circle((0,0),inner_r,edgecolor='black',facecolor='white',fill=True,linewidth=0.25)\r   plt.gcf().gca().add_artist(centre_circle)\r   norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)\r   cmapper = cm.ScalarMappable(norm=norm, cmap=cmap)\r\r   for i, (row_name, row) in enumerate(table.iterrows()):\r       labels = None if i > 0 else table.columns\r       wedges = plt.pie([1] * m,radius=inner_r+float(n-i)/n, colors=[cmapper.to_rgba(x) for x in row.values],\r           labels=labels, startangle=90, counterclock=False, wedgeprops={'linewidth':-1}, **pie_args)\r       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)\r       wedges = plt.pie([1], radius=inner_r+float(n-i-1)/n, colors=['w'], labels=[row_name], startangle=-90, wedgeprops={'linewidth':0})\r       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)\rplt.figure(figsize=(8,8))\rplt.title(\"Timewheel of Hour Vs Year\",y=1.08,fontsize=30)\rpie_heatmap(month_vs_year, vmin=-20,vmax=80,inner_r=0.2)\r", "nl": "Write a Pandas program to create a Timewheel of Hour Vs Year comparison of the top 10 years in which the UFO was sighted. "}
{"code": "import numpy as np\rnums1 = np.array([0.5, 1.5, 0.2])\rnums2 = np.array([0.4999999999, 1.500000000, 0.2])\rnp.set_printoptions(precision=15)\rprint(\"Original arrays:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nTest said two arrays are equal (element wise) or not:?\")\rprint(nums1 == nums2)\rnums1 = np.array([0.5, 1.5, 0.23])\rnums2 = np.array([0.4999999999, 1.5000000001, 0.23])\rprint(\"\\nOriginal arrays:\")\rnp.set_printoptions(precision=15)\rprint(nums1)\rprint(nums2)\rprint(\"\\nTest said two arrays are equal (element wise) or not:?\")\rprint(np.equal(nums1, nums2))\r", "nl": "Write a NumPy program to check whether two arrays are equal (element wise) or not. "}
{"code": "def elementswise_right_join(l1, l2):\r    f_len = len(l1)-(len(l2) - 1)\r    for i in range(len(l1), 0, -1):\r        if i-f_len < 0:\r            break\r        else:\r            l1[i-1] = l1[i-1] + l2[i-f_len]\r    return l1\r\rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [3, 3, -1, 7]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_right_join(nums1, nums2))\r\rnums3 = [1, 2, 3, 4, 5, 6]\rnums4 = [2, 4, -3]\rprint(\"\\nOriginal lists:\")\rprint(nums3)\rprint(nums4)\rprint(\"\\nAdd said two lists from left:\")\rprint(elementswise_right_join(nums3, nums4))\r", "nl": "Write a Python program to add two given lists of different lengths, start from right. "}
{"code": "from itertools import permutations\rfrom more_itertools import windowed \rdef is_seq_sorted(lst):\r  print(lst)  \r  return all(\r    x <= y\r    for x, y in windowed(lst, 2)\r  )\rdef permutation_sort(lst):\r  return next(\r    permutation_seq\r    for permutation_seq in permutations(lst)\r    if is_seq_sorted(permutation_seq)\r  )\rprint(\"All the sequences:\")\rprint(\"\\nSorted sequence: \",permutation_sort([12, 10, 9]))\r\rprint(\"\\n\\nAll the sequences:\")\rprint(\"\\nSorted sequence: \",permutation_sort([2, 3, 1, 0]))\r", "nl": "Write a Python program find the sorted sequence from a set of permutations of a given input. "}
{"code": "import pandas as pd\rdf = pd.read_csv(r'ufo.csv')\rdf['Date_time'] = df['Date_time'].astype('datetime64[ns]')\rnow = pd.to_datetime('today')\rprint(\"Original Dataframe:\")\rprint(df.head())\rprint(\"\\nCurrent date:\")\rprint(now)\r", "nl": "Write a Pandas program to calculate all the sighting days of the unidentified flying object (ufo) from current date. "}
{"code": "from itertools import zip_longest\r\rdef elementswise_right_join(l1, l2):\r    result = [a + b for a,b in zip_longest(reversed(l1), reversed(l2), fillvalue=0)][::-1]\r    return result\r\rnums1 = [2, 4, 7, 0, 5, 8]\rnums2 = [3, 3, -1, 7]\rprint(\"\\nOriginal lists:\")\rprint(nums1)\rprint(nums2)\rprint(\"\\nAdd said two lists from right:\")\rprint(elementswise_right_join(nums1, nums2))\r\rnums3 = [1, 2, 3, 4, 5, 6]\rnums4 = [2, 4, -3]\rprint(\"\\nOriginal lists:\")\rprint(nums3)\rprint(nums4)\rprint(\"\\nAdd said two lists from right:\")\rprint(elementswise_right_join(nums3, nums4))\r", "nl": "Write a Python program to add two given lists of different lengths, start from right , using itertools module. "}
{"code": "import pandas as pd\rimport numpy as np\rpd.set_option('display.max_rows', None)\r#pd.set_option('display.max_columns', None)\rdf = pd.DataFrame({\r'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],\r'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],\r'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],\r'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],\r'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],\r'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})\rprint(\"Original Orders DataFrame:\")\rprint(df)\rprint(\"Using median in purch_amt to replace NaN:\")\rdf['purch_amt'].fillna(df['purch_amt'].median(), inplace=True)\rprint(df)\rprint(\"Using mean to replace NaN:\")\rdf['sale_amt'].fillna(int(df['sale_amt'].mean()), inplace=True)\rprint(df)\r", "nl": "Write a Pandas program to replace NaNs with median or mean of the specified columns in a given DataFrame. "}
{"code": "from bs4 import BeautifulSoup\rhtml_doc = '<a href=\"http://example.com/\">HTML<i>example.com</i></a>'\rsoup = BeautifulSoup(html_doc, \"lxml\")\rtag = soup.a\rprint(\"\\nOriginal Markup:\")\rprint(tag)\rprint(\"\\nOriginal Markup with new text:\")\rtag.string = \"CSS\"\rprint(tag)\r", "nl": "Write a Python program to change the tag's contents and replace with the given string. "}
{"code": "def symmetric_difference_by(a, b, fn):\r  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))\r  return [item for item in a if fn(item) not in _b] + [item\r          for item in b if fn(item) not in _a]\rfrom math import floor\rprint(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))\r", "nl": "Write a Python program to get the symmetric difference between two lists, after applying the provided function to each list element of both. "}
{"code": "import numpy as np\rx = np.eye(3)\rprint(\"3-D array:\")\rprint(x)\rf = np.ravel(x, order='F')\rprint(\"One dimension array:\")\rprint(f)\r", "nl": "Write a NumPy program to collapse a 3-D array into one dimension array. "}
{"code": "n=int(input(\"Input a number \"))\rd = dict()\r\rfor x in range(1,n+1):\r    d[x]=x*x\r\rprint(d) \r", "nl": "Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x). "}
{"code": "import pandas as pd\r# World alcohol consumption data\rw_a_con = pd.read_csv('world_alcohol.csv')\rprint(\"World alcohol consumption sample data:\")\rprint(w_a_con.head())\rprint(\"\\nThe world alcohol consumption details: average consumption of \\nbeverages per person >=5 and Beverage Types is Beer:\")\rprint(w_a_con[(w_a_con['Display Value'] >= 5) & (w_a_con['Beverage Types'] == 'Beer')].head(10))\r", "nl": "Write a Pandas program to find out the records where consumption of beverages per person average >=5 and Beverage Types is Beer from world alcohol consumption dataset. "}
{"code": "import requests\rfrom bs4 import BeautifulSoup\rurl = 'https://www.python.org/'\rreqs = requests.get(url)\rsoup = BeautifulSoup(reqs.text, 'lxml')\rprint(\"List of all the h1, h2, h3 :\")\rfor heading in soup.find_all([\"h1\", \"h2\", \"h3\"]):\r    print(heading.name + ' ' + heading.text.strip())\r\r", "nl": "Write a Python program to a list of all the h1, h2, h3 tags from the webpage python.org. "}
{"code": "class Node(object):\r    # Singly linked node\r    def __init__(self, data=None, next=None, prev=None):\r        self.data = data\r        self.next = next\r        self.prev = prev\r\rclass doubly_linked_list(object):\r    def __init__(self):\r        self.head = None\r        self.tail = None\r        self.count = 0\r\r    def append_item(self, data):\r        # Append an item \r        new_item = Node(data, None, None)\r        if self.head is None:\r            self.head = new_item\r            self.tail = self.head\r        else:\r            new_item.prev = self.tail\r            self.tail.next = new_item\r            self.tail = new_item\r        self.count += 1\r    \r    def iter(self):\r        # Iterate the list\r        current = self.head\r        while current:\r            item_val = current.data\r            current = current.next\r            yield item_val\r\r    def print_foward(self):\r        for node in self.iter():\r            print(node)   \r        \r    def reverse(self):\r        \"\"\" Reverse linked list. \"\"\"\r        current = self.head\r        while current:\r            temp = current.next\r            current.next = current.prev\r            current.prev = temp\r            current = current.prev\r        temp = self.head\r        self.head = self.tail\r        self.tail = temp\r\ritems = doubly_linked_list()\ritems.append_item('PHP')\ritems.append_item('Python')\ritems.append_item('C#')\ritems.append_item('C++')\ritems.append_item('Java')\ritems.append_item('SQL')\r\rprint(\"Reverse list \")\ritems.reverse()\ritems.print_foward()\r", "nl": "Write a Python program to print a given doubly linked list in reverse order. "}
{"code": "import numpy as np\rx = np.array(['PHP Exercises, Practice, Solution'], dtype=np.str)\rprint(\"\\nOriginal Array:\")\rprint(x)\rr = np.char.replace(x, \"PHP\", \"Python\")\rprint(\"\\nNew array:\")\rprint(r)\r", "nl": "Write a NumPy program to replace \"PHP\" with \"Python\" in the element of a given array. "}
{"code": "obj = {}\rfor i in range(1, 21):\r    obj[str(i)] = []\rprint(obj)\r", "nl": "Write a Python program to create multiple lists. "}
{"code": "def unique_list(l):\r    temp = []\r    for x in l:\r        if x not in temp:\r            temp.append(x)\r    return temp\r\rtext_str = [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"]\rprint(\"Original String:\")\rprint(text_str)\rprint(\"\\nAfter removing duplicate words from the said list of strings:\")\rprint(unique_list(text_str))\r", "nl": "Write a Python program to remove duplicate words from a given list of strings. "}
{"code": "var_list = ['a', 'b', 'c']\rx, y, z = (var_list + [None] * 3)[:3]\rprint(x, y, z)\rvar_list = [100, 20.25]\rx, y = (var_list + [None] * 2)[:2]\rprint(x, y)\r", "nl": "Write a Python program to split a variable length string into variables. "}
{"code": "row_num = int(input(\"Input number of rows: \"))\rcol_num = int(input(\"Input number of columns: \"))\rmulti_list = [[0 for col in range(col_num)] for row in range(row_num)]\r\rfor row in range(row_num):\r    for col in range(col_num):\r        multi_list[row][col]= row*col\r\rprint(multi_list)\r", "nl": "br/>"}
{"code": "lst\u00a0 =\u00a0 [x ** 2\u00a0 for x in range (1, 11)\u00a0\u00a0 if\u00a0 x % 2 == 1]\nprint(lst)", "nl": "Difference between List comprehension and Lambda in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Snake case to Pascal case\n# Using title() + replace()\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks_is_best'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Convert Snake case to Pascal case\n# Using title() + replace()\nres = test_str.replace(\"_\", \" \").title().replace(\" \", \"\")\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The String after changing case : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Snake case to Pascal case"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# create numpy array\narr = numpy.array([[1, 2, 3, 4, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[6, 7, 8, 9, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[11, 12, 13, 14, 15],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[16, 17, 18, 19, 20]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0])\n\u00a0\u00a0\n# view array\nprint(arr)\n\u00a0\u00a0\n# check for some lists\nprint([1, 2, 3, 4, 5] in arr.tolist())\nprint([16, 17, 20, 19, 18] in arr.tolist())\nprint([3, 2, 5, -4, 5] in arr.tolist())\nprint([11, 12, 13, 14, 15] in arr.tolist())", "nl": "Check whether a Numpy array contains a specified row in Python"}
{"code": "#\u00a0\u00a0 program to convert set to tuple\n# create set\ns = {'a', 'b', 'c', 'd', 'e'}\n\u00a0\u00a0\n# print set\nprint(type(s), \" \", s)\n\u00a0\u00a0\n# call tuple() method\u00a0\n# this method convert set to tuple\nt = tuple(s)\n\u00a0\u00a0\n# print tuple\nprint(type(t), \" \", t)", "nl": "Write a Python program to convert Set into Tuple and Tuple into Set"}
{"code": "from datetime import datetime\ncurr_dt = datetime.now()\n\n\nprint(\"Current datetime: \", curr_dt)\ntimestamp = int(round(curr_dt.timestamp()))\n\n\nprint(\"Integer timestamp of current datetime: \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timestamp)", "nl": "Write a Python datetime to integer timestamp"}
{"code": "# import pandas package as pd\nimport pandas as pd\n\u00a0\u00a0\n# Define a dictionary containing students data\ndata = {'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age': [21, 19, 20, 18],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Stream': ['Math', 'Commerce', 'Arts', 'Biology'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Percentage': [88, 92, 95, 70]}\n\u00a0\u00a0\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'Stream', 'Percentage'])\n\u00a0\u00a0\nprint(\"Given Dataframe :\\n\", df)\n\u00a0\u00a0\nprint(\"\\nIterating over rows using index attribute :\\n\")\n\u00a0\u00a0\n# iterate through each row and select\u00a0\n# 'Name' and 'Stream' column respectively.\nfor ind in df.index:\n\u00a0\u00a0\u00a0\u00a0\u00a0print(df['Name'][ind], df['Stream'][ind])", "nl": "Different ways to iterate over rows in Pandas Dataframe in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort Nested keys by Value\n# Using sorted() + generator expression + lamda\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Nikhil' : {'English' : 5, 'Maths' :\u00a0 2, 'Science' : 14},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Akash' : {'English' : 15, 'Maths' :\u00a0 7, 'Science' : 2},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Akshat' : {'English' : 5, 'Maths' :\u00a0 50, 'Science' : 20}}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# Sort Nested keys by Value\n# Using sorted() + generator expression + lamda\nres = {key : dict(sorted(val.items(), key = lambda ele: ele[1]))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for key, val in test_dict.items()}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The sorted dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Sort Nested keys by Value"}
{"code": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\u00a0\u00a0\n# What you enter here will be searched for in\n# Google Images\nquery = \"dogs\"\n\u00a0\u00a0\n# Creating a webdriver instance\ndriver = webdriver.Chrome('Enter-Location-Of-Your-Webdriver')\n\u00a0\u00a0\n# Maximize the screen\ndriver.maximize_window()\n\u00a0\u00a0\n# Open Google Images in the browser\ndriver.get('https://images.google.com/')\n\u00a0\u00a0\n# Finding the search box\nbox = driver.find_element_by_xpath('//*[@id=\"sbtc\"]/div/div[2]/input')\n\u00a0\u00a0\n# Type the search query in the search box\nbox.send_keys(query)\n\u00a0\u00a0\n# Pressing enter\nbox.send_keys(Keys.ENTER)\n\u00a0\u00a0\n# Fumction for scrolling to the bottom of Google\n# Images results\ndef scroll_to_bottom():\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0last_height = driver.execute_script('\\\n\u00a0\u00a0\u00a0\u00a0return document.body.scrollHeight')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0driver.execute_script('\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0window.scrollTo(0,document.body.scrollHeight)')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# waiting for the results to load\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Increase the sleep time if your internet is slow\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(3)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_height = driver.execute_script('\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return document.body.scrollHeight')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# click on \"Show more results\" (if exists)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0driver.find_element_by_css_selector(\".YstHxe input\").click()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# waiting for the results to load\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Increase the sleep time if your internet is slow\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(3)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking if we have reached the bottom of the page\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if new_height == last_height:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0last_height = new_height\n\u00a0\u00a0\n\u00a0\u00a0\n# Calling the function\n\u00a0\u00a0\n# NOTE: If you only want to capture a few images,\n# there is no need to use the scroll_to_bottom() function.\nscroll_to_bottom()\n\u00a0\u00a0\n\u00a0\u00a0\n# Loop to capture and save each image\nfor i in range(1, 50):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# range(1, 50) will capture images 1 to 49 of the search results\n\u00a0\u00a0\u00a0\u00a0# You can change the range as per your need.\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# XPath of each image\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0img = driver.find_element_by_xpath(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'//*[@id=\"islrg\"]/div[1]/div[' +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str(i) + ']/a[1]/div[1]/img')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Enter the location of folder in which\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the images will be saved\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0img.screenshot('Download-Location' +\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0query + ' (' + str(i) + ').png')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Each new screenshot will automatically\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# have its name updated\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Just to avoid unwanted errors\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(0.2)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if we can't find the XPath of an image,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# we skip to the next image\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\n\u00a0\u00a0\n# Finally, we close the driver\ndriver.close()", "nl": "Download Google Image Using Python and Selenium"}
{"code": "import numpy as np\n\u00a0\u00a0\nan_array = np.array([[1, 2], [3, 4]])\nanother_array = np.array([[1, 2], [3, 4]])\n\u00a0\u00a0\ncomparison = an_array == another_array\nequal_arrays = comparison.all()\n\u00a0\u00a0\nprint(equal_arrays)", "nl": "How to compare two NumPy arrays in Python"}
{"code": "# Python3 code to demonstrate working of\n# Avoid Last occurrence of delimitter\n# Using map() + join() + str()\n\u00a0\u00a0\n# initializing list\ntest_list = [4, 7, 8, 3, 2, 1, 9]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing delim\ndelim = \"$\"\n\u00a0\u00a0\n# appending delim to join\n# will leave stray \"$\" at end\nres = ''\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0res += str(ele) + \"$\"\n\u00a0\u00a0\n# removing last using slicing\nres = res[:len(res) - 1]\n\u00a0\u00a0\n# printing result\nprint(\"The joined string : \" + str(res))", "nl": "Write a Python program to Avoid Last occurrence of delimitter"}
{"code": "# Import pandas package\u00a0\nimport pandas as pd\n\u00a0\u00a0\n# create a dictionary with five fields each\ndata = {\n\u00a0\u00a0\u00a0\u00a0'A':['A1', 'A2', 'A3', 'A4', 'A5'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'B':['B1', 'B2', 'B3', 'B4', 'B4'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'C':['C1', 'C2', 'C3', 'C3', 'C3'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'D':['D1', 'D2', 'D2', 'D2', 'D2'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'E':['E1', 'E1', 'E1', 'E1', 'E1'] }\n\u00a0\u00a0\n# Convert the dictionary into DataFrame\u00a0\ndf = pd.DataFrame(data)\n\u00a0\u00a0\n# Get the unique values of 'B' column\ndf.B.unique()", "nl": "Get unique values from a column in Pandas DataFrame in Python"}
{"code": "import random\nimport webbrowser\nfrom tkinter import *\nfrom tkinter import ttk\nfrom tkinter import messagebox\nimport back\nimport csv\nfrom ttkbootstrap import *\n\n\n\n\nclass window:\n\u00a0\u00a0\u00a0\u00a0# these are lists of initialized characters\n\u00a0\u00a0\u00a0\u00a0digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0lc = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'm', 'n', 'o', 'p', 'q',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0uc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'I', 'J', 'K', 'M', 'N', 'O', 'p', 'Q',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0sym = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'~', '>', '*', '<']\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self, root, geo, title) -> None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.root = root\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.root.title(title)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.root.geometry(geo)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.root.resizable(width=False, height=False)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Label(self.root, text='Your Password').grid(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0row=0, column=0, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Label(self.root, text='Corresponding User_id').grid(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0row=1, column=0, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Label(self.root, text='Of').grid(row=2, column=0, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.pa = StringVar()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.user_id = StringVar()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.site = StringVar()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Entry(self.root, width=30, textvariable=self.pa\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).grid(row=0, column=1, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Entry(self.root, width=30, textvariable=self.user_id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).grid(row=1, column=1, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Entry(self.root, width=30, textvariable=self.site\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).grid(row=2, column=1, padx=10, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.length = StringVar()\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e = ttk.Combobox(self.root, values=['4', '8', '12', '16', '20', '24'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable=self.length)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.grid(row=0, column=2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e['state'] = 'readonly'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.length.set('Set password length')\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(self.root, text='Generate', padding=5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style='success.Outline.TButton', width=20,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.generate).grid(row=1, column=2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(self.root, text='Save to Database', style='success.TButton',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width=20, padding=5, command=self.save).grid(row=3, column=2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(self.root, text='Delete', width=20, style='danger.TButton',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0padding=5, command=self.erase).grid(row=2, column=2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(self.root, text='Show All', width=20, padding=5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.view).grid(row=3, column=0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(self.root, text='Update', width=20, padding=5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.update).grid(row=3, column=1)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ========self.tree view=============\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree = ttk.Treeview(self.root, height=5)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree['columns'] = ('site', 'user', 'pas')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.column('#0', width=0, stretch=NO)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.column('site', width=160, anchor=W)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.column('user', width=140, anchor=W)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.column('pas', width=180, anchor=W)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.heading('#0', text='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.heading('site', text='Site name')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.heading('user', text='User Id')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.heading('pas', text='Password')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.grid(row=4, column=0, columnspan=3, pady=10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.bind(\"<ButtonRelease-1>\", self.catch)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this command will call the catch function\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this is right click pop-up menu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu = Menu(self.root, tearoff=False)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Refresh', command=self.refresh)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Insert', command=self.save)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Update', command=self.update)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_separator()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Show All', command=self.view)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Clear Fields', command=self.clear)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Clear Table', command=self.table)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Export', command=self.export)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_separator()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Delete', command=self.erase)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Help', command=self.help)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_separator()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.add_command(label='Exit', command=self.root.quit)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this binds the button 3 of the mouse with\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.root.bind(\"<Button-3>\", self.poppin)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# poppin function\n\n\n\u00a0\u00a0\u00a0\u00a0def help(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will open the help.txt in\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# notepad when called\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0webbrowser.open('help.txt')\n\n\n\u00a0\u00a0\u00a0\u00a0def refresh(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function basically refreshes the table\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# or tree view\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.table()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.view()\n\n\n\u00a0\u00a0\u00a0\u00a0def table(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will clear all the values\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# displayed in the table\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for r in self.tree.get_children():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.delete(r)\n\n\n\u00a0\u00a0\u00a0\u00a0def clear(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will clear all the entry\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fields\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.pa.set('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.user_id.set('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.site.set('')\n\n\n\u00a0\u00a0\u00a0\u00a0def poppin(self, e):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# it triggers the right click pop-up menu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.menu.tk_popup(e.x_root, e.y_root)\n\n\n\u00a0\u00a0\u00a0\u00a0def catch(self, event):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will take all the selected data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# from the table/ tree view and will fill up the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# respective entry fields\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.pa.set('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.user_id.set('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.site.set('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0selected = self.tree.focus()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = self.tree.item(selected, 'value')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.site.set(value[0])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.user_id.set(value[1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.pa.set(value[2])\n\n\n\u00a0\u00a0\u00a0\u00a0def update(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will update database with new\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values given by the user\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0selected = self.tree.focus()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = self.tree.item(selected, 'value')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0back.edit(self.site.get(), self.user_id.get(), self.pa.get())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.refresh()\n\n\n\u00a0\u00a0\u00a0\u00a0def view(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this will show all the data from the database\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this is similar to \"SELECT * FROM TABLE\" sql\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# command\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if back.check() is False:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messagebox.showerror('Attention Amigo!', 'Database is EMPTY!')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for row in back.show():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.insert(parent='', text='', index='end',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values=(row[0], row[1], row[2]))\n\n\n\u00a0\u00a0\u00a0\u00a0def erase(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this will delete or remove the selected tuple or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# row from the database\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0selected = self.tree.focus()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = self.tree.item(selected, 'value')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0back.Del(value[2])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.refresh()\n\n\n\u00a0\u00a0\u00a0\u00a0def save(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will insert all the data into the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# database\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0back.enter(self.site.get(), self.user_id.get(), self.pa.get())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tree.insert(parent='', index='end', text='',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values=(self.site.get(), self.user_id.get(), self.pa.get()))\n\n\n\u00a0\u00a0\u00a0\u00a0def generate(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will produce a random string which\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# will be used as password\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.length.get() == 'Set password length':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messagebox.showerror('Attention!', \"You forgot to SELECT\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = ''\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for x in range(int(int(self.length.get())/4)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a0 = random.choice(self.uc)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 = random.choice(self.lc)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 = random.choice(self.sym)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a3 = random.choice(self.digits)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = a0+a1+a2+a3+a\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.pa.set(a)\n\n\n\u00a0\u00a0\u00a0\u00a0def export(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this function will save all the data from the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# database in a csv format which can be opened\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in excel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pop = Toplevel(self.root)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pop.geometry('300x100')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.v = StringVar()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Label(pop, text='Save File Name as').pack()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Entry(pop, textvariable=self.v).pack()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ttk.Button(pop, text='Save', width=18,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: exp(self.v.get())).pack(pady=5)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def exp(x):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(x + '.csv', 'w', newline='') as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chompa = csv.writer(f, dialect='excel')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for r in back.show():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chompa.writerow(r)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messagebox.showinfo(\"File Saved\", \"Saved as \" + x + \".csv\")\n\n\n\n\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0win = Style(theme='darkly').master\n\u00a0\u00a0\u00a0\u00a0name = 'Password Generator'\n\u00a0\u00a0\u00a0\u00a0dimension = '565x320'\n\n\n\u00a0\u00a0\u00a0\u00a0app = window(win, dimension, name)\n\u00a0\u00a0\u00a0\u00a0win.mainloop()", "nl": "GUI to generate and store passwords in SQLite using Python"}
{"code": "# Python3 code to demonstrate working of\n# Concatenating tuples to nested tuples\n# using + operator + \", \" operator during initialization\n\u00a0\u00a0\n# initialize tuples\ntest_tup1 = (3, 4),\ntest_tup2 = (5, 6),\n\u00a0\u00a0\n# printing original tuples\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\n\u00a0\u00a0\n# Concatenating tuples to nested tuples\n# using + operator + \", \" operator during initialization\nres = test_tup1 + test_tup2\n\u00a0\u00a0\n# printing result\nprint(\"Tuples after Concatenating : \" + str(res))", "nl": "Write a Python program to How to Concatenate tuples to nested tuples"}
{"code": "# Python program to change menu background\n# color of Tkinter's Option Menu\n\u00a0\u00a0\n# Import the library tkinter\nfrom tkinter import *\n\u00a0\u00a0\n# Create a GUI app\napp = Tk()\n\u00a0\u00a0\n# Give title to your GUI app\napp.title(\"Vinayak App\")\n\u00a0\u00a0\n# Construct the label in your app\nl1 = Label(app, text=\"Choose the the week day here\")\n\u00a0\u00a0\n# Display the label l1\nl1.grid()\n\u00a0\u00a0\n# Construct the Options Menu widget in your app\ntext1 = StringVar()\n\u00a0\u00a0\n# Set the value you wish to see by default\ntext1.set(\"Choose here\")\n\u00a0\u00a0\n# Create options from the Option Menu\nw = OptionMenu(app, text1, \"Sunday\", \"Monday\", \"Tuesday\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n\u00a0\u00a0\n# Se the background color of Options Menu to green\nw.config(bg=\"GREEN\", fg=\"WHITE\")\n\u00a0\u00a0\n# Set the background color of Displayed Options to Red\nw[\"menu\"].config(bg=\"RED\")\n\u00a0\u00a0\n# Display the Options Menu\nw.grid(pady=20)\n\u00a0\u00a0\n# Make the loop for displaying app\napp.mainloop()", "nl": "How to change background color of Tkinter OptionMenu widget in Python"}
{"code": "# Python3 program to find common elements\u00a0\n# in three lists using sets\n\u00a0\u00a0\ndef IntersecOfSets(arr1, arr2, arr3):\n\u00a0\u00a0\u00a0\u00a0# Converting the arrays into sets\n\u00a0\u00a0\u00a0\u00a0s1 = set(arr1)\n\u00a0\u00a0\u00a0\u00a0s2 = set(arr2)\n\u00a0\u00a0\u00a0\u00a0s3 = set(arr3)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Calculates intersection of\u00a0\n\u00a0\u00a0\u00a0\u00a0# sets on s1 and s2\n\u00a0\u00a0\u00a0\u00a0set1 = s1.intersection(s2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #[80, 20, 100]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Calculates intersection of sets\n\u00a0\u00a0\u00a0\u00a0# on set1 and s3\n\u00a0\u00a0\u00a0\u00a0result_set = set1.intersection(s3)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Converts resulting set to list\n\u00a0\u00a0\u00a0\u00a0final_list = list(result_set)\n\u00a0\u00a0\u00a0\u00a0print(final_list)\n\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Elements in Array1\n\u00a0\u00a0\u00a0\u00a0arr1 = [1, 5, 10, 20, 40, 80, 100]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Elements in Array2\n\u00a0\u00a0\u00a0\u00a0arr2 = [6, 7, 20, 80, 100]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Elements in Array3\n\u00a0\u00a0\u00a0\u00a0arr3 = [3, 4, 15, 20, 30, 70, 80, 120]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Calling Function\n\u00a0\u00a0\u00a0\u00a0IntersecOfSets(arr1, arr2, arr3)", "nl": "Write a Python program to find common elements in three lists using sets"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Dictionary with maximum keys\n# Using loop + len()\n\u00a0\u00a0\n# initializing list\ntest_list = [{\"gfg\": 2, \"best\" : 4},\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"gfg\": 2, \"is\" : 3, \"best\" : 4},\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"gfg\": 2}]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\nres = {}\u00a0\nmax_len = 0\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for lengths\n\u00a0\u00a0\u00a0\u00a0if len(ele) > max_len:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = ele\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_len = len(ele)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing results\nprint(\"Maximum keys Dictionary : \" + str(res))", "nl": "Write a Python program to Dictionary with maximum count of pairs"}
{"code": "# determining the size of the heart\nsize = 15\n\n\n# printing the inverted triangle\nfor a in range(0, size):\n\u00a0\u00a0\u00a0\u00a0for b in range(a, size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end = \"\")\n\u00a0\u00a0\u00a0\u00a0for b in range(1, (a * 2)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end = \"\")\n\u00a0\u00a0\u00a0\u00a0print(\"\")\n\n\n# printing rest of the heart\nfor a in range(size, int(size / 2) - 1 , -2):\n\n\n\u00a0\u00a0\u00a0\u00a0# printing the white space right-triangle\n\u00a0\u00a0\u00a0\u00a0for b in range(1, size - a, 2):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end = \"\")\n\n\n\u00a0\u00a0\u00a0\u00a0# printing the first trapezium\n\u00a0\u00a0\u00a0\u00a0for b in range(1, a + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end = \"\")\n\n\n\u00a0\u00a0\u00a0\u00a0# printing the white space triangle\n\u00a0\u00a0\u00a0\u00a0for b in range(1, (size - a) + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end = \"\")\n\n\n\u00a0\u00a0\u00a0\u00a0# printing the second trapezium\n\u00a0\u00a0\u00a0\u00a0for b in range(1, a):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end = \"\")\n\n\n\u00a0\u00a0\u00a0\u00a0# new line\n\u00a0\u00a0\u00a0\u00a0print(\"\")", "nl": "Write a Python program to print the Inverted heart pattern"}
{"code": "# Function to find k'th non repeating character\u00a0\n# in string\u00a0\nfrom collections import OrderedDict\u00a0\n\u00a0\u00a0\ndef kthRepeating(input,k):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# OrderedDict returns a dictionary data\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# structure having characters of input\u00a0\n\u00a0\u00a0\u00a0\u00a0# string as keys in the same order they\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# were inserted and 0 as their default value\u00a0\n\u00a0\u00a0\u00a0\u00a0dict=OrderedDict.fromkeys(input,0)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now traverse input string to calculate\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# frequency of each character\u00a0\n\u00a0\u00a0\u00a0\u00a0for ch in input:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[ch]+=1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now extract list of all keys whose value\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# is 1 from dict Ordered Dictionary\u00a0\n\u00a0\u00a0\u00a0\u00a0nonRepeatDict = [key for (key,value) in dict.items() if value==1]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now return (k-1)th character from above list\u00a0\n\u00a0\u00a0\u00a0\u00a0if len(nonRepeatDict) < k:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'Less than k non-repeating characters in input.'\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nonRepeatDict[k-1]\u00a0\n\u00a0\u00a0\n# Driver function\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input = \"geeksforgeeks\"\n\u00a0\u00a0\u00a0\u00a0k = 3\n\u00a0\u00a0\u00a0\u00a0print (kthRepeating(input, k))\u00a0", "nl": "K\u2019th Non-repeating Character in Python using List Comprehension and OrderedDict"}
{"code": "# Function to find lost element from a duplicate\n# array\n\u00a0\u00a0\ndef lostElement(A,B):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# convert lists into set\n\u00a0\u00a0\u00a0\u00a0\u00a0A = set(A)\n\u00a0\u00a0\u00a0\u00a0\u00a0B = set(B)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# take difference of greater set with smaller\n\u00a0\u00a0\u00a0\u00a0\u00a0if len(A) > len(B):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (list(A-B))\n\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (list(B-A))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0A = [1, 4, 5, 7, 9]\n\u00a0\u00a0\u00a0\u00a0B = [4, 5, 7, 9]\n\u00a0\u00a0\u00a0\u00a0lostElement(A,B)", "nl": "Write a Python Set difference to find lost element from a duplicated array"}
{"code": "# import the regex library\nimport pandas as pd\nimport re\n\u00a0\u00a0\n# Create a list with all the strings\nmovie_data = [\"Name: The_Godfather Year: 1972 Rating: 9.2\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name: Bird_Box Year: 2018 Rating: 6.8\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name: Fight_Club Year: 1999 Rating: 8.8\"]\n\u00a0\u00a0\n# Create a dictionary with the required columns\u00a0\n# Used later to convert to DataFrame\nmovies = {\"Name\":[], \"Year\":[], \"Rating\":[]}\n\u00a0\u00a0\nfor item in movie_data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For Name field\n\u00a0\u00a0\u00a0\u00a0name_field = re.search(\"Name: .*\",item)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if name_field is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = re.search('\\w*\\s\\w*',name_field.group())\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = None\n\u00a0\u00a0\u00a0\u00a0movies[\"Name\"].append(name.group())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For Year field\n\u00a0\u00a0\u00a0\u00a0year_field = re.search(\"Year: .*\",item)\n\u00a0\u00a0\u00a0\u00a0if year_field is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0year = re.search('\\s\\d\\d\\d\\d',year_field.group())\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0year = None\n\u00a0\u00a0\u00a0\u00a0movies[\"Year\"].append(year.group().strip())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For rating field\n\u00a0\u00a0\u00a0\u00a0rating_field = re.search(\"Rating: .*\",item)\n\u00a0\u00a0\u00a0\u00a0if rating_field is not None:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rating = re.search('\\s\\d.\\d',rating_field.group())\n\u00a0\u00a0\u00a0\u00a0else:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rating - None\n\u00a0\u00a0\u00a0\u00a0movies[\"Rating\"].append(rating.group().strip())\n\u00a0\u00a0\n# Creating DataFrame\ndf = pd.DataFrame(movies)\nprint(df)", "nl": "Split a String into columns using regex in pandas DataFrame in Python"}
{"code": "// C++ program to check if a string\u00a0\n// contains any special character\n\u00a0\u00a0\n// import required packages\n#include <iostream>\u00a0\n#include <regex>\u00a0\nusing namespace std;\u00a0\n\u00a0\u00a0\n// Function checks if the string\u00a0\n// contains any special character\nvoid run(string str)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Make own character set\u00a0\n\u00a0\u00a0\u00a0\u00a0regex regx(\"[@_!#$%^&*()<>?/|}{~:]\");\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Pass the string in regex_search\u00a0\n\u00a0\u00a0\u00a0\u00a0// method\n\u00a0\u00a0\u00a0\u00a0if(regex_search(str, regx) == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"String is accepted\";\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"String is not accepted.\";\n}\u00a0\n\u00a0\u00a0\n// Driver Code\u00a0\nint main()\u00a0\n{\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Enter the string\u00a0\n\u00a0\u00a0\u00a0\u00a0string str = \"Geeks$For$Geeks\";\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Calling run function\n\u00a0\u00a0\u00a0\u00a0run(str);\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\u00a0\n}\n\u00a0\u00a0\n// This code is contributed by Yash_R", "nl": "Program to check if a string contains any special character in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Tuple XOR operation\n# using zip() + generator expression\u00a0\n\u00a0\u00a0\n# initialize tuples\u00a0\ntest_tup1 = (10, 4, 6, 9)\u00a0\ntest_tup2 = (5, 2, 3, 3)\u00a0\n\u00a0\u00a0\n# printing original tuples\u00a0\nprint(\"The original tuple 1 : \" + str(test_tup1))\u00a0\nprint(\"The original tuple 2 : \" + str(test_tup2))\u00a0\n\u00a0\u00a0\n# Tuple XOR operation\n# using zip() + generator expression\u00a0\nres = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The XOR tuple : \" + str(res))\u00a0", "nl": "Write a Python program to Tuple XOR operation"}
{"code": "# Importing Library\nimport numpy as np\n\u00a0\u00a0\n# creating 2d array\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\u00a0\u00a0\n# Calculating mean across Rows\nrow_mean = np.mean(arr, axis=1)\n\u00a0\u00a0\nrow1_mean = row_mean[0]\nprint(\"Mean of Row 1 is\", row1_mean)\n\u00a0\u00a0\nrow2_mean = row_mean[1]\nprint(\"Mean of Row 2 is\", row2_mean)\n\u00a0\u00a0\nrow3_mean = row_mean[2]\nprint(\"Mean of Row 3 is\", row3_mean)\n\u00a0\u00a0\n\u00a0\u00a0\n# Calculating mean across Columns\ncolumn_mean = np.mean(arr, axis=0)\n\u00a0\u00a0\ncolumn1_mean = column_mean[0]\nprint(\"Mean of column 1 is\", column1_mean)\n\u00a0\u00a0\ncolumn2_mean = column_mean[1]\nprint(\"Mean of column 2 is\", column2_mean)\n\u00a0\u00a0\ncolumn3_mean = column_mean[2]\nprint(\"Mean of column 3 is\", column3_mean)", "nl": "Calculate the mean across dimension in a 2D NumPy array in Python"}
{"code": "# These are the imports to be made\nimport time\nfrom selenium import webdriver\nfrom datetime import datetime", "nl": "How to Build Web scraping bot in Python"}
{"code": "# import modules\nimport pandas as pd\n\u00a0\u00a0\n# create dataframe\ndata = {'name': ['Simon', 'Marsh', 'Gaurav', 'Alex', 'Selena'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Maths': [8, 5, 6, 9, 7],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Science': [7, 9, 5, 4, 7],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'English': [7, 4, 7, 6, 8]}\n\u00a0\u00a0\ndf = pd.DataFrame(data)\n\u00a0\u00a0\n# Sort the dataframe\u2019s rows by Science,\n# in descending order\na = df.sort_values(by ='Science', ascending = 0)\nprint(\"Sorting rows by Science:\\n \\n\", a)", "nl": "Sorting rows in pandas DataFrame in Python"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Original array\narray = np.array([10, 52, 62, 16, 16, 54, 453])\nprint(array)\n\u00a0\u00a0\n# Indices of the sorted elements of a\u00a0\n# given array\nindices = np.argsort(array)\nprint(indices)", "nl": "How to get the indices of the sorted array using NumPy in Python"}
{"code": "# importing popen from the os library\nfrom os import popen\n\n\n# Path to the file whose id we would\n# be obtaining (relative / absolute)\nfile = r\"C:\\Users\\Grandmaster\\Desktop\\testing.py\"\n\n\n# Running the command for obtaining the fileid,\n# and saving the output of the command\noutput = popen(fr\"fsutil file queryfileid {file}\").read()\n\n\n# printing the output of the previous command\nprint(output)", "nl": "Write a Python program to Get file id of windows file"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Matrix to dictionary\u00a0\n# Using dictionary comprehension + range()\n\u00a0\u00a0\n# initializing list\ntest_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]\u00a0\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# using dictionary comprehension for iteration\nres = {idx + 1 : test_list[idx] for idx in range(len(test_list))}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary : \" + str(res))", "nl": "Write a Python program to Convert Matrix to dictionary"}
{"code": "# Python code to demonstrate\n# converting set into dictionary\n# using fromkeys()\n\n\n# initializing set\nini_set = {1, 2, 3, 4, 5}\n\n\n# printing initialized set\nprint (\"initial string\", ini_set)\nprint (type(ini_set))\n\n\n# Converting set to dictionary\nres = dict.fromkeys(ini_set, 0)\n\n\n# printing final result and its type\nprint (\"final list\", res)\nprint (type(res))", "nl": "Write a Python program to Convert a set into dictionary"}
{"code": "# Python3 code to demonstrate\u00a0\n# Pair elements with Rear element in Matrix Row\n# using list comprehension\n\u00a0\u00a0\n# Initializing list\ntest_list = [[4, 5, 6], [2, 4, 5], [6, 7, 5]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Pair elements with Rear element in Matrix Row\n# using list comprehension\nres = []\nfor sub in test_list:\n\u00a0\u00a0\u00a0\u00a0res.append([[ele, sub[-1]] for ele in sub[:-1]])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint (\"The list after pairing is : \" + str(res))", "nl": "Write a Python program to Pair elements with Rear element in Matrix Row"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Uppercase Half String\n# Using upper() + loop + len()\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# computing half index\nhlf_idx = len(test_str) // 2\n\u00a0\u00a0\nres = ''\nfor idx in range(len(test_str)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# uppercasing later half\n\u00a0\u00a0\u00a0\u00a0if idx >= hlf_idx:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += test_str[idx].upper()\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += test_str[idx]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The resultant string : \" + str(res))\u00a0", "nl": "Write a Python program to Uppercase Half String"}
{"code": "# import pandas module\nimport pandas as pd\n\u00a0\u00a0\n# making dataframe\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\n\u00a0\u00a0\n# it was print the first 5-rows\nprint(df.head())\u00a0", "nl": "Reshape a pandas DataFrame using stack,unstack and melt method in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove keys with Values Greater than K ( Including mixed values )\n# Using loop + isinstance()\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Gfg' : 3, 'is' : 7, 'best' : 10, 'for' : 6, 'geeks' : 'CS'}\u00a0\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 6\n\u00a0\u00a0\n# using loop to iterate keys of dictionary\nres = {}\nfor key in test_dict:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# testing for data type and then condition, order is imp.\n\u00a0\u00a0\u00a0\u00a0if not (isinstance(test_dict[key], int) and test_dict[key] > K):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[key] = test_dict[key]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Remove keys with Values Greater than K ( Including mixed values )"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Replace duplicate Occurrence in String\n# Using split() + enumerate() + loop\n\u00a0\u00a0\n# initializing string\ntest_str = 'Gfg is best . Gfg also has Classes now. \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Classes help understand better . '\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing replace mapping\u00a0\nrepl_dict = {'Gfg' :\u00a0 'It', 'Classes' : 'They' }\n\u00a0\u00a0\n# Replace duplicate Occurrence in String\n# Using split() + enumerate() + loop\ntest_list = test_str.split(' ')\nres = set()\nfor idx, ele in enumerate(test_list):\n\u00a0\u00a0\u00a0\u00a0if ele in repl_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ele in res:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_list[idx] = repl_dict[ele]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.add(ele)\nres = ' '.join(test_list)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after replacing : \" + str(res))\u00a0", "nl": "Write a Python program to Replace duplicate Occurrence in String"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Optional Elements Combinations\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [\"geekforgeeks\", [5, 4, 3, 4], \"is\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"best\", \"good\", \"better\", \"average\"]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing size of inner Optional list\u00a0\nK = 4\n\u00a0\u00a0\nres = []\ncnt = 0\nwhile cnt <= K - 1:\n\u00a0\u00a0\u00a0\u00a0temp = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# inner elements selections\n\u00a0\u00a0\u00a0\u00a0for idx in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks for type of Elements\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not isinstance(idx, list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.append(idx)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.append(idx[cnt])\n\u00a0\u00a0\u00a0\u00a0cnt += 1\n\u00a0\u00a0\u00a0\u00a0res.append(temp)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"All index Combinations : \" + str(res))", "nl": "Write a Python program to find all the Combinations in the list with the given condition"}
{"code": "# Python Program illustrating\u00a0\n# numpy.inner() method\u00a0\n\u00a0\u00a0\nimport numpy as geek\u00a0\n\u00a0\u00a0\n# Scalars\u00a0\nproduct = geek.inner(5, 4)\u00a0\nprint(\"inner Product of scalar values : \", product)\u00a0\n\u00a0\u00a0\n# 1D array\u00a0\nvector_a = 2 + 3j\nvector_b = 4 + 5j\n\u00a0\u00a0\nproduct = geek.inner(vector_a, vector_b)\u00a0\nprint(\"inner Product : \", product)\u00a0", "nl": "numpy.inner() in python"}
{"code": "# Import Module\nfrom tkinter import *\n\u00a0\u00a0\n# Create Object\nroot = Tk()\n\u00a0\u00a0\n# Set Geometry\nroot.geometry(\"400x400\")\n\u00a0\u00a0\n# Execute Tkinter\nroot.mainloop()", "nl": "How to set the tab size in Text widget in Tkinter in Python"}
{"code": "# Python program for implementation of CombSort\n\u00a0\u00a0\n# To find next gap from current\ndef getNextGap(gap):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Shrink gap by Shrink factor\n\u00a0\u00a0\u00a0\u00a0gap = (gap * 10)/13\n\u00a0\u00a0\u00a0\u00a0if gap < 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\n\u00a0\u00a0\u00a0\u00a0return gap\n\u00a0\u00a0\n# Function to sort arr[] using Comb Sort\ndef combSort(arr):\n\u00a0\u00a0\u00a0\u00a0n = len(arr)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Initialize gap\n\u00a0\u00a0\u00a0\u00a0gap = n\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Initialize swapped as true to make sure that\n\u00a0\u00a0\u00a0\u00a0# loop runs\n\u00a0\u00a0\u00a0\u00a0swapped = True\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Keep running while gap is more than 1 and last\n\u00a0\u00a0\u00a0\u00a0# iteration caused a swap\n\u00a0\u00a0\u00a0\u00a0while gap !=1 or swapped == 1:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Find next gap\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gap = getNextGap(gap)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Initialize swapped as false so that we can\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check if swap happened or not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped = False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Compare all elements with current gap\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(0, n-gap):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[i] > arr[i + gap]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[i], arr[i + gap]=arr[i + gap], arr[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped = True\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver code to test above\narr = [ 8, 4, 1, 3, -44, 23, -6, 28, 0]\ncombSort(arr)\n\u00a0\u00a0\nprint (\"Sorted array:\")\nfor i in range(len(arr)):\n\u00a0\u00a0\u00a0\u00a0print (arr[i]),\n\u00a0\u00a0\n\u00a0\u00a0\n# This code is contributed by Mohit Kumra", "nl": "Write a Python Program for Comb Sort"}
{"code": "# Creating new dataframe\nimport pandas as pd\n\u00a0\u00a0\ninitial_data = {'First_name': ['Ram', 'Mohan', 'Tina', 'Jeetu', 'Meera'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Last_name': ['Kumar', 'Sharma', 'Ali', 'Gandhi', 'Kumari'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age': [42, 52, 36, 21, 23],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'City': ['Mumbai', 'Noida', 'Pune', 'Delhi', 'Bihar']}\n\u00a0\u00a0\ndf = pd.DataFrame(initial_data, columns = ['First_name', 'Last_name',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age', 'City'])\n\u00a0\u00a0\n# Create new column using dictionary\nnew_data = { \"Ram\":\"B.Com\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Mohan\":\"IAS\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Tina\":\"LLB\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Jeetu\":\"B.Tech\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Meera\":\"MBBS\" }\n\u00a0\u00a0\n# combine this new data with existing DataFrame\ndf[\"Qualification\"] = df[\"First_name\"].map(new_data)\n\u00a0\u00a0\nprint(df)", "nl": "Mapping external values to dataframe values in Pandas in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Filter dictionary values in heterogeneous dictionary\n# Using type() + dictionary comprehension\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Gfg' : 4, 'is' : 2, 'best' : 3, 'for' : 'geeks'}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 3\n\u00a0\u00a0\n# Filter dictionary values in heterogeneous dictionary\n# Using type() + dictionary comprehension\nres = {key : val for key, val in test_dict.items()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if type(val) != int or val > K}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Values greater than K : \" + str(res))\u00a0", "nl": "Write a Python program to Filter dictionary values in heterogeneous dictionary"}
{"code": "# Python3 code to demonstrate working of\n# Split Strings on Prefix Occurrence\n# Using loop + startswith()\n\n\n# initializing list\ntest_list = [\"geeksforgeeks\", \"best\", \"geeks\", \"and\", \"geeks\", \"love\", \"CS\"]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# initializing prefix\npref = \"geek\"\n\n\n\n\nres = []\nfor val in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for prefix\n\u00a0\u00a0\u00a0\u00a0if val.startswith(pref):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if pref found, start new list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append([val])\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# else append in current list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[-1].append(val)\n\n\n# printing result\nprint(\"Prefix Split List : \" + str(res))", "nl": "Write a Python program to Split Strings on Prefix Occurrence"}
{"code": "# Python3 code to demonstrate working of\n# Group dates in K ranges\n# Using groupby() + sort()\nfrom itertools import groupby\nfrom datetime import datetime\n\u00a0\u00a0\n# initializing list\ntest_list = [datetime(2020, 1, 4),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime(2019, 12, 30),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime(2020, 1, 7),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime(2019, 12, 27),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime(2020, 1, 20),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime(2020, 1, 10)]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 7\n\u00a0\u00a0\n# initializing start date\u00a0\nmin_date = min(test_list)\n\u00a0\u00a0\n# utility fnc to form groupings\ndef group_util(date):\n\u00a0\u00a0\u00a0\u00a0return (date-min_date).days // K\n\u00a0\u00a0\n# sorting before grouping\ntest_list.sort()\n\u00a0\u00a0\ntemp = []\n# grouping by utility function to group by K days\nfor key, val in groupby(test_list , key = lambda date : group_util(date)):\n\u00a0\u00a0\u00a0\u00a0temp.append((key, list(val)))\n\u00a0\u00a0\n# using strftime to convert to userfriendly\n# format\nres = []\nfor sub in temp:\n\u00a0\u00a0intr = []\n\u00a0\u00a0for ele in sub[1]:\n\u00a0\u00a0\u00a0\u00a0intr.append(ele.strftime(\"%Y/%m/%d\"))\n\u00a0\u00a0res.append((sub[0], intr))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\nprint(\"Grouped Digits : \" + str(res))", "nl": "Write a Python program to Group dates in K ranges"}
{"code": "# Python3 code to demonstrate working of\n# Summation combination in tuple lists\n# Using list comprehension + combinations\nfrom itertools import combinations\n\u00a0\u00a0\n# initialize list\u00a0\ntest_list = [(2, 4), (6, 7), (5, 1), (6, 10)]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# Summation combination in tuple lists\n# Using list comprehension + combinations\nres = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\u00a0\n\u00a0\u00a0\n# printing result\nprint(\"The Summation combinations are : \" + str(res))", "nl": "Write a Python program to Combinations of sum with tuples in tuple list"}
{"code": "# importing the modules\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# data to be plotted\nx = np.arrange(1, 11)\ny = x * x\n\n\n# plotting\nplt.title(\"Line graph\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.plot(x, y, color =\"red\")\nplt.show()", "nl": "Plot line graph from NumPy array in Python"}
{"code": "# Python code to count number of matching\n# characters in a pair of strings\n\u00a0\u00a0\n# count function\ndef count(str1, str2):\u00a0\n\u00a0\u00a0\u00a0\u00a0c, j = 0, 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# loop executes till length of str1 and\u00a0\n\u00a0\u00a0\u00a0\u00a0# stores value of str1 character by character\u00a0\n\u00a0\u00a0\u00a0\u00a0# and stores in i at each iteration.\n\u00a0\u00a0\u00a0\u00a0for i in str1:\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this will check if character extracted from\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# str1 is present in str2 or not(str2.find(i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# return -1 if not found otherwise return the\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# starting occurrence index of that character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in str2) and j == str1.find(i) is used to\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# avoid the counting of the duplicate characters\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# present in str1 found in str2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if str2.find(i)>= 0 and j == str1.find(i):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j += 1\n\u00a0\u00a0\u00a0\u00a0print ('No. of matching characters are : ', c)\n\u00a0\u00a0\n# Main function\ndef main():\u00a0\n\u00a0\u00a0\u00a0\u00a0str1 ='aabcddekll12@' # first string\n\u00a0\u00a0\u00a0\u00a0str2 ='bb2211@55k' # second string\n\u00a0\u00a0\u00a0\u00a0count(str1, str2) # calling count function\u00a0\n\u00a0\u00a0\n# Driver Code\nif __name__==\"__main__\":\n\u00a0\u00a0\u00a0\u00a0main()", "nl": "Write a Python program to Count the Number of matching characters in a pair of string"}
{"code": "# Python3 code to demonstrate working of\n# Extract digits from Tuple list\n# Using map() + chain.from_iterable() + set() + loop\nfrom itertools import chain\n\n\n# initializing list\ntest_list = [(15, 3), (3, 9), (1, 10), (99, 2)]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# Extract digits from Tuple list\n# Using map() + chain.from_iterable() + set() + loop\ntemp = map(lambda ele: str(ele), chain.from_iterable(test_list))\nres = set()\nfor sub in temp:\n\u00a0\u00a0\u00a0\u00a0for ele in sub:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.add(ele)\n\n\n# printing result\nprint(\"The extracted digits : \" + str(res))", "nl": "Write a Python program to Extract digits from Tuple list"}
{"code": "# Python code to count unique\u00a0\n# tuples in list of list\n\u00a0\u00a0\nimport collections\u00a0\nOutput = collections.defaultdict(int)\n\u00a0\u00a0\n# List initialization\nInput = [[('hi', 'bye')], [('Geeks', 'forGeeks')],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[('a', 'b')], [('hi', 'bye')], [('a', 'b')]]\n\u00a0\u00a0\n# Using iteration\nfor elem in Input:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Output[elem[0]] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Printing output\nprint(Output)", "nl": "Write a Python program to Count tuples occurrence in list of tuples"}
{"code": "# importing the numpy library as np\nimport numpy as np\n\u00a0\u00a0\n# Create a numpy array\narr = np.array([10, 20, 30, 40, 50])\n\u00a0\u00a0\n# Print the array\nprint(arr)", "nl": "Change data type of given numpy array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort Tuples by Maximum element\n# Using max() + sort()\n\u00a0\u00a0\n# helper function\ndef get_max(sub):\n\u00a0\u00a0\u00a0\u00a0return max(sub)\n\u00a0\u00a0\n# initializing list\ntest_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# sort() is used to get sorted result\n# reverse for sorting by max - first element's tuples\ntest_list.sort(key = get_max, reverse = True)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Sorted Tuples : \" + str(test_list))", "nl": "Write a Python program to Sort Tuples by their Maximum element"}
{"code": "# Python code to demonstrate working\n# of binary search in library\nfrom bisect import bisect_left\n\u00a0\u00a0\ndef BinarySearch(a, x):\n\u00a0\u00a0\u00a0\u00a0i = bisect_left(a, x)\n\u00a0\u00a0\u00a0\u00a0if i != len(a) and a[i] == x:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return i\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1\n\u00a0\u00a0\na\u00a0 = [1, 2, 4, 4, 8]\nx = int(4)\nres = BinarySearch(a, x)\nif res == -1:\n\u00a0\u00a0\u00a0\u00a0print(x, \"is absent\")\nelse:\n\u00a0\u00a0\u00a0\u00a0print(\"First occurrence of\", x, \"is present at\", res)", "nl": "Binary Search (bisect) in Python"}
{"code": "# This is simplest Student data management program in python\n# Create class \"Student\"\nclass Student:\n\u00a0\u00a0\u00a0\u00a0# Constructor\n\u00a0\u00a0\u00a0\u00a0def __init__(self, name, rollno, m1, m2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.rollno = rollno\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.m1 = m1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.m2 = m2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to create and append new student\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def accept(self, Name, Rollno, marks1, marks2 ):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# use\u00a0 ' int(input()) ' method to take input from user\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob = Student(Name, Rollno, marks1, marks2 )\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ls.append(ob)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to display student details\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def display(self, ob):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Name\u00a0\u00a0 : \", ob.name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"RollNo : \", ob.rollno)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Marks1 : \", ob.m1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Marks2 : \", ob.m2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n\")\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Search Function\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def search(self, rn):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(ls.__len__()):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(ls[i].rollno == rn):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Delete Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def delete(self, rn):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = obj.search(rn)\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0del ls[i]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Update Function\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def update(self, rn, No):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = obj.search(rn)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0roll = No\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ls[i].rollno = roll;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Create a list to add Students\nls =[]\n# an object of Student class\nobj = Student('', 0, 0, 0)\n\u00a0\u00a0\nprint(\"\\nOperations used, \")\nprint(\"\\n1.Accept Student details\\n2.Display Student Details\\n\" /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/ \"3.Search Details of a Student\\n4.Delete Details of Student\" /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/ \"\\n5.Update Student Details\\n6.Exit\")\n\u00a0\u00a0\n# ch = int(input(\"Enter choice:\"))\n# if(ch == 1):\nobj.accept(\"A\", 1, 100, 100)\nobj.accept(\"B\", 2, 90, 90)\nobj.accept(\"C\", 3, 80, 80)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# elif(ch == 2):\nprint(\"\\n\")\nprint(\"\\nList of Students\\n\")\nfor i in range(ls.__len__()):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0obj.display(ls[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# elif(ch == 3):\nprint(\"\\n Student Found, \")\ns = obj.search(2)\nobj.display(ls[s])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# elif(ch == 4):\nobj.delete(2)\nprint(ls.__len__())\nprint(\"List after deletion\")\nfor i in range(ls.__len__()):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0obj.display(ls[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# elif(ch == 5):\nobj.update(3, 2)\nprint(ls.__len__())\nprint(\"List after updation\")\nfor i in range(ls.__len__()):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0obj.display(ls[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# else:\nprint(\"Thank You !\")\n\u00a0\u00a0\u00a0\u00a0", "nl": "Student management system in Python"}
{"code": "from queue import PriorityQueue\n\u00a0\u00a0\nq = PriorityQueue()\n\u00a0\u00a0\n# insert into queue\nq.put((2, 'g'))\nq.put((3, 'e'))\nq.put((4, 'k'))\nq.put((5, 's'))\nq.put((1, 'e'))\n\u00a0\u00a0\n# remove and return\u00a0\n# lowest priority item\nprint(q.get())\nprint(q.get())\n\u00a0\u00a0\n# check queue size\nprint('Items in queue :', q.qsize())\n\u00a0\u00a0\n# check if queue is empty\nprint('Is queue empty :', q.empty())\n\u00a0\u00a0\n# check if queue is full\nprint('Is queue full :', q.full())", "nl": "Priority Queue using Queue and Heapdict module in Python"}
{"code": "import json\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Data to be written\u00a0\ndictionary ={\u00a0\n\u00a0\u00a0\"id\": \"04\",\u00a0\n\u00a0\u00a0\"name\": \"sunil\",\u00a0\n\u00a0\u00a0\"department\": \"HR\"\n}\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Serializing json\u00a0\u00a0\njson_object = json.dumps(dictionary, indent = 4)\u00a0\nprint(json_object)", "nl": "How To Convert Python Dictionary To JSON"}
{"code": "# Import required module\nimport re\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to depict use of finditer() method\ndef CntSubstr(pattern, string):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Array storing the indices\n\u00a0\u00a0\u00a0\u00a0a = [m.start() for m in re.finditer(pattern, string)]\n\u00a0\u00a0\u00a0\u00a0return a\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\nstring = 'geeksforgeeksforgeeks'\npattern = 'geeksforgeeks'\n\u00a0\u00a0\n# Printing index values of non-overlapping pattern\nprint(CntSubstr(pattern, string))", "nl": "Write a Python program to find Indices of Overlapping Substrings"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# create array\nx = np.array([1,2,3,4,5,1,2,1,1,1])\nprint(\"Original array:\")\nprint(x)\n\u00a0\u00a0\nprint(\"Most frequent value in the above array:\")\nprint(np.bincount(x).argmax())", "nl": "Find the most frequent value in a NumPy array in Python"}
{"code": "import tkinter as tk\n\u00a0\u00a0\nroot = tk.Tk()\nroot.geometry('250x150')\nroot.title(\"Button Border\")\n\u00a0\u00a0\n# Label\nl = tk.Label(root, text = \"Enter your Roll No. :\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0font = ((\"Times New Roman\"), 15))\nl.pack()\n\u00a0\u00a0\n# Entry Widget\ntk.Entry(root).pack()\n\u00a0\u00a0\n# for space between widgets\ntk.Label(root, text=\" \").pack()\n\u00a0\u00a0\n# Frame for button border with black border color\nbutton_border = tk.Frame(root, highlightbackground = \"black\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0highlightthickness = 2, bd=0)\nbttn = tk.Button(button_border, text = 'Submit', fg = 'black',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = 'yellow',font = ((\"Times New Roman\"),15))\nbttn.pack()\nbutton_border.pack()\n\u00a0\u00a0\nroot.mainloop()", "nl": "How to add a border color to a button in Tkinter in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Key-Value list Dictionary to Lists of List\n# Using loop + items()\n\u00a0\u00a0\n# initializing Dictionary\ntest_dict = {'gfg' : [1, 3, 4], 'is' : [7, 6], 'best' : [4, 5]}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Convert Key-Value list Dictionary to Lists of List\n# Using loop + items()\nres = []\nfor key, val in test_dict.items():\n\u00a0\u00a0\u00a0\u00a0res.append([key] + val)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted list is : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Key-Value list Dictionary to List of Lists"}
{"code": "# Python program to move\n# files and directories\n\u00a0\u00a0\n\u00a0\u00a0\nimport shutil\n\u00a0\u00a0\n# Source path\nsource = \"D:\\Pycharm projects\\gfg\\Test\\B\"\n\u00a0\u00a0\n# Destination path\ndestination = \"D:\\Pycharm projects\\gfg\\Test\\A\"\n\u00a0\u00a0\n# Move the content of\n# source to destination\ndest = shutil.move(source, destination)\n\u00a0\u00a0\n# print(dest) prints the\u00a0\n# Destination of moved directory", "nl": "How to move Files and Directories in Python"}
{"code": "import os\nimport time\n\u00a0\u00a0\n# Path to the file/directory\npath = r\"C:\\Program Files (x86)\\Google\\pivpT.png\"\n\u00a0\u00a0\n# Both the variables would contain time\u00a0\n# elapsed since EPOCH in float\nti_c = os.path.getctime(path)\nti_m = os.path.getmtime(path)\n\u00a0\u00a0\n# Converting the time in seconds to a timestamp\nc_ti = time.ctime(ti_c)\nm_ti = time.ctime(ti_m)\n\u00a0\u00a0\nprint(\n\u00a0\u00a0\u00a0\u00a0f\"The file located at the path {path}\n\u00a0\u00a0\u00a0\u00a0was created at {c_ti} and was last modified at {m_ti}\")", "nl": "How to get file creation and modification date or time in Python"}
{"code": "# Python program to illustrate the\n# convertion of unix timestamp string\n# to its readable date\n\n\n# Importing datetime module\nimport datetime\n\n\n# Calling the fromtimestamp() function to\n# extract datetime from the given timestamp\n\n\n# Calling the strftime() function to convert\n# the extracted datetime into its string format\nprint(datetime.datetime.fromtimestamp(int(\"1294113662\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.strftime('%Y-%m-%d %H:%M:%S'))", "nl": "Write a Python program to convert unix timestamp string to readable date"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Values Associated Keys\n# Using defaultdict() + loop\nfrom collections import defaultdict\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg' : [1, 2, 3], 'is' : [1, 4], 'best' : [4, 2]}\u00a0\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Values Associated Keys\n# Using defaultdict() + loop\nres = defaultdict(list)\nfor key, val in test_dict.items():\n\u00a0\u00a0\u00a0\u00a0for ele in val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[ele].append(key)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The values associated dictionary : \" + str(dict(res)))\u00a0", "nl": "Write a Python program to Keys associated with Values in Dictionary"}
{"code": "# Import the required modules\nfrom selenium import webdriver\nimport time\n\u00a0\u00a0\n# Main Function\nif __name__ == '__main__':\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Provide the email and password\n\u00a0\u00a0\u00a0\u00a0email = 'example@example.com'\n\u00a0\u00a0\u00a0\u00a0password = 'password'\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0options = webdriver.ChromeOptions()\n\u00a0\u00a0\u00a0\u00a0options.add_argument(\"--start-maximized\")\n\u00a0\u00a0\u00a0\u00a0options.add_argument('--log-level=3')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Provide the path of chromedriver present on your system.\n\u00a0\u00a0\u00a0\u00a0driver = webdriver.Chrome(executable_path=\"C:/chromedriver/chromedriver.exe\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chrome_options=options)\n\u00a0\u00a0\u00a0\u00a0driver.set_window_size(1920,1080)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Send a get request to the url\n\u00a0\u00a0\u00a0\u00a0driver.get('https://auth.geeksforgeeks.org/')\n\u00a0\u00a0\u00a0\u00a0time.sleep(5)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Finds the input box by name in DOM tree to send both\u00a0\n\u00a0\u00a0\u00a0\u00a0# the provided email and password in it.\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name('user').send_keys(email)\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name('pass').send_keys(password)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Find the signin button and click on it.\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'button.btn.btn-green.signin-button').click()\n\u00a0\u00a0\u00a0\u00a0time.sleep(5)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Returns the list of elements\n\u00a0\u00a0\u00a0\u00a0# having the following css selector.\n\u00a0\u00a0\u00a0\u00a0container = driver.find_elements_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Extracts the text from name,\u00a0\n\u00a0\u00a0\u00a0\u00a0# institution, email_id css selector.\n\u00a0\u00a0\u00a0\u00a0name = container[0].text\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0institution = container[1].find_element_by_css_selector('a').text\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0institution = container[1].text\n\u00a0\u00a0\u00a0\u00a0email_id = container[2].text\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Output Example 1\n\u00a0\u00a0\u00a0\u00a0print(\"Basic Info\")\n\u00a0\u00a0\u00a0\u00a0print({\"Name\": name,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Institution\": institution,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Email ID\": email})\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Clicks on Practice Tab\n\u00a0\u00a0\u00a0\u00a0driver.find_elements_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'a.mdl-navigation__link')[1].click()\n\u00a0\u00a0\u00a0\u00a0time.sleep(5)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Selected the Container containing information\n\u00a0\u00a0\u00a0\u00a0container = driver.find_element_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'div.mdl-cell.mdl-cell--7-col.mdl-cell--12-col-phone.\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0whiteBgColor.mdl-shadow--2dp.userMainDiv')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Selected the tags from the container\n\u00a0\u00a0\u00a0\u00a0grids = container.find_elements_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'div.mdl-grid')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Iterate each tag and append the text extracted from it.\n\u00a0\u00a0\u00a0\u00a0res = set()\n\u00a0\u00a0\u00a0\u00a0for grid in grids:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.add(grid.text.replace('\\n',':'))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Output Example 2\n\u00a0\u00a0\u00a0\u00a0print(\"Practice Info\")\n\u00a0\u00a0\u00a0\u00a0print(res)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Quits the driver\n\u00a0\u00a0\u00a0\u00a0driver.close()\n\u00a0\u00a0\u00a0\u00a0driver.quit()", "nl": "Controlling the Web Browser with Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# All pair combinations of 2 tuples\n# Using list comprehension\n\u00a0\u00a0\n# initializing tuples\ntest_tuple1 = (4, 5)\ntest_tuple2 = (7, 8)\n\u00a0\u00a0\n# printing original tuples\nprint(\"The original tuple 1 : \" + str(test_tuple1))\nprint(\"The original tuple 2 : \" + str(test_tuple2))\n\u00a0\u00a0\n# All pair combinations of 2 tuples\n# Using list comprehension\nres =\u00a0 [(a, b) for a in test_tuple1 for b in test_tuple2]\nres = res +\u00a0 [(a, b) for a in test_tuple2 for b in test_tuple1]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The filtered tuple : \" + str(res))", "nl": "Write a Python program to All pair combinations of 2 tuples"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Avoid Spaces in Characters Frequency\n# Using isspace() + sum()\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks 33 is\u00a0\u00a0 best'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# isspace() checks for space\u00a0\n# sum checks count\u00a0\nres = sum(not chr.isspace() for chr in test_str)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Characters Frequency avoiding spaces : \" + str(res))\u00a0", "nl": "Write a Python program to Avoid Spaces in string length"}
{"code": "# Incorrect empty class in\u00a0\n# Python\n\u00a0\u00a0\nclass Geeks:", "nl": "How to create an empty class in Python"}
{"code": "# Python3 code to demonstrate working of\n# Random K dates in Range\n# Using choices() + timedelta() + loop\nfrom datetime import date, timedelta\nfrom random import choices\n\u00a0\u00a0\n# initializing dates ranges\u00a0\ntest_date1, test_date2 = date(2015, 6, 3), date(2015, 7, 1)\n\u00a0\u00a0\n# printing dates\u00a0\nprint(\"The original range : \" + str(test_date1) + \" \" + str(test_date2))\n\u00a0\u00a0\n# initializing K\nK = 7\n\u00a0\u00a0\nres_dates = [test_date1]\n\u00a0\u00a0\n# loop to get each date till end date\nwhile test_date1 != test_date2:\n\u00a0\u00a0\u00a0\u00a0test_date1 += timedelta(days=1)\n\u00a0\u00a0\u00a0\u00a0res_dates.append(test_date1)\n\u00a0\u00a0\n# random K dates from pack\nres = choices(res_dates, k=K)\n\u00a0\u00a0\n# printing\u00a0\nprint(\"K random dates in range : \" + str(res))", "nl": "Write a Python program to Generate k random dates between two other dates"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert List to List of dictionaries\n# Using dictionary comprehension + loop\n\u00a0\u00a0\n# initializing lists\ntest_list = [\"Gfg\", 3, \"is\", 8, \"Best\", 10, \"for\", 18, \"Geeks\", 33]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing key list\u00a0\nkey_list = [\"name\", \"number\"]\n\u00a0\u00a0\n# loop to iterate through elements\n# using dictionary comprehension\n# for dictionary construction\nn = len(test_list)\nres = []\nfor idx in range(0, n, 2):\n\u00a0\u00a0\u00a0\u00a0res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary list : \" + str(res))", "nl": "Write a Python program to Convert List to List of dictionaries"}
{"code": "# Python3 implementation to build a\n# graph using Dictonaries\n\n\nfrom collections import defaultdict\n\n\n# Function to build the graph\ndef build_graph():\n\u00a0\u00a0\u00a0\u00a0edges = [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"A\", \"B\"], [\"A\", \"E\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"A\", \"C\"], [\"B\", \"D\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"B\", \"E\"], [\"C\", \"F\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"C\", \"G\"], [\"D\", \"E\"]\n\u00a0\u00a0\u00a0\u00a0]\n\u00a0\u00a0\u00a0\u00a0graph = defaultdict(list)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Loop to iterate over every\n\u00a0\u00a0\u00a0\u00a0# edge of the graph\n\u00a0\u00a0\u00a0\u00a0for edge in edges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a, b = edge[0], edge[1]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating the graph\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# as adjacency list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0graph[a].append(b)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0graph[b].append(a)\n\u00a0\u00a0\u00a0\u00a0return graph\n\n\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0graph = build_graph()\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print(graph)", "nl": "Building an undirected graph and finding shortest path using Dictionaries in Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Prefix frequency in List\n# using loop + startswith()\n\u00a0\u00a0\n# Initializing list\ntest_list = ['gfgisbest', 'geeks', 'gfgfreak', 'gfgCS', 'Gcourses']\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Initializing substring\ntest_sub = 'gfg'\n\u00a0\u00a0\n# Prefix frequency in List\n# using loop + startswith()\nres = 0\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0if ele.startswith(test_sub):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = res + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint (\"Strings count with matching frequency : \" + str(res))", "nl": "Write a Python program to Prefix frequency in string List"}
{"code": "# Python3 code to demonstrate working of\n# Update each element in tuple list\n# Using list comprehension\n\u00a0\u00a0\n# initialize list\ntest_list = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initialize add element\nadd_ele = 4\n\u00a0\u00a0\n# Update each element in tuple list\n# Using list comprehension\nres = [tuple(j + add_ele for j in sub ) for sub in test_list]\n\u00a0\u00a0\n# printing result\nprint(\"List after bulk update : \" + str(res))", "nl": "Write a Python program to Update each element in tuple list"}
{"code": "import requests\nfrom bs4 import BeautifulSoup as bs\n\u00a0\u00a0\nURL = 'https://www.geeksforgeeks.org/page/1/'\n\u00a0\u00a0\nreq = requests.get(URL)\nsoup = bs(req.text, 'html.parser')\n\u00a0\u00a0\ntitles = soup.find_all('div',attrs = {'class','head'})\n\u00a0\u00a0\nprint(titles[4].text)", "nl": "How to Scrape Multiple Pages of a Website Using Python"}
{"code": "# import module\nfrom urllib.request import urlopen\nfrom urllib.error import *\n\n\n# try block to read URL\ntry:\n\u00a0\u00a0\u00a0\u00a0html = urlopen(\"https://www.geeksforgeeks.org/\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# except block to catch\n# exception\n# and identify error\nexcept HTTPError as e:\n\u00a0\u00a0\u00a0\u00a0print(\"HTTP error\", e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\nexcept URLError as e:\n\u00a0\u00a0\u00a0\u00a0print(\"Opps ! Page not found!\", e)\n\n\nelse:\n\u00a0\u00a0\u00a0\u00a0print('Yeah !\u00a0 found ')", "nl": "Test the given page is found or not on the server Using Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert List of Lists to Tuple of Tuples\n# Using tuple + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [['Gfg', 'is', 'Best'], ['Gfg', 'is', 'love'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['Gfg', 'is', 'for', 'Geeks']]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Convert List of Lists to Tuple of Tuples\n# Using tuple + list comprehension\nres = tuple(tuple(sub) for sub in test_list)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted data : \" + str(res))\u00a0", "nl": "Write a Python program to Convert List of Lists to Tuple of Tuples"}
{"code": "# import numpy\nimport numpy as np\n\u00a0\u00a0\ngfg1 = np.array([1, 2, 3])\ngfg2 = np.array([4, 5, 6])\n\u00a0\u00a0\n# using numpy.dstack() method\nprint(np.dstack((gfg1, gfg2)))", "nl": "Write a Python program to Numpy dstack() method"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\narray1 = np.array([0, 1, 1])\narray2 = np.array([2, 2, 1])\n\u00a0\u00a0\n# Original array1\nprint(array1)\n\u00a0\u00a0\n# Original array2\nprint(array2)\n\u00a0\u00a0\n# Covariance matrix\nprint(\"\\nCovariance matrix of the said arrays:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.cov(array1, array2))", "nl": "Compute the covariance matrix of two given NumPy arrays in Python"}
{"code": "# import required libraries\nimport pandas as pd\nimport re\n\u00a0\u00a0\n# creating Dataframe with\n# name and their comments\ndf = pd.DataFrame({\n\u00a0\u00a0\u00a0\u00a0'Name' : ['Akash', 'Ashish', 'Ayush',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Diksha' , 'Radhika'],\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0'Comments': ['Hey! Akash how r u' ,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Why are you asking this to me?' ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Today, what we are going to do.' ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'No plans for today why?' ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Wedding plans, what are you saying?']},\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0columns = ['Name', 'Comments']\n\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\n# show the Dataframe\ndf", "nl": "Extract punctuation from the specified column of Dataframe using Regex in Python"}
{"code": "# Import the required modules\nimport datetime\nfrom openpyxl import Workbook\nimport time\n\u00a0\u00a0\n\u00a0\u00a0\n# Main Function\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Create a worbook object\n\u00a0\u00a0\u00a0\u00a0wb = Workbook()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Select the active sheet\n\u00a0\u00a0\u00a0\u00a0ws = wb.active\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Heading of Cell A1\n\u00a0\u00a0\u00a0\u00a0ws.cell(row=1, column=1).value = \"Current Date and Time\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Cell A2 containing the Current Date and Time\n\u00a0\u00a0\u00a0\u00a0ws.cell(row=2, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Sleep of 2 seconds\n\u00a0\u00a0\u00a0\u00a0time.sleep(2)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Cell A3 containing the Current Date and Time\n\u00a0\u00a0\u00a0\u00a0ws.cell(row=3, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\u00a0\u00a0\u00a0\u00a0time.sleep(2)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Cell A4 containing the Current Date and Time\n\u00a0\u00a0\u00a0\u00a0ws.cell(row=4, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Save the workbook with a\n\u00a0\u00a0\u00a0\u00a0# filename and close the object\n\u00a0\u00a0\u00a0\u00a0wb.save('gfg.xlsx')\n\u00a0\u00a0\u00a0\u00a0wb.close()", "nl": "How to add timestamp to excel file in Python"}
{"code": "# importing the module\nfrom types import FunctionType\n\u00a0\u00a0\n# functttion during run-time\nf_code = compile('def gfg(): return \"GEEKSFORGEEKS\"', \"<string>\", \"exec\")\nf_func = FunctionType(f_code.co_consts[0], globals(), \"gfg\")\n\u00a0\u00a0\n# calling the function\nprint(f_func())", "nl": "Defining a Python function at runtime"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# creating a 1-D Numpy array\nn_array = np.array([1, 0, 2, 0, 3, 0, 0, 5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06, 7, 5, 0, 8])\n\u00a0\u00a0\nprint(\"Original array:\")\nprint(n_array)\n\u00a0\u00a0\n# finding indices of null elements using np.where()\nprint(\"\\nIndices of elements equal to zero of the \\\ngiven 1-D array:\")\n\u00a0\u00a0\nres = np.where(n_array == 0)[0]\nprint(res)", "nl": "Find indices of elements equal to zero in a NumPy array in Python"}
{"code": "# importing the required modules\nimport glob\nimport pandas as pd\n\u00a0\u00a0\n# specifying the path to csv files\npath = \"csvfoldergfg\"\n\u00a0\u00a0\n# csv files in the path\nfiles = glob.glob(path + \"/*.csv\")\n\u00a0\u00a0\n# defining an empty list to store\u00a0\n# content\ndata_frame = pd.DataFrame()\ncontent = []\n\u00a0\u00a0\n# checking all the csv files in the\u00a0\n# specified path\nfor filename in files:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# reading content of csv file\n\u00a0\u00a0\u00a0\u00a0# content.append(filename)\n\u00a0\u00a0\u00a0\u00a0df = pd.read_csv(filename, index_col=None)\n\u00a0\u00a0\u00a0\u00a0content.append(df)\n\u00a0\u00a0\n# converting content to data frame\ndata_frame = pd.concat(content)\nprint(data_frame)", "nl": "Getting all CSV files from a directory using Python"}
{"code": "# Python program explaining\u00a0\n# where() function\u00a0\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\nnp.where([[True, False], [True, True]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[1, 2], [3, 4]], [[5, 6], [7, 8]])", "nl": "numpy.where() in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Multiple indices Replace in String\n# Using loop + join()\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks is best'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing list\u00a0\ntest_list = [2, 4, 7, 10]\n\u00a0\u00a0\n# initializing repl char\nrepl_char = '*'\n\u00a0\u00a0\n# Multiple indices Replace in String\n# Using loop + join()\ntemp = list(test_str)\nfor idx in test_list:\n\u00a0\u00a0\u00a0\u00a0temp[idx] = repl_char\nres = ''.join(temp)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The String after performing replace : \" + str(res))\u00a0", "nl": "Write a Python program to Multiple indices Replace in String"}
{"code": "from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport speech_recognition as sr\nimport pyttsx3\nimport time\n\u00a0\u00a0\n\u00a0\u00a0\ndef automateYoutube(searchtext):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# giving the path of chromedriver to selenium websriver\n\u00a0\u00a0\u00a0\u00a0path = \"C:\\\\Users\\\\hp\\\\Downloads\\\\chromedriver\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0url = \"https://www.youtube.com/\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# opening the youtube in chromedriver\n\u00a0\u00a0\u00a0\u00a0driver = webdriver.Chrome(path)\n\u00a0\u00a0\u00a0\u00a0driver.get(url)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find the search bar using selenium find_element function\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name(\"search_query\").send_keys(searchtext)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# clicking on the search button\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"#search-icon-legacy.ytd-searchbox\").click()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For findding the right match search\n\u00a0\u00a0\u00a0\u00a0WebDriverWait(driver, 0).until(expected_conditions.title_contains(MyText))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# clicking on the match search having same as in searched query\n\u00a0\u00a0\u00a0\u00a0WebDriverWait(driver, 30).until(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expected_conditions.element_to_be_clickable((By.ID, \"img\"))).click()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# while(True):\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0 pass\n\u00a0\u00a0\n\u00a0\u00a0\nspeak = sr.Recognizer()\ntry:\n\u00a0\u00a0\u00a0\u00a0with sr.Microphone() as speaky:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# adjust the energy threshold based on\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the surrounding noise level\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0speak.adjust_for_ambient_noise(speaky, duration=0.2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"listening...\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# listens for the user's input\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0searchquery = speak.listen(speaky)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Using ggogle to recognize audio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MyText = speak.recognize_google(searchquery)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MyText = MyText.lower()\n\u00a0\u00a0\nexcept sr.RequestError as e:\n\u00a0\u00a0\u00a0\u00a0print(\"Could not request results; {0}\".format(e))\n\u00a0\u00a0\nexcept sr.UnknownValueError:\n\u00a0\u00a0\u00a0\u00a0print(\"unknown error occured\")\n\u00a0\u00a0\n# Calling thr function\nautomateYoutube(MyText)", "nl": "Automate Youtube with Python"}
{"code": "# Python3 code to demonstrate working of\n# Intersection in Tuple Records Data\n# Using list comprehension\n\u00a0\u00a0\n# Initializing lists\ntest_list1 = [('gfg', 1), ('is', 2), ('best', 3)]\ntest_list2 = [('i', 3), ('love', 4), ('gfg', 1)]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# Intersection in Tuple Records Data\n# Using list comprehension\nres = [ele1 for ele1 in test_list1\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ele2 in test_list2 if ele1 == ele2]\n\u00a0\u00a0\n# printing result\nprint(\"The Intersection of data records is : \" + str(res))", "nl": "Write a Python program to Intersection in Tuple Records Data"}
{"code": "# importing libraries\nimport pandas as pd\nimport numpy as np\n\u00a0\u00a0\nraw_Data = {'Voter_name': ['Geek1', 'Geek2', 'Geek3', 'Geek4',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Geek5', 'Geek6', 'Geek7', 'Geek8'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Voter_age': [15, 23, 25, 9, 67, 54, 42, np.NaN]}\n\u00a0\u00a0\ndf = pd.DataFrame(raw_Data, columns = ['Voter_name', 'Voter_age'])\n#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //DataFrame will look like\n#\n# Voter_name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Voter_age\n# Geek1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 15\n# Geek2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 23\n# Geek3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 25\n# Geek4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 09\n# Geek5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 67\n# Geek6\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 54\n# Geek7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 42\n# Geek8\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 not a number\n\u00a0\u00a0\neligible = []\n\u00a0\u00a0\n# For each row in the column\nfor age in df['Voter_age']:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if age >= 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # if Voter eligible\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eligible.append('Yes')\n\u00a0\u00a0\u00a0\u00a0elif age < 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # if voter is not eligible\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eligible.append(\"No\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eligible.append(\"Not Sure\")\n\u00a0\u00a0\n# Create a column from the list\ndf['Voter'] = eligible\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(df)", "nl": "Create a pandas column using for loop in Python"}
{"code": "# Python code demonstrate how to create\u00a0\u00a0\n# Pandas DataFrame by lists of dicts.\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Initialise data to lists.\u00a0\ndata = [{'Geeks': 'dataframe', 'For': 'using', 'geeks': 'list'},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'Geeks':10, 'For': 20, 'geeks': 30}]\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Creates DataFrame.\u00a0\ndf = pd.DataFrame(data)\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Print the data\u00a0\ndf\u00a0", "nl": "Create a Pandas DataFrame from List of Dicts in Python"}
{"code": "# Python program to keep the old content of the file\n# when using write.\n\u00a0\u00a0\n# Opening the file with append mode\nfile = open(\"gfg input file.txt\", \"a\")\n\u00a0\u00a0\n# Content to be added\ncontent = \"\\n\\n# This Content is added through the program #\"\n\u00a0\u00a0\n# Writing the file\nfile.write(content)\n\u00a0\u00a0\n# Closing the opened file\nfile.close()", "nl": "How to keep old content when Writing to Files in Python"}
{"code": "# create a string str\nstring = \"geeks\"\nprint(\"Initially\")\nprint(\"The datatype of string : \" + str(type(string)))\nprint(\"Contents of string : \" + string)\n\u00a0\u00a0\n# convert String to Set\nstring = set(string)\nprint(\"\\nAfter the conversion\")\nprint(\"The datatype of string : \" + str(type(string)))\nprint(\"Contents of string : \", string)", "nl": "Convert String to Set in Python"}
{"code": "# Python Program to create array with all zeros\nimport numpy as geek\u00a0\n\u00a0\u00a0\na = geek.zeros(3, dtype = int)\u00a0\nprint(\"Matrix a : \\n\", a)\u00a0\n\u00a0\u00a0\nb = geek.zeros([3, 3], dtype = int)\u00a0\nprint(\"\\nMatrix b : \\n\", b)\u00a0", "nl": "Create a Numpy array filled with all zeros | Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Replace words from Dictionary\n# Using split() + join() + get()\n\u00a0\u00a0\n# initializing string\ntest_str = 'geekforgeeks best for geeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# lookup Dictionary\nlookp_dict = {\"best\" : \"good and better\", \"geeks\" : \"all CS aspirants\"}\n\u00a0\u00a0\n# performing split()\ntemp = test_str.split()\nres = []\nfor wrd in temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# searching from lookp_dict\n\u00a0\u00a0\u00a0\u00a0res.append(lookp_dict.get(wrd, wrd))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nres = ' '.join(res)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Replaced Strings : \" + str(res))\u00a0", "nl": "Write a Python program to Replace words from Dictionary"}
{"code": "# Python program to print negative Numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [11, -21, 0, 45, 66, -93]\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num < 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print negative numbers in a list"}
{"code": "from collections import Counter\n\u00a0\u00a0\ndef find_dup_char(input):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now create dictionary using counter method\n\u00a0\u00a0\u00a0\u00a0# which will have strings as key and their\u00a0\n\u00a0\u00a0\u00a0\u00a0# frequencies as value\n\u00a0\u00a0\u00a0\u00a0WC = Counter(input)\n\u00a0\u00a0\u00a0\u00a0j = -1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Finding no. of\u00a0 occurrence of a character\n\u00a0\u00a0\u00a0\u00a0# and get the index of it.\n\u00a0\u00a0\u00a0\u00a0for i in WC.values():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = j + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( i > 1 ):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print WC.keys()[j],\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'geeksforgeeks'\n\u00a0\u00a0\u00a0\u00a0find_dup_char(input)", "nl": "Write a Python program to Find all duplicate characters in string"}
{"code": "# Python3 code to demonstrate working of\n# Records with Value at K index\n# Using loop\n\u00a0\u00a0\n# initialize list\u00a0\ntest_list = [(3, 1, 5), (1, 3, 6), (2, 5, 7), (5, 2, 8), (6, 3, 0)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initialize ele\u00a0\nele = 3\n\u00a0\u00a0\n# initialize K\u00a0\nK = 1\n\u00a0\u00a0\n# Records with Value at K index\n# Using loop\n# using y for K = 1\u00a0\nres = []\nfor x, y, z in test_list:\n\u00a0\u00a0\u00a0\u00a0if y == ele:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append((x, y, z))\n\u00a0\u00a0\n# printing result\nprint(\"The tuples of element at Kth position : \" + str(res))", "nl": "Write a Python program to Records with Value at K index"}
{"code": "# Python3 code to demonstrate working of\n# Convert tuple to List with succeeding element\n# Using list comprehension\n\n\n# initializing tuple\ntest_tup = (5, 6, 7, 4, 9)\n\n\n# printing original tuple\nprint(\"The original tuple is : \", test_tup)\n\n\n# initializing K\nK = \"Gfg\"\n\n\n# list comprehension for nested loop for flatten\nres = [ele for sub in test_tup for ele in (sub, K)]\n\n\n# printing result\nprint(\"Converted Tuple with K : \", res)", "nl": "Write a Python program to convert tuple into list by adding the given string after every element"}
{"code": "# Python program explaining\n# numpy.matlib.randn() function\n\u00a0\u00a0\n# importing matrix library from numpy\nimport numpy as geek\nimport numpy.matlib\n\u00a0\u00a0\n# desired 3 x 4 random output matrix\u00a0\nout_mat = geek.matlib.randn((3, 4))\u00a0\nprint (\"Output matrix : \", out_mat)\u00a0", "nl": "numpy matrix operations | randn() function in Python"}
{"code": "import selenium\nprint(selenium.__version__)", "nl": "How to scroll down followers popup in Instagram  in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Tuple List intersection [ Order irrespective ]\n# Using sorted() + set() + & operator + list comprehension\n\u00a0\u00a0\n# initializing lists\ntest_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntest_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# Using sorted() + set() + & operator + list comprehension\n# Using & operator to intersect, sorting before performing intersection\nres = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"List after intersection : \" + str(res))\u00a0", "nl": "Write a Python program to Tuple List intersection (Order irrespective)"}
{"code": "# importing module\nimport collections\n\n\n# initialising a deque() of arbitary length\nlinked_lst = collections.deque()\n\n\n# filling deque() with elements\nlinked_lst.append('first')\nlinked_lst.append('second')\nlinked_lst.append('third')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# adding element at an arbitary position\nlinked_lst.insert(1, 'fourth')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# deleting the last element\nlinked_lst.pop()\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# removing a specific element\nlinked_lst.remove('fourth')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)", "nl": "Write a Python Library for Linked List"}
{"code": "# Python program to convert any base\n# number to its corresponding decimal\n# number\n\u00a0\u00a0\n# Function to convert any base number\n# to its corresponding decimal number\ndef any_base_to_decimal(number, base):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# calling the builtin function\u00a0\n\u00a0\u00a0\u00a0\u00a0# int(number, base) by passing\u00a0\n\u00a0\u00a0\u00a0\u00a0# two arguments in it number in\n\u00a0\u00a0\u00a0\u00a0# string form and base and store\n\u00a0\u00a0\u00a0\u00a0# the output value in temp\n\u00a0\u00a0\u00a0\u00a0temp = int(number, base)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing the corresponding decimal\n\u00a0\u00a0\u00a0\u00a0# number\n\u00a0\u00a0\u00a0\u00a0print(temp)\n\u00a0\u00a0\n# Driver's Code\nif __name__ == '__main__' :\n\u00a0\u00a0\u00a0\u00a0hexadecimal_number = '1A'\n\u00a0\u00a0\u00a0\u00a0base = 16\n\u00a0\u00a0\u00a0\u00a0any_base_to_decimal(hexadecimal_number, base)", "nl": "Write a Python program to convert any base to decimal by using int() method"}
{"code": "# import module\nfrom datetime import datetime\n\u00a0\u00a0\n# get current date and time\ncurrent_datetime = datetime.now()\nprint(\"Current date & time : \", current_datetime)\n\u00a0\u00a0\n# convert datetime obj to string\nstr_current_datetime = str(current_datetime)\n\u00a0\u00a0\n# create a file object along with extension\nfile_name = str_current_datetime+\".txt\"\nfile = open(file_name, 'w')\n\u00a0\u00a0\nprint(\"File created : \", file.name)\nfile.close()", "nl": "How to create filename containing date or time in Python"}
{"code": "# Python code to demonstrate\n# to replace nan values\n# with an average of columns\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\n# Initialising numpy array\nini_array = np.array([[1.3, 2.5, 3.6, np.nan],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2.6, 3.3, np.nan, 5.5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2.1, 3.2, 5.4, 6.5]])\n\u00a0\u00a0\n# printing initial array\nprint (\"initial array\", ini_array)\n\u00a0\u00a0\n# column mean\ncol_mean = np.nanmean(ini_array, axis = 0)\n\u00a0\u00a0\n# printing column mean\nprint (\"columns mean\", str(col_mean))\n\u00a0\u00a0\n# find indices where nan value is present\ninds = np.where(np.isnan(ini_array))\n\u00a0\u00a0\n# replace inds with avg of column\nini_array[inds] = np.take(col_mean, inds[1])\n\u00a0\u00a0\n# printing final array\nprint (\"final array\", ini_array)", "nl": "Write a Python program to Replace NaN values with average of columns"}
{"code": "# Python3 code to demonstrate\n# String till Substring\n# using partition()\n\n\n# initializing string\ntest_string = \"GeeksforGeeks is best for geeks\"\n\n\n# initializing split word\nspl_word = 'best'\n\n\n# printing original string\nprint(\"The original string : \" + str(test_string))\n\n\n# printing split string\nprint(\"The split string : \" + str(spl_word))\n\n\n# using partition()\n# String till Substring\nres = test_string.partition(spl_word)[0]\n\n\n# print result\nprint(\"String before the substring occurrence : \" + res)", "nl": "Write a Python program to String till Substring"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# create numpy array\narr = numpy.array([[2, 8, 9, 4],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[9, 4, 9, 4],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[4, 5, 9, 7],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2, 9, 4, 3]])\n\u00a0\u00a0\n# Counting sequence\noutput = repr(arr).count(\"9, 4\")\n\u00a0\u00a0\n# view output\nprint(output)", "nl": "Find the number of occurrences of a sequence in a NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove substring list from String\n# Using loop + replace()\n\u00a0\u00a0\n# initializing string\ntest_str = \"gfg is best for all geeks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing sub list\u00a0\nsub_list = [\"best\", \"all\"]\n\u00a0\u00a0\n# Remove substring list from String\n# Using loop + replace()\nfor sub in sub_list:\n\u00a0\u00a0\u00a0\u00a0test_str = test_str.replace(' ' + sub + ' ', ' ')\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after substring removal : \" + test_str)\u00a0", "nl": "Write a Python program to Remove substring list from String"}
{"code": "# import numpy and geometric\nimport numpy as np\nimport matplotlib.pyplot as plt\n\u00a0\u00a0\n# Using geometric() method\ngfg = np.random.geometric(0.65, 1000)\n\u00a0\u00a0\ncount, bins, ignored = plt.hist(gfg, 40, density = True)\nplt.show()", "nl": "numpy.random.geometric() in Python"}
{"code": "import numpy as geek\u00a0\n\u00a0\u00a0\ngfg = geek.array((0, 0, 0, 0, 1, 5, 7, 0, 6, 2, 9, 0, 10, 0, 0))\n\u00a0\u00a0\n# without trim parameter\n# returns an array without leading and trailing zeros\u00a0\n\u00a0\u00a0\nres = geek.trim_zeros(gfg)\nprint(res)", "nl": "numpy.trim_zeros() in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[4, 1, 12, 3, 4, 6, 7]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.take() method\ngeek = gfg.take(2)\n\u00a0\u00a0\u00a0\u00a0\nprint(geek)", "nl": "Write a Python program to Numpy matrix.take()"}
{"code": "class example:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"One\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Two\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Three\")\n\u00a0\u00a0\n\u00a0\u00a0\ne = example()", "nl": "What is a clean, Pythonic way to have multiple constructors in Python"}
{"code": "# import required module\nimport ctypes\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# create node class\nclass Node:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.npx = 0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# create linked list class\nclass XorLinkedList:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# constructor\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes = []\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to insert node at beginning\n\u00a0\u00a0\u00a0\u00a0def InsertAtStart(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = Node(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = id(node) ^ self.head.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.npx = id(self.head)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes.append(node)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to insert node at end\n\u00a0\u00a0\u00a0\u00a0def InsertAtEnd(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = Node(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.npx = id(node) ^ self.tail.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.npx = id(self.tail)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes.append(node)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to remove node at beginning\n\u00a0\u00a0\u00a0\u00a0def DeleteAtStart(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.isEmpty():\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"List is empty !\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head == self.tail:\u00a0 # If list has 1 node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (0 ^ self.head.npx) == id(self.tail):\u00a0 # If list has 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = self.tail.npx = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0 # If list has more than 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = self.head.value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = self.__type_cast(0 ^ self.head.npx)\u00a0 # Address of next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (id(self.head) ^ x.npx)\u00a0 # Address of next of next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = x\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = 0 ^ y\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to remove node at end\n\u00a0\u00a0\u00a0\u00a0def DeleteAtEnd(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.isEmpty():\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"List is empty !\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head == self.tail:\u00a0 # If list has 1 node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.__type_cast(0 ^ self.head.npx) == (self.tail):\u00a0 # If list has 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = self.tail.npx = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0 # If list has more than 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = node.value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = self.__type_cast(prev_id).npx ^ id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = self.__type_cast(prev_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y.npx = x ^ 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = y\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to traverse linked list\n\u00a0\u00a0\u00a0\u00a0def Print(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"We are printing values rather than returning it bacause\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for returning we have to append all values in a list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and it takes extra memory to save all values in a list.\"\"\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head != None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"List is empty !\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to traverse linked list in reverse order\n\u00a0\u00a0\u00a0\u00a0def ReversePrint(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Print Values is reverse order.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"We are printing values rather than returning it bacause\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for returning we have to append all values in a list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and it takes extra memory to save all values in a list.\"\"\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head != None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"List is empty !\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to get length of linked list\n\u00a0\u00a0\u00a0\u00a0def Length(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not self.isEmpty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return count\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to get node data value by index\n\u00a0\u00a0\u00a0\u00a0def PrintByIndex(self, index):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(index):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Value dosn't found index out of range.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return node.value\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to check if the liked list is empty or not\n\u00a0\u00a0\u00a0\u00a0def isEmpty(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to return a new instance of type\n\u00a0\u00a0\u00a0\u00a0def __type_cast(self, id):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ctypes.cast(id, ctypes.py_object).value\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\n\u00a0\u00a0\n# create object\nobj = XorLinkedList()\n\u00a0\u00a0\n# insert nodes\nobj.InsertAtEnd(2)\nobj.InsertAtEnd(3)\nobj.InsertAtEnd(4)\nobj.InsertAtStart(0)\nobj.InsertAtStart(6)\nobj.InsertAtEnd(55)\n\u00a0\u00a0\n# display length\nprint(\"\\nLength:\", obj.Length())\n\u00a0\u00a0\n# traverse\nprint(\"\\nTraverse linked list:\")\nobj.Print()\n\u00a0\u00a0\nprint(\"\\nTraverse in reverse order:\")\nobj.ReversePrint()\n\u00a0\u00a0\n# display data values by index\nprint('\\nNodes:')\nfor i in range(obj.Length()):\n\u00a0\u00a0\u00a0\u00a0print(\"Data value at index\", i, 'is', obj.PrintByIndex(i))\n\u00a0\u00a0\n# removing nodes\nprint(\"\\nDelete Last Node: \", obj.DeleteAtEnd())\nprint(\"\\nDelete First Node: \", obj.DeleteAtStart())\n\u00a0\u00a0\n# new length\nprint(\"\\nUpdated length:\", obj.Length())\n\u00a0\u00a0\n# display data values by index\nprint('\\nNodes:')\nfor i in range(obj.Length()):\n\u00a0\u00a0\u00a0\u00a0print(\"Data value at index\", i, 'is', obj.PrintByIndex(i))\n\u00a0\u00a0\n# traverse\nprint(\"\\nTraverse linked list:\")\nobj.Print()\n\u00a0\u00a0\nprint(\"\\nTraverse in reverse order:\")\nobj.ReversePrint()", "nl": "Implementation of XOR Linked List in Python"}
{"code": "# Python code to find the URL from an input string\n# Using the regular expression\nimport re\n\u00a0\u00a0\ndef Find(string):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# findall() has been used\u00a0\n\u00a0\u00a0\u00a0\u00a0# with valid conditions for urls in string\n\u00a0\u00a0\u00a0\u00a0regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n\u00a0\u00a0\u00a0\u00a0url = re.findall(regex,string)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return [x[0] for x in url]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nstring = 'My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles in the portal of http://www.geeksforgeeks.org/'\nprint(\"Urls: \", Find(string))", "nl": "Write a Python program to Check for URL in a String"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# creating a 2X2 Numpy matrix\nn_array = np.array([[50, 29], [30, 44]])\n\u00a0\u00a0\n# Displaying the Matrix\nprint(\"Numpy Matrix is:\")\nprint(n_array)\n\u00a0\u00a0\n# calculating the determinant of matrix\ndet = np.linalg.det(n_array)\n\u00a0\u00a0\nprint(\"\\nDeterminant of given 2X2 matrix:\")\nprint(int(det))", "nl": "How to Calculate the determinant of a matrix using NumPy in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Let's create a Dataframe\ndf = pd.DataFrame({'City':['New York', 'Parague', 'New Delhi', 'Venice', 'new Orleans'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy', 'Tech_Summit'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000, 12000]})\n\u00a0\u00a0\n# Let's create the index\nindex_ = [pd.Period('02-2018'), pd.Period('04-2018'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pd.Period('06-2018'), pd.Period('10-2018'), pd.Period('12-2018')]\n\u00a0\u00a0\n# Set the index\ndf.index = index_\n\u00a0\u00a0\n# Let's print the dataframe\nprint(df)", "nl": "Replace values in Pandas dataframe using regex in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Factors Frequency Dictionary\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [2, 4, 6, 8, 3, 9, 12, 15, 16, 18]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\nres = dict()\n\u00a0\u00a0\n# iterating till max element\u00a0\nfor idx in range(1, max(test_list)):\n\u00a0\u00a0\u00a0\u00a0res[idx] = 0\n\u00a0\u00a0\u00a0\u00a0for key in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking for factor\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key % idx == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[idx] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary : \" + str(res))", "nl": "Write a Python program to Factors Frequency Dictionary"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Integer Matrix to String Matrix\n# Using str() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [[4, 5, 7], [10, 8, 3], [19, 4, 6], [9, 3, 6]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# using str() to convert each element to string\u00a0\nres = [[str(ele) for ele in sub] for sub in test_list]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The data type converted Matrix : \" + str(res))", "nl": "Write a Python program to Convert Integer Matrix to String Matrix"}
{"code": "# Python program to find smallest\n# number in a list\n\n\n# list of numbers\nlist1 = [10, 20, 4, 45, 99]\n\n\n# sorting the list\nlist1.sort()\n\n\n# printing the first element\nprint(\"Smallest element is:\", *list1[:1])", "nl": "Write a Python program to find smallest number in a list"}
{"code": "# import tkinter\u00a0\nimport tkinter as tk\u00a0\n\u00a0\u00a0\n# import ttk theme module for styling\nimport tkinter.ttk as ttk", "nl": "How to Change Tkinter LableFrame Border Color in Python"}
{"code": "# Python3 code to demonstrate working of\n# Extract elements filtered by substring\u00a0\n# from other list Using zip() + loop + in\n# operator\n\u00a0\u00a0\n# initializing list\ntest_list1 = [\"Gfg\", \"is\", \"not\", \"best\", \"and\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"not\", \"for\", \"CS\"]\ntest_list2 = [\"Its ok\", \"all ok\", \"wrong\", \"looks ok\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ok\", \"wrong\", \"ok\", \"thats ok\"]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# initializing substr\nsub_str = \"ok\"\n\u00a0\u00a0\nres = []\n# using zip() to map by index\nfor ele1, ele2 in zip(test_list1, test_list2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for substring\n\u00a0\u00a0\u00a0\u00a0if sub_str in ele2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele1)\n\u00a0\u00a0\n# printing result\nprint(\"The extracted list : \" + str(res))", "nl": "Write a Python program to Filter the List of String whose index in second List contaons the given Substring"}
{"code": "# Python program to count positive and negative numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, -21, 4, -45, 66, -93, 1]\n\u00a0\u00a0\npos_count, neg_count = 0, 0\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num >= 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos_count += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0neg_count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(\"Positive numbers in the list: \", pos_count)\nprint(\"Negative numbers in the list: \", neg_count)", "nl": "Write a Python program to count positive and negative numbers in a list"}
{"code": "# taking an input list\ninput_list = [1, 2, 2, 5, 8, 4, 4, 8]\n\u00a0\u00a0\n# taking an input list\nl1 = []\n\u00a0\u00a0\n# taking an counter\ncount = 0\n\u00a0\u00a0\n# travesing the array\nfor item in input_list:\n\u00a0\u00a0\u00a0\u00a0if item not in l1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l1.append(item)\n\u00a0\u00a0\n# printing the output\nprint(\"No of unique items are:\", count)", "nl": "How to count unique values inside a list in Python"}
{"code": "# importing the numpy library as np\nimport numpy as np\n\u00a0\u00a0\n# Create a numpy array\narr = np.array(['New York', 'Lisbon', 'Beijing', 'Quebec'])\n\u00a0\u00a0\n# Print the array\nprint(arr)", "nl": "Find the length of each string element in the Numpy array in Python"}
{"code": "# Python code to demonstrate a dictionary\n# with multiple inputs in a key.\nimport random as rn\n\n\n# creating an empty dictionary\ndict = {}\n\n\n# Insert first triplet in dictionary\nx, y, z = 10, 20, 30\ndict[x, y, z] = x + y - z;\n\n\n# Insert second triplet in dictionary\nx, y, z = 5, 2, 4\ndict[x, y, z] = x + y - z;\n\n\n# print the dictionary\nprint(dict)", "nl": "Write a Python dictionary with keys having multiple inputs"}
{"code": "# import numpy library\nimport numpy as np\n\u00a0\u00a0\n# create a list\nnum_list = [10, 20, 30, 40, 50]\n\u00a0\u00a0\n# uniformly select any element\n# from the list\nnumber = np.random.choice(num_list)\n\u00a0\u00a0\nprint(number)", "nl": "How to choose elements from the list with different probability using NumPy in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Words Frequency in String Shorthands\n# Using dictionary comprehension + count() + split()\n\u00a0\u00a0\n# initializing string\ntest_str = 'Gfg is best . Geeks are good and Geeks like Gfg'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# Words Frequency in String Shorthands\n# Using dictionary comprehension + count() + split()\nres = {key: test_str.count(key) for key in test_str.split()}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The words frequency : \" + str(res))\u00a0", "nl": "Write a Python program to Words Frequency in String Shorthands"}
{"code": "# Python3 code to demonstrate working of\n# Row lengths counts\n# Using dictionary + loop\n\u00a0\u00a0\n# initializing list\ntest_list = [[6, 3, 1], [8, 9], [2],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[10, 12, 7], [4, 11]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\nres = dict()\nfor sub in test_list:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# initializing incase of new length\n\u00a0\u00a0\u00a0\u00a0if len(sub) not in res:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[len(sub)] = 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# increment in case of length present\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[len(sub)] += 1\n\u00a0\u00a0\n# printing result\nprint(\"Row length frequencies : \" + str(res))", "nl": "Write a Python program to Count the frequency of matrix row length"}
{"code": "\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# function that takes arbitary\n# number of inputs\ndef avgfun(*n):\n\u00a0\u00a0\u00a0\u00a0sums = 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for t in n:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sums = sums + t\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0avg = sums / len(n)\n\u00a0\u00a0\u00a0\u00a0return avg\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\u00a0\nresult1 = avgfun(1, 2, 3)\nresult2 = avgfun(2, 6, 4, 8)\n\u00a0\u00a0\n# Printing average of the list\u00a0\nprint(round(result1, 2))\nprint(round(result2, 2))", "nl": "Find the average of an unknown number of inputs in Python"}
{"code": "# importing library\nimport numpy\n\u00a0\u00a0\n# create numpy array\narr = numpy.array([[1, 2, 3, 4, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[10, -3, 30, 4, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3, 2, 5, -4, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[9, 7, 3, 6, 5]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0])\n\u00a0\u00a0\n# declare specified value\nX = 6\n\u00a0\u00a0\n# view array\nprint(\"Given Array:\\n\", arr)\n\u00a0\u00a0\n# finding out the row numbers\noutput\u00a0 = numpy.where(numpy.any(arr > X,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0axis = 1))\n\u00a0\u00a0\n# view output\nprint(\"Result:\\n\", output)", "nl": "Get row numbers of NumPy array having element larger than X in Python"}
{"code": "# Python Program to Print\n# all subsets of given size of a set\n\n\nimport itertools\n\n\ndef findsubsets(s, n):\n\u00a0\u00a0\u00a0\u00a0return list(itertools.combinations(s, n))\n\n\n# Driver Code\ns = {1, 2, 3}\nn = 2\n\n\nprint(findsubsets(s, n))", "nl": "Write a Python program to get all subsets of given size of a set"}
{"code": "# Python3 program to find a list of uncommon words\n\u00a0\u00a0\n# Function to return all uncommon words\ndef UncommonWords(A, B):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# count will contain all the word counts\n\u00a0\u00a0\u00a0\u00a0count = {}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# insert words of string A to hash\n\u00a0\u00a0\u00a0\u00a0for word in A.split():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count[word] = count.get(word, 0) + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# insert words of string B to hash\n\u00a0\u00a0\u00a0\u00a0for word in B.split():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count[word] = count.get(word, 0) + 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# return required list of words\n\u00a0\u00a0\u00a0\u00a0return [word for word in count if count[word] == 1]\n\u00a0\u00a0\n# Driver Code\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\u00a0\u00a0\n# Print required answer\nprint(UncommonWords(A, B))", "nl": "Write a Python program to find uncommon words from two Strings"}
{"code": "# import pandas to use pandas DataFrame\nimport pandas as pd\n\u00a0\u00a0\n# data in the form of list of tuples\ndata = [('Peter', 18, 7),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('Riff', 15, 6),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('John', 17, 8),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('Michel', 18, 7),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('Sheli', 17, 5) ]\n\u00a0\u00a0\n\u00a0\u00a0\n# create DataFrame using data\ndf = pd.DataFrame(data, columns =['Name', 'Age', 'Score'])\n\u00a0\u00a0\nprint(df)\u00a0", "nl": "Creating a Pandas dataframe using list of tuples in Python"}
{"code": "# Import the numpy library\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Initialize numpy array\na = np.array([1.2])\n\u00a0\u00a0\n# Get floor value\na = np.floor(a)\nprint(a)", "nl": "How to get the floor, ceiling and truncated values of the elements of a numpy array in Python"}
{"code": "# import required module\nimport os\n# assign directory\ndirectory = 'files'\n\n\n# iterate over files in\n# that directory\nfor filename in os.listdir(directory):\n\u00a0\u00a0\u00a0\u00a0f = os.path.join(directory, filename)\n\u00a0\u00a0\u00a0\u00a0# checking if it is a file\n\u00a0\u00a0\u00a0\u00a0if os.path.isfile(f):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f)", "nl": "How to iterate over files in directory using Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Elementwise AND in tuples\n# using zip() + generator expression\u00a0\n\u00a0\u00a0\n# initialize tuples\u00a0\ntest_tup1 = (10, 4, 6, 9)\u00a0\ntest_tup2 = (5, 2, 3, 3)\u00a0\n\u00a0\u00a0\n# printing original tuples\u00a0\nprint(\"The original tuple 1 : \" + str(test_tup1))\u00a0\nprint(\"The original tuple 2 : \" + str(test_tup2))\u00a0\n\u00a0\u00a0\n# Elementwise AND in tuples\n# using zip() + generator expression\u00a0\nres = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The AND tuple : \" + str(res))\u00a0", "nl": "Write a Python program to Elementwise AND in tuples"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove None Tuples from List\n# Using all() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [(None, 2), (None, None), (3, 4), (12, 3), (None, )]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# negating result for discarding all None Tuples\nres = [sub for sub in test_list if not all(ele == None for ele in sub)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Removed None Tuples : \" + str(res))", "nl": "Write a Python program to Remove Tuples from the List having every element as None"}
{"code": "import json\n\u00a0\u00a0\n\u00a0\u00a0\ndef read_json(filename: str) -> dict:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(filename, \"r\") as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data = json.loads(f.read())\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise Exception(f\"Reading {filename} file encountered an error\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return data\n\u00a0\u00a0\n\u00a0\u00a0\ndef normalize_json(data: dict) -> dict:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0new_data = dict()\n\u00a0\u00a0\u00a0\u00a0for key, value in data.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not isinstance(value, dict):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data[key] = value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for k, v in value.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data[key + \"_\" + k] = v\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return new_data\n\u00a0\u00a0\n\u00a0\u00a0\ndef generate_csv_data(data: dict) -> str:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Defining CSV columns in a list to maintain\n\u00a0\u00a0\u00a0\u00a0# the order\n\u00a0\u00a0\u00a0\u00a0csv_columns = data.keys()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Generate the first row of CSV\u00a0\n\u00a0\u00a0\u00a0\u00a0csv_data = \",\".join(csv_columns) + \"\\n\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Generate the single record present\n\u00a0\u00a0\u00a0\u00a0new_row = list()\n\u00a0\u00a0\u00a0\u00a0for col in csv_columns:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_row.append(str(data[col]))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Concatenate the record with the column information\u00a0\n\u00a0\u00a0\u00a0\u00a0# in CSV format\n\u00a0\u00a0\u00a0\u00a0csv_data += \",\".join(new_row) + \"\\n\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return csv_data\n\u00a0\u00a0\n\u00a0\u00a0\ndef write_to_file(data: str, filepath: str) -> bool:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(filepath, \"w+\") as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(data)\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise Exception(f\"Saving data to {filepath} encountered an error\")\n\u00a0\u00a0\n\u00a0\u00a0\ndef main():\n\u00a0\u00a0\u00a0\u00a0# Read the JSON file as python dictionary\n\u00a0\u00a0\u00a0\u00a0data = read_json(filename=\"article.json\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Normalize the nested python dict\n\u00a0\u00a0\u00a0\u00a0new_data = normalize_json(data=data)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Pretty print the new dict object\n\u00a0\u00a0\u00a0\u00a0print(\"New dict:\", new_data)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Generate the desired CSV data\u00a0\n\u00a0\u00a0\u00a0\u00a0csv_data = generate_csv_data(data=new_data)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Save the generated CSV data to a CSV file\n\u00a0\u00a0\u00a0\u00a0write_to_file(data=csv_data, filepath=\"data.csv\")\n\u00a0\u00a0\n\u00a0\u00a0\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0main()", "nl": "Convert nested JSON to CSV in Python"}
{"code": "# Python program explaining\n# numpy.squeeze function\n\u00a0\u00a0\nimport numpy as geek\n\u00a0\u00a0\nin_arr = geek.array([[[2, 2, 2], [2, 2, 2]]])\n\u00a0\u00a0\u00a0\nprint (\"Input array : \", in_arr)\u00a0\nprint(\"Shape of input array : \", in_arr.shape)\u00a0\u00a0\n\u00a0\u00a0\nout_arr = geek.squeeze(in_arr)\u00a0\n\u00a0\u00a0\nprint (\"output squeezed array : \", out_arr)\nprint(\"Shape of output array : \", out_arr.shape)\u00a0", "nl": "numpy.squeeze() in Python"}
{"code": "# Python program to accept the strings\n# which contains all the vowels\n\n\n# Function for check if string\n# is accepted or not\ndef check(string) :\n\n\n\u00a0\u00a0\u00a0\u00a0string = string.lower()\n\n\n\u00a0\u00a0\u00a0\u00a0# set() function convert \"aeiou\"\n\u00a0\u00a0\u00a0\u00a0# string into set of characters\n\u00a0\u00a0\u00a0\u00a0# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}\n\u00a0\u00a0\u00a0\u00a0vowels = set(\"aeiou\")\n\n\n\u00a0\u00a0\u00a0\u00a0# set() function convert empty\n\u00a0\u00a0\u00a0\u00a0# dictionary into empty set\n\u00a0\u00a0\u00a0\u00a0s = set({})\n\n\n\u00a0\u00a0\u00a0\u00a0# looping through each\n\u00a0\u00a0\u00a0\u00a0# character of the string\n\u00a0\u00a0\u00a0\u00a0for char in string :\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check for the character is present inside\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the vowels set or not. If present, then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# add into the set s by using add method\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char in vowels :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.add(char)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# check the length of set s equal to length\n\u00a0\u00a0\u00a0\u00a0# of vowels set or not. If equal, string is\u00a0\n\u00a0\u00a0\u00a0\u00a0# accepted otherwise not\n\u00a0\u00a0\u00a0\u00a0if len(s) == len(vowels) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Accepted\")\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Not Accepted\")\n\n\n\n\n# Driver code\nif __name__ == \"__main__\" :\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0string = \"SEEquoiaL\"\n\n\n\u00a0\u00a0\u00a0\u00a0# calling function\n\u00a0\u00a0\u00a0\u00a0check(string)", "nl": "Write a Python program to Program to accept the strings which contains all vowels"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract Unique values dictionary values\n# Using set comprehension + values() + sorted()\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg' : [5, 6, 7, 8],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is' : [10, 11, 7, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'best' : [6, 12, 10, 8],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'for' : [1, 2, 5]}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Extract Unique values dictionary values\n# Using set comprehension + values() + sorted()\nres = list(sorted({ele for val in test_dict.values() for ele in val}))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The unique values list is : \" + str(res))\u00a0", "nl": "Write a Python program to Extract Unique values dictionary values"}
{"code": "# Python3 code to demonstrate working of\n# Positive Tuples in List\n# Using list comprehension + all()\n\u00a0\u00a0\n# initializing list\ntest_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# all() to check each element\nres = [sub for sub in test_list if all(ele >= 0 for ele in sub)]\n\u00a0\u00a0\n# printing result\nprint(\"Positive elements Tuples : \" + str(res))", "nl": "Write a Python program to find Tuples with positive elements in List of tuples"}
{"code": "# Importing Numpy module\nimport numpy as np\n\u00a0\u00a0\n# Creating a 1-D Numpy array\nn_arr = np.array([75.42436315, 42.48558583, 60.32924763])\nprint(\"Given array:\")\nprint(n_arr)\n\u00a0\u00a0\nprint(\"\\nReplace all elements of array which are greater than 50. to 15.50\")\nn_arr[n_arr > 50.] = 15.50\n\u00a0\u00a0\nprint(\"New array :\\n\")\nprint(n_arr)", "nl": "Replace NumPy array elements that doesn\u2019t satisfy the given condition in Python"}
{"code": "with open('example.txt', 'r', encoding='utf-8') as file:\n\u00a0\u00a0\u00a0\u00a0data = file.readlines()\n\u00a0\u00a0\nprint(data)\ndata[1] = \"Here is my modified Line 2\\n\"\n\u00a0\u00a0\nwith open('example.txt', 'w', encoding='utf-8') as file:\n\u00a0\u00a0\u00a0\u00a0file.writelines(data)", "nl": "Write a Python Program to Replace Specific Line in File"}
{"code": "# Python 3 code to demonstrate\u00a0\n# Least Frequent Character in String\n# naive method\u00a0\n\u00a0\u00a0\n# initializing string\u00a0\ntest_str = \"GeeksforGeeks\"\n\u00a0\u00a0\n# printing original string\nprint (\"The original string is : \" + test_str)\n\u00a0\u00a0\n# using naive method to get\n# Least Frequent Character in String\nall_freq = {}\nfor i in test_str:\n\u00a0\u00a0\u00a0\u00a0if i in all_freq:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all_freq[i] += 1\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all_freq[i] = 1\nres = min(all_freq, key = all_freq.get)\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The minimum of all characters in GeeksforGeeks is : \" + str(res))", "nl": "Write a Python program to Least Frequent Character in String"}
{"code": "# Python program to print positive Numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [11, -21, 0, 45, 66, -93]\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num >= 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print positive numbers in a list"}
{"code": "import pandas as pd\nimport pdfkit\n\u00a0\u00a0\n# SAVE CSV TO HTML USING PANDAS\ncsv = 'MyCSV.csv'\nhtml_file = csv_file[:-3]+'html'\n\u00a0\u00a0\ndf = pd.read_csv(csv_file, sep=',')\ndf.to_html(html_file)\n\u00a0\u00a0\n# INSTALL wkhtmltopdf AND SET PATH IN CONFIGURATION\n# These two Steps could be eliminated By Installing wkhtmltopdf -\n# - and setting it's path to Environment Variables\npath_wkhtmltopdf = r'D:\\Softwares\\wkhtmltopdf\\bin\\wkhtmltopdf.exe'\nconfig = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)\n\u00a0\u00a0\n# CONVERT HTML FILE TO PDF WITH PDFKIT\npdfkit.from_url(\"MyCSV.html\", \"FinalOutput.pdf\", configuration=config)", "nl": "How to convert CSV File to PDF File using Python"}
{"code": "string1 = 'coding'\n\u00a0\u00a0\n# opening a text file\nfile1 = open(\"geeks.txt\", \"r\")\n\u00a0\u00a0\n# setting flag and index to 0\nflag = 0\nindex = 0\n\u00a0\u00a0\n# Loop through the file line by line\nfor line in file1:\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0index + = 1\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking string is present in line or not\n\u00a0\u00a0\u00a0\u00a0if string1 in line:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# checking condition for string found or not\nif flag == 0:\u00a0\n\u00a0\u00a0\u00a0print('String', string1 , 'Not Found')\u00a0\nelse:\u00a0\n\u00a0\u00a0\u00a0print('String', string1, 'Found In Line', index)\n\u00a0\u00a0\n# closing text file\u00a0\u00a0\u00a0\u00a0\nfile1.close()\u00a0", "nl": "Write a Python program to How to search for a string in text files"}
{"code": "# Python3 program to swap elements\n# at given positions\n\n\n# Swap function\ndef swapPositions(list, pos1, pos2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0list[pos1], list[pos2] = list[pos2], list[pos1]\n\u00a0\u00a0\u00a0\u00a0return list\n\n\n# Driver function\nList = [23, 65, 19, 90]\npos1, pos2\u00a0 = 1, 3\n\n\nprint(swapPositions(List, pos1-1, pos2-1))", "nl": "Write a Python program to swap two elements in a list"}
{"code": "# Python program for implementation of Shell Sort\n\u00a0\u00a0\ndef shellSort(arr):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Start with a big gap, then reduce the gap\n\u00a0\u00a0\u00a0\u00a0n = len(arr)\n\u00a0\u00a0\u00a0\u00a0gap = n/2\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Do a gapped insertion sort for this gap size.\n\u00a0\u00a0\u00a0\u00a0# The first gap elements a[0..gap-1] are already in gapped\u00a0\n\u00a0\u00a0\u00a0\u00a0# order keep adding one more element until the entire array\n\u00a0\u00a0\u00a0\u00a0# is gap sorted\n\u00a0\u00a0\u00a0\u00a0while gap > 0:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(gap,n):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# add a[i] to the elements that have been gap sorted\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# save a[i] in temp and make a hole at position i\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = arr[i]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# shift earlier gap-sorted elements up until the correct\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# location for a[i] is found\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = i\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while\u00a0 j >= gap and arr[j-gap] >temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[j] = arr[j-gap]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j -= gap\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# put temp (the original a[i]) in its correct location\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[j] = temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gap /= 2\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver code to test above\narr = [ 12, 34, 54, 2, 3]\n\u00a0\u00a0\nn = len(arr)\nprint (\"Array before sorting:\")\nfor i in range(n):\n\u00a0\u00a0\u00a0\u00a0print(arr[i]),\n\u00a0\u00a0\nshellSort(arr)\n\u00a0\u00a0\nprint (\"\\nArray after sorting:\")\nfor i in range(n):\n\u00a0\u00a0\u00a0\u00a0print(arr[i]),\n\u00a0\u00a0\n# This code is contributed by Mohit Kumra", "nl": "Write a Python Program for ShellSort"}
{"code": "# Python3 code to demonstrate working of\n# Convert tuple to float\n# using join() + float() + str() + generator expression\n\u00a0\u00a0\n# initialize tuple\ntest_tup = (4, 56)\n\u00a0\u00a0\n# printing original tuple\u00a0\nprint(\"The original tuple : \" + str(test_tup))\n\u00a0\u00a0\n# Convert tuple to float\n# using join() + float() + str() + generator expression\nres = float('.'.join(str(ele) for ele in test_tup))\n\u00a0\u00a0\n# printing result\nprint(\"The float after conversion from tuple is : \" + str(res))", "nl": "Write a Python program to Convert tuple to float value"}
{"code": "# Python program to remove empty tuples from a\u00a0\n# list of tuples function to remove empty tuples\u00a0\n# using list comprehension\ndef Remove(tuples):\n\u00a0\u00a0\u00a0\u00a0tuples = [t for t in tuples if t]\n\u00a0\u00a0\u00a0\u00a0return tuples\n\u00a0\u00a0\n# Driver Code\ntuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('krishna', 'akbar', '45'), ('',''),()]\nprint(Remove(tuples))", "nl": "Write a Python program to Remove empty tuples from a list"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Assign Frequency to Tuples\n# Using Counter() + items() + * operator + list comprehension\nfrom collections import Counter\n\u00a0\u00a0\n# initializing list\ntest_list = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# one-liner to solve problem\n# assign Frequency as last element of tuple\nres = [(*key, val) for key, val in Counter(test_list).items()]\n\u00a0\u00a0\n# printing results\nprint(\"Frequency Tuple list : \" + str(res))", "nl": "Write a Python program to Assign Frequency to Tuples"}
{"code": "# Python program to find the\n# maximum of two numbers\n\n\n\n\ndef maximum(a, b):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if a >= b:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return a\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return b\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\na = 2\nb = 4\nprint(maximum(a, b))", "nl": "Maximum of two numbers in Python"}
{"code": "# define the size (no. of columns)\n# must be odd to draw proper diamond shape\nsize = 8\n\n\n# initialize the spaces\nspaces = size\n\n\n# loops for iterations to create worksheet\nfor i in range(size//2+2):\n\u00a0\u00a0\u00a0\u00a0for j in range(size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition to left space\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition to right space\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for making diamond\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# else print *\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j < i-1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(' ', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif j > spaces:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(' ', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (i == 0 and j == 0) | (i == 0 and j == size-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(' ', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('*', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# increase space area by decreasing spaces\n\u00a0\u00a0\u00a0\u00a0spaces -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# for line change\n\u00a0\u00a0\u00a0\u00a0print()", "nl": "Simple Diamond Pattern in Python"}
{"code": "# Python 3 code to demonstrate\u00a0\n# Maximum frequency character in String\n# naive method\u00a0\n\u00a0\u00a0\n# initializing string\u00a0\ntest_str = \"GeeksforGeeks\"\n\u00a0\u00a0\n# printing original string\nprint (\"The original string is : \" + test_str)\n\u00a0\u00a0\n# using naive method to get\n# Maximum frequency character in String\nall_freq = {}\nfor i in test_str:\n\u00a0\u00a0\u00a0\u00a0if i in all_freq:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all_freq[i] += 1\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all_freq[i] = 1\nres = max(all_freq, key = all_freq.get)\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The maximum of all characters in GeeksforGeeks is : \" + str(res))", "nl": "Write a Python program to Maximum frequency character in String"}
{"code": "# creating the array\narr = [4, 5, 5, 5, 3, 8]\n\u00a0\u00a0\n# size of the list\nsize = len(arr)\n\u00a0\u00a0\n# looping till length - 2\nfor i in range(size - 2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking the conditions\n\u00a0\u00a0\u00a0\u00a0if arr[i] == arr[i + 1] and arr[i + 1] == arr[i + 2]:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the element as the\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# conditions are satisfied\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(arr[i])", "nl": "Write a Python program to check if the list contains three consecutive common numbers in Python"}
{"code": "import matplotlib.pyplot as plt\nimport csv\n\u00a0\u00a0\nx = []\ny = []\n\u00a0\u00a0\nwith open('biostats.csv','r') as csvfile:\n\u00a0\u00a0\u00a0\u00a0plots = csv.reader(csvfile, delimiter = ',')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for row in plots:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x.append(row[0])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y.append(int(row[2]))\n\u00a0\u00a0\nplt.bar(x, y, color = 'g', width = 0.72, label = \"Age\")\nplt.xlabel('Names')\nplt.ylabel('Ages')\nplt.title('Ages of different persons')\nplt.legend()\nplt.show()", "nl": "Visualize data from CSV file in Python"}
{"code": "# function to mirror characters of a string\n\n\ndef mirrorChars(input,k):\n\n\n\u00a0\u00a0\u00a0\u00a0# create dictionary\n\u00a0\u00a0\u00a0\u00a0original = 'abcdefghijklmnopqrstuvwxyz'\n\u00a0\u00a0\u00a0\u00a0reverse = 'zyxwvutsrqponmlkjihgfedcba'\n\u00a0\u00a0\u00a0\u00a0dictChars = dict(zip(original,reverse))\n\n\n\u00a0\u00a0\u00a0\u00a0# separate out string after length k to change\n\u00a0\u00a0\u00a0\u00a0# characters in mirror\n\u00a0\u00a0\u00a0\u00a0prefix = input[0:k-1]\n\u00a0\u00a0\u00a0\u00a0suffix = input[k-1:]\n\u00a0\u00a0\u00a0\u00a0mirror = ''\n\n\n\u00a0\u00a0\u00a0\u00a0# change into mirror\n\u00a0\u00a0\u00a0\u00a0for i in range(0,len(suffix)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mirror = mirror + dictChars[suffix[i]]\n\n\n\u00a0\u00a0\u00a0\u00a0# concat prefix and mirrored part\n\u00a0\u00a0\u00a0\u00a0print (prefix+mirror)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'paradox'\n\u00a0\u00a0\u00a0\u00a0k = 3\n\u00a0\u00a0\u00a0\u00a0mirrorChars(input,k)", "nl": "Write a Python Dictionary to find mirror characters in a string"}
{"code": "# Python 3 program to find the middle of a\u00a0\u00a0\n# given linked list\u00a0\n\u00a0\u00a0\n# Node class\u00a0\nclass Node:\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to initialise the node object\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None\u00a0\n\u00a0\u00a0\nclass LinkedList:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def push(self, new_data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node = Node(new_data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.next = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = new_node\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to get the middle of\u00a0\n\u00a0\u00a0\u00a0\u00a0# the linked list\n\u00a0\u00a0\u00a0\u00a0def printMiddle(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slow_ptr = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fast_ptr = self.head\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (fast_ptr is not None and fast_ptr.next is not None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fast_ptr = fast_ptr.next.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slow_ptr = slow_ptr.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The middle element is: \", slow_ptr.data)\n\u00a0\u00a0\n# Driver code\nlist1 = LinkedList()\nlist1.push(5)\nlist1.push(4)\nlist1.push(2)\nlist1.push(3)\nlist1.push(1)\nlist1.printMiddle()", "nl": "Write a Python program to find middle of a linked list using one traversal"}
{"code": "# import library\nimport re\n\u00a0\u00a0\n# define a function\u00a0\ndef find(string, sample) :\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# check substring present\u00a0\n\u00a0\u00a0# in a string or not\n\u00a0\u00a0if (sample in string):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = \"^\" + sample\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check if string starts\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# with the substring\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = re.search(y, string)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"string starts with the given substring\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"string doesn't start with the given substring\")\n\u00a0\u00a0\n\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"entered string isn't a substring\")\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver code\nstring = \"geeks for geeks makes learning fun\"\u00a0\u00a0\nsample = \"geeks\"\n\u00a0\u00a0\n# function call\nfind(string, sample)\n\u00a0\u00a0\nsample = \"makes\"\n\u00a0\u00a0\n# function call\nfind(string, sample)", "nl": "How to check if a string starts with a substring using regex in Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Replace index elements with elements in Other List\n# using list comprehension\n\u00a0\u00a0\n# Initializing lists\ntest_list1 = ['Gfg', 'is', 'best']\ntest_list2 = [0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 2, 0]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# Replace index elements with elements in Other List\n# using list comprehension\nres = [test_list1[idx] for idx in test_list2]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint (\"The lists after index elements replacements is : \" + str(res))", "nl": "Write a Python program to Replace index elements with elements in Other List"}
{"code": "# Python program to\n# demonstrate queue implementation\n# using collections.dequeue\n\u00a0\u00a0\u00a0\nfrom collections import deque\n\u00a0\u00a0\u00a0\n# Initializing a queue\nq = deque()\n\u00a0\u00a0\u00a0\n# Adding elements to a queue\nq.append('a')\nq.append('b')\nq.append('c')\n\u00a0\u00a0\n# display the queue\nprint(\"Initial queue\")\nprint(q,\"\\n\")\n\u00a0\u00a0\n# display the type\nprint(type(q))", "nl": "Dumping queue into list or array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Exceptional Split in String\n# Using loop + split()\n\u00a0\u00a0\n# initializing string\ntest_str = \"gfg, is, (best, for), geeks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Exceptional Split in String\n# Using loop + split()\ntemp = ''\nres = []\ncheck = 0\nfor ele in test_str:\n\u00a0\u00a0\u00a0\u00a0if ele == '(':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0check += 1\n\u00a0\u00a0\u00a0\u00a0elif ele == ')':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0check -= 1\n\u00a0\u00a0\u00a0\u00a0if ele == ', ' and check == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if temp.strip():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(temp)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = ''\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp += ele\nif temp.strip():\n\u00a0\u00a0\u00a0\u00a0res.append(temp)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after exceptional split : \" + str(res))\u00a0", "nl": "Write a Python program to Exceptional Split in String"}
{"code": "# Python program to demonstrate\n# lambda functions\n\n\n\n\nstring ='GeeksforGeeks'\n\n\n# lambda returns a function object\nprint(lambda string : string)", "nl": "Write a Python Lambda Functions"}
{"code": "# import pandas as pd\nimport pandas as pd\n\u00a0\u00a0\ngapminder_csv_url ='http://bit.ly/2cLzoxH'\n# load the data with pd.read_csv\nrecord = pd.read_csv(gapminder_csv_url)\n\u00a0\u00a0\nrecord.head()", "nl": "Getting Unique values from a column in Pandas dataframe in Python"}
{"code": "from collections import Counter\n\u00a0\u00a0\ndef find_dup_char(input):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now create dictionary using counter method\n\u00a0\u00a0\u00a0\u00a0# which will have strings as key and their\u00a0\n\u00a0\u00a0\u00a0\u00a0# frequencies as value\n\u00a0\u00a0\u00a0\u00a0WC = Counter(input)\n\u00a0\u00a0\u00a0\u00a0j = -1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Finding no. of\u00a0 occurrence of a character\n\u00a0\u00a0\u00a0\u00a0# and get the index of it.\n\u00a0\u00a0\u00a0\u00a0for i in WC.values():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = j + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( i > 1 ):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print WC.keys()[j],\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'geeksforgeeks'\n\u00a0\u00a0\u00a0\u00a0find_dup_char(input)", "nl": "Write a Python program to Find all duplicate characters in string"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\n# create numpy 1d-array\narr = np.array([2, 0,\u00a0 1, 5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04, 1, 9])\n\u00a0\u00a0\nprint(\"Given array:\", arr)\n\u00a0\u00a0\n# sort an array in\n# ascending order\n\u00a0\u00a0\n# np.argsort() return\n# array of indices for\n# sorted array\nsorted_index_array = np.argsort(arr)\n\u00a0\u00a0\n# sorted array\nsorted_array = arr[sorted_index_array]\n\u00a0\u00a0\nprint(\"Sorted array:\", sorted_array)\n\u00a0\u00a0\n# we want 1 largest value\nn = 1\n\u00a0\u00a0\n# we are using negative\n# indexing concept\n\u00a0\u00a0\n# take n largest value\nrslt = sorted_array[-n : ]\n\u00a0\u00a0\n# show the output\nprint(\"{} largest value:\".format(n),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rslt[0])", "nl": "How to get the n-largest values of an array using NumPy in Python"}
{"code": "from bs4 import BeautifulSoup\nimport requests\nimport re", "nl": "Scrape IMDB movie rating and details using Python"}
{"code": "# Python code to merge dict using update() method\ndef Merge(dict1, dict2):\n\u00a0\u00a0\u00a0\u00a0return(dict2.update(dict1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\n\n\n# This return None\nprint(Merge(dict1, dict2))\n\n\n# changes made in dict2\nprint(dict2)", "nl": "Write a Python program to Merging two Dictionaries"}
{"code": "<!DOCTYPE html>\n<html>\u00a0\n<body>\u00a0\n<button type= \u201cbutton\u201d >Geeks For Geeks</button>\u00a0\n</body>\u00a0\n<html>", "nl": "Write a Python Selenium \u2013 Find element by text"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Key with maximum unique values\n# Using loop\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {\"Gfg\" : [5, 7, 5, 4, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"is\" : [6, 7, 4, 3, 3],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Best\" : [9, 9, 6, 5, 5]}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\nmax_val = 0\nmax_key = None\u00a0\nfor sub in test_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# test for length using len()\n\u00a0\u00a0\u00a0\u00a0# converted to set for duplicates removal\n\u00a0\u00a0\u00a0\u00a0if len(set(test_dict[sub])) > max_val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_val = len(set(test_dict[sub]))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_key = sub\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Key with maximum unique values : \" + str(max_key))\u00a0", "nl": "Write a Python program to Key with maximum unique values"}
{"code": "import numpy as np\nimport pandas as pd\n\n\n# loading in the iris dataset for demo purposes\n\n\ndataset = pd.read_csv(\"iris.csv\")\n\n\ndataset.head()", "nl": "Convert covariance matrix to correlation matrix using Python"}
{"code": "# Importing Numpy module\nimport numpy as np\n\u00a0\u00a0\n# Creating 2X3 2-D Numpy array\nn_arr = np.array([[10.5, 22.5, 3.8],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[41, np.nan, np.nan]])\n\u00a0\u00a0\nprint(\"Given array:\")\nprint(n_arr)\n\u00a0\u00a0\nprint(\"\\nRemove all rows containing non-numeric elements\")\nprint(n_arr[~np.isnan(n_arr).any(axis=1)])", "nl": "How to Remove rows in Numpy array that contains non-numeric values in Python"}
{"code": "# import module\nfrom datetime import datetime\n\u00a0\u00a0\n# get current date and time\ncurrent_datetime = datetime.now()\nprint(\"Current date & time : \", current_datetime)\n\u00a0\u00a0\n# convert datetime obj to string\nstr_current_datetime = str(current_datetime)\n\u00a0\u00a0\n# create a file object along with extension\nfile_name = str_current_datetime+\".txt\"\nfile = open(file_name, 'w')\n\u00a0\u00a0\nprint(\"File created : \", file.name)\nfile.close()", "nl": "How to create filename containing date or time in Python"}
{"code": "# Python program to illustrate the intersection\n# of two lists in most simple way\ndef intersection(lst1, lst2):\n\u00a0\u00a0\u00a0\u00a0lst3 = [value for value in lst1 if value in lst2]\n\u00a0\u00a0\u00a0\u00a0return lst3\n\n\n# Driver Code\nlst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]\nlst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]\nprint(intersection(lst1, lst2))", "nl": "Write a Python program to Intersection of two lists"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Matrix to Custom Tuple Matrix\n# Using zip() + loop\n\u00a0\u00a0\n# initializing lists\ntest_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing List elements\u00a0\nadd_list = ['Gfg', 'is', 'best']\n\u00a0\u00a0\n# Convert Matrix to Custom Tuple Matrix\n# Using zip() + loop\nres = []\nfor idx, ele in zip(add_list, test_list):\n\u00a0\u00a0\u00a0\u00a0for e in ele:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append((idx, e))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Matrix after conversion : \" + str(res))", "nl": "Write a Python program to Convert Matrix to Custom Tuple Matrix"}
{"code": "# Python3 code to illustrate the conversion of\n# datetime.datetime to excel serial date number\n\n\n# Importing datetime module\nimport datetime\n\n\n# Calling the now() function to return\n# current date and time\ncurrent_datetime = datetime.datetime.now()\n\n\n# Calling the strftime() function to convert\n# the above current datetime into excel serial date number\nprint(current_datetime.strftime('%x %X'))", "nl": "How to convert a Python datetime.datetime to excel serial date number"}
{"code": "import numpy as n\n\u00a0\u00a0\n# create array\ny = n.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\nprint(\"Original array:\", end=\" \")\nprint(y)\n\u00a0\u00a0\n# rount to nearest integer\ny = n.rint(y)\nprint(\"After rounding off:\", end=\" \")\nprint(y)", "nl": "How to round elements of the NumPy array to the nearest integer in Python"}
{"code": "# Python program explaining\n# numpy.char.find() method\u00a0\n\u00a0\u00a0\n# importing numpy as geek\nimport numpy as geek\n\u00a0\u00a0\n# input arrays\u00a0\u00a0\nin_arr = geek.array(['aAaAaA', 'baA', 'abBABba'])\nprint (\"Input array : \", in_arr)\u00a0\n\u00a0\u00a0\n# output arrays\u00a0\nout_arr = geek.char.find(in_arr, sub ='A')\nprint (\"Output array: \", out_arr)\u00a0", "nl": "numpy string operations | find() function in Python"}
{"code": "# Python program explaining\n# numpy.core.defchararray.join() method\u00a0\n\u00a0\u00a0\n# importing numpy\u00a0\nimport numpy as geek\n\u00a0\u00a0\n# input array\u00a0\nin_arr = geek.array(['Python', 'Numpy', 'Pandas'])\nprint (\"Input original array : \", in_arr)\u00a0\n\u00a0\u00a0\n# creating the separator\nsep = geek.array(['-', '+', '*'])\n\u00a0\u00a0\n\u00a0\u00a0\nout_arr = geek.core.defchararray.join(sep, in_arr)\nprint (\"Output joined array: \", out_arr)\u00a0", "nl": "numpy string operations | join() function in Python"}
{"code": "# Python program explaining\n# numpy.negative() function\n\u00a0\u00a0\nimport numpy as geek\nin_num = 10\n\u00a0\u00a0\nprint (\"Input\u00a0 number : \", in_num)\n\u00a0\u00a0\u00a0\u00a0\nout_num = geek.negative(in_num)\u00a0\nprint (\"negative of input number : \", out_num)\u00a0", "nl": "numpy.negative() in Python"}
{"code": "# importing numpy as np\nimport numpy as np\n\u00a0\u00a0\n# declare matrix with np\ngfg = np.array([[2, 3], [4, 5]])\n\u00a0\u00a0\n# using array.flatten() method\nflat_gfg = gfg.flatten()\nprint(flat_gfg)", "nl": "Flatten a Matrix in Python using NumPy"}
{"code": "# Python 3 program for recursive binary search.\n# Modifications needed for the older Python 2 are found in comments.\n\n\n# Returns index of x in arr if present, else -1\ndef binary_search(arr, low, high, x):\n\n\n\u00a0\u00a0\u00a0\u00a0# Check base case\n\u00a0\u00a0\u00a0\u00a0if high >= low:\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = (high + low) // 2\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If element is present at the middle itself\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[mid] == x:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return mid\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If element is smaller than mid, then it can only\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# be present in left subarray\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif arr[mid] > x:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return binary_search(arr, low, mid - 1, x)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Else the element can only be present in right subarray\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return binary_search(arr, mid + 1, high, x)\n\n\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Element is not present in the array\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1\n\n\n# Test array\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\n\n\n# Function call\nresult = binary_search(arr, 0, len(arr)-1, x)\n\n\nif result != -1:\n\u00a0\u00a0\u00a0\u00a0print(\"Element is present at index\", str(result))\nelse:\n\u00a0\u00a0\u00a0\u00a0print(\"Element is not present in array\")", "nl": "Write a Python Program for Binary Search (Recursive and Iterative)"}
{"code": "# import module\nimport requests\nfrom bs4 import BeautifulSoup", "nl": "Scraping Reddit with Python and BeautifulSoup"}
{"code": "# python program to demonstrate\n# unique combination of two lists\n# using zip() and permutation of itertools\n\n\n# import itertools package\nimport itertools\nfrom itertools import permutations\n\n\n# initialize lists\nlist_1 = [\"a\", \"b\", \"c\",\"d\"]\nlist_2 = [1,4,9]\n\n\n# create empty list to store the\n# combinations\nunique_combinations = []\n\n\n# Getting all permutations of list_1\n# with length of list_2\npermut = itertools.permutations(list_1, len(list_2))\n\n\n# zip() is called to pair each permutation\n# and shorter list element into combination\nfor comb in permut:\n\u00a0\u00a0\u00a0\u00a0zipped = zip(comb, list_2)\n\u00a0\u00a0\u00a0\u00a0unique_combinations.append(list(zipped))\n\n\n# printing unique_combination list\nprint(unique_combinations)", "nl": "Write a Python program to get all unique combinations of two Lists"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Create a list from rows in Pandas dataframe in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Word location in String\n# Using findall() + index()\nimport re\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks is best for geeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing word\u00a0\nwrd = 'best'\n\u00a0\u00a0\n# Word location in String\n# Using findall() + index()\ntest_str = test_str.split()\nres = -1\nfor idx in test_str:\n\u00a0\u00a0\u00a0\u00a0if len(re.findall(wrd, idx)) > 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = test_str.index(idx) + 1\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The location of word is : \" + str(res))\u00a0", "nl": "Write a Python program to Word location in String"}
{"code": "# code\nclass geeks:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# this is used to print the number\n\u00a0\u00a0\u00a0\u00a0# of instances of a class\n\u00a0\u00a0\u00a0\u00a0counter = 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# constructor of geeks class\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# increment\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0geeks.counter += 1\n\u00a0\u00a0\n\u00a0\u00a0\n# object or instance of geeks class\ng1 = geeks()\ng2 = geeks()\ng3 = geeks()\nprint(geeks.counter)", "nl": "How to count number of instances of a class in Python"}
{"code": "# Python program to demonstrate\n# symmetry and palindrome of the\n# string\n\n\n\n\n# Function to check whether the\n# string is palindrome or not\ndef palindrome(a):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# finding the mid, start\n\u00a0\u00a0\u00a0\u00a0# and last index of the string\n\u00a0\u00a0\u00a0\u00a0mid = (len(a)-1)//2\u00a0\u00a0\u00a0\u00a0 #you can remove the -1 or you add <= sign in line 21\u00a0\n\u00a0\u00a0\u00a0\u00a0start = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #so that you can compare the middle elements also.\n\u00a0\u00a0\u00a0\u00a0last = len(a)-1\n\u00a0\u00a0\u00a0\u00a0flag = 0\n\n\n\u00a0\u00a0\u00a0\u00a0# A loop till the mid of the\n\u00a0\u00a0\u00a0\u00a0# string\n\u00a0\u00a0\u00a0\u00a0while(start <= mid):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# comparing letters from right\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# from the letters from left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[start]== a[last]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0last -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Checking the flag variable to\n\u00a0\u00a0\u00a0\u00a0# check if the string is palindrome\n\u00a0\u00a0\u00a0\u00a0# or not\n\u00a0\u00a0\u00a0\u00a0if flag == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The entered string is palindrome\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The entered string is not palindrome\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to check whether the\n# string is symmetrical or not\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\ndef symmetry(a):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0n = len(a)\n\u00a0\u00a0\u00a0\u00a0flag = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Check if the string's length\n\u00a0\u00a0\u00a0\u00a0# is odd or even\n\u00a0\u00a0\u00a0\u00a0if n%2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = n//2 +1\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = n//2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0start1 = 0\n\u00a0\u00a0\u00a0\u00a0start2 = mid\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while(start1 < mid and start2 < n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[start1]== a[start2]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start1 = start1 + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start2 = start2 + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Checking the flag variable to\n\u00a0\u00a0\u00a0\u00a0# check if the string is symmetrical\n\u00a0\u00a0\u00a0\u00a0# or not\n\u00a0\u00a0\u00a0\u00a0if flag == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The entered string is symmetrical\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The entered string is not symmetrical\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\nstring = 'amaama'\npalindrome(string)\nsymmetry(string)", "nl": "Write a Python program to check whether the string is Symmetrical or Palindrome"}
{"code": "from collections import OrderedDict\n\n\nclass LRUCache:\n\n\n\u00a0\u00a0\u00a0\u00a0# initialising capacity\n\u00a0\u00a0\u00a0\u00a0def __init__(self, capacity: int):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cache = OrderedDict()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.capacity = capacity\n\n\n\u00a0\u00a0\u00a0\u00a0# we return the value of the key\n\u00a0\u00a0\u00a0\u00a0# that is queried in O(1) and return -1 if we\n\u00a0\u00a0\u00a0\u00a0# don't find the key in out dict / cache.\n\u00a0\u00a0\u00a0\u00a0# And also move the key to the end\n\u00a0\u00a0\u00a0\u00a0# to show that it was recently used.\n\u00a0\u00a0\u00a0\u00a0def get(self, key: int) -> int:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key not in self.cache:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cache.move_to_end(key)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.cache[key]\n\n\n\u00a0\u00a0\u00a0\u00a0# first, we add / update the key by conventional methods.\n\u00a0\u00a0\u00a0\u00a0# And also move the key to the end to show that it was recently used.\n\u00a0\u00a0\u00a0\u00a0# But here we will also check whether the length of our\n\u00a0\u00a0\u00a0\u00a0# ordered dictionary has exceeded our capacity,\n\u00a0\u00a0\u00a0\u00a0# If so we remove the first key (least recently used)\n\u00a0\u00a0\u00a0\u00a0def put(self, key: int, value: int) -> None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cache[key] = value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cache.move_to_end(key)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(self.cache) > self.capacity:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cache.popitem(last = False)\n\n\n\n\n# RUNNER\n# initializing our cache with the capacity of 2\ncache = LRUCache(2)\n\n\n\n\ncache.put(1, 1)\nprint(cache.cache)\ncache.put(2, 2)\nprint(cache.cache)\ncache.get(1)\nprint(cache.cache)\ncache.put(3, 3)\nprint(cache.cache)\ncache.get(2)\nprint(cache.cache)\ncache.put(4, 4)\nprint(cache.cache)\ncache.get(1)\nprint(cache.cache)\ncache.get(3)\nprint(cache.cache)\ncache.get(4)\nprint(cache.cache)\n\n\n#This code was contributed by Sachin Negi", "nl": "LRU Cache in Python using OrderedDict"}
{"code": "def findRotations(str1, str2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# To count left rotations\u00a0\n\u00a0\u00a0\u00a0\u00a0# of string\n\u00a0\u00a0\u00a0\u00a0x = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# To count right rotations\n\u00a0\u00a0\u00a0\u00a0# of string\n\u00a0\u00a0\u00a0\u00a0y = 0\n\u00a0\u00a0\u00a0\u00a0m = str1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# left rotating the string\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m = m[len(m)-1] + m[:len(m)-1]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking if rotated and\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# actual string are equal.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(m == str2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x > len(str2) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# right rotating the string\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str1 = str1[1:len(str1)]+str1[0]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking if rotated and actual\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# string are equal.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(str1 == str2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if y > len(str2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if x < len(str2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the minimum\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# number of rotations.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(min(x,y))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"given strings are not of same kind\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\nfindRotations('sgeek', 'geeks')", "nl": "Write a Python Program to find minimum number of rotations to obtain actual string"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove multiple empty spaces from string List\n# Using loop + strip()\n\u00a0\u00a0\n# initializing list\ntest_list = ['gfg', '\u00a0\u00a0 ', ' ', 'is', '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ', 'best']\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Remove multiple empty spaces from string List\n# Using loop + strip()\nres = []\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0if ele.strip():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"List after filtering non-empty strings : \" + str(res))\u00a0", "nl": "Write a Python program to Ways to remove multiple empty spaces from string List"}
{"code": "# Turns a dictionary into a class\nclass Dict2Class(object):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self, my_dict):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for key in my_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setattr(self, key, my_dict[key])\n\u00a0\u00a0\n# Driver Code\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating the dictionary\n\u00a0\u00a0\u00a0\u00a0my_dict = {\"Name\": \"Geeks\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Rank\": \"1223\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Subject\": \"Python\"}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0result = Dict2Class(my_dict)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing the result\n\u00a0\u00a0\u00a0\u00a0print(\"After Converting Dictionary to Class : \")\n\u00a0\u00a0\u00a0\u00a0print(result.Name, result.Rank, result.Subject)\n\u00a0\u00a0\u00a0\u00a0print(type(result))", "nl": "How to Change a Dictionary Into a Class in Python"}
{"code": "# import tkinter\u00a0\nfrom tkinter import *\n\u00a0\u00a0\n# Create Tk object\u00a0\nwindow = Tk()\u00a0\n\u00a0\u00a0\n# Set the window title\u00a0\nwindow.title('GFG')\u00a0\n\u00a0\u00a0\n# Create a Frame for border\nborder_color = Frame(window, background=\"red\")\n\u00a0\u00a0\n# Label Widget inside the Frame\nlabel = Label(border_color, text=\"This is a Label widget\", bd=0)\n\u00a0\u00a0\n# Place the widgets with border Frame\nlabel.pack(padx=1, pady=1)\nborder_color.pack(padx=40, pady=40)\n\u00a0\u00a0\nwindow.mainloop()", "nl": "How to change border color in Tkinter widget in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove after substring in String\n# Using index() + len() + slicing\n\u00a0\u00a0\n# initializing strings\ntest_str = 'geeksforgeeks is best for geeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing sub string\u00a0\nsub_str = \"best\"\n\u00a0\u00a0\n# slicing off after length computation\nres = test_str[:test_str.index(sub_str) + len(sub_str)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after removal : \" + str(res))\u00a0", "nl": "Write a Python program to Remove after substring in String"}
{"code": "# Import Module\nfrom tkinter import *\n\u00a0\u00a0\n# Create Object\nroot = Tk()\n\u00a0\u00a0\n# Set geometry\nroot.geometry('400x500')\n\u00a0\u00a0\n# Add Buttons, Label, ListBox\nName = StringVar()\nNumber = StringVar()\n\u00a0\u00a0\nframe = Frame()\nframe.pack(pady=10)\n\u00a0\u00a0\nframe1 = Frame()\nframe1.pack()\n\u00a0\u00a0\nframe2 = Frame()\nframe2.pack(pady=10)\n\u00a0\u00a0\nLabel(frame, text = 'Name', font='arial 12 bold').pack(side=LEFT)\nEntry(frame, textvariable = Name,width=50).pack()\n\u00a0\u00a0\nLabel(frame1, text = 'Phone No.', font='arial 12 bold').pack(side=LEFT)\nEntry(frame1, textvariable = Number,width=50).pack()\n\u00a0\u00a0\nLabel(frame2, text = 'Address', font='arial 12 bold').pack(side=LEFT)\naddress = Text(frame2,width=37,height=10)\naddress.pack()\n\u00a0\u00a0\nButton(root,text=\"Add\",font=\"arial 12 bold\").place(x= 100, y=270)\nButton(root,text=\"View\",font=\"arial 12 bold\").place(x= 100, y=310)\nButton(root,text=\"Delete\",font=\"arial 12 bold\").place(x= 100, y=350)\nButton(root,text=\"Reset\",font=\"arial 12 bold\").place(x= 100, y=390)\n\u00a0\u00a0\nscroll_bar = Scrollbar(root, orient=VERTICAL)\nselect = Listbox(root, yscrollcommand=scroll_bar.set, height=12)\nscroll_bar.config (command=select.yview)\nscroll_bar.pack(side=RIGHT, fill=Y)\nselect.place(x=200,y=260)\n\u00a0\u00a0\n# Execute Tkinter\nroot.mainloop()", "nl": "Create Address Book in Write a Python program to Using Tkinter"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove Consecutive K element records\n# Using zip() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [(4, 5, 6, 3), (5, 6, 6, 9), (1, 3, 5, 6), (6, 6, 7, 8)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 6\n\u00a0\u00a0\n# Remove Consecutive K element records\n# Using zip() + list comprehension\nres = [idx for idx in test_list if (K, K) not in zip(idx, idx[1:])]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The records after removal : \" + str(res))\u00a0", "nl": "Write a Python program to Remove Consecutive K element records"}
{"code": "import sys\n\u00a0\u00a0\n# sample Sets\nSet1 = {\"A\", 1, \"B\", 2, \"C\", 3}\nSet2 = {\"Geek1\", \"Raju\", \"Geek2\", \"Nikhil\", \"Geek3\", \"Deepanshu\"}\nSet3 = {(1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\")}\n\u00a0\u00a0\n# print the sizes of sample Sets\nprint(\"Size of Set1: \" + str(sys.getsizeof(Set1)) + \"bytes\")\nprint(\"Size of Set2: \" + str(sys.getsizeof(Set2)) + \"bytes\")\nprint(\"Size of Set3: \" + str(sys.getsizeof(Set3)) + \"bytes\")", "nl": "Find the size of a Set in Python"}
{"code": "# importing numpy as np\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# creating first matrix\nA = np.array([[1, 2], [3, 4]])\n\u00a0\u00a0\n# creating second matrix\nB = np.array([[4, 5], [6, 7]])\n\u00a0\u00a0\nprint(\"Printing elements of first matrix\")\nprint(A)\nprint(\"Printing elements of second matrix\")\nprint(B)\n\u00a0\u00a0\n# adding two matrix\nprint(\"Addition of two matrix\")\nprint(np.add(A, B))", "nl": "Adding and Subtracting Matrices in Python"}
{"code": "# Function to combine n arrays\u00a0\n\u00a0\u00a0\u00a0\u00a0\ndef combineAll(input):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# cast first array as set and assign it\u00a0\n\u00a0\u00a0\u00a0\u00a0# to variable named as result\u00a0\n\u00a0\u00a0\u00a0\u00a0result = set(input[0])\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now traverse remaining list of arrays\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# and take it's update with result variable\u00a0\n\u00a0\u00a0\u00a0\u00a0for array in input[1:]:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.update(array)\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return list(result)\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input = [[1, 2, 2, 4, 3, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[5, 1, 3, 4],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[9, 5, 7, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2, 4, 1, 3]]\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print (combineAll(input))", "nl": "Set update() in Python to do union of n arrays"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\n# create numpy 1d-array\narray1 = np.array([0, 1, 2])\narray2 = np.array([3, 4, 5])\n\u00a0\u00a0\n# pearson product-moment correlation\n# coefficients of the arrays\nrslt = np.corrcoef(array1, array2)\n\u00a0\u00a0\nprint(rslt)", "nl": "Compute pearson product-moment correlation coefficients of two given NumPy arrays in Python"}
{"code": "from collections import Counter\n\n\ndef remov_duplicates(input):\n\n\n\u00a0\u00a0\u00a0\u00a0# split input string separated by space\n\u00a0\u00a0\u00a0\u00a0input = input.split(\" \")\n\n\n\u00a0\u00a0\u00a0\u00a0# joins two adjacent elements in iterable way\n\u00a0\u00a0\u00a0\u00a0for i in range(0, len(input)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input[i] = \"\".join(input[i])\n\n\n\u00a0\u00a0\u00a0\u00a0# now create dictionary using counter method\n\u00a0\u00a0\u00a0\u00a0# which will have strings as key and their\n\u00a0\u00a0\u00a0\u00a0# frequencies as value\n\u00a0\u00a0\u00a0\u00a0UniqW = Counter(input)\n\n\n\u00a0\u00a0\u00a0\u00a0# joins two adjacent elements in iterable way\n\u00a0\u00a0\u00a0\u00a0s = \" \".join(UniqW.keys())\n\u00a0\u00a0\u00a0\u00a0print (s)\n\n\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'Python is great and Java is also great'\n\u00a0\u00a0\u00a0\u00a0remov_duplicates(input)", "nl": "Write a Python program to Remove all duplicates words from a given sentence"}
{"code": "# import the required packages\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\n# Define the dictionary for converting to dataframe\u00a0\nmovies = {'Name': ['The Godfather', 'Bird Box', 'Fight Club'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Year': ['1972', '2018', '1999'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Rating': ['9.2', '6.8', '8.8']}\n\u00a0\u00a0\ndf = pd.DataFrame(movies)\nprint(df)", "nl": "Ranking Rows of Pandas DataFrame in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert key-values list to flat dictionary\n# Using dict() + zip()\nfrom itertools import product\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'month' : [1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'name' : ['Jan', 'Feb', 'March']}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Convert key-values list to flat dictionary\n# Using dict() + zip()\nres = dict(zip(test_dict['month'], test_dict['name']))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Flattened dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Convert key-values list to flat dictionary"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Tuple Matrix to Tuple List\n# Using list comprehension + zip()\n\u00a0\u00a0\n# initializing list\ntest_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# flattening\u00a0\ntemp = [ele for sub in test_list for ele in sub]\n\u00a0\u00a0\n# joining to form column pairs\nres = list(zip(*temp))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted tuple list : \" + str(res))", "nl": "Write a Python program to Convert Tuple Matrix to Tuple List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Inversion in nested dictionary\n# Using loop + recursion\n\u00a0\u00a0\n# utility function to get all paths till end\u00a0\ndef extract_path(test_dict, path_way):\n\u00a0\u00a0\u00a0\u00a0if not test_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return [path_way]\n\u00a0\u00a0\u00a0\u00a0temp = []\n\u00a0\u00a0\u00a0\u00a0for key in test_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.extend(extract_path(test_dict[key], path_way + [key]))\n\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\n# function to compute inversion\ndef hlper_fnc(test_dict):\n\u00a0\u00a0\u00a0\u00a0all_paths = extract_path(test_dict, [])\n\u00a0\u00a0\u00a0\u00a0res = {}\n\u00a0\u00a0\u00a0\u00a0for path in all_paths:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0front = res\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ele in path[::-1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ele not in front :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0front[ele] = {}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0front = front[ele]\n\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {\"a\" : {\"b\" : {\"c\" : {}}},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"d\" : {\"e\" : {}},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"f\" : {\"g\" : {\"h\" : {}}}}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# calling helper function for task\u00a0\nres = hlper_fnc(test_dict)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The inverted dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Inversion in nested dictionary"}
{"code": "# first import the libraries\nimport pandas as pd\n\u00a0\u00a0\u00a0\n# Create a dataFrame using dictionary\ndf=pd.DataFrame({\"Name\":['Tom','Nick','John','Peter'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Age\":[15,26,17,28]})\n\u00a0\u00a0\n# Creates a dataFrame with\n# 2 columns and 4 rows\ndf", "nl": "Write a Python program to Change column names and row indexes in Pandas DataFrame"}
{"code": "# import module\nimport os\n\n\n# assign size\nsize = 0\n\n\n# assign folder path\nFolderpath = 'C:/Users/Geetansh Sahni/Documents/R'\n\n\n# get size\nfor path, dirs, files in os.walk(Folderpath):\n\u00a0\u00a0\u00a0\u00a0for f in files:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fp = os.path.join(path, f)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size += os.path.getsize(fp)\n\n\n# display size\nprint(\"Folder size: \" + str(size))", "nl": "How to get size of folder using Python"}
{"code": "# Function to find intersection of two arrays\n\u00a0\u00a0\ndef interSection(arr1,arr2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# filter(lambda x: x in arr1, arr2)\u00a0 -->\n\u00a0\u00a0\u00a0\u00a0\u00a0# filter element x from list arr2 where x\n\u00a0\u00a0\u00a0\u00a0\u00a0# also lies in arr1\n\u00a0\u00a0\u00a0\u00a0\u00a0result = list(filter(lambda x: x in arr1, arr2))\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Intersection : \",result)\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0arr1 = [1, 3, 4, 5, 7]\n\u00a0\u00a0\u00a0\u00a0arr2 = [2, 3, 5, 6]\n\u00a0\u00a0\u00a0\u00a0interSection(arr1,arr2)", "nl": "Intersection of two arrays in Python ( Lambda expression and filter function )"}
{"code": "# Python3 program to convert a\u00a0\n# set into a list\nmy_set = {'Geeks', 'for', 'geeks'}\n\u00a0\u00a0\ns = list(my_set)\nprint(s)", "nl": "Write a Python program to Convert set into a list"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Creating the dataframe\ndf = pd.DataFrame({'Date' : ['11/8/2011', '11/9/2011', '11/10/2011',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'11/11/2011', '11/12/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event' : ['Music', 'Poetry', 'Music', 'Music', 'Poetry']})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Write a Python program to Creating a Pandas dataframe column based on a given condition"}
{"code": "# importing numpy as np\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# creating array of string\nx = np.array([\"geeks\", \"for\", \"geeks\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dtype=np.str)\nprint(\"Printing the Original Array:\")\nprint(x)\n\u00a0\u00a0\n# inserting space using np.char.join()\nr = np.char.join(\" \", x)\nprint(\"Printing the array after inserting space\\\nbetween the elements\")\nprint(r)", "nl": "How to insert a space between characters of all the elements of a given NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Test substring order\n# Using join() + in operator + generator expression\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing substring\nK = 'seek'\n\u00a0\u00a0\n# concatenating required characters\u00a0\ntemp = lambda sub: ''.join(chr for chr in sub if chr in set(K))\n\u00a0\u00a0\n# checking in order\nres = K in temp(test_str)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Is substring in order : \" + str(res))\u00a0", "nl": "Write a Python program to Test substring order"}
{"code": "def checkEmpty(input, pattern):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# If both are empty\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if len(input)== 0 and len(pattern)== 0:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'true'\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# If only pattern is empty\u00a0\n\u00a0\u00a0\u00a0\u00a0if len(pattern)== 0:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'true'\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while (len(input) != 0):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# find sub-string in main string\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = input.find(pattern)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check if sub-string founded or not\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (index ==(-1)):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'false'\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# slice input string in two parts and concatenate\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input = input[0:index] + input[index + len(pattern):]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 'true'\n\u00a0\u00a0\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input ='GEEGEEKSKS'\n\u00a0\u00a0\u00a0\u00a0pattern ='GEEKS'\n\u00a0\u00a0\u00a0\u00a0print (checkEmpty(input, pattern))", "nl": "String slicing in Python to check if a string can become empty by recursive deletion"}
{"code": "# Python3 code to demonstrate working of\n# Unique elements in nested tuple\n# Using nested loop + set()\n\u00a0\u00a0\n# initialize list\ntest_list = [(3, 4, 5), (4, 5, 7), (1, 4)]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# Unique elements in nested tuple\n# Using nested loop + set()\nres = []\ntemp = set()\nfor inner in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ele in inner:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not ele in temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.add(ele)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\n# printing result\nprint(\"Unique elements in nested tuples are : \" + str(res))", "nl": "Write a Python program to How to get unique elements in nested tuple"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\nini_array = np.array([10, 20, 5,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010, 8, 20,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a08, 9])\n\u00a0\u00a0\n# Get a tuple of unique values\u00a0\n# and their frequency in\n# numpy array\nunique, frequency = np.unique(ini_array,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return_counts = True)\n# print unique values array\nprint(\"Unique Values:\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unique)\n\u00a0\u00a0\n# print frequency array\nprint(\"Frequency Values:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency)", "nl": "How to count the frequency of unique values in NumPy array in Python"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\n# create a numpy 1d-array\narray = np.array([1, -2, 3])\n\u00a0\u00a0\nprint(\"Given array:\\n\", array)\n\u00a0\u00a0\n# find element-wise\n# absolute value\nrslt = np.absolute(array)\n\u00a0\u00a0\nprint(\"Absolute array:\\n\", rslt)", "nl": "How to calculate the element-wise absolute value of NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\n# Remove nested records\n# using isinstance() + enumerate() + loop\n\u00a0\u00a0\n# initialize tuple\ntest_tup = (1, 5, 7, (4, 6), 10)\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tup))\n\u00a0\u00a0\n# Remove nested records\n# using isinstance() + enumerate() + loop\nres = tuple()\nfor count, ele in enumerate(test_tup):\n\u00a0\u00a0\u00a0\u00a0if not isinstance(ele, tuple):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = res + (ele, )\n\u00a0\u00a0\n# printing result\nprint(\"Elements after removal of nested records : \" + str(res))", "nl": "Write a Python program to Remove nested records from tuple"}
{"code": "# Python code to demonstrate\n# how to reverse numpy array\n# using shortcut method\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\n# initialising numpy array\nini_array = np.array([1, 2, 3, 6, 4, 5])\n\u00a0\u00a0\n# printing initial ini_array\nprint(\"initial array\", str(ini_array))\n\u00a0\u00a0\n# printing type of ini_array\nprint(\"type of ini_array\", type(ini_array))\n\u00a0\u00a0\n# using shortcut method to reverse\nres = ini_array[::-1]\n\u00a0\u00a0\n# printing result\nprint(\"final array\", str(res))", "nl": "Write a Python program to Reverse a numpy array"}
{"code": "# function to display the pattern up to n\ndef display(n):\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print(\"*\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(1, n+1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\"\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# for loop to display number up to i\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(1, i+1):\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(j, end=\"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# for loop to display number in reverse direction\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(i-1, 0, -1):\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(j, end=\"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\"\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# for loop to display i in reverse direction\n\u00a0\u00a0\u00a0\u00a0for i in range(n-1, 0, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\"\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(1, i+1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(j, end=\"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(i-1, 0, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(j, end=\"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\"\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print(\"*\")\n\u00a0\u00a0\n\u00a0\u00a0\n# driver code\nn = 5\nprint('\\nFor n =', n)\ndisplay(n)\n\u00a0\u00a0\nn = 3\nprint('\\nFor n =', n)\ndisplay(n)", "nl": "Write a Python program to display half diamond pattern of numbers with star border"}
{"code": "# Python program to collapse\n# multiple Columns using Pandas\nimport pandas as pd\n\u00a0\u00a0\n# sample data\nn = 3\nSample_1 = [57, 51, 6]\nSample_2 = [92, 16, 19]\nSample_3 = [15, 93, 71]\nSample_4 = [28, 73, 31]\n\u00a0\u00a0\nsample_id = zip([\"S\"]*n, list(range(1, n + 1)))\n\u00a0\u00a0\ns_names = [''.join([w[0], str(w[1])]) for w in sample_id]\n\u00a0\u00a0\nd = {'s_names': s_names, 'Sample_1': Sample_1,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0'Sample_2': Sample_2, 'Sample_3': Sample_3,\n\u00a0\u00a0\u00a0\u00a0\u00a0'Sample_4': Sample_4}\n\u00a0\u00a0\ndf_1 = pd.DataFrame(d)\n\u00a0\u00a0\nmapping = {'Sample_1': 'Result_1',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sample_2': 'Result_1',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sample_3': 'Result_2',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sample_4': 'Result_2'}\n\u00a0\u00a0\ndf = df_1.set_index('s_names').groupby(mapping, axis = 1).sum()\n\u00a0\u00a0\ndf.reset_index(level = 0)", "nl": "Collapse multiple Columns in Pandas in Python"}
{"code": "# Python code to demonstrate\n# insertion of items in beginning of ordered dict\nfrom collections import OrderedDict\n\u00a0\u00a0\n# initialising ordered_dict\niniordered_dict = OrderedDict([('akshat', '1'), ('nikhil', '2')])\n\u00a0\u00a0\n# inserting items in starting of dict\u00a0\niniordered_dict.update({'manjeet':'3'})\niniordered_dict.move_to_end('manjeet', last = False)\n\u00a0\u00a0\n# print result\nprint (\"Resultant Dictionary : \"+str(iniordered_dict))", "nl": "Write a Python program to Insertion at the beginning in OrderedDict"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Creating the timestamp\nts = pd.Timestamp('02-06-2018')\n\u00a0\u00a0\n# Print the timestamp\nprint(ts)", "nl": "Using Timedelta and Period to create DateTime based indexes in Pandas in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort Tuples by Total digits\n# Using sort() + len() + sum()\n\u00a0\u00a0\ndef count_digs(tup):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# gets total digits in tuples\n\u00a0\u00a0\u00a0\u00a0return sum([len(str(ele)) for ele in tup ])\n\u00a0\u00a0\n# initializing list\ntest_list = [(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# performing sort\u00a0\ntest_list.sort(key = count_digs)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Sorted tuples : \" + str(test_list))", "nl": "Write a Python program to Sort Tuples by Total digits"}
{"code": "# create class for stack\nclass Stack:\n\n\n\u00a0\u00a0\u00a0\u00a0# create empty list\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.Elements = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# push() for insert an element\n\u00a0\u00a0\u00a0\u00a0def push(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.Elements.append(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# pop() for remove an element\n\u00a0\u00a0\u00a0\u00a0def pop(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.Elements.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# empty() check the stack is empty of not\n\u00a0\u00a0\u00a0\u00a0def empty(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.Elements == []\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# show() display stack\n\u00a0\u00a0\u00a0\u00a0def show(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for value in reversed(self.Elements):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(value)\n\n\n# Insert_Bottom() insert value at bottom\ndef BottomInsert(s, value):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# check the stack is empty or not\n\u00a0\u00a0\u00a0\u00a0if s.empty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if stack is empty then call\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# push() method.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.push(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if stack is not empty then execute\n\u00a0\u00a0\u00a0\u00a0# else block\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0popped = s.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BottomInsert(s, value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.push(popped)\n\n\n# Reverse() reverse the stack\ndef Reverse(s):\n\u00a0\u00a0\u00a0\u00a0if s.empty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0popped = s.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reverse(s)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BottomInsert(s, popped)\n\n\n\n\n# create object of stack class\nstk = Stack()\n\n\nstk.push(1)\nstk.push(2)\nstk.push(3)\nstk.push(4)\nstk.push(5)\n\n\nprint(\"Original Stack\")\nstk.show()\n\n\nprint(\"\\nStack after Reversing\")\nReverse(stk)\nstk.show()", "nl": "Write a Python program to reverse a stack"}
{"code": "# function definition\ndef add(num1, num2):\n\u00a0\u00a0\u00a0\u00a0print(\"Datatype of num1 is \", type(num1))\n\u00a0\u00a0\u00a0\u00a0print(\"Datatype of num2 is \", type(num2))\n\u00a0\u00a0\u00a0\u00a0return num1 + num2\n\u00a0\u00a0\n# calling the function without\n# explicitly declaring the datatypes\nprint(add(2, 3))\n\u00a0\u00a0\n# calling the function by explicitly\n# defining the datatype as float\nprint(add(float(2), float(3)))", "nl": "Explicitly define datatype in a Python function"}
{"code": "# Python program explaining\n# numpy.count_nonzero() function\n\u00a0\u00a0\n# importing numpy as geek\u00a0\nimport numpy as geek\n\u00a0\u00a0\narr = [[0, 1, 2, 3, 0], [0, 5, 6, 0, 7]]\n\u00a0\u00a0\ngfg = geek.count_nonzero(arr)\n\u00a0\u00a0\nprint (gfg)\u00a0", "nl": "Numpy count_nonzero method | Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# sample dataframe\ndf = pd.DataFrame({'A': ['foo', 'bar', 'g2g', 'g2g', 'g2g',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'bar', 'bar', 'foo', 'bar'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'B': ['a', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b'] })\n\u00a0\u00a0\n# frequency count of column A\ncount = df['A'].value_counts()\nprint(count)", "nl": "Getting frequency counts of a columns in Pandas DataFrame in Python"}
{"code": "# Open the file in write mode\nf1 = open(\"output1.txt\", \"w\")\n\u00a0\u00a0\n# Open the input file and get\u00a0\n# the content into a variable data\nwith open(\"file.txt\", \"r\") as myfile:\n\u00a0\u00a0\u00a0\u00a0data = myfile.read()\n\u00a0\u00a0\n# For Full Reversing we will store the\u00a0\n# value of data into new variable data_1\u00a0\n# in a reverse order using [start: end: step],\n# where step when passed -1 will reverse\u00a0\n# the string\ndata_1 = data[::-1]\n\u00a0\u00a0\n# Now we will write the fully reverse\u00a0\n# data in the output1 file using\u00a0\n# following command\nf1.write(data_1)\n\u00a0\u00a0\nf1.close()", "nl": "Write a Python program to reverse the content of a file and store it in another file"}
{"code": "# Python program to sort a list of tuples by the second Item\n\u00a0\u00a0\n# Function to sort the list of tuples by its second item\ndef Sort_Tuple(tup):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# getting length of list of tuples\n\u00a0\u00a0\u00a0\u00a0lst = len(tup)\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(0, lst):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, lst-i-1):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (tup[j][1] > tup[j + 1][1]):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = tup[j]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tup[j]= tup[j + 1]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tup[j + 1]= temp\u00a0\n\u00a0\u00a0\u00a0\u00a0return tup\u00a0\n\u00a0\u00a0\n# Driver Code\u00a0\ntup =[('for', 24), ('is', 10), ('Geeks', 28),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('Geeksforgeeks', 5), ('portal', 20), ('a', 15)]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(Sort_Tuple(tup))\u00a0", "nl": "Write a Python program to sort a list of tuples by second Item"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Group similar elements into Matrix\n# Using list comprehension + groupby()\nfrom itertools import groupby\n\u00a0\u00a0\n# initializing list\ntest_list = [1, 3, 5, 1, 3, 2, 5, 4, 2]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# Group similar elements into Matrix\n# Using list comprehension + groupby()\nres = [list(val) for key, val in groupby(sorted(test_list))]\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Matrix after grouping : \" + str(res))", "nl": "Write a Python program to Group similar elements into Matrix"}
{"code": "from selenium import webdriver\nfrom bs4 import BeautifulSoup\nimport time\n\u00a0\u00a0\n# Creating a webdriver instance\ndriver = webdriver.Chrome(\"Enter-Location-Of-Your-Web-Driver\")\n# This instance will be used to log into LinkedIn\n\u00a0\u00a0\n# Opening linkedIn's login page\ndriver.get(\"https://linkedin.com/uas/login\")\n\u00a0\u00a0\n# waiting for the page to load\ntime.sleep(5)\n\u00a0\u00a0\n# entering username\nusername = driver.find_element_by_id(\"username\")\n\u00a0\u00a0\n# In case of an error, try changing the element\n# tag used here.\n\u00a0\u00a0\n# Enter Your Email Address\nusername.send_keys(\"User_email\")\u00a0\u00a0\n\u00a0\u00a0\n# entering password\npword = driver.find_element_by_id(\"password\")\n# In case of an error, try changing the element\u00a0\n# tag used here.\n\u00a0\u00a0\n# Enter Your Password\npword.send_keys(\"User_pass\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Clicking on the log in button\n# Format (syntax) of writing XPath -->\u00a0\n# //tagname[@attribute='value']\ndriver.find_element_by_xpath(\"//button[@type='submit']\").click()\n# In case of an error, try changing the\n# XPath used here.", "nl": "Scrape LinkedIn Using Selenium And Beautiful Soup in Python"}
{"code": "# Import pandas package\nimport pandas as pd\n\u00a0\u00a0\n# Define a dictionary containing employee data\ndata = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[27, 24, 22, 32, 15],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th']}\n\n\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data)\n\n\n# select all columns\ndf", "nl": "How to randomly select rows from Pandas DataFrame in Python"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# define the polynomials\n# p(x) = 5(x**2) + (-2)x +5\npx = (5, -2, 5)\n\u00a0\u00a0\n# g(x) = x +2\ngx = (2, 1, 0)\n\u00a0\u00a0\n# divide the polynomials\nqx, rx = numpy.polynomial.polynomial.polydiv(px, gx)\n\u00a0\u00a0\n# print the result\n# quotiient\nprint(qx)\n\u00a0\u00a0\n# remainder\nprint(rx)", "nl": "How to divide a polynomial to another using NumPy in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[4, 1; 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.sum() method\ngeek = gfg.sum()\n\u00a0\u00a0\u00a0\nprint(geek)", "nl": "Write a Python program to Numpy matrix.sum()"}
{"code": "# Python program to illustrate use of exec to\n# execute a given code as string.\n\n\n# function illustrating how exec() functions.\ndef exec_code():\n\u00a0\u00a0\u00a0\u00a0LOC = \"\"\"\ndef factorial(num):\n\u00a0\u00a0\u00a0\u00a0fact=1\n\u00a0\u00a0\u00a0\u00a0for i in range(1,num+1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fact = fact*i\n\u00a0\u00a0\u00a0\u00a0return fact\nprint(factorial(5))\n\"\"\"\n\u00a0\u00a0\u00a0\u00a0exec(LOC)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nexec_code()", "nl": "Execute a String of Code in Python"}
{"code": "# Python3 code to demonstrate working of\n# Suffix removal from String list\n# using loop + remove() + endswith()\n\u00a0\u00a0\n# initialize list\u00a0\ntest_list = ['allx', 'lovex', 'gfg', 'xit', 'is', 'bestx']\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initialize suffix\nsuff = 'x'\n\u00a0\u00a0\n# Suffix removal from String list\n# using loop + remove() + endswith()\nfor word in test_list[:]:\n\u00a0\u00a0\u00a0\u00a0if word.endswith(suff):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_list.remove(word)\n\u00a0\u00a0\n# printing result\nprint(\"List after removal of suffix elements : \" + str(test_list))", "nl": "Write a Python program to Remove suffix from string list"}
{"code": "# Python code explaining\n# numpy.poly1d()\n\u00a0\u00a0\n# importing libraries\nimport numpy as np\n\u00a0\u00a0\n# Constructing polynomial\np1 = np.poly1d([1, 2])\np2 = np.poly1d([4, 9, 5, 4])\n\u00a0\u00a0\nprint (\"P1 : \", p1)\nprint (\"\\n p2 : \\n\", p2)\n\u00a0\u00a0\n# Solve for x = 2\nprint (\"\\n\\np1 at x = 2 : \", p1(2))\nprint (\"p2 at x = 2 : \", p2(2))\n\u00a0\u00a0\n# Finding Roots\nprint (\"\\n\\nRoots of P1 : \", p1.r)\nprint (\"Roots of P2 : \", p2.r)\n\u00a0\u00a0\n# Finding Coefficients\nprint (\"\\n\\nCoefficients of P1 : \", p1.c)\nprint (\"Coefficients of P2 : \", p2.coeffs)\n\u00a0\u00a0\n# Finding Order\nprint (\"\\n\\nOrder / Degree of P1 : \", p1.o)\nprint (\"Order / Degree of P2 : \", p2.order)", "nl": "numpy.poly1d() in Python"}
{"code": "# Python Code for Implementation and running time Algorithm\n# Complexity plot of Heap Sort\n# by Ashok Kajal\n# This python code intends to implement Heap Sort Algorithm\n# Plots its time Complexity on list of different sizes\n\n\n# ---------------------Important Note -------------------\n# numpy, time and matplotlib.pyplot are required to run this code\nimport time\nfrom numpy.random import seed\nfrom numpy.random import randint\nimport matplotlib.pyplot as plt\n\n\n\n\n# find left child of node i\ndef left(i):\n\u00a0\u00a0\u00a0\u00a0return 2 * i + 1\n\n\n# find right child of node i\ndef right(i):\n\u00a0\u00a0\u00a0\u00a0return 2 * i + 2\n\n\n# calculate and return array size\ndef heapSize(A):\n\u00a0\u00a0\u00a0\u00a0return len(A)-1\n\n\n\n\n# This function takes an array and Heapyfies\n# the at node i\ndef MaxHeapify(A, i):\n\u00a0\u00a0\u00a0\u00a0# print(\"in heapy\", i)\n\u00a0\u00a0\u00a0\u00a0l = left(i)\n\u00a0\u00a0\u00a0\u00a0r = right(i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# heapSize = len(A)\n\u00a0\u00a0\u00a0\u00a0# print(\"left\", l, \"Rightt\", r, \"Size\", heapSize)\n\u00a0\u00a0\u00a0\u00a0if l<= heapSize(A) and A[l] > A[i] :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = l\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = i\n\u00a0\u00a0\u00a0\u00a0if r<= heapSize(A) and A[r] > A[largest]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = r\n\u00a0\u00a0\u00a0\u00a0if largest != i:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print(\"Largest\", largest)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[i], A[largest]= A[largest], A[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print(\"List\", A)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, largest)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# this function makes a heapified array\ndef BuildMaxHeap(A):\n\u00a0\u00a0\u00a0\u00a0for i in range(int(heapSize(A)/2)-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Sorting is done using heap of array\ndef HeapSort(A):\n\u00a0\u00a0\u00a0\u00a0BuildMaxHeap(A)\n\u00a0\u00a0\u00a0\u00a0B = list()\n\u00a0\u00a0\u00a0\u00a0heapSize1 = heapSize(A)\n\u00a0\u00a0\u00a0\u00a0for i in range(heapSize(A), 0, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[0], A[i]= A[i], A[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0B.append(A[heapSize1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A = A[:-1]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0heapSize1 = heapSize1-1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n# randomly generates list of different\n# sizes and call HeapSort function\nelements = list()\ntimes = list()\nfor i in range(1, 10):\n\n\n\u00a0\u00a0\u00a0\u00a0# generate some integers\n\u00a0\u00a0\u00a0\u00a0a = randint(0, 1000 * i, 1000 * i)\n\u00a0\u00a0\u00a0\u00a0# print(i)\n\u00a0\u00a0\u00a0\u00a0start = time.clock()\n\u00a0\u00a0\u00a0\u00a0HeapSort(a)\n\u00a0\u00a0\u00a0\u00a0end = time.clock()\n\n\n\u00a0\u00a0\u00a0\u00a0# print(\"Sorted list is \", a)\n\u00a0\u00a0\u00a0\u00a0print(len(a), \"Elements Sorted by HeapSort in \", end-start)\n\u00a0\u00a0\u00a0\u00a0elements.append(len(a))\n\u00a0\u00a0\u00a0\u00a0times.append(end-start)\n\n\nplt.xlabel('List Length')\nplt.ylabel('Time Complexity')\nplt.plot(elements, times, label ='Heap Sort')\nplt.grid()\nplt.legend()\nplt.show()\n# This code is contributed by Ashok Kajal", "nl": "Write a Python Code for time Complexity plot of Heap Sort"}
{"code": "# importing the module\nimport json\nfrom collections import namedtuple\n\u00a0\u00a0\n# creating the data\ndata = '{\"name\" : \"Geek\", \"id\" : 1, \"location\" : \"Mumbai\"}'\n\u00a0\u00a0\n# making the object\nx = json.loads(data, object_hook =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lambda d : namedtuple('X', d.keys())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(*d.values()))\n\u00a0\u00a0\n# accessing the JSON data as an object\nprint(x.name, x.id, x.location)", "nl": "Convert JSON data Into a Custom Python Object"}
{"code": "# Python code to find if we can make first string\n# from second by deleting some characters from\u00a0\n# second and rearranging remaining characters.\nfrom collections import Counter\n\u00a0\u00a0\ndef makeString(str1,str2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# convert both strings into dictionaries\n\u00a0\u00a0\u00a0\u00a0# output will be like str1=\"aabbcc\",\u00a0\n\u00a0\u00a0\u00a0\u00a0# dict1={'a':2,'b':2,'c':2}\n\u00a0\u00a0\u00a0\u00a0# str2 = 'abbbcc', dict2={'a':1,'b':3,'c':2}\n\u00a0\u00a0\u00a0\u00a0dict1 = Counter(str1)\n\u00a0\u00a0\u00a0\u00a0dict2 = Counter(str2)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# take intersection of two dictionries\n\u00a0\u00a0\u00a0\u00a0# output will be result = {'a':1,'b':2,'c':2}\n\u00a0\u00a0\u00a0\u00a0result = dict1 & dict2\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# compare resultant dictionary with first\n\u00a0\u00a0\u00a0\u00a0# dictionary comparison first compares keys\n\u00a0\u00a0\u00a0\u00a0# and then compares their corresponding values\u00a0\n\u00a0\u00a0\u00a0\u00a0return result == dict1\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0str1 = 'ABHISHEKsinGH'\n\u00a0\u00a0\u00a0\u00a0str2 = 'gfhfBHkooIHnfndSHEKsiAnG'\n\u00a0\u00a0\u00a0\u00a0if (makeString(str1,str2)==True):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Possible\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Not Possible\")", "nl": "Write a Python counter and dictionary intersection example (Make a string using deletion and rearrangement)"}
{"code": "# importing pandas\nimport pandas as pd\n\u00a0\u00a0\nrecord = {\n\u00a0\u00a0\n\u00a0'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka', 'Priya', 'Shaurya' ],\n\u00a0'Age': [21, 19, 20, 18, 17, 21],\n\u00a0'Stream': ['Math', 'Commerce', 'Science', 'Math', 'Math', 'Science'],\n\u00a0'Percentage': [88, 92, 95, 70, 65, 78] }\n\u00a0\u00a0\n# create a dataframe\ndataframe = pd.DataFrame(record, columns = ['Name', 'Age', 'Stream', 'Percentage'])\n\u00a0\u00a0\nprint(\"Given Dataframe :\\n\", dataframe)\u00a0\n\u00a0\u00a0\n# selecting rows based on condition\nrslt_df = dataframe[dataframe['Percentage'] > 80]\n\u00a0\u00a0\nprint('\\nResult dataframe :\\n', rslt_df)", "nl": "Selecting rows in pandas DataFrame based on conditions in Python"}
{"code": "def power(N, P):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if power is 0 then return 1\n\u00a0\u00a0\u00a0\u00a0if P == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if power is 1 then number is\n\u00a0\u00a0\u00a0\u00a0# returned\n\u00a0\u00a0\u00a0\u00a0elif P == 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return N\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (N*power(N, P-1))\n\u00a0\u00a0\n# Driver program\nN = 5\nP = 2\n\u00a0\u00a0\nprint(power(N, P))", "nl": "Write a Python program to find the power of a number using recursion"}
{"code": "import gi\n# Since a system can have multiple versions\n# of GTK + installed, we want to make\u00a0\n# sure that we are importing GTK + 3.\ngi.require_version(\"Gtk\", \"3.0\")\nfrom gi.repository import Gtk\n\u00a0\u00a0\n\u00a0\u00a0\nclass StackWindow(Gtk.Window):\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Gtk.Window.__init__(self, title =\"Geeks for Geeks\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.set_border_width(10)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating a box vertically oriented with a space of 100 pixel.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL, spacing = 100)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.add(vbox)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating stack, transition type and transition duration.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack = Gtk.Stack()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack.set_transition_duration(1000)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating the check button.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0checkbutton = Gtk.CheckButton(\"Yes\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack.add_titled(checkbutton, \"check\", \"Check Button\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating label .\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label = Gtk.Label()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label.set_markup(\"<big>Hello World</big>\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack.add_titled(label, \"label\", \"Label\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Implementation of stack switcher.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack_switcher = Gtk.StackSwitcher()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stack_switcher.set_stack(stack)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vbox.pack_start(stack_switcher, True, True, 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vbox.pack_start(stack, True, True, 0)\n\u00a0\u00a0\n\u00a0\u00a0\nwin = StackWindow()\nwin.connect(\"destroy\", Gtk.main_quit)\nwin.show_all()\nGtk.main()", "nl": "Write a Python program to Stack and StackSwitcher in GTK+ 3"}
{"code": "def a():\n\u00a0\u00a0print(\"GFG\")\n\u00a0\u00a0\u00a0\n# assigning function to a variable\nvar=a\n\n\n# calling the variable\nvar()", "nl": "Assign Function to a Variable in Python"}
{"code": "# Import package and it's modules\nfrom tkinter import *\n\u00a0\u00a0\n# create root window\nroot = Tk()\n\u00a0\u00a0\n# root window title and dimension\nroot.title(\"GeekForGeeks\")\n\u00a0\u00a0\n# Set geometry (widthxheight)\nroot.geometry('400x400')\n\u00a0\u00a0\n# Execute Tkinter\nroot.mainloop()", "nl": "Looping through buttons in Tkinter in Python"}
{"code": "# Importing Numpy module\nimport numpy as np\n\u00a0\u00a0\n# Creating 2X3 2-D Numpy array\nn_arr = np.array([[10.5, 22.5, np.nan],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[41, 52.5, np.nan]])\n\u00a0\u00a0\nprint(\"Given array:\")\nprint(n_arr)\n\u00a0\u00a0\nprint(\"\\nRemove all columns containing non-numeric elements \")\nprint(n_arr[:, ~np.isnan(n_arr).any(axis=0)])", "nl": "How to Remove columns in Numpy array that contains non-numeric values in Python"}
{"code": "# Python3 program to swap first\n# and last element of a list\n\n\n# Swap function\ndef swapList(newList):\n\u00a0\u00a0\u00a0\u00a0size = len(newList)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Swapping\n\u00a0\u00a0\u00a0\u00a0temp = newList[0]\n\u00a0\u00a0\u00a0\u00a0newList[0] = newList[size - 1]\n\u00a0\u00a0\u00a0\u00a0newList[size - 1] = temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return newList\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\nnewList = [12, 35, 9, 56, 24]\n\n\nprint(swapList(newList))", "nl": "Write a Python program to interchange first and last elements in a list"}
{"code": "# importing pandas package\nimport pandas as pandasForSortingCSV\n\u00a0\u00a0\n# assign dataset\ncsvData = pandasForSortingCSV.read_csv(\"sample.csv\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# displaying unsorted data frame\nprint(\"\\nBefore sorting:\")\nprint(csvData)\n\u00a0\u00a0\n# sort data frame\ncsvData.sort_values([\"Salary\"],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0axis=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ascending=[False],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace=True)\n\u00a0\u00a0\n# displaying sorted data frame\nprint(\"\\nAfter sorting:\")\nprint(csvData)", "nl": "How to Sort data by Column in a CSV File in Python "}
{"code": "# Python3 code to demonstrate\n# Reverse Sort a String\n# using join() + sorted() + reverse\n\u00a0\u00a0\n# initializing string\u00a0\ntest_string = \"geekforgeeks\"\n\u00a0\u00a0\n# printing original string\u00a0\nprint(\"The original string : \" + str(test_string))\n\u00a0\u00a0\n# using join() + sorted() + reverse\n# Sorting a string\u00a0\nres = ''.join(sorted(test_string, reverse = True))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# print result\nprint(\"String after reverse sorting : \" + str(res))", "nl": "Write a Python program to Reverse Sort a String"}
{"code": "# for get the pdf files or url\nimport requests\n\n\n# for tree traversal scraping in webpage\nfrom bs4 import BeautifulSoup\n\n\n# for input and output operations\nimport io\n\n\n# For getting information about the pdfs\nfrom PyPDF2 import PdfFileReader", "nl": "How to Scrape all PDF files in a Website in Python"}
{"code": "# importing numpy as library\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# creating matrix of complex number\nx = np.array([2+3j, 4+5j])\nprint(\"Printing First matrix:\")\nprint(x)\n\u00a0\u00a0\ny = np.array([8+7j, 5+6j])\nprint(\"Printing Second matrix:\")\nprint(y)\n\u00a0\u00a0\n# vector dot product of two matrices\nz = np.vdot(x, y)\nprint(\"Product of first and second matrices are:\")\nprint(z)", "nl": "Multiply matrices of complex numbers using NumPy in Python"}
{"code": "# Python code to find Euclidean distance\n# using linalg.norm()\n\n\nimport numpy as np\n\n\n# initializing points in\n# numpy arrays\npoint1 = np.array((1, 2, 3))\npoint2 = np.array((1, 1, 1))\n\n\n# calculating Euclidean distance\n# using linalg.norm()\ndist = np.linalg.norm(point1 - point2)\n\n\n# printing Euclidean distance\nprint(dist)", "nl": "Calculate the Euclidean distance using NumPy in Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Swap elements in String list\n# using replace() + list comprehension\n\u00a0\u00a0\n# Initializing list\ntest_list = ['Gfg', 'is', 'best', 'for', 'Geeks']\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Swap elements in String list\n# using replace() + list comprehension\nres = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"List after performing character swaps : \" + str(res))", "nl": "Write a Python program to Swap elements in String list"}
{"code": "# Python3 code to demonstrate working of\n# Tuple List Kth Column Product\n# using list comprehension + loop\n\u00a0\u00a0\n# getting Product\ndef prod(val) :\n\u00a0\u00a0\u00a0\u00a0res = 1\u00a0\n\u00a0\u00a0\u00a0\u00a0for ele in val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res *= ele\n\u00a0\u00a0\u00a0\u00a0return res\u00a0\n\u00a0\u00a0\n# initialize list\ntest_list = [(5, 6, 7), (1, 3, 5), (8, 9, 19)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initialize K\nK = 2\n\u00a0\u00a0\n# Tuple List Kth Column Product\n# using list comprehension + loop\nres = prod([sub[K] for sub in test_list])\n\u00a0\u00a0\n# printing result\nprint(\"Product of Kth Column of Tuple List : \" + str(res))", "nl": "Write a Python program to Kth Column Product in Tuple List"}
{"code": "# Python program to create a list of tuples\n# from given list having number and\n# its cube in each tuple\n\u00a0\u00a0\n# creating a list\nlist1 = [1, 2, 5, 6]\n\u00a0\u00a0\n# using list comprehension to iterate each\n# values in list and create a tuple as specified\nres = [(val, pow(val, 3)) for val in list1]\n\u00a0\u00a0\n# print the result\nprint(res)", "nl": "Write a Python program to create a list of tuples from given list having number and its cube in each tuple"}
{"code": "# Python program to change the\n# current working directory\n\n\n\n\nimport os\n\n\n# Function to Get the current\n# working directory\ndef current_path():\n\u00a0\u00a0\u00a0\u00a0print(\"Current working directory before\")\n\u00a0\u00a0\u00a0\u00a0print(os.getcwd())\n\u00a0\u00a0\u00a0\u00a0print()\n\n\n\n\n# Driver's code\n# Printing CWD before\ncurrent_path()\n\n\n# Changing the CWD\nos.chdir('../')\n\n\n# Printing CWD after\ncurrent_path()", "nl": "Change current working directory with Python"}
{"code": "# Function to find all close matches of\u00a0\n# input string in given list of possible strings\nfrom difflib import get_close_matches\n\u00a0\u00a0\ndef closeMatches(patterns, word):\n\u00a0\u00a0\u00a0\u00a0\u00a0print(get_close_matches(word, patterns))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0word = 'appel'\n\u00a0\u00a0\u00a0\u00a0patterns = ['ape', 'apple', 'peach', 'puppy']\n\u00a0\u00a0\u00a0\u00a0closeMatches(patterns, word)", "nl": "Write a Python program to Find all close matches of input string from a list"}
{"code": "from functools import reduce\n\u00a0\u00a0\nfib = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0range(n-2), [0, 1])\n\u00a0\u00a0\nprint(fib(5))", "nl": "Write a Python program to Find fibonacci series upto n using lambda"}
{"code": "import pandas as pd", "nl": "Sorting a CSV object by dates in Python"}
{"code": "# Python program showing a use\n# lambda function\n\n\n# performing a addition of three number\nx1 = (lambda x, y, z: (x + y) * z)(1, 2, 3)\nprint(x1)\n\n\n# function using a lambda function\u00a0\u00a0\u00a0\u00a0\u00a0\nx2 = (lambda x, y, z: (x + y) if (z == 0) else (x * y))(1, 2, 3)\nprint(x2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0", "nl": "Overuse of lambda expressions in Python"}
{"code": "import pandas as pd\n\u00a0\u00a0\n# Create a DataFrame\ndf1 = { 'Name':['George','Andrea','micheal',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'maggie','Ravi','Xien','Jalpa'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score1':[62,47,55,74,32,77,86],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score2':[45,78,44,89,66,49,72]}\n\u00a0\u00a0\ndf1 = pd.DataFrame(df1,columns= ['Name','score1','score2'])\n\u00a0\u00a0\nprint(\"Given Dataframe :\\n\", df1)\n\u00a0\u00a0\n# getting Difference\ndf1['Score_diff'] = df1['score1'] - df1['score2']\nprint(\"\\nDifference of score1 and score2 :\\n\", df1)", "nl": "Difference of two columns in Pandas dataframe in Python"}
{"code": "# import library\nimport os\n\u00a0\u00a0\n# take Input from the user\u00a0\nquery = input(\"Which drive you have to open ? C , D or E: \\n\")\n\u00a0\u00a0\n# Check the condition for\u00a0\n# opening the C drive\nif \"C\" in query or \"c\" in query:\n\u00a0\u00a0os.startfile(\"C:\")\n\u00a0\u00a0\u00a0\u00a0\n# Check the condition for\u00a0\n# opening the D drive\nelif \"D\" in query or \"d\" in query:\n\u00a0\u00a0os.startfile(\"D:\")\n\u00a0\u00a0\n# Check the condition for\u00a0\n# opening the D drive\nelif \"E\" in query or \"e\" in query:\n\u00a0\u00a0os.startfile(\"E:\")\n\u00a0\u00a0\nelse:\n\u00a0\u00a0\u00a0\u00a0print(\"Wrong Input\")", "nl": "Open computer drives like C, D or E using Python"}
{"code": "# function to Check if binary representations\n# of two numbers are anagram\nfrom collections import Counter\n\u00a0\u00a0\ndef checkAnagram(num1,num2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# convert numbers into in binary\n\u00a0\u00a0\u00a0\u00a0# and remove first two characters of\u00a0\n\u00a0\u00a0\u00a0\u00a0# output string because bin function\u00a0\n\u00a0\u00a0\u00a0\u00a0# '0b' as prefix in output string\n\u00a0\u00a0\u00a0\u00a0bin1 = bin(num1)[2:]\n\u00a0\u00a0\u00a0\u00a0bin2 = bin(num2)[2:]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# append zeros in shorter string\n\u00a0\u00a0\u00a0\u00a0zeros = abs(len(bin1)-len(bin2))\n\u00a0\u00a0\u00a0\u00a0if (len(bin1)>len(bin2)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bin2 = zeros * '0' + bin2\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bin1 = zeros * '0' + bin1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# convert binary representations\u00a0\n\u00a0\u00a0\u00a0\u00a0# into dictionary\n\u00a0\u00a0\u00a0\u00a0dict1 = Counter(bin1)\n\u00a0\u00a0\u00a0\u00a0dict2 = Counter(bin2)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# compare both dictionaries\n\u00a0\u00a0\u00a0\u00a0if dict1 == dict2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Yes')\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('No')\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0num1 = 8\n\u00a0\u00a0\u00a0\u00a0num2 = 4\n\u00a0\u00a0\u00a0\u00a0checkAnagram(num1,num2)\n\u00a0\u00a0\u00a0\u00a0\u00a0", "nl": "Write a Python Dictionary | Check if binary representations of two numbers are anagram"}
{"code": "# Python Program to Print Lines\n# Containing Given String in File\n\u00a0\u00a0\n# input file name with extension\nfile_name = input(\"Enter The File's Name: \")\n\u00a0\u00a0\n# using try catch except to\n# handle file not found error.\n\u00a0\u00a0\n# entering try block\ntry:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# opening and reading the file\u00a0\n\u00a0\u00a0\u00a0\u00a0file_read = open(file_name, \"r\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# asking the user to enter the string to be\u00a0\n\u00a0\u00a0\u00a0\u00a0# searched\n\u00a0\u00a0\u00a0\u00a0text = input(\"Enter the String: \")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# reading file content line by line.\n\u00a0\u00a0\u00a0\u00a0lines = file_read.readlines()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0new_list = []\n\u00a0\u00a0\u00a0\u00a0idx = 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# looping through each line in the file\n\u00a0\u00a0\u00a0\u00a0for line in lines:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if line have the input string, get the index\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of that line and put the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# line into newly created list\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if text in line:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_list.insert(idx, line)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0idx += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# closing file after reading\n\u00a0\u00a0\u00a0\u00a0file_read.close()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if length of new list is 0 that means\u00a0\n\u00a0\u00a0\u00a0\u00a0# the input string doesn't\n\u00a0\u00a0\u00a0\u00a0# found in the text file\n\u00a0\u00a0\u00a0\u00a0if len(new_list)==0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n\\\"\" +text+ \"\\\" is not found in \\\"\" +file_name+ \"\\\"!\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# displaying the lines\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# containing given string\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lineLen = len(new_list)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n**** Lines containing \\\"\" +text+ \"\\\" ****\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(lineLen):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(end=new_list[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\n# entering except block\n# if input file doesn't exist\u00a0\nexcept :\n\u00a0\u00a0print(\"\\nThe file doesn't exist!\")", "nl": "Write a Python Program to Print Lines Containing Given String in File"}
{"code": "# Import libraries\nimport numpy as np\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# Creating dataset\na = np.random.randint(100, size =(50))\n\u00a0\u00a0\n# Creating histogram\nnp.histogram(a, bins = [0, 10, 20, 30, 40,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a050, 60, 70, 80, 90,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0100])\n\u00a0\u00a0\nhist, bins = np.histogram(a, bins = [0, 10,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a020, 30,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a040, 50,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a060, 70,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a080, 90,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0100])\u00a0\n\u00a0\u00a0\n# printing histogram\nprint()\nprint (hist)\u00a0\nprint (bins)\u00a0\nprint()", "nl": "NumPy.histogram() Method in Python"}
{"code": "# import library\nimport re\n\u00a0\u00a0\n# list of different types of file\nfilenames = [\"gfg.html\", \"geeks.xml\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"computer.txt\", \"geeksforgeeks.jpg\"]\n\u00a0\u00a0\nfor file in filenames:\n\u00a0\u00a0\u00a0\u00a0# search given pattern in the line\u00a0\n\u00a0\u00a0\u00a0\u00a0match = re.search(\"\\.xml$\", file)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if match is found\n\u00a0\u00a0\u00a0\u00a0if match:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"The file ending with .xml is:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file)", "nl": "Write a Python program to find files having a particular extension using RegEx"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Dictionary Values Mean\n# Using loop + len()\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {\"Gfg\" : 4, \"is\" : 7, \"Best\" : 8, \"for\" : 6, \"Geeks\" : 10}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# loop to sum all values\u00a0\nres = 0\nfor val in test_dict.values():\n\u00a0\u00a0\u00a0\u00a0res += val\n\u00a0\u00a0\n# using len() to get total keys for mean computation\nres = res / len(test_dict)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The computed mean : \" + str(res))\u00a0", "nl": "Write a Python program to Dictionary Values Mean"}
{"code": "# importing pandas\nimport pandas as pd\n\u00a0\u00a0\n# list of dicts\ninput_df = [{'name':'Sujeet', 'age':10},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'name':'Sameer', 'age':11},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'name':'Sumit', 'age':12}]\n\u00a0\u00a0\ndf = pd.DataFrame(input_df)\nprint('Original DataFrame: \\n', df)\n\u00a0\u00a0\n\u00a0\u00a0\nprint('\\nRows iterated using iterrows() : ')\nfor index, row in df.iterrows():\n\u00a0\u00a0\u00a0\u00a0print(row['name'], row['age'])", "nl": "How to iterate over rows in Pandas Dataframe in Python"}
{"code": "def print_pattern(n):\n\u00a0\u00a0\u00a0\u00a0for i in range(1, n+1, 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(1, n+1, 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check that if index i is\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# equal to j\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == j:\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(j, end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if index i is less than j\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i <= j:\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for k in range(j+1, n+1, 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(k, end=\" \")\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for p in range(1, j, 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(p, end=\" \")\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print new line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\n\n\n\n# Driver's code\nprint_pattern(3)", "nl": "Write a Python program to right rotate n-numbers by 1"}
{"code": "# import module\nfrom datetime import datetime\n\u00a0\u00a0\n# get current date and time\ncurrent_datetime = datetime.now()\nprint(\"Current date & time : \", current_datetime)\n\u00a0\u00a0\n# convert datetime obj to string\nstr_current_datetime = str(current_datetime)\n\u00a0\u00a0\n# create a file object along with extension\nfile_name = str_current_datetime+\".txt\"\nfile = open(file_name, 'w')\n\u00a0\u00a0\nprint(\"File created : \", file.name)\nfile.close()", "nl": "How to create filename containing date or time in Python"}
{"code": "# Python program explaining\n# numpy.swapaxes() function\n\u00a0\u00a0\n# importing numpy as geek\u00a0\nimport numpy as geek\n\u00a0\u00a0\narr = geek.array([[2, 4, 6]])\n\u00a0\u00a0\ngfg = geek.swapaxes(arr, 0, 1)\n\u00a0\u00a0\nprint (gfg)", "nl": "numpy.swapaxes() function | Python"}
{"code": "# Python program to demonstrate\n# Conversion of JSON data to\n# dictionary\n\u00a0\u00a0\n\u00a0\u00a0\n# importing the module\nimport json\n\u00a0\u00a0\n# Opening JSON file\nwith open('data.json') as json_file:\n\u00a0\u00a0\u00a0\u00a0data = json.load(json_file)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Print the type of data variable\n\u00a0\u00a0\u00a0\u00a0print(\"Type:\", type(data))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Print the data of dictionary\n\u00a0\u00a0\u00a0\u00a0print(\"\\nPeople1:\", data['people1'])\n\u00a0\u00a0\u00a0\u00a0print(\"\\nPeople2:\", data['people2'])", "nl": "Convert JSON to dictionary in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Lists of List to Dictionary\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Convert Lists of List to Dictionary\n# Using loop\nres = dict()\nfor sub in test_list:\n\u00a0\u00a0\u00a0\u00a0res[tuple(sub[:2])] = tuple(sub[2:])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The mapped Dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Lists of List to Dictionary"}
{"code": "# Python code to demonstrate converting\n# array of strings to array of floats\n# using astype\n\n\nimport numpy as np\n\n\n# initialising array\nini_array = np.array([\"1.1\", \"1.5\", \"2.7\", \"8.9\"])\n\n\n# printing initial array\nprint (\"initial array\", str(ini_array))\n\n\n# converting to array of floats\n# using np.astype\nres = ini_array.astype(np.float)\n\n\n# printing final result\nprint (\"final array\", str(res))", "nl": "Write a Python program to Ways to convert array of strings to array of floats"}
{"code": "from selenium import webdriver\nfrom bs4 import BeautifulSoup\nimport time\n\u00a0\u00a0\n# Creating a webdriver instance\ndriver = webdriver.Chrome(\"Enter-Location-Of-Your-Web-Driver\")\n# This instance will be used to log into LinkedIn\n\u00a0\u00a0\n# Opening linkedIn's login page\ndriver.get(\"https://linkedin.com/uas/login\")\n\u00a0\u00a0\n# waiting for the page to load\ntime.sleep(5)\n\u00a0\u00a0\n# entering username\nusername = driver.find_element_by_id(\"username\")\n\u00a0\u00a0\n# In case of an error, try changing the element\n# tag used here.\n\u00a0\u00a0\n# Enter Your Email Address\nusername.send_keys(\"User_email\")\u00a0\u00a0\n\u00a0\u00a0\n# entering password\npword = driver.find_element_by_id(\"password\")\n# In case of an error, try changing the element\u00a0\n# tag used here.\n\u00a0\u00a0\n# Enter Your Password\npword.send_keys(\"User_pass\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Clicking on the log in button\n# Format (syntax) of writing XPath -->\u00a0\n# //tagname[@attribute='value']\ndriver.find_element_by_xpath(\"//button[@type='submit']\").click()\n# In case of an error, try changing the\n# XPath used here.", "nl": "Scrape LinkedIn Using Selenium And Beautiful Soup in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Closest Pair to Kth index element in Tuple\n# Using enumerate() + loop\n\u00a0\u00a0\n# initializing list\ntest_list = [(3, 4), (78, 76), (2, 3), (9, 8), (19, 23)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing tuple\ntup = (17, 23)\n\u00a0\u00a0\n# initializing K\u00a0\nK = 1\n\u00a0\u00a0\n# Closest Pair to Kth index element in Tuple\n# Using enumerate() + loop\nmin_dif, res = 999999999, None\nfor idx, val in enumerate(test_list):\n\u00a0\u00a0\u00a0\u00a0dif = abs(tup[K - 1] - val[K - 1])\n\u00a0\u00a0\u00a0\u00a0if dif < min_dif:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0min_dif, res = dif, idx\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The nearest tuple to Kth index element is : \" + str(test_list[res]))\u00a0", "nl": "Write a Python program to Closest Pair to Kth index element in Tuple"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Substring presence in Strings List\n# Using loop\n\u00a0\u00a0\n# initializing lists\ntest_list1 = [\"Gfg\", \"is\", \"Best\"]\ntest_list2 = [\"I love Gfg\", \"Its Best for Geeks\", \"Gfg means CS\"]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 : \" + str(test_list1))\nprint(\"The original list 2 : \" + str(test_list2))\n\u00a0\u00a0\n# using loop to iterate\nres = []\nfor ele in test_list1 :\n\u00a0\u00a0temp = False\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# inner loop to check for\n\u00a0\u00a0# presence of element in any list\n\u00a0\u00a0for sub in test_list2 :\n\u00a0\u00a0\u00a0\u00a0if ele in sub:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0res.append(temp)\n\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The match list : \" + str(res))", "nl": "Write a Python program to Substring presence in Strings List"}
{"code": "# deleting a line\n# based on the position\n\n\n# opening the file in\n# reading mode\n\n\ntry:\n\u00a0\u00a0\u00a0\u00a0with open('months.txt', 'r') as fr:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# reading line by line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lines = fr.readlines()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pointer for position\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# opening in writing mode\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open('months.txt', 'w') as fw:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in lines:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# we want to remove 5th line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ptr != 5:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fw.write(line)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr += 1\n\u00a0\u00a0\u00a0\u00a0print(\"Deleted\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\nexcept:\n\u00a0\u00a0\u00a0\u00a0print(\"Oops! something error\")", "nl": "Write a Python Program to Delete Specific Line from File"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Append Dictionary Keys and Values ( In order ) in dictionary\n# Using values() + keys() + list()\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {\"Gfg\" : 1, \"is\" :\u00a0 3, \"Best\" : 2}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# + operator is used to perform adding keys and values\nres = list(test_dict.keys()) + list(test_dict.values())\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The ordered keys and values : \" + str(res))\u00a0", "nl": "Write a Python program to Append Dictionary Keys and Values ( In order ) in dictionary"}
{"code": "# Python program explaining\n# numpy.polygrid2d() method\u00a0\n\u00a0\u00a0\n# importing numpy as np\n\u00a0\u00a0\nimport numpy as np\u00a0\nfrom numpy.polynomial.polynomial import polygrid2d\n\u00a0\u00a0\n# Input polynomial series coefficients\nc = np.array([[1, 3, 5], [2, 4, 6]])\u00a0\n\u00a0\u00a0\n# using np.polygrid2d() method\u00a0\nans = polygrid2d([7, 9], [8, 10], c)\nprint(ans)", "nl": "Write a Python program to Numpy np.polygrid2d() method"}
{"code": "# Import pandas package\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndata = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# calling head() method\u00a0\u00a0\n# storing in new variable\u00a0\ndata_top = data.head(10)\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# display\u00a0\ndata_top", "nl": "Apply uppercase to a column in Pandas dataframe in Python"}
{"code": "# for a array value of a key\nunflat_json = {'user' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'Rachel':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'UserID':1717171717,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Email': 'rachel1999@gmail.com',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'friends': ['John', 'Jeremy', 'Emily']\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\n# Function for flattening\u00a0\n# json\ndef flatten_json(y):\n\u00a0\u00a0\u00a0\u00a0out = {}\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def flatten(x, name =''):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the Nested key-value\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pair is of dict type\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if type(x) is dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for a in x:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flatten(x[a], name + a + '_')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the Nested key-value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pair is of list type\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif type(x) is list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for a in x:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flatten(a, name + str(i) + '_')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out[name[:-1]] = x\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0flatten(y)\n\u00a0\u00a0\u00a0\u00a0return out\n\u00a0\u00a0\n# Driver code\nprint(flatten_json(unflat_json))", "nl": "Flattening JSON objects in Python"}
{"code": "import os\n\u00a0\u00a0\n\u00a0\u00a0\n# folder path input\nprint(\"Enter folder path\")\npath = os.path.abspath(input())\n\u00a0\u00a0\n# for storing size of each\u00a0\n# file\nsize = 0\n\u00a0\u00a0\n# for storing the size of\u00a0\n# the largest file\nmax_size = 0\n\u00a0\u00a0\n# for storing the path to the\u00a0\n# largest file\nmax_file =\"\"\n\u00a0\u00a0\n# walking through the entire folder,\n# including subdirectories\n\u00a0\u00a0\nfor folder, subfolders, files in os.walk(path):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking the size of each file\n\u00a0\u00a0\u00a0\u00a0for file in files:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size = os.stat(os.path.join( folder, file\u00a0 )).st_size\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# updating maximum size\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if size>max_size:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_size = size\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_file = os.path.join( folder, file\u00a0 )\n\u00a0\u00a0\nprint(\"The largest file is: \"+max_file)\nprint('Size: '+str(max_size)+' bytes')", "nl": "Finding the largest file in a directory using Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Consecutive Kth column Difference in Tuple List\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [(5, 4, 2), (1, 3, 4), (5, 7, 8), (7, 4, 3)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 1\u00a0\n\u00a0\u00a0\nres = []\nfor idx in range(0, len(test_list) - 1):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# getting difference using abs()\n\u00a0\u00a0\u00a0\u00a0res.append(abs(test_list[idx][K] - test_list[idx + 1][K]))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Resultant tuple list : \" + str(res))", "nl": "Write a Python program to Consecutive Kth column Difference in Tuple List"}
{"code": "# Python program to get average of a list\n\u00a0\u00a0\n# Importing the NumPy module\nimport numpy as np\n\u00a0\u00a0\n# Taking a list of elements\nlist = [2, 4, 4, 4, 5, 5, 7, 9]\n\u00a0\u00a0\n# Calculating average using average()\nprint(np.average(list))", "nl": "Calculate the average, variance and standard deviation in Python using NumPy"}
{"code": "# Python program for KMP Algorithm\ndef KMPSearch(pat, txt):\n\u00a0\u00a0\u00a0\u00a0M = len(pat)\n\u00a0\u00a0\u00a0\u00a0N = len(txt)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create lps[] that will hold the longest prefix suffix\u00a0\n\u00a0\u00a0\u00a0\u00a0# values for pattern\n\u00a0\u00a0\u00a0\u00a0lps = [0]*M\n\u00a0\u00a0\u00a0\u00a0j = 0 # index for pat[]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Preprocess the pattern (calculate lps[] array)\n\u00a0\u00a0\u00a0\u00a0computeLPSArray(pat, M, lps)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0i = 0 # index for txt[]\n\u00a0\u00a0\u00a0\u00a0while i < N:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pat[j] == txt[i]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j == M:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"Found pattern at index \" + str(i-j)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = lps[j-1]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# mismatch after j matches\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif i < N and pat[j] != txt[i]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Do not match lps[0..lps[j-1]] characters,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# they will match anyway\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j != 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = lps[j-1]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\ndef computeLPSArray(pat, M, lps):\n\u00a0\u00a0\u00a0\u00a0len = 0 # length of the previous longest prefix suffix\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0lps[0] # lps[0] is always 0\n\u00a0\u00a0\u00a0\u00a0i = 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# the loop calculates lps[i] for i = 1 to M-1\n\u00a0\u00a0\u00a0\u00a0while i < M:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pat[i]== pat[len]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0len += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lps[i] = len\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This is tricky. Consider the example.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# AAACAAAA and i = 7. The idea is similar\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to search step.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len != 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0len = lps[len-1]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Also, note that we do not increment i here\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lps[i] = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\ntxt = \"ABABDABACDABABCABAB\"\npat = \"ABABCABAB\"\nKMPSearch(pat, txt)\n\u00a0\u00a0\n# This code is contributed by Bhavya Jain", "nl": "Write a Python Program for KMP Algorithm for Pattern Searching"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Check if two strings are Rotationally Equivalent\n# Using loop + string slicing\n\u00a0\u00a0\n# initializing strings\ntest_str1 = 'geeks'\ntest_str2 = 'eksge'\n\u00a0\u00a0\n# printing original strings\nprint(\"The original string 1 is : \" + str(test_str1))\nprint(\"The original string 2 is : \" + str(test_str2))\n\u00a0\u00a0\n# Check if two strings are Rotationally Equivalent\n# Using loop + string slicing\nres = False\nfor idx in range(len(test_str1)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if test_str1[idx: ] + test_str1[ :idx] == test_str2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Are two strings Rotationally equal ? : \" + str(res))\u00a0", "nl": "Write a Python program to Check if two strings are Rotationally Equivalent"}
{"code": "# Python Program illustrating\n# numpy.percentile() method\n\u00a0\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\u00a0\n# 1D array\narr = [20, 2, 7, 1, 34]\nprint(\"arr : \", arr)\nprint(\"50th percentile of arr : \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.percentile(arr, 50))\nprint(\"25th percentile of arr : \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.percentile(arr, 25))\nprint(\"75th percentile of arr : \",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.percentile(arr, 75))", "nl": "numpy.percentile() in python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Similar characters Strings comparison\n# Using split() + sorted()\n\u00a0\u00a0\n# initializing strings\ntest_str1 = 'e:e:k:s:g'\ntest_str2 = 'g:e:e:k:s'\n\u00a0\u00a0\n# printing original strings\nprint(\"The original string 1 is : \" + str(test_str1))\nprint(\"The original string 2 is : \" + str(test_str2))\n\u00a0\u00a0\n# initializing delim\u00a0\ndelim = ':'\n\u00a0\u00a0\n# == operator is used for comparison\nres = sorted(test_str1.split(':')) == sorted(test_str2.split(':'))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Are strings similar : \" + str(res))\u00a0", "nl": "Write a Python program to Similar characters Strings comparison"}
{"code": "# Python3 program to print\u00a0\n#\u00a0 even length words in a string\u00a0\n\u00a0\u00a0\ndef printWords(s):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# split the string\u00a0\n\u00a0\u00a0\u00a0\u00a0s = s.split(' ')\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# iterate in words of string\u00a0\n\u00a0\u00a0\u00a0\u00a0for word in s:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if length is even\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(word)%2==0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(word)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\u00a0\ns = \"i am muskan\"\u00a0\nprintWords(s)\u00a0", "nl": "Write a Python program to print even length words in a string"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Reverse Dictionary Keys Order\n# Using OrderedDict() + reversed() + items()\nfrom collections import OrderedDict\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg' : 4, 'is' : 2, 'best' : 5}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# Reverse Dictionary Keys Order\n# Using OrderedDict() + reversed() + items()\nres = OrderedDict(reversed(list(test_dict.items())))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The reversed order dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Reverse Dictionary Keys Order"}
{"code": "# A complete working Python program to demonstrate all\u00a0\n# stack operations using a doubly linked list\u00a0\n\u00a0\u00a0\n# Node class\u00a0\nclass Node:\n\u00a0\u00a0\n# Function to initialise the node object\n\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data # Assign data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None # Initialize next as null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.prev = None # Initialize prev as null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Stack class contains a Node object\nclass Stack:\n\u00a0\u00a0\u00a0\u00a0# Function to initialize head\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to add an element data in the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def push(self, data):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node = Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.prev = new_node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.next = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.prev = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = new_node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to pop top element and return the element from the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def pop(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head.next is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head.data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head.data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.head.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.prev = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to return top element in the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def top(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.head.data\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to return the size of the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def size(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = temp.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return count\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to check if the stack is empty or not\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def isEmpty(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Function to print the stack\n\u00a0\u00a0\u00a0\u00a0def printstack(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"stack elements are:\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(temp.data, end =\"->\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = temp.next\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Code execution starts here\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nif __name__=='__main__':\u00a0\n\u00a0\u00a0\n# Start with the empty stack\n\u00a0\u00a0stack = Stack()\n\u00a0\u00a0\n# Insert 4 at the beginning. So stack becomes 4->None\u00a0\n\u00a0\u00a0print(\"Stack operations using Doubly LinkedList\")\n\u00a0\u00a0stack.push(4)\n\u00a0\u00a0\n# Insert 5 at the beginning. So stack becomes 4->5->None\u00a0\n\u00a0\u00a0stack.push(5)\n\u00a0\u00a0\n# Insert 6 at the beginning. So stack becomes 4->5->6->None\u00a0\n\u00a0\u00a0stack.push(6)\n\u00a0\u00a0\n# Insert 7 at the beginning. So stack becomes 4->5->6->7->None\u00a0\n\u00a0\u00a0stack.push(7)\n\u00a0\u00a0\n# Print the stack\n\u00a0\u00a0stack.printstack()\n\u00a0\u00a0\n# Print the top element\n\u00a0\u00a0print(\"\\nTop element is \", stack.top())\n\u00a0\u00a0\n# Print the stack size\n\u00a0\u00a0print(\"Size of the stack is \", stack.size())\n\u00a0\u00a0\n# pop the top element\n\u00a0\u00a0stack.pop()\n\u00a0\u00a0\n# pop the top element\n\u00a0\u00a0stack.pop()\n\u00a0\u00a0\u00a0\u00a0\n# two elements are popped\n# Print the stack\n\u00a0\u00a0stack.printstack()\n\u00a0\u00a0\u00a0\u00a0\n# Print True if the stack is empty else False\n\u00a0\u00a0print(\"\\nstack is empty:\", stack.isEmpty())\n\u00a0\u00a0\n#This code is added by Suparna Raut", "nl": "Write a Python program to Stack using Doubly Linked List"}
{"code": "def print_diamond(size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print the first triangle\n\u00a0\u00a0\u00a0\u00a0# (the upper half)\n\u00a0\u00a0\u00a0\u00a0for i in range (size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print from first row till\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# middle row\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rownum = i + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_alphabet = 2 * rownum - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space_in_between_alphabets = num_alphabet - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total_spots = (2 * size - 1) * 2 - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total_space = total_spots - num_alphabet\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space_leading_trailing = total_space - space_in_between_alphabets\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lead_space = int(space_leading_trailing / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trail_space = int(space_leading_trailing / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the leading spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(lead_space):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# determine the middle character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char = (1 + size - 1) - int(num_alphabet / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# start with the last character\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = 1 + size - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char_reached = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the numbers alternated by '-'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(num_alphabet + space_in_between_alphabets):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not is_alphabet_printed:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(str(k), end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if k == mid_char:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char_reached = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if mid_char_reached == True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the trailing spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(trail_space):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# go to the next line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print the rows after middle row\u00a0\n\u00a0\u00a0\u00a0\u00a0# till last row (the second triangle\u00a0\n\u00a0\u00a0\u00a0\u00a0# which is inverted, i.e., the lower half)\n\u00a0\u00a0\u00a0\u00a0for i in range(size + 1, 2 * size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rownum = i\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_alphabet = 2 * (2 * size - rownum) - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space_in_between_alphabets = num_alphabet - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total_spots = (2 * size - 1) * 2 - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total_space = total_spots - num_alphabet\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space_leading_trailing = total_space - space_in_between_alphabets\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lead_space = int(space_leading_trailing / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trail_space = int(space_leading_trailing / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the leading spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(lead_space):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char = (1 + size - 1) - int(num_alphabet / 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# start with the last char\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = 1 + size - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char_reached = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the numbers alternated by '-'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(num_alphabet + space_in_between_alphabets):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not is_alphabet_printed:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(str(k), end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if k == mid_char:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid_char_reached = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if mid_char_reached == True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is_alphabet_printed = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print the trailing spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(trail_space):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-', end ='')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# go to the next line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('')\n\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0n = 5\n\u00a0\u00a0\u00a0\u00a0print_diamond(n)", "nl": "Write a Python Program to print a number diamond of any given size N in Rangoli Style"}
{"code": "# Import the required modules\nfrom selenium import webdriver\nimport time\n\u00a0\u00a0\n# Main Function\nif __name__ == '__main__':\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Provide the email and password\n\u00a0\u00a0\u00a0\u00a0email = ''\n\u00a0\u00a0\u00a0\u00a0password = ''\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0options = webdriver.ChromeOptions()\n\u00a0\u00a0\u00a0\u00a0options.add_argument(\"--start-maximized\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Provide the path of chromedriver\n\u00a0\u00a0\u00a0\u00a0# present on your system.\n\u00a0\u00a0\u00a0\u00a0driver = webdriver.Chrome(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0executable_path=\"C:/chromedriver/chromedriver.exe\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chrome_options=options)\n\u00a0\u00a0\u00a0\u00a0driver.set_window_size(1920, 1080)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Send a get request to the url\n\u00a0\u00a0\u00a0\u00a0driver.get('https://auth.geeksforgeeks.org/')\n\u00a0\u00a0\u00a0\u00a0time.sleep(5)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Finds the input box by name\n\u00a0\u00a0\u00a0\u00a0# in DOM tree to send both\n\u00a0\u00a0\u00a0\u00a0# the provided email and password in it.\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name('user').send_keys(email)\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name('pass').send_keys(password)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Find the signin button and click on it.\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'button.btn.btn-green.signin-button').click()\n\u00a0\u00a0\u00a0\u00a0time.sleep(5)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Returns the list of elements\n\u00a0\u00a0\u00a0\u00a0# having the following css selector.\n\u00a0\u00a0\u00a0\u00a0container = driver.find_elements_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Extracts the text from name,\n\u00a0\u00a0\u00a0\u00a0# institution, email_id css selector.\n\u00a0\u00a0\u00a0\u00a0name = container[0].text\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0institution = container[1].find_element_by_css_selector('a').text\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0institution = container[1].text\n\u00a0\u00a0\u00a0\u00a0email_id = container[2].text\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Output\n\u00a0\u00a0\u00a0\u00a0print({\"Name\": name, \"Institution\": institution,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Email ID\": email})\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Quits the driver\n\u00a0\u00a0\u00a0\u00a0driver.quit()", "nl": "How To Automate Google Chrome Using Foxtrot and Python"}
{"code": "// C++ Program to design the\n// above pattern of K using alphabets\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n// Function to print\n// the above Pattern\nvoid display(int n)\n{\n\u00a0\u00a0int v = n;\n\n\n\u00a0\u00a0// This loop is used\n\u00a0\u00a0// for rows and prints\n\u00a0\u00a0// the alphabets in\n\u00a0\u00a0// decreasing order\n\u00a0\u00a0while (v >= 0)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0int c = 65;\n\n\n\u00a0\u00a0\u00a0\u00a0// This loop is used\n\u00a0\u00a0\u00a0\u00a0// for columns\n\u00a0\u00a0\u00a0\u00a0for(int j = 0; j < v + 1; j++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// chr() function converts the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// number to alphabet\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << char(c + j) << \" \";\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0v--;\n\u00a0\u00a0\u00a0\u00a0cout << endl;\n\u00a0\u00a0}\n\n\n\u00a0\u00a0// This loop is again used\n\u00a0\u00a0// to rows and prints the\n\u00a0\u00a0// half remaining pattern in\n\u00a0\u00a0// increasing order\n\u00a0\u00a0for(int i = 0; i < n + 1; i++)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0int c = 65;\n\n\n\u00a0\u00a0\u00a0\u00a0for(int j = 0; j < i + 1; j++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << char(c + j) << \" \";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0cout << endl;\n\u00a0\u00a0}\n}\n\n\n// Driver code\nint main()\n{\n\u00a0\u00a0int n = 5;\n\u00a0\u00a0display(n);\n\u00a0\u00a0return 0;\n}\n\n\n// This code is contributed by divyeshrabadiya07", "nl": "Program to Print K using Alphabets in Python"}
{"code": "# Import pandas package\u00a0\nimport pandas as pd\n\u00a0\u00a0\n# create a dictionary with five fields each\ndata = {\n\u00a0\u00a0\u00a0\u00a0'A':['A1', 'A2', 'A3', 'A4', 'A5'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'B':['B1', 'B2', 'B3', 'B4', 'B5'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'C':['C1', 'C2', 'C3', 'C4', 'C5'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'D':['D1', 'D2', 'D3', 'D4', 'D5'],\u00a0\n\u00a0\u00a0\u00a0\u00a0'E':['E1', 'E2', 'E3', 'E4', 'E5'] }\n\u00a0\u00a0\n# Convert the dictionary into DataFrame\u00a0\ndf = pd.DataFrame(data)\n\u00a0\u00a0\ndf", "nl": "How to drop one or multiple columns in Pandas Dataframe in Python"}
{"code": "# Python program to replace text in a file\ns = input(\"Enter text to replace the existing contents:\")\nf = open(\"file.txt\", \"r+\")\n\n\n# file.txt is an example here,\n# it should be replaced with the file name\n# r+ mode opens the file in read and write mode\nf.truncate(0)\nf.write(s)\nf.close()\nprint(\"Text successfully replaced\")", "nl": "Write a Python Program to Replace Text in a File"}
{"code": "# Python program to remove multiple\n# elements from a list\n\n\n# creating a list\nlist1 = [11, 5, 17, 18, 23, 50]\n\n\n# Iterate each element in list\n# and add them in variable total\nfor ele in list1:\n\u00a0\u00a0\u00a0\u00a0if ele % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list1.remove(ele)\n\n\n# printing modified list\nprint(\"New list after removing all even numbers: \", list1)", "nl": "Remove multiple elements from a list in Python"}
{"code": "# Import pandas package\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndata = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# calling head() method\u00a0\u00a0\n# storing in new variable\u00a0\ndata_top = data.head()\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# display\u00a0\ndata_top\u00a0", "nl": "How to get column names in Pandas dataframe in Python"}
{"code": "# Python program to demonstrate\n# nested lambda functions\n\u00a0\u00a0\n\u00a0\u00a0\nf = lambda a = 2, b = 3:lambda c: a+b+c\n\u00a0\u00a0\no = f()\nprint(o(4))", "nl": "Nested Lambda Function in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort Dictionary key and values List\n# Using loop + dictionary comprehension\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg': [7, 6, 3],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is': [2, 10, 3],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'best': [19, 4]}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Sort Dictionary key and values List\n# Using loop + dictionary comprehension\nres = dict()\nfor key in sorted(test_dict):\n\u00a0\u00a0\u00a0\u00a0res[key] = sorted(test_dict[key])\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The sorted dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Sort Dictionary key and values List"}
{"code": "# Python3 code to demonstrate working of\n# Removing punctuations in string\n# Using loop + punctuation string\n\n\n# initializing string\ntest_str = \"Gfg, is best : for ! Geeks ;\"\n\n\n# printing original string\nprint(\"The original string is : \" + test_str)\n\n\n# initializing punctuations string\npunc = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\n\n# Removing punctuations in string\n# Using loop + punctuation string\nfor ele in test_str:\n\u00a0\u00a0\u00a0\u00a0if ele in punc:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_str = test_str.replace(ele, \"\")\n\n\n# printing result\nprint(\"The string after punctuation filter : \" + test_str)", "nl": "Write a Python program to Remove punctuation from string"}
{"code": "# Import pandas package\nimport pandas as pd\n\u00a0\u00a0\u00a0\u00a0\n# Define a dictionary containing employee data\ndata = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[27, 24, 22, 32, 15],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th'] }\n\u00a0\u00a0\n# Convert the dictionary into DataFrame\u00a0\ndf = pd.DataFrame(data)\n\u00a0\u00a0\ndf", "nl": "Reset Index in Pandas Dataframe in Python"}
{"code": "# Python code to demonstrate the\n# use of numpy.nanmean\nimport numpy as np\n\u00a0\u00a0\u00a0\n# create 2d array with nan value.\narr = np.array([[20, 15, 37], [47, 13, np.nan]])\n\u00a0\u00a0\u00a0\nprint(\"Shape of array is\", arr.shape)\n\u00a0\u00a0\u00a0\nprint(\"Mean of array without using nanmean function:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.mean(arr))\n\u00a0\u00a0\u00a0\nprint(\"Using nanmean function:\", np.nanmean(arr))", "nl": "Write a Python program to numpy.nanmean() function"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Row-wise element Addition in Tuple Matrix\n# Using enumerate() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing Custom eles\ncus_eles = [6, 7, 8]\n\u00a0\u00a0\n# Row-wise element Addition in Tuple Matrix\n# Using enumerate() + list comprehension\nres = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The matrix after row elements addition : \" + str(res))\u00a0", "nl": "Write a Python program to Row-wise element Addition in Tuple Matrix"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Assigning Subsequent Rows to Matrix first row elements\n# Using dictionary comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [[5, 8, 9], [2, 0, 9], [5, 4, 2], [2, 3, 9]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# pairing each 1st col with next rows in Matrix\nres = {test_list[0][ele] :\u00a0 test_list[ele + 1] for ele in range(len(test_list) - 1)}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Assigned Matrix : \" + str(res))", "nl": "Write a Python program to Assigning Subsequent Rows to Matrix first row elements"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Split by repeating substring\n# Using * operator + len()\n\u00a0\u00a0\n# initializing string\ntest_str = \"gfggfggfggfggfggfggfggfg\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing target\nK = 'gfg'\n\u00a0\u00a0\n# Split by repeating substring\n# Using * operator + len()\ntemp = len(test_str) // len(str(K))\nres = [K] * temp\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The split string is : \" + str(res))\u00a0", "nl": "Write a Python program to Split by repeating substring"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove multiple empty spaces from string List\n# Using loop + strip()\n\u00a0\u00a0\n# initializing list\ntest_list = ['gfg', '\u00a0\u00a0 ', ' ', 'is', '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ', 'best']\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Remove multiple empty spaces from string List\n# Using loop + strip()\nres = []\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0if ele.strip():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"List after filtering non-empty strings : \" + str(res))\u00a0", "nl": "Write a Python program to Ways to remove multiple empty spaces from string List"}
{"code": "# Python implementation of converting\n# a string into a dictionary\n\u00a0\u00a0\n# initialising string\u00a0\nstr = \" Jan = January; Feb = February; Mar = March\"\n\u00a0\u00a0\n# At first the string will be splitted\n# at the occurence of ';' to divide items\u00a0\n# for the dictionaryand then again splitting\u00a0\n# will be done at occurence of '=' which\n# generates key:value pair for each item\ndictionary = dict(subString.split(\"=\") for subString in str.split(\";\"))\n\u00a0\u00a0\n# printing the generated dictionary\nprint(dictionary)", "nl": "Ways to convert string to dictionary in Python"}
{"code": "# Python3 code to demonstrate\n# Sum of number digits in List\n# using loop + str()\n\n\n# Initializing list\ntest_list = [12, 67, 98, 34]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# Sum of number digits in List\n# using loop + str()\nres = []\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0sum = 0\n\u00a0\u00a0\u00a0\u00a0for digit in str(ele):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += int(digit)\n\u00a0\u00a0\u00a0\u00a0res.append(sum)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\nprint (\"List Integer Summation : \" + str(res))", "nl": "Write a Python program to Sum of number digits in List"}
{"code": "# importing pandas module\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\ndf.head(10)", "nl": "Get the index of maximum value in DataFrame column in Python"}
{"code": "# for using os.popen()\nimport os\n\n\n# sending the uptime command as an argument to popen()\n# and saving the returned result (after truncating the trailing \\n)\nt = os.popen('uptime -p').read()[:-1]\n\n\nprint(t)", "nl": "Getting the time since OS startup using Python"}
{"code": "from inspect import signature\n\u00a0\u00a0\n\u00a0\u00a0\n# declare a function gfg with some\n# parameter\ndef gfg(x:str, y:int):\n\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n# with the help of signature function\n# store signature of the function in\n# variable t\nt = signature(gfg)\n\u00a0\u00a0\n# print the signature of the function\nprint(t)\n\u00a0\u00a0\n# print the annonation of the parameter\n# of the function\nprint(t.parameters['x'])\n\u00a0\u00a0\n# print the annonation of the parameter\n# of the function\nprint(t.parameters['y'].annotation)", "nl": "Write a Python program to Get Function Signature"}
{"code": "# Python program explaining\n# numpy.diff() method\n\n\n\u00a0\u00a0\u00a0\n# importing numpy\nimport numpy as geek\n\n\n# input array\narr = geek.array([1, 3, 4, 7, 9])\n\u00a0\u00a0\nprint(\"Input array\u00a0 : \", arr)\nprint(\"First order difference\u00a0 : \", geek.diff(arr))\nprint(\"Second order difference : \", geek.diff(arr, n = 2))\nprint(\"Third order difference\u00a0 : \", geek.diff(arr, n = 3))", "nl": "numpy.diff() in Python"}
{"code": "# Importing required modules\nimport numpy\n\n\n# Creating arrays\narray1 = numpy.array([[1, 2], [3, 4]])\nprint('Array1:\\n', array1)\n\n\narray2 = numpy.array([[5, 6], [7, 8]])\nprint('\\nArray2:\\n', array2)\n\n\n# Computing the Kronecker Product\nkroneckerProduct = numpy.kron(array1, array2)\nprint('\\nArray1 \u2297 Array2:')\nprint(kroneckerProduct)", "nl": "Compute the Kronecker product of two multidimension NumPy arrays in Python"}
{"code": "# importing the module\nimport os\n\u00a0\u00a0\n# sets the text colour to green\u00a0\nos.system(\"tput setaf 2\")\n\u00a0\u00a0\nprint(\"Launching Terminal User Interface\")\n\u00a0\u00a0\n# sets the text color to red\nos.system(\"tput setaf 1\")\n\u00a0\u00a0\nprint(\"\\t\\tWELCOME TO Terminal User Interface\\t\\t\\t\")\n\u00a0\u00a0\n# sets the text color to white\nos.system(\"tput setaf 7\")\n\u00a0\u00a0\nprint(\"\\t-------------------------------------------------\")\nprint(\"Entering local device\")\nwhile True:\n\u00a0\u00a0\u00a0\u00a0print(\"\"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.Print date\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.Print cal\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.Configure web\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.Configure docker\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a05.Add user\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06.Delete user\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07.Create a file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a08.Create a folder\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a09.Exit\"\"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0ch=int(input(\"Enter your choice: \"))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if(ch == 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"date\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"cal\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 3:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"yum install httpd -y\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"systemctl start httpd\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"systemctl status httpd\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 4:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"yum install docker-ce -y\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"systemctl start docker\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"systemctl status docker\")\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 5:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_user=input(\"Enter the name of new user: \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"sudo useradd {}\".format(new_user))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"id -u {}\".format(new_user) )\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 6:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0del_user=input(\"Enter the name of the user to delete: \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"sudo userdel {}\".format(del_user))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 7:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filename=input(\"Enter the filename: \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f=os.system(\"sudo touch {}\".format(filename))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if f!=0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Some error occurred\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"File created successfully\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 8:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foldername=input(\"Enter the foldername: \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f=os.system(\"sudo mkdir {}\".format(foldername))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if f!=0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Some error occurred\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Folder created successfully\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ch == 9:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Exiting application\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit()\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Invalid entry\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0input(\"Press enter to continue\")\n\u00a0\u00a0\u00a0\u00a0os.system(\"clear\")", "nl": "Menu driven Python program to execute Linux commands"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\n#\u00a0 create a numpy 1d-arrays\narr1 = np.array([3, 4])\narr2 = np.array([1, 0])\n\u00a0\u00a0\n# find average of NumPy arrays\navg = (arr1 + arr2) / 2\n\u00a0\u00a0\nprint(\"Average of NumPy arrays:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avg)", "nl": "Calculate average values of two given NumPy arrays in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract elements with Frequency greater than K\n# Using count() + loop\n\u00a0\u00a0\n# initializing list\ntest_list = [4, 6, 4, 3, 3, 4, 3, 7, 8, 8]\n\u00a0\u00a0\n# printing string\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 2\n\u00a0\u00a0\nres = []\u00a0\nfor i in test_list:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# using count() to get count of elements\n\u00a0\u00a0\u00a0\u00a0freq = test_list.count(i)\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking if not already entered in results\n\u00a0\u00a0\u00a0\u00a0if freq > K and i not in res:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(i)\n\u00a0\u00a0\n# printing results\u00a0\nprint(\"The required elements : \" + str(res))", "nl": "Write a Python program to Extract elements with Frequency greater than K"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Maximum Consecutive Substring\u00a0 Occurrence\n# Using max() + re.findall()\nimport re\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksgeeks are geeks for all geeksgeeksgeeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing subs\u00a0\nsub_str = 'geeks'\n\u00a0\u00a0\n# Maximum Consecutive Substring\u00a0 Occurrence\n# Using max() + re.findall()\nres = max(re.findall('((?:' + re.escape(sub_str) + ')*)', test_str), key = len)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The maximum run of Substring : \" + res)\u00a0", "nl": "Write a Python program to Maximum Consecutive Substring Occurrence"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert List to List of dictionaries\n# Using dictionary comprehension + loop\n\u00a0\u00a0\n# initializing lists\ntest_list = [\"Gfg\", 3, \"is\", 8, \"Best\", 10, \"for\", 18, \"Geeks\", 33]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing key list\u00a0\nkey_list = [\"name\", \"number\"]\n\u00a0\u00a0\n# loop to iterate through elements\n# using dictionary comprehension\n# for dictionary construction\nn = len(test_list)\nres = []\nfor idx in range(0, n, 2):\n\u00a0\u00a0\u00a0\u00a0res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary list : \" + str(res))", "nl": "Write a Python program to Convert List to List of dictionaries"}
{"code": "# Creating a set using string\ntest_set = set(\"geEks\")\n\n\n# Iterating using for loop\nfor val in test_set:\n\u00a0\u00a0\u00a0\u00a0print(val)", "nl": "Iterate over a set in Python"}
{"code": "# Import Module\nimport os\n\u00a0\u00a0\n# Folder Path\npath = \"Enter Folder Path\"\n\u00a0\u00a0\n# Change the directory\nos.chdir(path)\n\u00a0\u00a0\n# Read text File\n\u00a0\u00a0\n\u00a0\u00a0\ndef read_text_file(file_path):\n\u00a0\u00a0\u00a0\u00a0with open(file_path, 'r') as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f.read())\n\u00a0\u00a0\n\u00a0\u00a0\n# iterate through all file\nfor file in os.listdir():\n\u00a0\u00a0\u00a0\u00a0# Check whether file is in text format or not\n\u00a0\u00a0\u00a0\u00a0if file.endswith(\".txt\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file_path = f\"{path}\\{file}\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# call read text file function\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0read_text_file(file_path)", "nl": "How to read multiple text files from folder in Python"}
{"code": "# Python program to remove elements from set\n# Using the pop() method\ndef Remove(initial_set):\n\u00a0\u00a0\u00a0\u00a0while initial_set:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initial_set.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(initial_set)\n\u00a0\u00a0\n# Driver Code\ninitial_set = set([12, 10, 13, 15, 8, 9])\nRemove(initial_set)", "nl": "Write a Python program to Remove items from Set"}
{"code": "# Python3 code to demonstrate working of\n# Last weekday of every month in year\n# Using loop + max() + calendar.monthcalendar\nimport calendar\n\u00a0\u00a0\n# initializing year\nyear = 1997\n\u00a0\u00a0\n# printing Year\nprint(\"The original year : \" + str(year))\n\u00a0\u00a0\n# initializing weekday\u00a0\nweekdy = 5\n\u00a0\u00a0\n# iterating for all months\nres = []\nfor month in range(1, 13):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# max gets last friday of each month of 1997\n\u00a0\u00a0\u00a0\u00a0res.append(str(max(week[weekdy]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for week in calendar.monthcalendar(year, month))) +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/\" + str(month)+ \"/\" + str(year))\n\u00a0\u00a0\n# printing\u00a0\nprint(\"Last weekdays of year : \" + str(res))", "nl": "Write a Python program to Last business day of every month in year"}
{"code": "import re\u00a0\n\u00a0\u00a0\ndef convert_phone_number(phone):\n\u00a0\u00a0\n\u00a0\u00a0# actual pattern which only change this line\n\u00a0\u00a0num = re.sub(r'(?<!\\S)(\\d{3})-', r'(\\1) ', phone)\u00a0\n\u00a0\u00a0return num\n\u00a0\u00a0\n# Driver code\u00a0\nprint(convert_phone_number(\"Call geek 321-963-0612\"))", "nl": "Converting a 10 digit phone number to US format using Regex in Python"}
{"code": "# Python3 code to demonstrate working of\n# Add Space between Potential Words\n# Using loop + join()\n\n\n# initializing list\ntest_list = [\"gfgBest\", \"forGeeks\", \"andComputerScience\"]\n\n\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\n\nres = []\n\n\n# loop to iterate all strings\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0temp = [[]]\n\u00a0\u00a0\u00a0\u00a0for char in ele:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking for upper case character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char.isupper():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.append([])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# appending character at latest list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp[-1].append(char)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# joining lists after adding space\n\u00a0\u00a0\u00a0\u00a0res.append(' '.join(''.join(ele) for ele in temp))\n\n\n# printing result\nprint(\"The space added list of strings : \" + str(res))", "nl": "Write a Python program to Add Space between Potential Words"}
{"code": "# Python3 code to demonstrate\n# Getting datetime object using a date_string\n\u00a0\u00a0\n# importing datetime module\nimport datetime\n\u00a0\u00a0\n# datestring for which datetime_obj required\ndate_string = '2021-09-01 15:27:05.004573 +0530'\nprint(\"string datetime: \")\nprint(date_string)\nprint(\"datestring class is :\", type(date_string))\n\u00a0\u00a0\n# using strptime() to get datetime object\ndatetime_obj = datetime.datetime.strptime(\n\u00a0\u00a0\u00a0\u00a0date_string, '%Y-%m-%d %H:%M:%S.%f %z')\n\u00a0\u00a0\nprint(\"converted to datetime:\")\n\u00a0\u00a0\n# Printing datetime\nprint(datetime_obj)\n\u00a0\u00a0\n# Checking class of datetime_obj.\nprint(\"datetime_obj class is :\", type(datetime_obj))", "nl": "Convert string to datetime in Python with timezone"}
{"code": "// C++ implementation to print the\n// half diamond star pattern\n\u00a0\u00a0\n#include <iostream>\n\u00a0\u00a0\nusing namespace std;\n\u00a0\u00a0\n// Function to print the\n// half diamond star pattern\nvoid halfDiamondStar(int N)\n{\n\u00a0\u00a0\u00a0\u00a0int i, j;\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Loop to print the upper half\n\u00a0\u00a0\u00a0\u00a0// diamond pattern\n\u00a0\u00a0\u00a0\u00a0for (i = 0; i < N; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (j = 0; j < i + 1; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"*\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Loop to print the lower half\n\u00a0\u00a0\u00a0\u00a0// diamond pattern\n\u00a0\u00a0\u00a0\u00a0for (i = 1; i < N; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (j = i; j < N; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"*\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u00a0\u00a0\n// Driver Code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int N = 5;\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Function Call\n\u00a0\u00a0\u00a0\u00a0halfDiamondStar(N);\n}", "nl": "Program to print half Diamond star pattern in Python"}
{"code": "<!DOCTYPE html>\n<html>\n\u00a0\u00a0\u00a0<head>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<title>Selenium Table</title>\n\u00a0\u00a0\u00a0</head>\n\u00a0\u00a0\u00a0<body>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<table border=\"1\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<thead>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<th>Name</th>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<th>Class</th>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</thead>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tbody>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>Vinayak</td>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>12</td>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>Ishita</td>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td>10</td>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tr>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tbody>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</table>\n\u00a0\u00a0\u00a0</body>\n</html>", "nl": "Scrape Table from Website using Write a Python program to Selenium"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Cross Pairing in Tuple List\n# Using list comprehension\n\u00a0\u00a0\n# initializing lists\ntest_list1 = [(1, 7), (6, 7), (9, 100), (4, 21)]\ntest_list2 = [(1, 3), (2, 1), (9, 7), (2, 17)]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 : \" + str(test_list1))\nprint(\"The original list 2 : \" + str(test_list2))\n\u00a0\u00a0\n# corresponding loop in list comprehension\nres = [(sub1[1], sub2[1]) for sub2 in test_list2 for sub1 in test_list1 if sub1[0] == sub2[0]]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The mapped tuples : \" + str(res))", "nl": "Write a Python program to Cross Pairing in Tuple List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert dictionary to K Keys dictionaries\n# Using loop\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Gfg' : 1, 'is' : 2, 'best' : 3, 'for' : 4, 'geeks' : 5, 'CS' : 6}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 2\n\u00a0\u00a0\nres = []\ncount = 0\nflag = 0\nindict = dict()\nfor key in test_dict:\n\u00a0\u00a0\u00a0\u00a0indict[key] = test_dict[key]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for K size and avoiding empty dict using flag\n\u00a0\u00a0\u00a0\u00a0if count % K == 0 and flag:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(indict)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# reinitializing dictionary\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0indict = dict()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0flag = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted list : \" + str(res))\u00a0", "nl": "Write a Python program to Convert dictionary to K sized dictionaries"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[64, 1; 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.max() method\ngeeks = gfg.max()\n\u00a0\u00a0\u00a0\u00a0\nprint(geeks)", "nl": "Write a Python program to Numpy matrix.max()"}
{"code": "// C++ program to find all string\n// which are greater than given length k\n\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n// function find string greater than\n// length k\nvoid string_k(string s, int k)\n{\n\u00a0\u00a0\u00a0\u00a0// create the empty string\n\u00a0\u00a0\u00a0\u00a0string w = \"\";\n\u00a0\u00a0\u00a0\u00a0// iterate the loop till every space\n\u00a0\u00a0\u00a0\u00a0for(int i = 0; i < s.size(); i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(s[i] != ' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// append this sub string in\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// string w\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w = w + s[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if length of current sub\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// string w is greater than\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// k then print\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(w.size() > k)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << w << \" \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w = \"\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\n// Driver code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0string s = \"geek for geeks\";\n\u00a0\u00a0\u00a0\u00a0int k = 3;\n\u00a0\u00a0\u00a0\u00a0s = s + \" \";\n\u00a0\u00a0\u00a0\u00a0string_k(s, k);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n\n\n// This code is contributed by\n// Manish Shaw (manishshaw1)", "nl": "Find words which are greater than given length k in Python"}
{"code": "# Import pandas library\nimport pandas as pd\n\n\n# initialize list of lists\ndata = [['Geeks', 10], ['for', 15], ['geeks', 20]]\n\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data, columns = ['Name', 'Age'])\n\n\n# print dataframe.\nprint(df )", "nl": "Creating Pandas dataframe using list of lists in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Tuple Matrix to Tuple List\n# Using list comprehension + zip()\n\u00a0\u00a0\n# initializing list\ntest_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# flattening\u00a0\ntemp = [ele for sub in test_list for ele in sub]\n\u00a0\u00a0\n# joining to form column pairs\nres = list(zip(*temp))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted tuple list : \" + str(res))", "nl": "Write a Python program to Convert Tuple Matrix to Tuple List"}
{"code": "# Python program to reverse a linked list\n# Time Complexity : O(n)\n# Space Complexity : O(n) as 'next'\n#variable is getting created in each loop.\n\n\n# Node class\n\n\n\n\nclass Node:\n\n\n\u00a0\u00a0\u00a0\u00a0# Constructor to initialize the node object\n\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None\n\n\n\n\nclass LinkedList:\n\n\n\u00a0\u00a0\u00a0\u00a0# Function to initialize head\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\n\n\u00a0\u00a0\u00a0\u00a0# Function to reverse the linked list\n\u00a0\u00a0\u00a0\u00a0def reverse(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(current is not None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next = current.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current.next = prev\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev = current\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = prev\n\n\n\u00a0\u00a0\u00a0\u00a0# Function to insert a new node at the beginning\n\u00a0\u00a0\u00a0\u00a0def push(self, new_data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node = Node(new_data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.next = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = new_node\n\n\n\u00a0\u00a0\u00a0\u00a0# Utility function to print the linked LinkedList\n\u00a0\u00a0\u00a0\u00a0def printList(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(temp):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print temp.data,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = temp.next\n\n\n\n\n# Driver program to test above functions\nllist = LinkedList()\nllist.push(20)\nllist.push(4)\nllist.push(15)\nllist.push(85)\n\n\nprint \"Given Linked List\"\nllist.printList()\nllist.reverse()\nprint \"\\nReversed Linked List\"\nllist.printList()\n\n\n# This code is contributed by Nikhil Kumar Singh(nickzuck_007)", "nl": "Write a Python Program to Reverse a linked list"}
{"code": "# Python program explaining\n# numpy.sqrt() method\u00a0\n\u00a0\u00a0\n# importing numpy\nimport numpy as geek\u00a0\n\u00a0\u00a0\n# applying sqrt() method on integer numbers\u00a0\narr1 = geek.sqrt([1, 4, 9, 16])\narr2 = geek.sqrt([6, 10, 18])\n\u00a0\u00a0\nprint(\"square-root of an array1\u00a0 : \", arr1)\nprint(\"square-root of an array2\u00a0 : \", arr2)", "nl": "numpy.sqrt() in Python"}
{"code": "# importing required libraries\nimport pandas as pd\nimport re\n\n\n# creating Dataframe with column\n# as name and common_comments\ndf = pd.DataFrame(\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0'name' : ['Akash', 'Ayush', 'Diksha',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Priyanka', 'Radhika'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0'common_comments' : ['hey buddy meet me today ',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sorry bro i cant meet',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'hey akash i love geeksforgeeks',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'twiiter is the best way to comment',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geeksforgeeks is good for learners']\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0columns = ['name', 'common_comments']\n)\n# printing Dataframe\ndf", "nl": "How to Remove repetitive characters from words of the given Pandas DataFrame using Regex in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\n\n# Creating a dict of lists\ndata = {'Name':[\"Akash\", \"Geeku\", \"Pankaj\", \"Sumitra\",\"Ramlal\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Branch':[\"B.Tech\", \"MBA\", \"BCA\", \"B.Tech\", \"BCA\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Score':[\"80\",\"90\",\"60\", \"30\", \"50\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Result': [\"Pass\",\"Pass\",\"Pass\",\"Fail\",\"Fail\"]}\n\n\n# creating a dataframe\ndf = pd.DataFrame(data)\n\u00a0\u00a0\ndf", "nl": "Convert a column to row name/index in Pandas in Python"}
{"code": "# Python3 code to count vowel in\u00a0\n# a string using set\n\u00a0\u00a0\n# Function to count vowel\ndef vowel_count(str):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Initializing count variable to 0\n\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating a set of vowels\n\u00a0\u00a0\u00a0\u00a0vowel = set(\"aeiouAEIOU\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Loop to traverse the alphabet\n\u00a0\u00a0\u00a0\u00a0# in the given string\n\u00a0\u00a0\u00a0\u00a0for alphabet in str:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If alphabet is present\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in set vowel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if alphabet in vowel:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print(\"No. of vowels :\", count)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\u00a0\nstr = \"GeeksforGeeks\"\n\u00a0\u00a0\n# Function Call\nvowel_count(str)", "nl": "Write a Python program to count number of vowels using sets in given string"}
{"code": "# import required module\nimport pandas as pd;\nimport re;\n\u00a0\u00a0\n# Read excel file and store in to DataFrame\ndata = pd.read_excel(\"date_sample_data.xlsx\");\n\u00a0\u00a0\nprint(\"Original DataFrame\")\ndata", "nl": "How to extract date from Excel file using Pandas in Python"}
{"code": "# Python3 code to demonstrate working of\n# Cross Tuple AND operation\n# using map() + lambda\n\u00a0\u00a0\n# initialize tuples\u00a0\ntest_tup1 = (10, 4, 5)\ntest_tup2 = (2, 5, 18)\n\u00a0\u00a0\n# printing original tuples\u00a0\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\n\u00a0\u00a0\n# Cross Tuple AND operation\n# using map() + lambda\nres = tuple(map(lambda i, j: i & j, test_tup1, test_tup2))\n\u00a0\u00a0\n# printing result\nprint(\"Resultant tuple after AND operation : \" + str(res))", "nl": "Write a Python program to AND operation between Tuples"}
{"code": "# Python program to Search an Element\n# in a Circular Linked List\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Class to define node of the linked list\u00a0\u00a0\u00a0\u00a0\nclass Node:\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self,data):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nclass CircularLinkedList:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Declaring Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = Node(None);\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = Node(None);\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.next = self.tail;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = self.head;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Adds new nodes to the Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def add(self,data):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Declares a new node to be added\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newNode = Node(data);\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Checks if the Circular\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Linked List is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head.data is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If list is empty then new node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# will be the first node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to be added in the Circular Linked List\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newNode.next = self.head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If a node is already present then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# tail of the last node will point to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# new node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# New node will become new tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# New Tail will point to the head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = self.head;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to search the element in the\u00a0\n\u00a0\u00a0\u00a0\u00a0# Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def findNode(self,element):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Pointing the head to start the search\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = self.head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Declaring f = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = 0;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check if the list is empty or not\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(self.head == None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Empty list\");\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(True):\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Comparing the elements\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of each node to the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# element to be searched\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current.data ==\u00a0 element):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the element is present\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# then incrementing f\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f += 1;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Jumping to next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = current.next;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = i + 1;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If we reach the head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# again then element is not\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# present in the list so\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# we will break the loop\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current == self.head):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Checking the value of f\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(f > 0):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"element is present\");\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"element is not present\");\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating a Circular Linked List\n\u00a0\u00a0\u00a0\u00a0'''\n\u00a0\u00a0\u00a0\u00a0Circular Linked List we will be working on:\n\u00a0\u00a0\u00a0\u00a01 -> 2 -> 3 -> 4 -> 5 -> 6\n\u00a0\u00a0\u00a0\u00a0'''\n\u00a0\u00a0\u00a0\u00a0circularLinkedList = CircularLinkedList();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0#Adding nodes to the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(1);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(2);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(3);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(4);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(5);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(6);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Searching for node 2 in the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.findNode(2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0#Searching for node in the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.findNode(7);", "nl": "Write a Python program to Search an Element in a Circular Linked List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Odd Frequency Characters\n# Using list comprehension + defaultdict()\nfrom collections import defaultdict\n\u00a0\u00a0\n# helper_function\ndef hlper_fnc(test_str):\n\u00a0\u00a0\u00a0\u00a0cntr = defaultdict(int)\n\u00a0\u00a0\u00a0\u00a0for ele in test_str:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cntr[ele] += 1\n\u00a0\u00a0\u00a0\u00a0return [val for val, chr in cntr.items() if chr % 2 != 0]\n\u00a0\u00a0\n# initializing string\ntest_str = 'geekforgeeks is best for geeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# Odd Frequency Characters\n# Using list comprehension + defaultdict()\nres = hlper_fnc(test_str)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Odd Frequency Characters are : \" + str(res))", "nl": "Write a Python program to Odd Frequency Characters"}
{"code": "# Python program to print\n# duplicates from a list\n# of integers\ndef Repeat(x):\n\u00a0\u00a0\u00a0\u00a0_size = len(x)\n\u00a0\u00a0\u00a0\u00a0repeated = []\n\u00a0\u00a0\u00a0\u00a0for i in range(_size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = i + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(k, _size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x[i] == x[j] and x[i] not in repeated:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repeated.append(x[i])\n\u00a0\u00a0\u00a0\u00a0return repeated\n\n\n# Driver Code\nlist1 = [10, 20, 30, 20, 20, 30, 40,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a050, -20, 60, 60, -20, -20]\nprint (Repeat(list1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# This code is contributed\n# by Sandeep_anand", "nl": "Write a Python program to Program to print duplicates from a list of integers"}
{"code": "# import from string all ascii_lowercase and asc_lower\nfrom string import ascii_lowercase as asc_lower\n\n\n# function to check if all elements are present or not\ndef check(s):\n\u00a0\u00a0\u00a0\u00a0return set(asc_lower) - set(s.lower()) == set([])\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# driver code\nstring =\"The quick brown fox jumps over the lazy dog\"\nif(check(string)== True):\n\u00a0\u00a0\u00a0\u00a0print(\"The string is a pangram\")\nelse:\n\u00a0\u00a0\u00a0\u00a0print(\"The string isn't a pangram\")", "nl": "Write a Python set to check if string is panagram"}
{"code": "# Python3 code to demonstrate\u00a0\n# Split String of list on K character\n# using loop + split()\n\u00a0\u00a0\n# Initializing list\u00a0\ntest_list = ['Gfg is best', 'for Geeks', 'Preparing']\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\nK = ' '\n\u00a0\u00a0\n# Split String of list on K character\n# using loop + split()\nres = []\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0sub = ele.split(K)\n\u00a0\u00a0\u00a0\u00a0res.extend(sub)\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The extended list after split strings : \" + str(res))", "nl": "Write a Python program to Split String of list on K character"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Test if string is subset of another\n# Using all()\n\u00a0\u00a0\n# initializing strings\ntest_str1 = \"geeksforgeeks\"\ntest_str2 = \"gfks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str1)\n\u00a0\u00a0\n# Test if string is subset of another\n# Using all()\nres = all(ele in test_str1 for ele in test_str2)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Does string contains all the characters of other list? : \" + str(res))\u00a0", "nl": "Write a Python program to Test if string is subset of another"}
{"code": "# Python3 code to demonstrate working of\n# Remove Reduntant Substrings from Strings List\n# Using enumerate() + join() + sort()\n\n\n# initializing list\ntest_list = [\"Gfg\", \"Gfg is best\", \"Geeks\", \"Gfg is for Geeks\"]\n\n\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\n\n# using loop to iterate for each string\ntest_list.sort(key = len)\nres = []\nfor idx, val in enumerate(test_list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# concatenating all next values and checking for existence\n\u00a0\u00a0\u00a0\u00a0if val not in ', '.join(test_list[idx + 1:]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(val)\n\n\n# printing result\nprint(\"The filtered list : \" + str(res))", "nl": "Write a Python program to Remove Reduntant Substrings from Strings List"}
{"code": "# import important module\nimport datetime\nfrom datetime import datetime\n\u00a0\u00a0\n# Create datetime string\ndatetime_str = \"24AUG2001101010\"\n\u00a0\u00a0\n# call datetime.strptime to convert\n# it into datetime datatype\ndatetime_obj = datetime.strptime(datetime_str,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"%d%b%Y%H%M%S\")\n\u00a0\u00a0\n# It will print the datetime object\nprint(datetime_obj)\n\u00a0\u00a0\n# extract the time from datetime_obj\ntime = datetime_obj.time()\n\u00a0\u00a0\n\u00a0\u00a0\n# it will print time that\u00a0\n# we have extracted from datetime obj\nprint(time)\u00a0", "nl": "Extract time from datetime in Python"}
{"code": "# Create a simple dataframe\n\u00a0\u00a0\u00a0\n# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# creating a dataframe\ndf = pd.DataFrame({'A': ['John', 'bODAY', 'MinA', 'Peter', 'nicky'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'B': ['masters', 'graduate', 'graduate',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Masters', 'Graduate'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'C': [27, 23, 21, 23, 24]})\n\u00a0\u00a0\u00a0\ndf", "nl": "How to lowercase column names in Pandas dataframe in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\n\n# Creating the dataframe\ndf = pd.DataFrame({'Date':['11/8/2011', '04/23/2008', '10/2/2019'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000]})\n\n\n# Print the dataframe\nprint(df)\n\n\n# Now we will check the data type\n# of the 'Date' column\ndf.info()", "nl": "Convert the column type from string to datetime format in Pandas dataframe in Python"}
{"code": "# Python3 code to demonstrate working of\n# Word Index for K position in Strings List\n# Using enumerate() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [\"geekforgeeks\", \"is\", \"best\", \"for\", \"geeks\"]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\nK = 20\n\u00a0\u00a0\n# enumerate to get indices of all inner and outer list\nres = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]\n\u00a0\u00a0\n# getting index of word\nres = res[K]\n\u00a0\u00a0\n# printing result\nprint(\"Index of character at Kth position word : \" + str(res))", "nl": "Write a Python program to find the character position of Kth word from a list of strings"}
{"code": "# Importing Numpy module\nimport numpy as np\n\u00a0\u00a0\n# Creating a 3X3 2-D Numpy array\narr = np.array([[10, 20, 30],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[40, 5, 66],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[70, 88, 94]])\n\u00a0\u00a0\nprint(\"Given Array :\")\nprint(arr)\n\u00a0\u00a0\n# Access the First and Last rows of array\nres_arr = arr[[0,2]]\nprint(\"\\nAccessed Rows :\")\nprint(res_arr)", "nl": "How to access different rows of a multidimensional NumPy array in Python"}
{"code": "from tkinter import *\nimport math\nimport tkinter.messagebox", "nl": "Scientific GUI Calculator using Tkinter in Python"}
{"code": "# importing the module\nimport numpy as np\n\u00a0\u00a0\n# creating two matrices\np = [[1, 2], [2, 3]]\nq = [[4, 5], [6, 7]]\nprint(\"Matrix p :\")\nprint(p)\nprint(\"Matrix q :\")\nprint(q)\n\u00a0\u00a0\n# computing product\nresult = np.dot(p, q)\n\u00a0\u00a0\n# printing the result\nprint(\"The matrix multiplication is :\")\nprint(result)", "nl": "Matrix Multiplication in NumPy in Python"}
{"code": "# Python program to find ordered words\nimport requests\n\u00a0\u00a0\n# Scrapes the words from the URL below and stores\u00a0\n# them in a list\ndef getWords():\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# contains about 2500 words\n\u00a0\u00a0\u00a0\u00a0url = \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"\n\u00a0\u00a0\u00a0\u00a0fetchData = requests.get(url)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# extracts the content of the webpage\n\u00a0\u00a0\u00a0\u00a0wordList = fetchData.content\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# decodes the UTF-8 encoded text and splits the\u00a0\n\u00a0\u00a0\u00a0\u00a0# string to turn it into a list of words\n\u00a0\u00a0\u00a0\u00a0wordList = wordList.decode(\"utf-8\").split()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return wordList\n\u00a0\u00a0\n\u00a0\u00a0\n# function to determine whether a word is ordered or not\ndef isOrdered():\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# fetching the wordList\n\u00a0\u00a0\u00a0\u00a0collection = getWords()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# since the first few of the elements of the\u00a0\n\u00a0\u00a0\u00a0\u00a0# dictionary are numbers, getting rid of those\n\u00a0\u00a0\u00a0\u00a0# numbers by slicing off the first 17 elements\n\u00a0\u00a0\u00a0\u00a0collection = collection[16:]\n\u00a0\u00a0\u00a0\u00a0word = ''\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for word in collection:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = 'Word is ordered'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l = len(word) - 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (len(word) < 3): # skips the 1 and 2 lettered strings\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# traverses through all characters of the word in pairs\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while i < l:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ord(word[i]) > ord(word[i+1])):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = 'Word is not ordered'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# only printing the ordered words\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (result == 'Word is ordered'):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(word,': ',result)\n\u00a0\u00a0\n\u00a0\u00a0\n# execute isOrdered() function\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0isOrdered()", "nl": "Scraping And Finding Ordered Words In A Dictionary using Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Reverse All Strings in String List\n# using list comprehension\n\u00a0\u00a0\n# initializing list\u00a0\ntest_list = [\"geeks\", \"for\", \"geeks\", \"is\", \"best\"]\n\u00a0\u00a0\n# printing original list\nprint (\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# using list comprehension\n# Reverse All Strings in String List\nres = [i[::-1] for i in test_list]\n\u00a0\u00a0\n# printing result\nprint (\"The reversed string list is : \" + str(res))", "nl": "Write a Python program to Reverse All Strings in String List"}
{"code": "# Python code to demonstrate\u00a0\n# Count Strings with substring String List\n# using list comprehension + len()\n\u00a0\u00a0\n# initializing list\u00a0\ntest_list = ['GeeksforGeeks', 'Geeky', 'Computers', 'Algorithms']\n\u00a0\u00a0\n# printing original list\u00a0\nprint (\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing substring\nsubs = 'Geek'\n\u00a0\u00a0\n# using list comprehension + len()\n# Count Strings with substring String List\nres = len([i for i in test_list if subs in i])\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"All strings count with given substring are : \" + str(res))", "nl": "Write a Python program to Count Strings with substring String List"}
{"code": "# Python3 code to demonstrate\u00a0\n# Remove words containing list characters\n# using list comprehension + all()\nfrom itertools import groupby\n\u00a0\u00a0\n# initializing list\u00a0\ntest_list = ['gfg', 'is', 'best', 'for', 'geeks']\n\u00a0\u00a0\n# initializing char list\u00a0\nchar_list = ['g', 'o']\n\u00a0\u00a0\n# printing original list\nprint (\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# printing character list\nprint (\"The character list is : \" + str(char_list))\n\u00a0\u00a0\n# Remove words containing list characters\n# using list comprehension + all()\nres = [ele for ele in test_list if all(ch not in ele for ch in char_list)]\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The filtered strings are : \" + str(res))", "nl": "Write a Python program to Remove words containing list characters"}
{"code": "import json\n\n\n# create a sample json\n\n\na = {\"name\" : \"GeeksforGeeks\", \"Topic\" : \"Json to String\", \"Method\": 1}\n\n\n# Convert JSON to String\n\n\ny = json.dumps(a)\n\n\nprint(y)\nprint(type(y))", "nl": "Write a Python program to Convert JSON to string"}
{"code": "# Following program is the python implementation of\n# Rabin Karp Algorithm given in CLRS book\n\u00a0\u00a0\n# d is the number of characters in the input alphabet\nd = 256\n\u00a0\u00a0\n# pat\u00a0 -> pattern\n# txt\u00a0 -> text\n# q\u00a0\u00a0\u00a0 -> A prime number\n\u00a0\u00a0\ndef search(pat, txt, q):\n\u00a0\u00a0\u00a0\u00a0M = len(pat)\n\u00a0\u00a0\u00a0\u00a0N = len(txt)\n\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0j = 0\n\u00a0\u00a0\u00a0\u00a0p = 0\u00a0\u00a0\u00a0 # hash value for pattern\n\u00a0\u00a0\u00a0\u00a0t = 0\u00a0\u00a0\u00a0 # hash value for txt\n\u00a0\u00a0\u00a0\u00a0h = 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# The value of h would be \"pow(d, M-1)% q\"\n\u00a0\u00a0\u00a0\u00a0for i in xrange(M-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0h = (h * d)% q\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Calculate the hash value of pattern and first window\n\u00a0\u00a0\u00a0\u00a0# of text\n\u00a0\u00a0\u00a0\u00a0for i in xrange(M):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p = (d * p + ord(pat[i]))% q\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = (d * t + ord(txt[i]))% q\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Slide the pattern over text one by one\n\u00a0\u00a0\u00a0\u00a0for i in xrange(N-M + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check the hash values of current window of text and\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pattern if the hash values match then only check\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# for characters on by one\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if p == t:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check for characters one by one\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in xrange(M):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if txt[i + j] != pat[j]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j+= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if p == t and pat[0...M-1] = txt[i, i + 1, ...i + M-1]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j == M:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"Pattern found at index \" + str(i)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate hash value for next window of text: Remove\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# leading digit, add trailing digit\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i < N-M:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = (d*(t-ord(txt[i])*h) + ord(txt[i + M]))% q\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# We might get negative values of t, converting it to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# positive\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if t < 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = t + q\n\u00a0\u00a0\n# Driver program to test the above function\ntxt = \"GEEKS FOR GEEKS\"\npat = \"GEEK\"\nq = 101 # A prime number\nsearch(pat, txt, q)\n\u00a0\u00a0\n# This code is contributed by Bhavya Jain", "nl": "Write a Python Program for Rabin-Karp Algorithm for Pattern Searching"}
{"code": "# Python 3 code to demonstrate\n# Uncommon elements in List\n# using naive method\n\n\n# initializing lists\ntest_list1 = [ [1, 2], [3, 4], [5, 6] ]\ntest_list2 = [ [3, 4], [5, 7], [1, 2] ]\n\n\n# printing both lists\nprint (\"The original list 1 : \" + str(test_list1))\nprint (\"The original list 2 : \" + str(test_list2))\n\n\n# using naive method\n# Uncommon elements in List\nres_list = []\nfor i in test_list1:\n\u00a0\u00a0\u00a0\u00a0if i not in test_list2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res_list.append(i)\nfor i in test_list2:\n\u00a0\u00a0\u00a0\u00a0if i not in test_list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res_list.append(i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing the uncommon\nprint (\"The uncommon of two lists is : \" + str(res_list))", "nl": "Write a Python program to Uncommon elements in Lists of List"}
{"code": "# Python program to split a string and\u00a0\u00a0\n# join it using different delimiter\n\u00a0\u00a0\ndef split_string(string):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Split the string based on space delimiter\n\u00a0\u00a0\u00a0\u00a0list_string = string.split(' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return list_string\n\u00a0\u00a0\ndef join_string(list_string):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Join the string based on '-' delimiter\n\u00a0\u00a0\u00a0\u00a0string = '-'.join(list_string)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return string\n\u00a0\u00a0\n# Driver Function\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0string = 'Geeks for Geeks'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Splitting a string\n\u00a0\u00a0\u00a0\u00a0list_string = split_string(string)\n\u00a0\u00a0\u00a0\u00a0print(list_string)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# Join list of strings into one\n\u00a0\u00a0\u00a0\u00a0new_string = join_string(list_string)\n\u00a0\u00a0\u00a0\u00a0print(new_string)", "nl": "Write a Python program to split and join a string"}
{"code": "# Python Program to create numpy array\u00a0\n# filled with random values\nimport numpy as geek\u00a0\n\u00a0\u00a0\u00a0\u00a0\nb = geek.empty(2, dtype = int)\u00a0\nprint(\"Matrix b : \\n\", b)\u00a0\n\u00a0\u00a0\u00a0\u00a0\na = geek.empty([2, 2], dtype = int)\u00a0\nprint(\"\\nMatrix a : \\n\", a)\u00a0", "nl": "Create a Numpy array with random values | Python"}
{"code": "# Python program explaining\n# numpy.polygrid3d() method\u00a0\n\u00a0\u00a0\n# importing numpy as np\n\u00a0\u00a0\nimport numpy as np\u00a0\nfrom numpy.polynomial.polynomial import polygrid3d\n\u00a0\u00a0\n# Input polynomial series coefficients\nc = np.array([[1, 3, 5], [2, 4, 6], [10, 11, 12]])\u00a0\n\u00a0\u00a0\n# using np.polygrid3d() method\u00a0\nans = polygrid3d([7, 9], [8, 10], [5, 6], c)\nprint(ans)", "nl": "Write a Python program to Numpy np.polygrid3d() method"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Replace multiple words with K\n# Using join() + split() + list comprehension\n\u00a0\u00a0\n# initializing string\ntest_str = 'Geeksforgeeks is best for geeks and CS'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing word list\u00a0\nword_list = [\"best\", 'CS', 'for']\n\u00a0\u00a0\n# initializing replace word\u00a0\nrepl_wrd = 'gfg'\n\u00a0\u00a0\n# Replace multiple words with K\n# Using join() + split() + list comprehension\nres = ' '.join([repl_wrd if idx in word_list else idx for idx in test_str.split()])\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"String after multiple replace : \" + str(res))\u00a0", "nl": "Write a Python program to Replace multiple words with K"}
{"code": "# import numpy and pandas module\nimport pandas as pd\nimport numpy as np\n\n\ncolumn=['a','b','c','d','e']\nindex=['A','B','C','D','E']\n\n\n# create a dataframe of random values of array\ndf1 = pd.DataFrame(np.random.rand(5,5),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns=column, index=index)\n\n\nprint(df1)\n\n\nprint('\\n\\nDataframe after reindexing rows: \\n',\ndf1.reindex(['B', 'D', 'A', 'C', 'E']))", "nl": "Reindexing in Pandas DataFrame in Python"}
{"code": "import requests\nfrom bs4 import BeautifulSoup\nfrom csv import writer\nfrom time import sleep\nfrom random import choice\n\u00a0\u00a0\n# list to store scraped data\nall_quotes = []\n\u00a0\u00a0\n# this part of the url is constant\nbase_url = \"http://quotes.toscrape.com/\"\n\u00a0\u00a0\n# this part of the url will keep changing\nurl = \"/page/1\"\n\u00a0\u00a0\nwhile url:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# concatenating both urls\n\u00a0\u00a0\u00a0\u00a0# making request\n\u00a0\u00a0\u00a0\u00a0res = requests.get(f\"{base_url}{url}\")\n\u00a0\u00a0\u00a0\u00a0print(f\"Now Scraping{base_url}{url}\")\n\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(res.text, \"html.parser\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# extracting all elements\n\u00a0\u00a0\u00a0\u00a0quotes = soup.find_all(class_=\"quote\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for quote in quotes:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all_quotes.append({\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"text\": quote.find(class_=\"text\").get_text(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"author\": quote.find(class_=\"author\").get_text(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"bio-link\": quote.find(\"a\")[\"href\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0next_btn = soup.find(_class=\"next\")\n\u00a0\u00a0\u00a0\u00a0url = next_btn.find(\"a\")[\"href\"] if next_btn else None\n\u00a0\u00a0\u00a0\u00a0sleep(2)\n\u00a0\u00a0\nquote = choice(all_quotes)\nremaining_guesses = 4\nprint(\"Here's a quote:\u00a0 \")\nprint(quote[\"text\"])\n\u00a0\u00a0\nguess = ''\nwhile guess.lower() != quote[\"author\"].lower() and remaining_guesses > 0:\n\u00a0\u00a0\u00a0\u00a0guess = input(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Who said this quote? Guesses remaining {remaining_guesses}\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if guess == quote[\"author\"]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"CONGRATULATIONS!!! YOU GOT IT RIGHT\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0remaining_guesses -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if remaining_guesses == 3:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = requests.get(f\"{base_url}{quote['bio-link']}\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(res.text, \"html.parser\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0birth_date = soup.find(class_=\"author-born-date\").get_text()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0birth_place = soup.find(class_=\"author-born-location\").get_text()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Here's a hint: The author was born on {birth_date}{birth_place}\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif remaining_guesses == 2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Here's a hint: The author's first name starts with: {quote['author'][0]}\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif remaining_guesses == 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0last_initial = quote[\"author\"].split(\" \")[1][0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Here's a hint: The author's last name starts with: {last_initial}\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Sorry, you ran out of guesses. The answer was {quote['author']}\")", "nl": "Quote Guessing Game using Web Scraping in Python"}
{"code": "# import module\nimport requests\nfrom bs4 import BeautifulSoup\n\u00a0\u00a0\n\u00a0\u00a0\n# user define function\n# Scrape the data\n# and get in string\ndef getdata(url):\n\u00a0\u00a0\u00a0\u00a0r = requests.get(url)\n\u00a0\u00a0\u00a0\u00a0return r.text\n\u00a0\u00a0\n# Get Html code using parse\ndef html_code(url):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# pass the url\n\u00a0\u00a0\u00a0\u00a0# into getdata function\n\u00a0\u00a0\u00a0\u00a0htmldata = getdata(url)\n\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(htmldata, 'html.parser')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# return html code\n\u00a0\u00a0\u00a0\u00a0return(soup)\n\u00a0\u00a0\n# filter job data using\n# find_all function\ndef job_data(soup):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find the Html tag\n\u00a0\u00a0\u00a0\u00a0# with find()\n\u00a0\u00a0\u00a0\u00a0# and convert into string\n\u00a0\u00a0\u00a0\u00a0data_str = \"\"\n\u00a0\u00a0\u00a0\u00a0for item in soup.find_all(\"a\", class_=\"jobtitle turnstileLink\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_str = data_str + item.get_text()\n\u00a0\u00a0\u00a0\u00a0result_1 = data_str.split(\"\\n\")\n\u00a0\u00a0\u00a0\u00a0return(result_1)\n\u00a0\u00a0\n# filter company_data using\n# find_all function\n\u00a0\u00a0\n\u00a0\u00a0\ndef company_data(soup):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find the Html tag\n\u00a0\u00a0\u00a0\u00a0# with find()\n\u00a0\u00a0\u00a0\u00a0# and convert into string\n\u00a0\u00a0\u00a0\u00a0data_str = \"\"\n\u00a0\u00a0\u00a0\u00a0result = \"\"\n\u00a0\u00a0\u00a0\u00a0for item in soup.find_all(\"div\", class_=\"sjcl\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_str = data_str + item.get_text()\n\u00a0\u00a0\u00a0\u00a0result_1 = data_str.split(\"\\n\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0res = []\n\u00a0\u00a0\u00a0\u00a0for i in range(1, len(result_1)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(result_1[i]) > 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(result_1[i])\n\u00a0\u00a0\u00a0\u00a0return(res)\n\u00a0\u00a0\n\u00a0\u00a0\n# driver nodes/main function\nif __name__ == \"__main__\":\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Data for URL\n\u00a0\u00a0\u00a0\u00a0job = \"data+science+internship\"\n\u00a0\u00a0\u00a0\u00a0Location = \"Noida%2C+Uttar+Pradesh\"\n\u00a0\u00a0\u00a0\u00a0url = \"https://in.indeed.com/jobs?q=\"+job+\"&l=\"+Location\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Pass this URL into the soup\n\u00a0\u00a0\u00a0\u00a0# which will return\n\u00a0\u00a0\u00a0\u00a0# html string\n\u00a0\u00a0\u00a0\u00a0soup = html_code(url)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# call job and company data\n\u00a0\u00a0\u00a0\u00a0# and store into it var\n\u00a0\u00a0\u00a0\u00a0job_res = job_data(soup)\n\u00a0\u00a0\u00a0\u00a0com_res = company_data(soup)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Traverse the both data\n\u00a0\u00a0\u00a0\u00a0temp = 0\n\u00a0\u00a0\u00a0\u00a0for i in range(1, len(job_res)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(temp, 2+temp):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Company Name and Address : \" + com_res[j])\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = j\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Job : \" + job_res[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"-----------------------------\")", "nl": "Scraping Indeed Job Data Using Python"}
{"code": "# importing numpy as np\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# creating first matrix\nA = np.array([[1, 2], [3, 4]])\n\u00a0\u00a0\n# creating second matrix\nB = np.array([[4, 5], [6, 7]])\n\u00a0\u00a0\nprint(\"Printing elements of first matrix\")\nprint(A)\nprint(\"Printing elements of second matrix\")\nprint(B)\n\u00a0\u00a0\n# adding two matrix\nprint(\"Addition of two matrix\")\nprint(np.add(A, B))", "nl": "Adding and Subtracting Matrices in Python"}
{"code": "# import necessary libraries\nimport pandas as pd\nimport os\nimport glob\n\u00a0\u00a0\n\u00a0\u00a0\n# use glob to get all the csv files\u00a0\n# in the folder\npath = os.getcwd()\ncsv_files = glob.glob(os.path.join(path, \"*.csv\"))\n\u00a0\u00a0\n\u00a0\u00a0\n# loop over the list of csv files\nfor f in csv_files:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# read the csv file\n\u00a0\u00a0\u00a0\u00a0df = pd.read_csv(f)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print the location and filename\n\u00a0\u00a0\u00a0\u00a0print('Location:', f)\n\u00a0\u00a0\u00a0\u00a0print('File Name:', f.split(\"\\\\\")[-1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print the content\n\u00a0\u00a0\u00a0\u00a0print('Content:')\n\u00a0\u00a0\u00a0\u00a0display(df)\n\u00a0\u00a0\u00a0\u00a0print()", "nl": "How to read all CSV files in a folder in Pandas in Python"}
{"code": "# Python program to find the\n# minimum of two numbers\n\u00a0\u00a0\n\u00a0\u00a0\ndef minimum(a, b):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if a <= b:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return a\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\na = 2\nb = 4\nprint(minimum(a, b))", "nl": "Minimum of two numbers in Python"}
{"code": "# Function to rotate string left and right by d length\u00a0\n\u00a0\u00a0\ndef rotate(input,d):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# slice string in two parts for left and right\u00a0\n\u00a0\u00a0\u00a0\u00a0Lfirst = input[0 : d]\u00a0\n\u00a0\u00a0\u00a0\u00a0Lsecond = input[d :]\u00a0\n\u00a0\u00a0\u00a0\u00a0Rfirst = input[0 : len(input)-d]\u00a0\n\u00a0\u00a0\u00a0\u00a0Rsecond = input[len(input)-d : ]\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now concatenate two parts together\u00a0\n\u00a0\u00a0\u00a0\u00a0print (\"Left Rotation : \", (Lsecond + Lfirst) )\n\u00a0\u00a0\u00a0\u00a0print (\"Right Rotation : \", (Rsecond + Rfirst))\u00a0\n\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input = 'GeeksforGeeks'\n\u00a0\u00a0\u00a0\u00a0d=2\n\u00a0\u00a0\u00a0\u00a0rotate(input,d)\u00a0", "nl": "String slicing in Python to rotate a string"}
{"code": "# Python program to find the sum\n# and average of the list\n\u00a0\u00a0\nL = [4, 5, 1, 2, 9, 7, 10, 8]\n\u00a0\u00a0\n\u00a0\u00a0\n# variable to store the sum of\u00a0\n# the list\ncount = 0\n\u00a0\u00a0\n# Finding the sum\nfor i in L:\n\u00a0\u00a0\u00a0\u00a0count += i\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# divide the total elements by\n# number of elements\navg = count/len(L)\n\u00a0\u00a0\nprint(\"sum = \", count)\nprint(\"average = \", avg)", "nl": "Find sum and average of List in Python"}
{"code": "# Python program to find second largest\n# number in a list\n\n\n# list of numbers - length of\n# list should be at least 2\nlist1 = [10, 20, 4, 45, 99]\n\n\nmx=max(list1[0],list1[1])\nsecondmax=min(list1[0],list1[1])\nn =len(list1)\nfor i in range(2,n):\n\u00a0\u00a0\u00a0\u00a0if list1[i]>mx:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secondmax=mx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mx=list1[i]\n\u00a0\u00a0\u00a0\u00a0elif list1[i]>secondmax and \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mx != list1[i]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secondmax=list1[i]\n\n\nprint(\"Second highest number is : \",\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str(secondmax))", "nl": "Write a Python program to find second largest number in a list"}
{"code": "# importing the library\nimport os\n\u00a0\u00a0\n# giving directory name\ndirname = 'D:\\\\AllData'\n\u00a0\u00a0\n# giving file extension\next = ('.exe', 'jpg')\n\u00a0\u00a0\n# iterating over all files\nfor files in os.listdir(dirname):\n\u00a0\u00a0\u00a0\u00a0if files.endswith(ext):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(files)\u00a0 # printing file name of desired extension\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue", "nl": "Write a Python program to Loop through files of certain extensions"}
{"code": "# Python program to print odd Numbers in given range\n\u00a0\u00a0\nstart, end = 4, 19\n\u00a0\u00a0\n# iterating each number in list\nfor num in range(start, end + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 != 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print all odd numbers in a range"}
{"code": "# Python code to demonstrate\n# multiplication of 2d array\n# with 1d array\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\nini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])\nini_array2 = np.array([0, 2, 3])\n\u00a0\u00a0\n# printing initial arrays\nprint(\"initial array\", str(ini_array1))\n\u00a0\u00a0\n# Multiplying arrays\nresult = ini_array1 * ini_array2[:, np.newaxis]\n\u00a0\u00a0\n# printing result\nprint(\"New resulting array: \", result)", "nl": "Write a Python program to Multiply 2d numpy array corresponding to 1d array"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Swap Binary substring\n# Using translate()\n\u00a0\u00a0\n# initializing string\ntest_str = \"geeksforgeeks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Swap Binary substring\n# Using translate()\ntemp = str.maketrans(\"geek\", \"abcd\")\ntest_str = test_str.translate(temp)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after swap : \" + str(test_str))\u00a0", "nl": "Write a Python program to Replace all occurrences of a substring in a string"}
{"code": "# importing packages\nimport pandas as pd\n\u00a0\u00a0\n# load json file using pandas\ndf1 = pd.read_json('file1.json')\n\u00a0\u00a0\n# view data\nprint(df1)\n\u00a0\u00a0\n# load json file using pandas\ndf2 = pd.read_json('file2.json')\n\u00a0\u00a0\n# view data\nprint(df2)\n\u00a0\u00a0\n# use pandas.concat method\u00a0\ndf = pd.concat([df1,df2])\n\u00a0\u00a0\n# view the concatenated dataframe\nprint(df)\n\u00a0\u00a0\n# convert dataframe to csv file\ndf.to_csv(\"CSV.csv\",index=False)\n\u00a0\u00a0\n# load the resultant csv file\nresult = pd.read_csv(\"CSV.csv\")\n\u00a0\u00a0\n# and view the data\nprint(result)", "nl": "Convert multiple JSON files to CSV Python"}
{"code": "# import pandas and numpy\nimport pandas as pd\nimport numpy as np\n\u00a0\u00a0\n# series with numpy linspace()\u00a0\nser1 = pd.Series(np.linspace(3, 33, 3))\nprint(ser1)\n\u00a0\u00a0\n# series with numpy linspace()\nser2 = pd.Series(np.linspace(1, 100, 10))\nprint(\"\\n\", ser2)\n\u00a0\u00a0", "nl": "Create Pandas Series using NumPy functions in Python"}
{"code": "# Python program to capitalize\n# first and last character of\u00a0\n# each word of a String\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to do the same\ndef word_both_cap(str):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0#lamda function for capitalizing the\n\u00a0\u00a0\u00a0\u00a0# first and last letter of words in\u00a0\n\u00a0\u00a0\u00a0\u00a0# the string\n\u00a0\u00a0\u00a0\u00a0return ' '.join(map(lambda s: s[:-1]+s[-1].upper(),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.title().split()))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver's code\ns = \"welcome to geeksforgeeks\"\nprint(\"String before:\", s)\nprint(\"String after:\", word_both_cap(str))", "nl": "Write a Python program to capitalize the first and last character of each word in a string"}
{"code": "# A complete working Python program to demonstrate all\u00a0\n# Queue operations using doubly linked list\u00a0\n\u00a0\u00a0\u00a0\n# Node class\u00a0\nclass Node:\n\u00a0\u00a0\u00a0\n# Function to initialise the node object\n\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data # Assign data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None # Initialize next as null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.prev = None # Initialize prev as null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Queue class contains a Node object\nclass Queue:\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to initialize head\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.last=None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# Function to add an element data in the Queue\n\u00a0\u00a0\u00a0\u00a0def enqueue(self, data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.last is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head =Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.last =self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.last.next = Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.last.next.prev=self.last\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.last = self.last.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to remove first element and return the element from the queue\u00a0\n\u00a0\u00a0\u00a0\u00a0def dequeue(self):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp= self.head.data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.head.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.prev=None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# Function to return top element in the queue\u00a0\n\u00a0\u00a0\u00a0\u00a0def first(self):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.head.data\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# Function to return the size of the queue\n\u00a0\u00a0\u00a0\u00a0def size(self):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp=self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count=0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count=count+1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp=temp.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return count\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to check if the queue is empty or not\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def isEmpty(self):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# Function to print the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def printqueue(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"queue elements are:\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp=self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(temp.data,end=\"->\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp=temp.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Code execution starts here\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nif __name__=='__main__':\u00a0\n\u00a0\u00a0\u00a0\n# Start with the empty queue\n\u00a0\u00a0queue = Queue()\n\u00a0\u00a0\u00a0\n\u00a0\u00a0print(\"Queue operations using doubly linked list\")\n\u00a0\u00a0\u00a0\n# Insert 4 at the end. So queue becomes 4->None\u00a0\u00a0\n\u00a0\u00a0queue.enqueue(4)\n\u00a0\u00a0\u00a0\n# Insert 5 at the end. So queue becomes 4->5None\u00a0\u00a0\n\u00a0\u00a0queue.enqueue(5)\n\u00a0\u00a0\u00a0\n# Insert 6 at the end. So queue becomes 4->5->6->None\u00a0\u00a0\n\u00a0\u00a0queue.enqueue(6)\n\u00a0\u00a0\u00a0\n# Insert 7 at the end. So queue becomes 4->5->6->7->None\u00a0\u00a0\n\u00a0\u00a0queue.enqueue(7)\n\u00a0\u00a0\u00a0\n# Print the queue\u00a0\n\u00a0\u00a0queue.printqueue()\n\u00a0\u00a0\u00a0\n# Print the first element\u00a0\n\u00a0\u00a0print(\"\\nfirst element is \",queue.first())\n\u00a0\u00a0\u00a0\n# Print the queue size\u00a0\n\u00a0\u00a0print(\"Size of the queue is \",queue.size())\n\u00a0\u00a0\u00a0\n# remove the first element\u00a0\n\u00a0\u00a0queue.dequeue()\n\u00a0\u00a0\u00a0\n# remove the first element\u00a0\n\u00a0\u00a0queue.dequeue()\n\u00a0\u00a0\u00a0\n# first two elements are removed\n# Print the queue\u00a0\n\u00a0\u00a0print(\"After applying dequeue() two times\")\n\u00a0\u00a0queue.printqueue()\n\u00a0\u00a0\u00a0\n# Print True if queue is empty else False\u00a0\n\u00a0\u00a0print(\"\\nqueue is empty:\",queue.isEmpty())", "nl": "Write a Python program to Queue using Doubly Linked List"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Creating the DataFrame\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Create a new column in Pandas DataFrame based on the existing columns in Python"}
{"code": "# Python Code for Implementation and running time Algorithm\n# Complexity plot of Heap Sort\n# by Ashok Kajal\n# This python code intends to implement Heap Sort Algorithm\n# Plots its time Complexity on list of different sizes\n\n\n# ---------------------Important Note -------------------\n# numpy, time and matplotlib.pyplot are required to run this code\nimport time\nfrom numpy.random import seed\nfrom numpy.random import randint\nimport matplotlib.pyplot as plt\n\n\n\n\n# find left child of node i\ndef left(i):\n\u00a0\u00a0\u00a0\u00a0return 2 * i + 1\n\n\n# find right child of node i\ndef right(i):\n\u00a0\u00a0\u00a0\u00a0return 2 * i + 2\n\n\n# calculate and return array size\ndef heapSize(A):\n\u00a0\u00a0\u00a0\u00a0return len(A)-1\n\n\n\n\n# This function takes an array and Heapyfies\n# the at node i\ndef MaxHeapify(A, i):\n\u00a0\u00a0\u00a0\u00a0# print(\"in heapy\", i)\n\u00a0\u00a0\u00a0\u00a0l = left(i)\n\u00a0\u00a0\u00a0\u00a0r = right(i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# heapSize = len(A)\n\u00a0\u00a0\u00a0\u00a0# print(\"left\", l, \"Rightt\", r, \"Size\", heapSize)\n\u00a0\u00a0\u00a0\u00a0if l<= heapSize(A) and A[l] > A[i] :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = l\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = i\n\u00a0\u00a0\u00a0\u00a0if r<= heapSize(A) and A[r] > A[largest]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0largest = r\n\u00a0\u00a0\u00a0\u00a0if largest != i:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print(\"Largest\", largest)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[i], A[largest]= A[largest], A[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print(\"List\", A)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, largest)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# this function makes a heapified array\ndef BuildMaxHeap(A):\n\u00a0\u00a0\u00a0\u00a0for i in range(int(heapSize(A)/2)-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Sorting is done using heap of array\ndef HeapSort(A):\n\u00a0\u00a0\u00a0\u00a0BuildMaxHeap(A)\n\u00a0\u00a0\u00a0\u00a0B = list()\n\u00a0\u00a0\u00a0\u00a0heapSize1 = heapSize(A)\n\u00a0\u00a0\u00a0\u00a0for i in range(heapSize(A), 0, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[0], A[i]= A[i], A[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0B.append(A[heapSize1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A = A[:-1]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0heapSize1 = heapSize1-1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MaxHeapify(A, 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n# randomly generates list of different\n# sizes and call HeapSort function\nelements = list()\ntimes = list()\nfor i in range(1, 10):\n\n\n\u00a0\u00a0\u00a0\u00a0# generate some integers\n\u00a0\u00a0\u00a0\u00a0a = randint(0, 1000 * i, 1000 * i)\n\u00a0\u00a0\u00a0\u00a0# print(i)\n\u00a0\u00a0\u00a0\u00a0start = time.clock()\n\u00a0\u00a0\u00a0\u00a0HeapSort(a)\n\u00a0\u00a0\u00a0\u00a0end = time.clock()\n\n\n\u00a0\u00a0\u00a0\u00a0# print(\"Sorted list is \", a)\n\u00a0\u00a0\u00a0\u00a0print(len(a), \"Elements Sorted by HeapSort in \", end-start)\n\u00a0\u00a0\u00a0\u00a0elements.append(len(a))\n\u00a0\u00a0\u00a0\u00a0times.append(end-start)\n\n\nplt.xlabel('List Length')\nplt.ylabel('Time Complexity')\nplt.plot(elements, times, label ='Heap Sort')\nplt.grid()\nplt.legend()\nplt.show()\n# This code is contributed by Ashok Kajal", "nl": "Write a Python Code for time Complexity plot of Heap Sort"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# creating a 3X3 Numpy matrix\nn_array = np.array([[55, 25, 15],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[30, 44, 2],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[11, 45, 77]])\n\u00a0\u00a0\n# Displaying the Matrix\nprint(\"Numpy Matrix is:\")\nprint(n_array)\n\u00a0\u00a0\n# calculating the Trace of a matrix\ntrace = np.trace(n_array)\n\u00a0\u00a0\n\u00a0\u00a0\nprint(\"\\nTrace of given 3X3 matrix:\")\nprint(trace)", "nl": "Calculate the sum of the diagonal elements of a NumPy array in Python"}
{"code": "# import os library\nimport os\n\n\n# infinite while loop\nwhile True:\n\u00a0\u00a0\u00a0\u00a0print(\"Hello! user choose your tool\")\n\u00a0\u00a0\u00a0\u00a0print(\"Choose your tool :-\\n\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> mousepad\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> chrome\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> vlc\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> virtualbox\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> camera\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> telegram\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> firefox\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> codeblocks\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> screenshot\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> task-manager\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> libreoffice impress / presentation\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> libreoffice writer / text editor / notepad\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> libreoffice clac / spreadsheets\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> libreoffice\")\n\u00a0\u00a0\u00a0\u00a0print(\"-> jupyter notebook\\n\")\n\u00a0\u00a0\u00a0\u00a0print(\"chat with system:-\",end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# take input from user\n\u00a0\u00a0\u00a0\u00a0p = input()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# check conditions\n\u00a0\u00a0\u00a0\u00a0if ((\"do not\" in p) or (\"dont\" in p) or (\"don't\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"OK user\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif ((\"open\" in p) or (\"start\" in p) or (\"run\" in p) or (\"execute\" in p) or (\"launch\" in p) or (\"activate\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((\"mousepad\" in p) or (\"editor\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# run mention application\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"mousepad\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"vlc\" in p) or (\"media player\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"vlc\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"virtualbox\" in p) or (\"virtual machine\" in p) or (\"virtual tool\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"virtualbox\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"camera\" in p) or (\"cheese\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"cheese\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"telegram\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"telegram-desktop\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"codeblocks\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"codeblocks\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"taskmanager\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"xfce4-taskmanager\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"screenshot\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"xfce4-screenshooter\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"jupyter\" in p) or (\"notebook\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"jupyter notebook\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"libreoffice impress\" in p) or (\"presentation tool\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"libreoffice --impress\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"libreoffice writer\" in p) or (\"text editor\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"libreoffice --writer\")\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"notepad\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"notepad\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"libreoffice calc\" in p) or (\"spreadsheet\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"libreoffice --calc\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"libreoffice\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"libreoffice\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (\"chrome\" in p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"google-chrome-stable\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif ((\"firefox\" in p) or (\"mozilla\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"firefox\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"don't support\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# terminating infinite while loop\n\u00a0\u00a0\u00a0\u00a0elif ((\"quit\" in p) or (\"exit\" in p) or (\"stop\" in p) or (\"close\" in p) or (\"deactivate\" in p) or (\"terminate\" in p)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Thnank You!\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"don't support\")", "nl": "Menu Driven Python program for opening the required software Application"}
{"code": "# python program to create\n# Empty and Full Numpy arrays\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Create an empty array\nempa = np.empty((3, 4), dtype=int)\nprint(\"Empty Array\")\nprint(empa)\n\u00a0\u00a0\n# Create a full array\nflla = np.full([3, 3], 55, dtype=int)\nprint(\"\\n Full Array\")\nprint(flla)", "nl": "How to create an empty and a full NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Mirror Image of String\n# Using Mirror Image of String\n\u00a0\u00a0\n# initializing strings\ntest_str = 'void'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing mirror dictionary\nmir_dict = {'b':'d', 'd':'b', 'i':'i', 'o':'o', 'v':'v', 'w':'w', 'x':'x'}\nres = ''\n\u00a0\u00a0\n# accessing letters from dictionary\nfor ele in test_str:\n\u00a0\u00a0\u00a0\u00a0if ele in mir_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += mir_dict[ele]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if any character not present, flagging to be invalid\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = \"Not Possible\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The mirror string : \" + str(res))\u00a0", "nl": "Write a Python program to Mirror Image of String"}
{"code": "# Python implementation of substituting a\u00a0\n# specific text pattern in a string using regex\n\u00a0\u00a0\n# importing regex module\nimport re\n\u00a0\u00a0\n# Function to perform\n# operations on the strings\ndef substitutor():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# a string variable\n\u00a0\u00a0\u00a0\u00a0sentence1 = \"It is raining outside.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# replacing text 'raining' in the string\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable sentence1 with 'sunny' thus\n\u00a0\u00a0\u00a0\u00a0# passing first parameter as raining\n\u00a0\u00a0\u00a0\u00a0# second as sunny, third as the\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable name in which string is stored\n\u00a0\u00a0\u00a0\u00a0# and printing the modified string\n\u00a0\u00a0\u00a0\u00a0print(re.sub(r\"raining\", \"sunny\", sentence1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# a string variable\n\u00a0\u00a0\u00a0\u00a0sentence2 = \"Thank you very very much.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# replacing text 'very' in the string\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable sentence2 with 'so' thus\u00a0\n\u00a0\u00a0\u00a0\u00a0# passing parameters at their\u00a0\n\u00a0\u00a0\u00a0\u00a0# appropriate positions and printing\u00a0\n\u00a0\u00a0\u00a0\u00a0# the modified string\n\u00a0\u00a0\u00a0\u00a0print(re.sub(r\"very\", \"so\", sentence2))\n\u00a0\u00a0\n# Driver Code:\u00a0\nsubstitutor()", "nl": "Write a Python program to Substituting patterns in text using regex"}
{"code": "# Python Program to implement\u00a0\n# Odd-Even / Brick Sort\n\u00a0\u00a0\ndef oddEvenSort(arr, n):\n\u00a0\u00a0\u00a0\u00a0# Initially array is unsorted\n\u00a0\u00a0\u00a0\u00a0isSorted = 0\n\u00a0\u00a0\u00a0\u00a0while isSorted == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isSorted = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(1, n-1, 2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[i] > arr[i+1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[i], arr[i+1] = arr[i+1], arr[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isSorted = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(0, n-1, 2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[i] > arr[i+1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[i], arr[i+1] = arr[i+1], arr[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isSorted = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\n\u00a0\u00a0\narr = [34, 2, 10, -9]\nn = len(arr)\n\u00a0\u00a0\noddEvenSort(arr, n);\nfor i in range(0, n):\n\u00a0\u00a0\u00a0\u00a0print(arr[i], end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Code Contribute by Mohit Gupta_OMG <(0_o)>", "nl": "Write a Python Program for Odd-Even Sort / Brick Sort"}
{"code": "import sys\n\u00a0\u00a0\n# sample Tuples\nTuple1 = (\"A\", 1, \"B\", 2, \"C\", 3)\nTuple2 = (\"Geek1\", \"Raju\", \"Geek2\", \"Nikhil\", \"Geek3\", \"Deepanshu\")\nTuple3 = ((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))\n\u00a0\u00a0\n# print the sizes of sample Tuples\nprint(\"Size of Tuple1: \" + str(sys.getsizeof(Tuple1)) + \"bytes\")\nprint(\"Size of Tuple2: \" + str(sys.getsizeof(Tuple2)) + \"bytes\")\nprint(\"Size of Tuple3: \" + str(sys.getsizeof(Tuple3)) + \"bytes\")", "nl": "Find the size of a Tuple in Python"}
{"code": "# Python code demonstrate the working of sorted()\n# and itemgetter\n\u00a0\u00a0\n# importing \"operator\" for implementing itemgetter\nfrom operator import itemgetter\n\u00a0\u00a0\n# Initializing list of dictionaries\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20},\u00a0\n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\u00a0\u00a0\n# using sorted and itemgetter to print list sorted by age\u00a0\nprint \"The list printed sorting by age: \"\nprint sorted(lis, key=itemgetter('age'))\n\u00a0\u00a0\nprint (\"\\r\")\n\u00a0\u00a0\n# using sorted and itemgetter to print list sorted by both age and name\n# notice that \"Manjeet\" now comes before \"Nandini\"\nprint \"The list printed sorting by age and name: \"\nprint sorted(lis, key=itemgetter('age', 'name'))\n\u00a0\u00a0\nprint (\"\\r\")\n\u00a0\u00a0\n# using sorted and itemgetter to print list sorted by age in descending order\nprint \"The list printed sorting by age in descending order: \"\nprint sorted(lis, key=itemgetter('age'),reverse = True)", "nl": "Ways to sort list of dictionaries by values in Write a Python program to Using itemgetter"}
{"code": "# Python program to demonstrate\u00a0\n# opening a file\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Open function to open the file \"myfile.txt\"\u00a0\u00a0\u00a0\n# (same directory) in read mode and store\u00a0\n# it's reference in the variable file1\u00a0\n\u00a0\u00a0\u00a0\u00a0\nfile1 = open(\"myfile.txt\")\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Reading from file\u00a0\nprint(file1.read())\u00a0\n\u00a0\u00a0\u00a0\u00a0\nfile1.close()\u00a0", "nl": "Saving Text, JSON, and CSV to a File in Python"}
{"code": "# Python3 code to demonstrate working of\n# Sort lists in tuple\n# Using tuple() + sorted() + generator expression\n\u00a0\u00a0\n# Initializing tuple\ntest_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\u00a0\u00a0\n# Sort lists in tuple\n# Using tuple() + sorted() + generator expression\nres = tuple((sorted(sub) for sub in test_tup))\n\u00a0\u00a0\n# printing result\nprint(\"The tuple after sorting lists : \" + str(res))", "nl": "Write a Python program to Sort lists in tuple"}
{"code": "# Python3 code to reverse the lines\n# of a file using Stack.\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Creating Stack class (LIFO rule)\nclass Stack:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating an empty stack\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self._arr = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating push() method.\n\u00a0\u00a0\u00a0\u00a0def push(self, val):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self._arr.append(val)\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def is_empty(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Returns True if empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return len(self._arr) == 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating Pop method.\n\u00a0\u00a0\u00a0\u00a0def pop(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.is_empty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Stack is empty\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self._arr.pop()\n\u00a0\u00a0\n# Creating a function which will reverse\n# the lines of a file and Overwrites the\u00a0\n# given file with its contents line-by-line\n# reversed\ndef reverse_file(filename):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0S = Stack()\n\u00a0\u00a0\u00a0\u00a0original = open(filename)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for line in original:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S.push(line.rstrip(\"\\n\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0original.close()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0output = open(filename, 'w')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0while not S.is_empty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output.write(S.pop()+\"\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0output.close()\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\nfilename = \"GFG.txt\"\n\u00a0\u00a0\n# Calling the reverse_file function\nreverse_file(filename)\n\u00a0\u00a0\u00a0\n# Now reading the content of the file\nwith open(filename) as file:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for f in file.readlines():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f, end =\"\")", "nl": "Write a Python Program to Reverse the Content of a File using Stack"}
{"code": "import random\n\u00a0\u00a0\n\u00a0\u00a0\nsampleList = [100, 200, 300, 400, 500]\n\u00a0\u00a0\nrandomList = random.choices(\n\u00a0\u00a0sampleList, weights=(10, 20, 30, 40, 50), k=5)\n\u00a0\u00a0\nprint(randomList)", "nl": "How to get weighted random choice in Python"}
{"code": "import queue\nimport threading\nimport time\n\u00a0\u00a0\nthread_exit_Flag = 0\n\u00a0\u00a0\nclass sample_Thread (threading.Thread):\n\u00a0\u00a0\u00a0def __init__(self, threadID, name, q):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threading.Thread.__init__(self)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.threadID = threadID\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.q = q\n\u00a0\u00a0\u00a0def run(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"initializing \" + self.name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0process_data(self.name, self.q)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Exiting \" + self.name)\n\u00a0\u00a0\n# helper function to process data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\ndef process_data(threadName, q):\n\u00a0\u00a0\u00a0while not thread_exit_Flag:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0queueLock.acquire()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not workQueue.empty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data = q.get()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0queueLock.release()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"% s processing % s\" % (threadName, data))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0queueLock.release()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(1)\n\u00a0\u00a0\nthread_list = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nname_list = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nqueueLock = threading.Lock()\nworkQueue = queue.Queue(10)\nthreads = []\nthreadID = 1\n\u00a0\u00a0\n# Create new threads\nfor thread_name in thread_list:\n\u00a0\u00a0\u00a0thread = sample_Thread(threadID, thread_name, workQueue)\n\u00a0\u00a0\u00a0thread.start()\n\u00a0\u00a0\u00a0threads.append(thread)\n\u00a0\u00a0\u00a0threadID += 1\n\u00a0\u00a0\n# Fill the queue\nqueueLock.acquire()\nfor items in name_list:\n\u00a0\u00a0\u00a0workQueue.put(items)\n\u00a0\u00a0\nqueueLock.release()\n\u00a0\u00a0\n# Wait for the queue to empty\nwhile not workQueue.empty():\n\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n# Notify threads it's time to exit\nthread_exit_Flag = 1\n\u00a0\u00a0\n# Wait for all threads to complete\nfor t in threads:\n\u00a0\u00a0\u00a0t.join()\nprint (\"Exit Main Thread\")", "nl": "Multithreaded Priority Queue in Python"}
{"code": "# Python program to add padding\n# to a widget only on left-side\n\u00a0\u00a0\n# Import the library tkinter\nfrom tkinter import *\n\u00a0\u00a0\n# Create a GUI app\napp = Tk()\n\u00a0\u00a0\n# Give title to your GUI app\napp.title(\"Vinayak App\")\n\u00a0\u00a0\n# Maximize the window screen\nwidth = app.winfo_screenwidth()\nheight = app.winfo_screenheight()\napp.geometry(\"%dx%d\" % (width, height))\n\u00a0\u00a0\n# Construct the label in your app\nl1 = Label(app, text='Geeks For Geeks')\n\u00a0\u00a0\n# Give the leftmost padding\nl1.grid(padx=(200, 0), pady=(0, 0))\n\u00a0\u00a0\n# Make the loop for displaying app\napp.mainloop()", "nl": "How to Add padding to a tkinter widget only on one side  in Python"}
{"code": "# import modules\nfrom selenium import webdriver\u00a0\u00a0\nimport time\u00a0\u00a0\n\u00a0\u00a0\n# provide the path for chromedriver\nPATH = \"C:/chromedriver.exe\"\u00a0\u00a0\n\u00a0\u00a0\n# pass on the path to driver for working\ndriver = webdriver.Chrome(PATH)\u00a0\u00a0", "nl": "How to switch to new window in Selenium for Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Longest Substring of K\n# Using loop\n\u00a0\u00a0\n# initializing string\ntest_str = 'abcaaaacbbaa'\n\u00a0\u00a0\n# printing original String\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 'a'\n\u00a0\u00a0\ncnt = 0\nres = 0\nfor idx in range(len(test_str)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# increment counter on checking\n\u00a0\u00a0\u00a0\u00a0if test_str[idx] == K:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cnt += 1\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cnt = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# retaining max\n\u00a0\u00a0\u00a0\u00a0res = max(res, cnt)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Longest Substring Length : \" + str(res))\u00a0", "nl": "Write a Python program to Longest Substring Length of K"}
{"code": "# Python program to multiply all values in the\n# list using traversal\n\n\ndef multiplyList(myList) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Multiply elements one by one\n\u00a0\u00a0\u00a0\u00a0result = 1\n\u00a0\u00a0\u00a0\u00a0for x in myList:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = result * x\n\u00a0\u00a0\u00a0\u00a0return result\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\nlist1 = [1, 2, 3]\nlist2 = [3, 2, 4]\nprint(multiplyList(list1))\nprint(multiplyList(list2))", "nl": "Write a Python program to Multiply all numbers in the list (4 different ways)"}
{"code": "# creating a variable and storing the text\n# that we want to search\nsearch_text = \"dummy\"\n\u00a0\u00a0\n# creating a variable and storing the text\n# that we want to add\nreplace_text = \"replaced\"\n\u00a0\u00a0\n# Opening our text file in read only\n# mode using the open() function\nwith open(r'SampleFile.txt', 'r') as file:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Reading the content of the file\n\u00a0\u00a0\u00a0\u00a0# using the read() function and storing\n\u00a0\u00a0\u00a0\u00a0# them in a new variable\n\u00a0\u00a0\u00a0\u00a0data = file.read()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Searching and replacing the text\n\u00a0\u00a0\u00a0\u00a0# using the replace() function\n\u00a0\u00a0\u00a0\u00a0data = data.replace(search_text, replace_text)\n\u00a0\u00a0\n# Opening our text file in write only\n# mode to write the replaced content\nwith open(r'SampleFile.txt', 'w') as file:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Writing the replaced data in our\n\u00a0\u00a0\u00a0\u00a0# text file\n\u00a0\u00a0\u00a0\u00a0file.write(data)\n\u00a0\u00a0\n# Printing Text replaced\nprint(\"Text replaced\")", "nl": "How to search and replace text in a file in Python "}
{"code": "import csv\nimport json\n\n\n\n\n# Function to convert a CSV to JSON\n# Takes the file paths as arguments\ndef make_json(csvFilePath, jsonFilePath):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create a dictionary\n\u00a0\u00a0\u00a0\u00a0data = {}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Open a csv reader called DictReader\n\u00a0\u00a0\u00a0\u00a0with open(csvFilePath, encoding='utf-8') as csvf:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csvReader = csv.DictReader(csvf)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Convert each row into a dictionary\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and add it to data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for rows in csvReader:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Assuming a column named 'No' to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# be the primary key\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key = rows['No']\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[key] = rows\n\n\n\u00a0\u00a0\u00a0\u00a0# Open a json writer, and use the json.dumps()\n\u00a0\u00a0\u00a0\u00a0# function to dump data\n\u00a0\u00a0\u00a0\u00a0with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jsonf.write(json.dumps(data, indent=4))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\n\n\n# Decide the two file paths according to your\n# computer system\ncsvFilePath = r'Names.csv'\njsonFilePath = r'Names.json'\n\n\n# Call the make_json function\nmake_json(csvFilePath, jsonFilePath)", "nl": "Convert CSV to JSON using Python"}
{"code": "def GFG(name, num):\n\u00a0\u00a0\u00a0\u00a0print(\"Hello from \", name + ', ' + num)\n\u00a0\u00a0\n\u00a0\u00a0\nGFG(\"geeks for geeks\", \"25\")", "nl": "How to Print Multiple Arguments in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove duplicate values across Dictionary Values\n# Using Counter() + list comprehension\nfrom collections import Counter\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Manjeet' : [1, 4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Akash' : [1, 8, 9],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Nikhil': [10, 22, 4],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Akshat': [5, 11, 22]}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# Remove duplicate values across Dictionary Values\n# Using Counter() + list comprehension\ncnt = Counter()\nfor idx in test_dict.values():\n\u00a0\u00a0\u00a0\u00a0cnt.update(idx)\nres = {idx: [key for key in j if cnt[key] == 1]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for idx, j in test_dict.items()}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Uncommon elements records : \" + str(res))\u00a0", "nl": "Write a Python program to Remove duplicate values across Dictionary Values"}
{"code": "import requests\nfrom bs4 import BeautifulSoup", "nl": "How to check horoscope using Python "}
{"code": "# Python3 code to demonstrate working of\n# Adding Tuple to List and vice - versa\n# Using += operator (list + tuple)\n\n\n# initializing list\ntest_list = [5, 6, 7]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# initializing tuple\ntest_tup = (9, 10)\n\n\n# Adding Tuple to List and vice - versa\n# Using += operator (list + tuple)\ntest_list += test_tup\n\n\n# printing result\nprint(\"The container after addition : \" + str(test_list))", "nl": "Write a Python program to Adding Tuple to List and vice \u2013 versa"}
{"code": "def func():\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# defining local variable\n\u00a0\u00a0\u00a0\u00a0a_variable = 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# using locals() function\u00a0\n\u00a0\u00a0\u00a0\u00a0# for checking existence in symbol table\n\u00a0\u00a0\u00a0\u00a0is_local_var = \"a_variable\" in locals()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing result\n\u00a0\u00a0\u00a0\u00a0print(is_local_var)\n\u00a0\u00a0\n# driver code\nfunc()", "nl": "How to check if a Python variable exists"}
{"code": "# Python Program implementation\u00a0\u00a0\n# of binary insertion sort\n\u00a0\u00a0\ndef binary_search(arr, val, start, end):\n\u00a0\u00a0\u00a0\u00a0# we need to distinugish whether we should insert\n\u00a0\u00a0\u00a0\u00a0# before or after the left boundary.\n\u00a0\u00a0\u00a0\u00a0# imagine [0] is the last step of the binary search\n\u00a0\u00a0\u00a0\u00a0# and we need to decide where to insert -1\n\u00a0\u00a0\u00a0\u00a0if start == end:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[start] > val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return start\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return start+1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# this occurs if we are moving beyond left\\'s boundary\n\u00a0\u00a0\u00a0\u00a0# meaning the left boundary is the least position to\n\u00a0\u00a0\u00a0\u00a0# find a number greater than val\n\u00a0\u00a0\u00a0\u00a0if start > end:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return start\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0mid = (start+end)/2\n\u00a0\u00a0\u00a0\u00a0if arr[mid] < val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return binary_search(arr, val, mid+1, end)\n\u00a0\u00a0\u00a0\u00a0elif arr[mid] > val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return binary_search(arr, val, start, mid-1)\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return mid\n\u00a0\u00a0\ndef insertion_sort(arr):\n\u00a0\u00a0\u00a0\u00a0for i in xrange(1, len(arr)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val = arr[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = binary_search(arr, val, 0, i-1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]\n\u00a0\u00a0\u00a0\u00a0return arr\n\u00a0\u00a0\nprint(\"Sorted array:\")\nprint insertion_sort([37, 23, 0, 17, 12, 72, 31,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a046, 100, 88, 54])\n\u00a0\u00a0\n# Code contributed by Mohit Gupta_OMG\u00a0", "nl": "Write a Python Program for Binary Insertion Sort"}
{"code": "# import numpy\nimport numpy as np\n\u00a0\u00a0\n# using numpy.isin() method\ngfg1 = np.array([1, 2, 3, 4, 5])\nlis = [1, 3, 5]\ngfg = np.isin(gfg1, lis)\n\u00a0\u00a0\nprint(gfg)", "nl": "Write a Python program to numpy.isin() method"}
{"code": "# Python Program illustrating\n# numpy.inner() method\nimport numpy as np\n\u00a0\u00a0\n# Vectors\na = np.array([2, 6])\nb = np.array([3, 10])\nprint(\"Vectors :\")\nprint(\"a = \", a)\nprint(\"\\nb = \", b)\n\u00a0\u00a0\n# Inner Product of Vectors\nprint(\"\\nInner product of vectors a and b =\")\nprint(np.inner(a, b))\n\u00a0\u00a0\nprint(\"---------------------------------------\")\n\u00a0\u00a0\n# Matrices\nx = np.array([[2, 3, 4], [3, 2, 9]])\ny = np.array([[1, 5, 0], [5, 10, 3]])\nprint(\"\\nMatrices :\")\nprint(\"x =\", x)\nprint(\"\\ny =\", y)\n\u00a0\u00a0\n# Inner product of matrices\nprint(\"\\nInner product of matrices x and y =\")\nprint(np.inner(x, y))", "nl": "Calculate inner, outer, and cross products of matrices and vectors using NumPy in Python"}
{"code": "# Python implementation to compute\n# number of characters, words, spaces\n# and lines in a file\n\u00a0\u00a0\n# Function to count number\u00a0\n# of characters, words, spaces\u00a0\n# and lines in a file\ndef counter(fname):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable to store total word count\n\u00a0\u00a0\u00a0\u00a0num_words = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable to store total line count\n\u00a0\u00a0\u00a0\u00a0num_lines = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable to store total character count\n\u00a0\u00a0\u00a0\u00a0num_charc = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable to store total space count\n\u00a0\u00a0\u00a0\u00a0num_spaces = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# opening file using with() method\n\u00a0\u00a0\u00a0\u00a0# so that file gets closed\u00a0\n\u00a0\u00a0\u00a0\u00a0# after completion of work\n\u00a0\u00a0\u00a0\u00a0with open(fname, 'r') as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop to iterate file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# line by line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing value of\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# num_lines with each\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iteration of loop to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store total line count\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_lines += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# declaring a variable word\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and assigning its value as Y\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# because every file is\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# supposed to start with\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a word or a character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word = 'Y'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop to iterate every\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# line letter by letter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for letter in line:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition to check\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# that the encountered character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# is not white space and a word\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (letter != ' ' and word == 'Y'):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing the word\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# count by 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_words += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# assigning value N to\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# variable word because until\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# space will not encounter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a word can not be completed\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word = 'N'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition to check\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# that the encountered character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# is a white space\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (letter == ' '):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing the space\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# count by 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_spaces += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# assigning value Y to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# variable word because after\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# white space a word\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# is supposed to occur\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word = 'Y'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop to iterate every\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# letter character by\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in letter:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition to check\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# that the encountered character\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# is not\u00a0 white space and not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a newline character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(i !=\" \" and i !=\"\\n\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing character\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# count by 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_charc += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing total word count\u00a0\n\u00a0\u00a0\u00a0\u00a0print(\"Number of words in text file: \", num_words)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing total line count\n\u00a0\u00a0\u00a0\u00a0print(\"Number of lines in text file: \", num_lines)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing total character count\n\u00a0\u00a0\u00a0\u00a0print('Number of characters in text file: ', num_charc)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing total space count\n\u00a0\u00a0\u00a0\u00a0print('Number of spaces in text file: ', num_spaces)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code:\u00a0\nif __name__ == '__main__':\u00a0\n\u00a0\u00a0\u00a0\u00a0fname = 'File1.txt'\n\u00a0\u00a0\u00a0\u00a0try:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0counter(fname)\u00a0\n\u00a0\u00a0\u00a0\u00a0except:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('File not found')", "nl": "Write a Python program to Get number of characters, words, spaces and lines in a file"}
{"code": "# import Pandas as pd\nimport pandas as pd\n\u00a0\u00a0\u00a0\n# create a new data frame\ndf = pd.DataFrame({'Name': ['John Larter', 'Robert Junior', 'Jonny Depp'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[32, 34, 36]})\n\u00a0\u00a0\u00a0\nprint(\"Given Dataframe is :\\n\",df)\n\u00a0\u00a0\u00a0\n# bydefault splitting is done on the basis of single space.\nprint(\"\\nSplitting 'Name' column into two different columns :\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df.Name.str.split(expand=True))", "nl": "Split a text column into two columns in Pandas DataFrame in Python"}
{"code": "# Python code demonstrate creating\n# DataFrame from dict narray / lists\n# By default addresses.\n\n\nimport pandas as pd\n\n\n# initialise data of lists.\ndata = {'Category':['Array', 'Stack', 'Queue'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Marks':[20, 21, 19]}\n\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n\n# Print the output.\nprint(df )", "nl": "Write a Python program to Creating DataFrame from dict of narray/lists"}
{"code": "# import numpy\nfrom numpy import linalg as LA\n\u00a0\u00a0\n# using np.eigvals() method\ngfg = LA.eigvals([[1, 2], [3, 4]])\n\u00a0\u00a0\nprint(gfg)", "nl": "Write a Python program to Numpy np.eigvals() method"}
{"code": "# importing the required module\nimport networkx as nx\n\n\n# making a simple graph with 1 node.\nG = nx.path_graph(10)\n\n\n# saving graph created above in gexf format\nnx.write_gexf(G, \"geeksforgeeks.gexf\")", "nl": "Saving a Networkx graph in GEXF format and visualize using Gephi in Python"}
{"code": "# importing pandas package\nimport pandas as pd\n\u00a0\u00a0\n# making data frame from csv file\ndata = pd.read_csv(\"diamonds.csv\")\n\u00a0\u00a0\n# sorting data frame by a column\ndata.sort_values(\"carat\", axis=0, ascending=True,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace=True, na_position='first')\n\u00a0\u00a0\n# display\ndata.head(10)", "nl": "How to Sort CSV by multiple columns in Python "}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract Symmetric Tuples\n# Using dictionary comprehension + set()\n\u00a0\u00a0\n# initializing list\ntest_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Extract Symmetric Tuples\n# Using dictionary comprehension + set()\ntemp = set(test_list) & {(b, a) for a, b in test_list}\nres = {(a, b) for a, b in temp if a < b}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Symmetric tuples : \" + str(res))\u00a0", "nl": "Write a Python program to Extract Symmetric Tuples"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove keys with substring values\n# Using any() + generator expression\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {1 : 'Gfg is best for geeks', 2 : 'Gfg is good', 3 : 'I love Gfg'}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# initializing substrings\nsub_list = ['love', 'good']\n\u00a0\u00a0\n# Remove keys with substring values\n# Using any() + generator expression\nres = dict()\nfor key, val in test_dict.items():\n\u00a0\u00a0\u00a0if not any(ele in val for ele in sub_list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[key] = val\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Filtered Dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Remove keys with substring values"}
{"code": "# Python Program explaining\n# numpy.char.upper() function\u00a0\n\u00a0\u00a0\nimport numpy as geek\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nin_arr = geek.array(['p4q r', '4q rp', 'q rp4', 'rp4q'])\nprint (\"input array : \", in_arr)\n\u00a0\u00a0\nout_arr = geek.char.upper(in_arr)\nprint (\"output uppercased array :\", out_arr)", "nl": "numpy string operations | upper() function in Python"}
{"code": "# Function to replace a character c1 with c2\u00a0\n# and c2 with c1 in a string S\u00a0\n\u00a0\u00a0\ndef replaceChars(input,c1,c2):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# create lambda to replace c1 with c2, c2\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# with c1 and other will remain same\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# expression will be like \"lambda x:\n\u00a0\u00a0\u00a0\u00a0\u00a0# x if (x!=c1 and x!=c2) else c1 if (x==c2) else c2\"\n\u00a0\u00a0\u00a0\u00a0\u00a0# and map it onto each character of string\n\u00a0\u00a0\u00a0\u00a0\u00a0newChars = map(lambda x: x if (x!=c1 and x!=c2) else \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c1 if (x==c2) else c2,input)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# now join each character without space\n\u00a0\u00a0\u00a0\u00a0\u00a0# to print resultant string\n\u00a0\u00a0\u00a0\u00a0\u00a0print (''.join(newChars))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'grrksfoegrrks'\n\u00a0\u00a0\u00a0\u00a0c1 = 'e'\n\u00a0\u00a0\u00a0\u00a0c2 = 'r'\n\u00a0\u00a0\u00a0\u00a0replaceChars(input,c1,c2)", "nl": "Map function and Lambda expression in Python to replace characters"}
{"code": "# Python program to verify IP without using RegEx\n\n\n# explicit function to verify IP\ndef isValidIP(s):\n\n\n\u00a0\u00a0\u00a0\u00a0# check number of periods\n\u00a0\u00a0\u00a0\u00a0if s.count('.') != 3:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'Invalid Ip address'\n\n\n\u00a0\u00a0\u00a0\u00a0l = list(map(str, s.split('.')))\n\n\n\u00a0\u00a0\u00a0\u00a0# check range of each number between periods\n\u00a0\u00a0\u00a0\u00a0for ele in l:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if int(ele) < 0 or int(ele) > 255:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'Invalid Ip address'\n\n\n\u00a0\u00a0\u00a0\u00a0return 'Valid Ip address'\n\n\n\n\n# Driver Code\nprint(isValidIP('666.1.2.2'))", "nl": "Validate an IP address using Python without using RegEx"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Consecutive characters frequency\n# Using list comprehension + groupby()\nfrom itertools import groupby\n\u00a0\u00a0\n# initializing string\ntest_str = \"geekksforgggeeks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Consecutive characters frequency\n# Using list comprehension + groupby()\nres = [len(list(j)) for _, j in groupby(test_str)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Consecutive characters frequency : \" + str(res))\u00a0", "nl": "Write a Python program to Consecutive characters frequency"}
{"code": "# Program to save a NumPy array to a text file\n\n\n# Importing required libraries\nimport numpy\n\n\n# Creating an array\nList = [1, 2, 3, 4, 5]\nArray = numpy.array(List)\n\n\n# Displaying the array\nprint('Array:\\n', Array)\nfile = open(\"file1.txt\", \"w+\")\n\n\n# Saving the array in a text file\ncontent = str(Array)\nfile.write(content)\nfile.close()\n\n\n# Displaying the contents of the text file\nfile = open(\"file1.txt\", \"r\")\ncontent = file.read()\n\n\nprint(\"\\nContent in file1.txt:\\n\", content)\nfile.close()", "nl": "How to save a NumPy array to a text file in Python"}
{"code": "import pandas as pd\n\u00a0\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\n\n# Create an empty list\nRow_list =[]\n\u00a0\u00a0\u00a0\n# Iterate over each row\nfor i in range((df.shape[0])):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Using iloc to access the values of\u00a0\n\u00a0\u00a0\u00a0\u00a0# the current row denoted by \"i\"\n\u00a0\u00a0\u00a0\u00a0Row_list.append(list(df.iloc[i, :]))\n\u00a0\u00a0\u00a0\n# Print the first 3 elements\nprint(Row_list[:3])", "nl": "Select any row from a Dataframe using iloc[] and iat[] in Pandas in Python"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# define the polynomials\n# p(x) = 5(x**2) + (-2)x +5\n\u00a0\u00a0\npx = (5, -2, 5)\n# q(x) = 2(x**2) + (-5)x +2\nqx = (2, -5, 2)\n\u00a0\u00a0\n# mul the polynomials\nrx = numpy.polynomial.polynomial.polymul(px, qx)\n\u00a0\u00a0\n# print the resultant polynomial\nprint(rx)", "nl": "How to multiply a polynomial to another using NumPy in Python"}
{"code": "# import the pandas lib as pd\nimport pandas as pd\n\u00a0\u00a0\n# create a dictionary\ndictionary = {'A' : 10, 'B' : 20, 'C' : 30}\n\u00a0\u00a0\n# create a series\nseries = pd.Series(dictionary)\n\u00a0\u00a0\nprint(series)", "nl": "Creating a Pandas Series from Dictionary in Python"}
{"code": "# importing numpy as library\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# creating 1 D array with odd no of\u00a0\n# elements\nx_odd = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(\"\\nPrinting the Original array:\")\nprint(x_odd)\n\u00a0\u00a0\n# calculating median\nmed_odd = np.median(x_odd)\nprint(\"\\nMedian of the array that contains \\\nodd no of elements:\")\nprint(med_odd)", "nl": "Compute the median of the flattened NumPy array in Python"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# creating a Numpy array\nn_array = np.array([[2, 3, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[4, 1, 6]])\n\u00a0\u00a0\nprint(\"Given array:\")\nprint(n_array)\n\u00a0\u00a0\n# Checking whether specific values\n# are present in \"n_array\" or not\nprint(2 in n_array)\nprint(0 in n_array)\nprint(6 in n_array)\nprint(50 in n_array)\nprint(10 in n_array)", "nl": "How to check whether specified values are present in NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\n# Possible Substring count from String\n# Using min() + list comprehension + count()\n\n\n# initializing string\ntest_str = \"gekseforgeeks\"\n\n\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\n\n# initializing arg string\narg_str = \"geeks\"\n\n\n# using min and count to get minimum possible\n# occurrence of character\nres = min(test_str.count(char) // arg_str.count(char) for char in set(arg_str))\n\n\n# printing result\nprint(\"Possible substrings count : \" + str(res))", "nl": "Write a Python program to Possible Substring count from String"}
{"code": "# Python Program to create array with all ones\nimport numpy as geek\u00a0\n\u00a0\u00a0\na = geek.ones(3, dtype = int)\u00a0\nprint(\"Matrix a : \\n\", a)\u00a0\n\u00a0\u00a0\nb = geek.ones([3, 3], dtype = int)\u00a0\nprint(\"\\nMatrix b : \\n\", b)\u00a0", "nl": "Create a Numpy array filled with all ones in Python"}
{"code": "# Python program to determine which\n# button was pressed in tkinter\n\u00a0\u00a0\n# Import the library tkinter\nfrom tkinter import *\n\u00a0\u00a0\n# Create a GUI app\napp = Tk()\n\u00a0\u00a0\n# Create a function with one paramter, i.e., of\u00a0\n# the text you want to show when button is clicked\ndef which_button(button_press):\n\u00a0\u00a0\u00a0\u00a0# Printing the text when a button is clicked\n\u00a0\u00a0\u00a0\u00a0print(button_press)\n\u00a0\u00a0\n\u00a0\u00a0\n# Creating and displaying of button b1\nb1 = Button(app, text=\"Apple\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda m=\"It is an apple\": which_button(m))\n\u00a0\u00a0\nb1.grid(padx=10, pady=10)\n\u00a0\u00a0\n# Creating and displaying of button b2\nb2 = Button(app, text=\"Banana\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda m=\"It is a banana\": which_button(m))\nb2.grid(padx=10, pady=10)\n\u00a0\u00a0\n# Make the infinite loop for displaying the app\napp.mainloop()", "nl": "How to check which Button was clicked in Tkinter  in Python"}
{"code": "# import pandas as pd\u00a0\nimport pandas as pd\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# List1\u00a0\u00a0\nlst = [['Geek', 25], ['is', 30],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['for', 26], ['Geeksforgeeks', 22]]\u00a0\n\u00a0\u00a0\n# creating df object with columns specified\u00a0\u00a0\u00a0\u00a0\ndf = pd.DataFrame(lst, columns =['Tag', 'number'])\u00a0\nprint(df )", "nl": "Make a Pandas DataFrame with two-dimensional list | Python"}
{"code": "# Python code to convert into dictionary\n\u00a0\u00a0\ndef Convert(tup, di):\n\u00a0\u00a0\u00a0\u00a0for a, b in tup:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0di.setdefault(a, []).append(b)\n\u00a0\u00a0\u00a0\u00a0return di\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\u00a0\u00a0\u00a0\u00a0\ntups = [(\"akash\", 10), (\"gaurav\", 12), (\"anand\", 14),\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0(\"suraj\", 20), (\"akhil\", 25), (\"ashish\", 30)]\ndictionary = {}\nprint (Convert(tups, dictionary))", "nl": "Write a Python program to Convert a list of Tuples into Dictionary"}
{"code": "# Python code to demonstrate the working of\n# bisect(), bisect_left() and bisect_right()\n\u00a0\u00a0\n# importing \"bisect\" for bisection operations\nimport bisect\n\u00a0\u00a0\n# initializing list\nli = [1, 3, 4, 4, 4, 6, 7]\n\u00a0\u00a0\n# using bisect() to find index to insert new element\n# returns 5 ( right most possible index )\nprint (\"The rightmost index to insert, so list remains sorted is\u00a0 : \", end=\"\")\nprint (bisect.bisect(li, 4))\n\u00a0\u00a0\n# using bisect_left() to find index to insert new element\n# returns 2 ( left most possible index )\nprint (\"The leftmost index to insert, so list remains sorted is\u00a0 : \", end=\"\")\nprint (bisect.bisect_left(li, 4))\n\u00a0\u00a0\n# using bisect_right() to find index to insert new element\n# returns 4 ( right most possible index )\nprint (\"The rightmost index to insert, so list remains sorted is\u00a0 : \", end=\"\")\nprint (bisect.bisect_right(li, 4, 0, 4))", "nl": "Bisect Algorithm Functions in Python"}
{"code": "# Python code to demonstrate Dictionary and\n# missing value error\n\n\n# initializing Dictionary\nd = { 'a' : 1 , 'b' : 2 }\n\n\n# trying to output value of absent key\nprint (\"The value associated with 'c' is : \")\nprint (d['c'])", "nl": "Handling missing keys in Python dictionaries"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# import the StrinIO function\n# from io module\nfrom io import StringIO\n\u00a0\u00a0\n# wrap the string data in StringIO function\nStringData = StringIO(\"\"\"Date;Event;Cost\n\u00a0\u00a0\u00a0\u00a010/2/2011;Music;10000\n\u00a0\u00a0\u00a0\u00a011/2/2011;Poetry;12000\n\u00a0\u00a0\u00a0\u00a012/2/2011;Theatre;5000\n\u00a0\u00a0\u00a0\u00a013/2/2011;Comedy;8000\n\u00a0\u00a0\u00a0\u00a0\"\"\")\n\u00a0\u00a0\n# let's read the data using the Pandas\n# read_csv() function\ndf = pd.read_csv(StringData, sep =\";\")\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Construct a DataFrame in Pandas using string data in Python"}
{"code": "# Python program to sort a\n# list of tuples alphabetically\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to sort the list of\n# tuples\n\u00a0\u00a0\ndef SortTuple(tup):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Getting the length of list\u00a0\n\u00a0\u00a0\u00a0\u00a0# of tuples\n\u00a0\u00a0\u00a0\u00a0n = len(tup)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(n-i-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if tup[j][0] > tup[j + 1][0]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tup[j], tup[j + 1] = tup[j + 1], tup[j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return tup\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver's code\n\u00a0\u00a0\ntup = [(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Nikhil\", 21), (\"B\", \"C\")]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(SortTuple(tup))", "nl": "Write a Python program to sort a list of tuples alphabetically"}
{"code": "# Python Program explaining\n# numpy.char.lower() function\u00a0\n\u00a0\u00a0\nimport numpy as geek\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nin_arr = geek.array(['P4Q R', '4Q RP', 'Q RP4', 'RP4Q'])\nprint (\"input array : \", in_arr)\n\u00a0\u00a0\nout_arr = geek.char.lower(in_arr)\nprint (\"output lowercased array :\", out_arr)", "nl": "numpy string operations | lower() function in Python"}
{"code": "# import numpy\u00a0\nimport numpy as np\nimport matplotlib.pyplot as plt\n\u00a0\u00a0\n# Using numpy.random.laplace() method\ngfg = np.random.laplace(1.45, 15, 1000)\n\u00a0\u00a0\ncount, bins, ignored = plt.hist(gfg, 30, density = True)\nplt.show()", "nl": "numpy.random.laplace() in Python"}
{"code": "# import required packages\nimport json\n\u00a0\u00a0\n# custom class\nclass Student:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, roll_no, name, batch):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.roll_no = roll_no\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.batch = batch\n\u00a0\u00a0\n\u00a0\u00a0\nclass Car:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, brand, name, batch):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.brand = brand\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.batch = batch\n\u00a0\u00a0\n\u00a0\u00a0\n# main function\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create two new student objects\n\u00a0\u00a0\u00a0\u00a0s1 = Student(\"85\", \"Swapnil\", \"IMT\")\n\u00a0\u00a0\u00a0\u00a0s2 = Student(\"124\", \"Akash\", \"IMT\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create two new car objects\n\u00a0\u00a0\u00a0\u00a0c1 = Car(\"Honda\", \"city\", \"2005\")\n\u00a0\u00a0\u00a0\u00a0c2 = Car(\"Honda\", \"Amaze\", \"2011\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# convert to JSON format\n\u00a0\u00a0\u00a0\u00a0jsonstr1 = json.dumps(s1.__dict__)\n\u00a0\u00a0\u00a0\u00a0jsonstr2 = json.dumps(s2.__dict__)\n\u00a0\u00a0\u00a0\u00a0jsonstr3 = json.dumps(c1.__dict__)\n\u00a0\u00a0\u00a0\u00a0jsonstr4 = json.dumps(c2.__dict__)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print created JSON objects\n\u00a0\u00a0\u00a0\u00a0print(jsonstr1)\n\u00a0\u00a0\u00a0\u00a0print(jsonstr2)\n\u00a0\u00a0\u00a0\u00a0print(jsonstr3)\n\u00a0\u00a0\u00a0\u00a0print(jsonstr4)", "nl": "Convert class object to JSON in Python"}
{"code": "# Python program for Bitonic Sort. Note that this program\n# works only when size of input is a power of 2.\n\n\n# The parameter dir indicates the sorting direction, ASCENDING\n# or DESCENDING; if (a[i] > a[j]) agrees with the direction,\n# then a[i] and a[j] are interchanged.*/\ndef compAndSwap(a, i, j, dire):\n\u00a0\u00a0\u00a0\u00a0if (dire==1 and a[i] > a[j]) or (dire==0 and a[i] > a[j]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i],a[j] = a[j],a[i]\n\n\n# It recursively sorts a bitonic sequence in ascending order,\n# if dir = 1, and in descending order otherwise (means dir=0).\n# The sequence to be sorted starts at index position low,\n# the parameter cnt is the number of elements to be sorted.\ndef bitonicMerge(a, low, cnt, dire):\n\u00a0\u00a0\u00a0\u00a0if cnt > 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = cnt/2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(low , low+k):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compAndSwap(a, i, i+k, dire)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitonicMerge(a, low, k, dire)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitonicMerge(a, low+k, k, dire)\n\n\n# This function first produces a bitonic sequence by recursively\n# sorting its two halves in opposite sorting orders, and then\n# calls bitonicMerge to make them in the same order\ndef bitonicSort(a, low, cnt,dire):\n\u00a0\u00a0\u00a0\u00a0if cnt > 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = cnt/2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitonicSort(a, low, k, 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitonicSort(a, low+k, k, 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitonicMerge(a, low, cnt, dire)\n\n\n# Caller of bitonicSort for sorting the entire array of length N\n# in ASCENDING order\ndef sort(a,N, up):\n\u00a0\u00a0\u00a0\u00a0bitonicSort(a,0, N, up)\n\n\n# Driver code to test above\na = [3, 7, 4, 8, 6, 2, 1, 5]\nn = len(a)\nup = 1\n\n\nsort(a, n, up)\nprint (\"\\n\\nSorted array is\")\nfor i in range(n):\n\u00a0\u00a0\u00a0\u00a0print(\"%d\" %a[i]),", "nl": "Write a Python Program for Bitonic Sort"}
{"code": "# Python code to demonstrate\n# removal of dict. pair\u00a0\n# using del\n\u00a0\u00a0\n# Initializing dictionary\ntest_dict = {\"Arushi\" : 22, \"Anuradha\" : 21, \"Mani\" : 21, \"Haritha\" : 21}\n\u00a0\u00a0\n# Printing dictionary before removal\nprint (\"The dictionary before performing remove is : \" + str(test_dict))\n\u00a0\u00a0\n# Using del to remove a dict\n# removes Mani\ndel test_dict['Mani']\n\u00a0\u00a0\n# Printing dictionary after removal\nprint (\"The dictionary after remove is : \" + str(test_dict))\n\u00a0\u00a0\n# Using del to remove a dict\n# raises exception\ndel test_dict['Manjeet']", "nl": "Write a Python program to Ways to remove a key from dictionary"}
{"code": "# Python program to implement Gnome Sort\n\n\n# A function to sort the given list using Gnome sort\ndef gnomeSort( arr, n):\n\u00a0\u00a0\u00a0\u00a0index = 0\n\u00a0\u00a0\u00a0\u00a0while index < n:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if index == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = index + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[index] >= arr[index - 1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = index + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[index], arr[index-1] = arr[index-1], arr[index]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = index - 1\n\n\n\u00a0\u00a0\u00a0\u00a0return arr\n\n\n# Driver Code\narr = [ 34, 2, 10, -9]\nn = len(arr)\n\n\narr = gnomeSort(arr, n)\nprint \"Sorted sequence after applying Gnome Sort :\",\nfor i in arr:\n\u00a0\u00a0\u00a0\u00a0print i,\n\n\n# Contributed By Harshit Agrawal", "nl": "Write a Python Program for Gnome Sort"}
{"code": "# Function to reverse words of string\u00a0\n\u00a0\u00a0\ndef rev_sentence(sentence):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# first split the string into words\u00a0\n\u00a0\u00a0\u00a0\u00a0words = sentence.split(' ')\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# then reverse the split string list and join using space\u00a0\n\u00a0\u00a0\u00a0\u00a0reverse_sentence = ' '.join(reversed(words))\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# finally return the joined string\u00a0\n\u00a0\u00a0\u00a0\u00a0return reverse_sentence\u00a0\n\u00a0\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input = 'geeks quiz practice code'\n\u00a0\u00a0\u00a0\u00a0print (rev_sentence(input))", "nl": "Reverse words in a given String in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Row-wise element Addition in Tuple Matrix\n# Using enumerate() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing Custom eles\ncus_eles = [6, 7, 8]\n\u00a0\u00a0\n# Row-wise element Addition in Tuple Matrix\n# Using enumerate() + list comprehension\nres = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The matrix after row elements addition : \" + str(res))\u00a0", "nl": "Write a Python program to Row-wise element Addition in Tuple Matrix"}
{"code": "# python program to print\u00a0\n# hollow half diamond star\n\u00a0\u00a0\n\u00a0\u00a0\n# function to print hollow\n# half diamond star\ndef hollow_half_diamond(N):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# this for loop is for\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing upper half\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range( 1, N + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(1, i + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this is the condition to\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print \"#\" only on the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# boundaries\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == j or j == 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"#\", end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print \" \"(space) on the rest\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of the area\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# this for loop is to print lower half\n\u00a0\u00a0\u00a0\u00a0for i in range(N - 1, 0, -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(1, i + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j == 1 or i == j:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"#\", end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\n# Driver Code\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0N = 7\n\u00a0\u00a0\u00a0\u00a0hollow_half_diamond( N )\n\u00a0\u00a0", "nl": "Write a Python Program to print hollow half diamond hash pattern"}
{"code": "# Importing library\nimport numpy as np\n\u00a0\u00a0\n# Creating a 2X2 matrix\nmatrix = np.array([[4, 2], [3, 1]])\n\u00a0\u00a0\nprint(\"Original matrix:\")\nprint(matrix)\n\u00a0\u00a0\n# Output\nresult =\u00a0 np.linalg.cond(matrix)\n\u00a0\u00a0\nprint(\"Condition number of the matrix:\")\nprint(result)", "nl": "Compute the condition number of a given matrix using NumPy in Python"}
{"code": "import urllib.request\nfrom bs4 import BeautifulSoup\n\u00a0\u00a0\n# here we have to pass url and path\n# (where you want to save ur text file)\nurllib.request.urlretrieve(\"https://www.geeksforgeeks.org/grep-command-in-unixlinux/?ref=leftbar-rightbar\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/home/gpt/PycharmProjects/pythonProject1/test/text_file.txt\")\n\u00a0\u00a0\nfile = open(\"text_file.txt\", \"r\")\ncontents = file.read()\nsoup = BeautifulSoup(contents, 'html.parser')\n\u00a0\u00a0\nf = open(\"test1.txt\", \"w\")\n\u00a0\u00a0\n# traverse paragraphs from soup\nfor data in soup.find_all(\"p\"):\n\u00a0\u00a0\u00a0\u00a0sum = data.get_text()\n\u00a0\u00a0\u00a0\u00a0f.writelines(sum)\n\u00a0\u00a0\nf.close()", "nl": "How to extract paragraph from a website and save it as a text file in Python"}
{"code": "# Python program to find Minimum number of\u00a0\n# subsets with distinct elements using Counter\n\u00a0\u00a0\n# function to find Minimum number of subsets\u00a0\n# with distinct elements\nfrom collections import Counter\n\u00a0\u00a0\ndef minSubsets(input):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# calculate frequency of each element\n\u00a0\u00a0\u00a0\u00a0\u00a0freqDict = Counter(input)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# get list of all frequency values\n\u00a0\u00a0\u00a0\u00a0\u00a0# print maximum from it\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0print (max(freqDict.values()))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = [1, 2, 3, 3]\n\u00a0\u00a0\u00a0\u00a0minSubsets(input)", "nl": "Write a Python program to Minimum number of subsets with distinct elements using Counter"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# define the polynomials\n# p(x) = 5(x**2) + (-2)x +5\npx = (5,-2,5)\n\u00a0\u00a0\n# q(x) = 2(x**2) + (-5)x +2\nqx = (2,-5,2)\n\u00a0\u00a0\n# add the polynomials\nrx = numpy.polynomial.polynomial.polyadd(px,qx)\n\u00a0\u00a0\n# print the resultant polynomial\nprint(rx)", "nl": "How to add one polynomial to another using NumPy in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[64, 1; 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.mean() method\ngeeks = gfg.mean()\n\u00a0\u00a0\u00a0\u00a0\nprint(geeks)", "nl": "Write a Python program to Numpy matrix.mean()"}
{"code": "# Python3 code to demonstrate\u00a0\n# Remove empty List from List\n# using list comprehension\n\u00a0\u00a0\n# Initializing list\u00a0\ntest_list = [5, 6, [], 3, [], [], 9]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Remove empty List from List\n# using list comprehension\nres = [ele for ele in test_list if ele != []]\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"List after empty list removal : \" + str(res))", "nl": "Write a Python program to Remove empty List from List"}
{"code": "import csv\n\u00a0\u00a0\n# reading data from a csv file 'Data.csv'\nwith open('Data.csv', newline='') as file:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0reader = csv.reader(file, delimiter = ' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# store the headers in a separate variable,\n\u00a0\u00a0\u00a0\u00a0# move the reader object to point on the next row\n\u00a0\u00a0\u00a0\u00a0headings = next(reader)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# output list to store all rows\n\u00a0\u00a0\u00a0\u00a0Output = []\n\u00a0\u00a0\u00a0\u00a0for row in reader:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Output.append(row[:])\n\u00a0\u00a0\nfor row_num, rows in enumerate(Output):\n\u00a0\u00a0\u00a0\u00a0print('data in row number {} is {}'.format(row_num+1, rows))\n\u00a0\u00a0\nprint('headers were: ', headings)", "nl": "Write a Python program to Read CSV Column into List without header"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Nested Dictionary with List\n# Using loop + zip()\n\u00a0\u00a0\n# initializing dictionary and list\ntest_dict = {'Gfg' : 4, 'is' : 5, 'best' : 9}\u00a0\ntest_list = [8, 3, 2]\n\u00a0\u00a0\n# printing original dictionary and list\nprint(\"The original dictionary is : \" + str(test_dict))\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# using zip() and loop to perform\u00a0\n# combining and assignment respectively.\nres = {}\nfor key, ele in zip(test_list, test_dict.items()):\n\u00a0\u00a0\u00a0\u00a0res[key] = dict([ele])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The mapped dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Create Nested Dictionary using given List"}
{"code": "import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'Geek_ID':['Geek1_id', 'Geek2_id', 'Geek3_id',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Geek4_id', 'Geek5_id'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Geek_A': [1, 1, 3, 2, 4],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Geek_B': [1, 2, 3, 4, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Geek_R': np.random.randn(5)})\n\u00a0\u00a0\n# Geek_A\u00a0 Geek_B\u00a0\u00a0 Geek_ID\u00a0\u00a0\u00a0 Geek_R\n# 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1\u00a0 Geek1_id\u00a0\u00a0\u00a0 random number\n# 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2\u00a0 Geek2_id\u00a0\u00a0\u00a0 random number\n# 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3\u00a0 Geek3_id\u00a0\u00a0\u00a0 random number\n# 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 4\u00a0 Geek4_id\u00a0\u00a0\u00a0 random number\n# 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 6\u00a0 Geek5_id\u00a0\u00a0\u00a0 random number\n\u00a0\u00a0\nprint(df.Geek_ID.str.split('_').str[0])", "nl": "Split a column in Pandas dataframe and get part of it in Python"}
{"code": "class Node:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, val=None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.val = val\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None\n\u00a0\u00a0\n\u00a0\u00a0\nclass LinkedList:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, head=None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = head\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __str__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# defining a blank res variable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = \"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing ptr to head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# traversing and adding it to res\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ptr:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += str(ptr.val) + \", \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = ptr.next\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# removing trailing commas\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = res.strip(\", \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# chen checking if\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# anything is present in res or not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(res):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"[\" + res + \"]\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"[]\"\n\u00a0\u00a0\n\u00a0\u00a0\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# defining linked list\n\u00a0\u00a0\u00a0\u00a0ll = LinkedList()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# defining nodes\n\u00a0\u00a0\u00a0\u00a0node1 = Node(10)\n\u00a0\u00a0\u00a0\u00a0node2 = Node(15)\n\u00a0\u00a0\u00a0\u00a0node3 = Node(20)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# connecting the nodes\n\u00a0\u00a0\u00a0\u00a0ll.head = node1\n\u00a0\u00a0\u00a0\u00a0node1.next = node2\n\u00a0\u00a0\u00a0\u00a0node2.next = node3\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# when print is called, by default\u00a0\n\u00a0\u00a0\u00a0\u00a0#it calls the __str__ method\n\u00a0\u00a0\u00a0\u00a0print(ll)", "nl": "Pretty print Linked List in Python"}
{"code": "# Python3 code to demonstrate working of\n# Maximum and Minimum K elements in Tuple\n# Using sorted() + loop\n\n\n# initializing tuple\ntest_tup = (5, 20, 3, 7, 6, 8)\n\n\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\n\n# initializing K\nK = 2\n\n\n# Maximum and Minimum K elements in Tuple\n# Using sorted() + loop\nres = []\ntest_tup = list(sorted(test_tup))\n\n\nfor idx, val in enumerate(test_tup):\n\u00a0\u00a0\u00a0\u00a0if idx < K or idx >= len(test_tup) - K:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(val)\nres = tuple(res)\n\n\n# printing result\nprint(\"The extracted values : \" + str(res))", "nl": "Write a Python program to Maximum and Minimum K elements in Tuple"}
{"code": "# Python program to implement Pigeonhole Sort */\n\u00a0\u00a0\n# source code : \"https://en.wikibooks.org/wiki/\n#\u00a0\u00a0 Algorithm_Implementation/Sorting/Pigeonhole_sort\"\ndef pigeonhole_sort(a):\n\u00a0\u00a0\u00a0\u00a0# size of range of values in the list\u00a0\n\u00a0\u00a0\u00a0\u00a0# (ie, number of pigeonholes we need)\n\u00a0\u00a0\u00a0\u00a0my_min = min(a)\n\u00a0\u00a0\u00a0\u00a0my_max = max(a)\n\u00a0\u00a0\u00a0\u00a0size = my_max - my_min + 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# our list of pigeonholes\n\u00a0\u00a0\u00a0\u00a0holes = [0] * size\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Populate the pigeonholes.\n\u00a0\u00a0\u00a0\u00a0for x in a:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assert type(x) is int, \"integers only please\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0holes[x - my_min] += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Put the elements back into the array in order.\n\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0for count in range(size):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while holes[count] > 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0holes[count] -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i] = count + my_min\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\na = [8, 3, 2, 7, 4, 6, 8]\nprint(\"Sorted order is : \", end =\" \")\n\u00a0\u00a0\npigeonhole_sort(a)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nfor i in range(0, len(a)):\n\u00a0\u00a0\u00a0\u00a0print(a[i], end =\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0", "nl": "Write a Python Program for Pigeonhole Sort"}
{"code": "# Python3 code to demonstrate\u00a0\n# Replace Substrings from String List\n# using loop + replace() + enumerate()\n\u00a0\u00a0\n# Initializing list1\ntest_list1 = ['GeeksforGeeks', 'is', 'Best', 'For', 'Geeks', 'And', 'Computer Science']\ntest_list2 = [['Geeks', 'Gks'], ['And', '&'], ['Computer', 'Comp']]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# Replace Substrings from String List\n# using loop + replace() + enumerate()\nsub = dict(test_list2)\nfor key, val in sub.items():\n\u00a0\u00a0\u00a0\u00a0for idx, ele in enumerate(test_list1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key in ele:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_list1[idx] = ele.replace(key, val)\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The list after replacement : \" + str(test_list1))", "nl": "Write a Python program to Replace Substrings from String List"}
{"code": "# Function to Check if frequency of all characters\n# can become same by one removal\nfrom collections import Counter\n\u00a0\u00a0\ndef allSame(input):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# calculate frequency of each character\n\u00a0\u00a0\u00a0\u00a0# and convert string into dictionary\n\u00a0\u00a0\u00a0\u00a0dict=Counter(input)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now get list of all values and push it\n\u00a0\u00a0\u00a0\u00a0# in set\n\u00a0\u00a0\u00a0\u00a0same = list(set(dict.values()))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if len(same)>2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('No')\n\u00a0\u00a0\u00a0\u00a0elif len (same)==2 and same[1]-same[0]>1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('No')\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Yes')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now check if frequency of all characters\u00a0\n\u00a0\u00a0\u00a0\u00a0# can become same\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'xxxyyzzt'\n\u00a0\u00a0\u00a0\u00a0allSame(input)", "nl": "Write a Python dictionary, set and counter to check if frequencies can become same"}
{"code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\u00a0\u00a0\nauthor = ['Jitender', 'Purnima', 'Arpit', 'Jyoti']\n\u00a0\u00a0\nauth_series = pd.Series(author)\nprint(auth_series)", "nl": "Creating a dataframe from Pandas series in Python"}
{"code": "# Python program to print Even Numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, 21, 4, 45, 66, 93]\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print even numbers in a list"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort Dictionary by Values Summation\n# Using dictionary comprehension + sum() + sorted()\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Gfg' : [6, 7, 4], 'is' : [4, 3, 2], 'best' : [7, 6, 5]}\u00a0\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# summing all the values using sum()\ntemp1 = {val: sum(int(idx) for idx in key)\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for val, key in test_dict.items()}\n\u00a0\u00a0\n# using sorted to perform sorting as required\ntemp2 = sorted(temp1.items(), key = lambda ele : temp1[ele[0]])\n\u00a0\u00a0\n# rearrange into dictionary\nres = {key: val for key, val in temp2}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The sorted dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Sort Dictionary by Values Summation"}
{"code": "# Python program explaining\n# numpy.moveaxis() function\n\u00a0\u00a0\n# importing numpy as geek\u00a0\nimport numpy as geek\n\u00a0\u00a0\narr = geek.zeros((1, 2, 3, 4))\n\u00a0\u00a0\ngfg = geek.moveaxis(arr, 0, -1).shape\n\u00a0\u00a0\nprint (gfg)", "nl": "numpy.moveaxis() function | Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Test if Substring occurs in specific position\n# Using loop\n\u00a0\u00a0\n# initializing string\u00a0\ntest_str = \"Gfg is best\"\n\u00a0\u00a0\n# printing original string\u00a0\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing range\u00a0\ni, j = 7, 11\n\u00a0\u00a0\n# initializing substr\nsubstr = \"best\"\n\u00a0\u00a0\n# Test if Substring occurs in specific position\n# Using loop\nres = True\nk = 0\nfor idx in range(len(test_str)):\n\u00a0\u00a0\u00a0\u00a0if idx >= i\u00a0 and idx < j:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if test_str[idx] != substr[k]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = k + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Does string contain substring at required position ? : \" + str(res))\u00a0", "nl": "Write a Python program to Test if Substring occurs in specific position"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Elements Frequency in Mixed Nested Tuple\n# Using recursion + loop\n\u00a0\u00a0\n# helper_fnc\ndef flatten(test_tuple):\n\u00a0\u00a0\u00a0\u00a0for tup in test_tuple:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if isinstance(tup, tuple):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield from flatten(tup)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield tup\n\u00a0\u00a0\n# initializing tuple\ntest_tuple = (5, 6, (5, 6), 7, (8, 9), 9)\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tuple))\n\u00a0\u00a0\n# Elements Frequency in Mixed Nested Tuple\n# Using recursion + loop\nres = {}\nfor ele in flatten(test_tuple):\n\u00a0\u00a0\u00a0\u00a0if ele not in res:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[ele] = 0\n\u00a0\u00a0\u00a0\u00a0res[ele] += 1\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The elements frequency : \" + str(res))", "nl": "Write a Python program to Elements Frequency in Mixed Nested Tuple"}
{"code": "# Function to find permutations of a given string\nfrom itertools import permutations\n\u00a0\u00a0\ndef allPermutations(str):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# Get all permutations of string 'ABC'\n\u00a0\u00a0\u00a0\u00a0\u00a0permList = permutations(str)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# print all permutations\n\u00a0\u00a0\u00a0\u00a0\u00a0for perm in list(permList):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (''.join(perm))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0str = 'ABC'\n\u00a0\u00a0\u00a0\u00a0allPermutations(str)", "nl": "Write a Python program to Permutation of a given string using inbuilt function"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Scoring Matrix using Dictionary\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [['gfg', 'is', 'best'], ['gfg', 'is', 'for', 'geeks']]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing test dict\ntest_dict = {'gfg' : 5, 'is' : 10, 'best' : 13, 'for' : 2, 'geeks' : 15}\n\u00a0\u00a0\n# Scoring Matrix using Dictionary\n# Using loop\nres = []\nfor sub in test_list:\n\u00a0\u00a0\u00a0\u00a0sum = 0\n\u00a0\u00a0\u00a0\u00a0for val in sub:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if val in test_dict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += test_dict[val]\n\u00a0\u00a0\u00a0\u00a0res.append(sum)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Row scores : \" + str(res))\u00a0", "nl": "Write a Python program to Scoring Matrix using Dictionary"}
{"code": "remainder = lambda num: num % 2\n\u00a0\u00a0\nprint(remainder(5))", "nl": "Write a Python Lambda with underscore as an argument"}
{"code": "# import library\nimport numpy as np\n\n\n# initialize vector\nvec = np.arange(10)\n\n\n# compute norm of vector\nvec_norm = np.linalg.norm(vec)\n\n\nprint(\"Vector norm:\")\nprint(vec_norm)", "nl": "Find a matrix or vector norm using NumPy in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Last Price':[1200, 1500, 1600, 352],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Updated Price':[1250, 1450, 1550, 400],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Discount':[10, 10, 10, 10]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Conditional operation on Pandas DataFrame columns in Python"}
{"code": "# Python3 program for removing i-th\u00a0\n# indexed character from a string\n\u00a0\u00a0\n# Removes character at index i\ndef remove(string, i):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Characters before the i-th indexed\n\u00a0\u00a0\u00a0\u00a0# is stored in a variable a\n\u00a0\u00a0\u00a0\u00a0a = string[ : i]\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Characters after the nth indexed\n\u00a0\u00a0\u00a0\u00a0# is stored in a variable b\n\u00a0\u00a0\u00a0\u00a0b = string[i + 1: ]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Returning string after removing\n\u00a0\u00a0\u00a0\u00a0# nth indexed character.\n\u00a0\u00a0\u00a0\u00a0return a + b\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0string = \"geeksFORgeeks\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Remove nth index element\n\u00a0\u00a0\u00a0\u00a0i = 5\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Print the new string\n\u00a0\u00a0\u00a0\u00a0print(remove(string, i))", "nl": "Write a Python program for removing i-th character from a string"}
{"code": "# Function to concatenated string with uncommon\u00a0\n# characters of two strings\u00a0\n\u00a0\u00a0\ndef uncommonConcat(str1, str2):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# convert both strings into set\u00a0\n\u00a0\u00a0\u00a0\u00a0set1 = set(str1)\u00a0\n\u00a0\u00a0\u00a0\u00a0set2 = set(str2)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# take intersection of two sets to get list of\u00a0\n\u00a0\u00a0\u00a0\u00a0# common characters\u00a0\n\u00a0\u00a0\u00a0\u00a0common = list(set1 & set2)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# separate out characters in each string\u00a0\n\u00a0\u00a0\u00a0\u00a0# which are not common in both strings\u00a0\n\u00a0\u00a0\u00a0\u00a0result = [ch for ch in str1 if ch not in common] + [ch for ch in str2 if ch not in common]\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# join each character without space to get\u00a0\n\u00a0\u00a0\u00a0\u00a0# final string\u00a0\n\u00a0\u00a0\u00a0\u00a0print( ''.join(result) )\n\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0str1 = 'aacdb'\n\u00a0\u00a0\u00a0\u00a0str2 = 'gafd'\n\u00a0\u00a0\u00a0\u00a0uncommonConcat(str1,str2)\u00a0", "nl": "Concatenated string with uncommon characters in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Product':[' UMbreLla', '\u00a0 maTress', 'BaDmintoN ', 'Shuttle'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Updated_Price':[1250, 1450, 1550, 400],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Discount':[10, 8, 15, 10]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Clean the string data in the given Pandas Dataframe in Python"}
{"code": "# Python3 code to demonstrate working of\n# Sort Matrix by index-value equality count\n# Using sort() + len() + enumerate()\n\u00a0\u00a0\n\u00a0\u00a0\ndef get_idx_ele_count(row):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# getting required count\n\u00a0\u00a0\u00a0\u00a0# element and index compared, if equal added\n\u00a0\u00a0\u00a0\u00a0# in list, length computed using len()\n\u00a0\u00a0\u00a0\u00a0return len([ele for idx, ele in enumerate(row) if ele == idx])\n\u00a0\u00a0\n\u00a0\u00a0\n# initializing list\ntest_list = [[3, 1, 2, 5, 4], [0, 1, 2, 3, 4],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[6, 5, 4, 3, 2], [0, 5, 4, 2]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# inplace sorting using sort()\ntest_list.sort(key=get_idx_ele_count)\n\u00a0\u00a0\n# printing result\nprint(\"Sorted List : \" + str(test_list))", "nl": "Write a Python program to a Sort Matrix by index-value equality count"}
{"code": "# importing package\nimport numpy\n\u00a0\u00a0\n# define the polynomials\n# p(x) = 5(x**2) + (-2)x +5\npx = (5,-2,5)\n\u00a0\u00a0\n# q(x) = 2(x**2) + (-5)x +2\nqx = (2,-5,2)\n\u00a0\u00a0\n# subtract the polynomials\nrx = numpy.polynomial.polynomial.polysub(px,qx)\n\u00a0\u00a0\n# print the resultant polynomial\nprint(rx)", "nl": "How to subtract one polynomial to another using NumPy in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert numeric words to numbers\n# Using join() + split()\n\u00a0\u00a0\nhelp_dict = {\n\u00a0\u00a0\u00a0\u00a0'one': '1',\n\u00a0\u00a0\u00a0\u00a0'two': '2',\n\u00a0\u00a0\u00a0\u00a0'three': '3',\n\u00a0\u00a0\u00a0\u00a0'four': '4',\n\u00a0\u00a0\u00a0\u00a0'five': '5',\n\u00a0\u00a0\u00a0\u00a0'six': '6',\n\u00a0\u00a0\u00a0\u00a0'seven': '7',\n\u00a0\u00a0\u00a0\u00a0'eight': '8',\n\u00a0\u00a0\u00a0\u00a0'nine': '9',\n\u00a0\u00a0\u00a0\u00a0'zero' : '0'\n}\n\u00a0\u00a0\n# initializing string\ntest_str = \"zero four zero one\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Convert numeric words to numbers\n# Using join() + split()\nres = ''.join(help_dict[ele] for ele in test_str.split())\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after performing replace : \" + res)\u00a0", "nl": "Write a Python program to Convert numeric words to numbers"}
{"code": "# Python3 code to demonstrate working of\n# Sort String list by K character frequency\n# Using sorted() + count() + lambda\n\n\n# initializing list\ntest_list = [\"geekforgeeks\", \"is\", \"best\", \"for\", \"geeks\"]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# initializing K\nK = 'e'\n\n\n# \"-\" sign used to reverse sort\nres = sorted(test_list, key = lambda ele: -ele.count(K))\n\n\n# printing results\nprint(\"Sorted String : \" + str(res))", "nl": "Write a Python program to Sort String list by K character frequency"}
{"code": "# Python3 code to demonstrate\u00a0\n# Swap elements in String list\n# using replace() + list comprehension\n\u00a0\u00a0\n# Initializing list\ntest_list = ['Gfg', 'is', 'best', 'for', 'Geeks']\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Swap elements in String list\n# using replace() + list comprehension\nres = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"List after performing character swaps : \" + str(res))", "nl": "Write a Python program to Swap elements in String list"}
{"code": "# Python code t get difference of two lists\n# Using set()\ndef Diff(li1, li2):\n\u00a0\u00a0\u00a0\u00a0return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n\n\n# Driver Code\nli1 = [10, 15, 20, 25, 30, 35, 40]\nli2 = [25, 40, 35]\nprint(Diff(li1, li2))", "nl": "Write a Python program to Difference between two lists"}
{"code": "# Python program explaining\n# numpy.char.count() method\u00a0\n\u00a0\u00a0\n# importing numpy as geek\nimport numpy as geek\n\u00a0\u00a0\n# input arrays\u00a0\u00a0\nin_arr = geek.array(['Sayantan', '\u00a0 Sayan\u00a0 ', 'Sayansubhra'])\nprint (\"Input array : \", in_arr)\u00a0\n\u00a0\u00a0\n# output arrays\u00a0\nout_arr = geek.char.count(in_arr, sub ='an')\nprint (\"Output array: \", out_arr)\u00a0", "nl": "numpy string operations | count() function in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Matrix to dictionary\u00a0\n# Using dictionary comprehension + range()\n\u00a0\u00a0\n# initializing list\ntest_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]\u00a0\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# using dictionary comprehension for iteration\nres = {idx + 1 : test_list[idx] for idx in range(len(test_list))}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The constructed dictionary : \" + str(res))", "nl": "Write a Python program to Convert Matrix to dictionary"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Specific Characters Frequency in String List\n# Using join() + Counter()\nfrom collections import Counter\n\u00a0\u00a0\n# initializing lists\ntest_list = [\"geeksforgeeks is best for geeks\"]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# char list\u00a0\nchr_list = ['e', 'b', 'g']\n\u00a0\u00a0\n# dict comprehension to retrieve on certain Frequencies\nres = {key:val for key, val in dict(Counter(\"\".join(test_list))).items() if key in chr_list}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Specific Characters Frequencies : \" + str(res))", "nl": "Write a Python program to Specific Characters Frequency in String List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort dictionaries list by Key's Value list index\n# Using sorted() + lambda\n\u00a0\u00a0\n# initializing lists\ntest_list = [{\"Gfg\" : [6, 7, 8], \"is\" : 9, \"best\" : 10},\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"Gfg\" : [2, 0, 3], \"is\" : 11, \"best\" : 19},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"Gfg\" : [4, 6, 9], \"is\" : 16, \"best\" : 1}]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = \"Gfg\"\n\u00a0\u00a0\n# initializing idx\u00a0\nidx = 2\n\u00a0\u00a0\n# using sorted() to perform sort in basis of 1 parameter key and\u00a0\n# index\nres = sorted(test_list, key = lambda ele: ele[K][idx])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The required sort order : \" + str(res))", "nl": "Write a Python program to Sort dictionaries list by Key\u2019s Value list index"}
{"code": "import sys\n\u00a0\u00a0\n# sample Dictionaries\ndic1 = {\"A\": 1, \"B\": 2, \"C\": 3}\u00a0\ndic2 = {\"Geek1\": \"Raju\", \"Geek2\": \"Nikhil\", \"Geek3\": \"Deepanshu\"}\ndic3 = {1: \"Lion\", 2: \"Tiger\", 3: \"Fox\", 4: \"Wolf\"}\n\u00a0\u00a0\n# print the sizes of sample Dictionaries\nprint(\"Size of dic1: \" + str(sys.getsizeof(dic1)) + \"bytes\")\nprint(\"Size of dic2: \" + str(sys.getsizeof(dic2)) + \"bytes\")\nprint(\"Size of dic3: \" + str(sys.getsizeof(dic3)) + \"bytes\")", "nl": "Find the size of a Dictionary in Python"}
{"code": "# Python program to find the type of Ip address\n\n\n# re module provides support\n# for regular expressions\nimport re\n\n\n# Make a regular expression\n# for validating an Ipv4\nipv4 = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n\n\n# Make a regular expression\n# for validating an Ipv6\nipv6 = '''(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|1{0,1}[0-9]){0,1}[0-9]))'''\n\n\n# Define a function for finding\n# the type of Ip address\ndef find(Ip):\u00a0\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# pass the regular expression\n\u00a0\u00a0\u00a0\u00a0# and the string in search() method\n\u00a0\u00a0\u00a0\u00a0if re.search(ipv4, Ip):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"IPv4\")\n\u00a0\u00a0\u00a0\u00a0elif re.search(ipv6, Ip):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"IPv6\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Neither\")\n\n\n# Driver Code\u00a0\nif __name__ == '__main__' :\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Enter the Ip address\n\u00a0\u00a0\u00a0\u00a0Ip = \"192.0.2.126\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# calling run function\u00a0\n\u00a0\u00a0\u00a0\u00a0find(Ip)\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Ip = \"3001:0da8:75a3:0000:0000:8a2e:0370:7334\"\n\u00a0\u00a0\u00a0\u00a0find(Ip)\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Ip = \"36.12.08.20.52\"\n\u00a0\u00a0\u00a0\u00a0find(Ip)", "nl": "Write a Python program to find the type of IP Address using Regex"}
{"code": "# Python program to list out\n# all the empty directories\n\u00a0\u00a0\n\u00a0\u00a0\nimport os\n\u00a0\u00a0\n# List to store all empty\n# directories\nempty = []\n\u00a0\u00a0\n# Traversing through Test\nfor root, dirs, files in os.walk('Test'):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Checking the size of tuple\n\u00a0\u00a0\u00a0\u00a0if not len(dirs) and not len(files):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Adding the empty directory to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0empty.append(root)\n\u00a0\u00a0\nPrint(\"Empty Directories:\")\nprint(empty)", "nl": "Write a Python: Get List of all empty Directories"}
{"code": "# importing module\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# numpy.random.uniform() method\nr = np.random.uniform(size=4)\n\u00a0\u00a0\n# printing numbers\nprint(r)", "nl": "Generate Random Numbers From The Uniform Distribution using NumPy in Python"}
{"code": "# Python program to print odd Numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, 21, 4, 45, 66, 93]\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 != 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print odd numbers in a List"}
{"code": "# Python program to check\n# if a string is binary or not\n\n\n# function for checking the\n# string is accepted or not\ndef check(string) :\n\n\n\u00a0\u00a0\u00a0\u00a0# set function convert string\n\u00a0\u00a0\u00a0\u00a0# into set of characters .\n\u00a0\u00a0\u00a0\u00a0p = set(string)\n\n\n\u00a0\u00a0\u00a0\u00a0# declare set of '0', '1' .\n\u00a0\u00a0\u00a0\u00a0s = {'0', '1'}\n\n\n\u00a0\u00a0\u00a0\u00a0# check set p is same as set s\n\u00a0\u00a0\u00a0\u00a0# or set p contains only '0'\n\u00a0\u00a0\u00a0\u00a0# or set p contains only '1'\n\u00a0\u00a0\u00a0\u00a0# or not, if any one condition\n\u00a0\u00a0\u00a0\u00a0# is true then string is accepted\n\u00a0\u00a0\u00a0\u00a0# otherwise not .\n\u00a0\u00a0\u00a0\u00a0if s == p or p == {'0'} or p == {'1'}:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yes\")\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"No\")\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# driver code\nif __name__ == \"__main__\" :\n\n\n\u00a0\u00a0\u00a0\u00a0string = \"101010000111\"\n\n\n\u00a0\u00a0\u00a0\u00a0# function calling\n\u00a0\u00a0\u00a0\u00a0check(string)", "nl": "Write a Python program to Check if a given string is binary string or not"}
{"code": "# Python3 code to demonstrate working of\n# Extract K digit Elements Tuples\n# Using all() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [(54, 2), (34, 55), (222, 23), (12, 45), (78, )]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\nK = 2\n\u00a0\u00a0\n# using len() and str() to check length and\u00a0\n# perform string conversion\nres = [sub for sub in test_list if all(len(str(ele)) == K for ele in sub)]\n\u00a0\u00a0\n# printing result\nprint(\"The Extracted tuples : \" + str(res))", "nl": "Write a Python program to Extract tuples having K digit elements"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Nested Tuple to Custom Key Dictionary\n# Using list comprehension + dictionary comprehension\n\u00a0\u00a0\n# initializing tuple\ntest_tuple = ((4, 'Gfg', 10), (3, 'is', 8), (6, 'Best', 10))\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tuple))\n\u00a0\u00a0\n# Convert Nested Tuple to Custom Key Dictionary\n# Using list comprehension + dictionary comprehension\nres = [{'key': sub[0], 'value': sub[1], 'id': sub[2]}\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for sub in test_tuple]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted dictionary : \" + str(res))", "nl": "Write a Python program to Convert Nested Tuple to Custom Key Dictionary"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Creating the DataFrame\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Using dictionary to remap values in Pandas DataFrame columns in Python"}
{"code": "# Python 3 code to demonstrate\n# the removal of all occurrences of a\u00a0\n# given item using list comprehension\n\u00a0\u00a0\ndef remove_items(test_list, item):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# using list comprehension to perform the task\n\u00a0\u00a0\u00a0\u00a0res = [i for i in test_list if i != item]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n# driver code\nif __name__==\"__main__\":\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# initializing the list\n\u00a0\u00a0\u00a0\u00a0test_list = [1, 3, 4, 6, 5, 1]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# the item which is to be removed\n\u00a0\u00a0\u00a0\u00a0item = 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing the original list\n\u00a0\u00a0\u00a0\u00a0print (\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# calling the function remove_items()\n\u00a0\u00a0\u00a0\u00a0res = remove_items(test_list, item)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing result\n\u00a0\u00a0\u00a0\u00a0print (\"The list after performing the remove operation is : \" + str(res))", "nl": "Remove all the occurrences of an element from a list in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\n\n# Let's create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '12/2/2011', '13/2/2011', '14/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\n\n# Let's visualize the dataframe\nprint(df)", "nl": "Insert row at given position in Pandas Dataframe in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Matrix Row subset\n# Using any() + all() + list comprehension\n\u00a0\u00a0\n# initializing lists\ntest_list = [[4, 5, 7], [2, 3, 4], [9, 8, 0]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing check Matrix\ncheck_matr = [[2, 3], [1, 2], [9, 0]]\n\u00a0\u00a0\n# Matrix Row subset\n# Using any() + all() + list comprehension\nres = [ele for ele in check_matr if any(all(a in sub for a in ele)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for sub in test_list)]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Matrix row subsets : \" + str(res))\u00a0", "nl": "Write a Python program to Matrix Row subset"}
{"code": "# Python program to inverse\n# a matrix using numpy\n\u00a0\u00a0\n# Import required package\nimport numpy as np\n\u00a0\u00a0\n# Taking a 3 * 3 matrix\nA = np.array([[6, 1, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[4, -2, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2, 8, 7]])\n\u00a0\u00a0\n# Calculating the inverse of the matrix\nprint(np.linalg.inv(A))", "nl": "How to inverse a matrix using NumPy in Python"}
{"code": "# Python3 code here creating class\nclass geeks:\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self, name, roll):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.roll = roll\n\u00a0\u00a0\u00a0\n# creating list\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nlist = []\u00a0\n\u00a0\u00a0\n# appending instances to list\u00a0\nlist.append( geeks('Akash', 2) )\nlist.append( geeks('Deependra', 40) )\nlist.append( geeks('Reaper', 44) )\n\u00a0\u00a0\nfor obj in list:\n\u00a0\u00a0\u00a0\u00a0print( obj.name, obj.roll, sep =' ' )\n\u00a0\u00a0\n# We can also access instances attributes\n# as list[0].name, list[0].roll and so on.", "nl": "How to create a list of object in Python class"}
{"code": "# Recursive Python program for insertion sort\n\n\n# Recursive function to sort an array using insertion sort\ndef insertionSortRecursive(arr, n):\n\u00a0\u00a0\u00a0\u00a0# base case\n\u00a0\u00a0\u00a0\u00a0if n <= 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\n\u00a0\u00a0\u00a0\u00a0# Sort first n-1 elements\n\u00a0\u00a0\u00a0\u00a0insertionSortRecursive(arr, n - 1)\n\n\n\u00a0\u00a0\u00a0\u00a0# Insert last element at its correct position in sorted array.\n\u00a0\u00a0\u00a0\u00a0last = arr[n - 1]\n\u00a0\u00a0\u00a0\u00a0j = n - 2\n\n\n\u00a0\u00a0\u00a0\u00a0# Move elements of arr[0..i-1], that are\n\u00a0\u00a0\u00a0\u00a0# greater than key, to one position ahead\n\u00a0\u00a0\u00a0\u00a0# of their current position\n\u00a0\u00a0\u00a0\u00a0while (j >= 0 and arr[j] > last):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[j + 1] = arr[j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j = j - 1\n\u00a0\u00a0\u00a0\u00a0arr[j + 1] = last\n\n\n\n\n# Driver program to test insertion sort\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0A = [-7, 11, 6, 0, -3, 5, 10, 2]\n\u00a0\u00a0\u00a0\u00a0n = len(A)\n\u00a0\u00a0\u00a0\u00a0insertionSortRecursive(A, n)\n\u00a0\u00a0\u00a0\u00a0print(A)\n\n\n# Contributed by Harsh Valecha,\n# Edited by Abraar Masud Nafiz.", "nl": "Write a Python Program for Recursive Insertion Sort"}
{"code": "# Importing Numpy module\nimport numpy as np\n\u00a0\u00a0\n# Creating 1-D Numpy array\na1 = np.array([11, 10, 22, 30, 33])\nprint(\"Array 1 :\")\nprint(a1)\n\u00a0\u00a0\na2 = np.array([1, 15, 60])\nprint(\"Array 2 :\")\nprint(a2)\n\u00a0\u00a0\nprint(\"\\nTake 1 and 15 from Array 2 and put them in\\\n1st and 5th position of Array 1\")\n\u00a0\u00a0\na1.put([0, 4], a2)\n\u00a0\u00a0\nprint(\"Resultant Array :\")\nprint(a1)", "nl": "How to get values of an NumPy array at certain index positions in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Binary tuple to Integer\n# Using join() + list comprehension + int()\n\u00a0\u00a0\n# initializing tuple\ntest_tup = (1, 1, 0, 1, 0, 0, 1)\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\u00a0\u00a0\n# using int() with base to get actual number\nres = int(\"\".join(str(ele) for ele in test_tup), 2)\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Decimal number is : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Binary tuple to Integer"}
{"code": "from bs4 import *\nimport requests\nimport os\n\u00a0\u00a0\n# CREATE FOLDER\ndef folder_create(images):\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0folder_name = input(\"Enter Folder Name:- \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# folder creation\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.mkdir(folder_name)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if folder exists with that name, ask another name\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Folder Exist with that name!\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0folder_create()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# image downloading start\n\u00a0\u00a0\u00a0\u00a0download_images(images, folder_name)\n\u00a0\u00a0\n\u00a0\u00a0\n# DOWNLOAD ALL IMAGES FROM THAT URL\ndef download_images(images, folder_name):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# intitial count is zero\n\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# print total images found in URL\n\u00a0\u00a0\u00a0\u00a0print(f\"Total {len(images)} Image Found!\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking if images is not zero\n\u00a0\u00a0\u00a0\u00a0if len(images) != 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i, image in enumerate(images):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# From image tag ,Fetch image Source URL\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 1.data-srcset\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 2.data-src\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 3.data-fallback-src\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 4.src\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Here we will use exception handling\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# first we will search for \"data-srcset\" in img tag\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# In image tag ,searching for \"data-srcset\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_link = image[\"data-srcset\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# then we will search for \"data-src\" in img\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# tag and so on..\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# In image tag ,searching for \"data-src\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_link = image[\"data-src\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# In image tag ,searching for \"data-fallback-src\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_link = image[\"data-fallback-src\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# In image tag ,searching for \"src\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_link = image[\"src\"]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if no Source URL found\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# After getting Image Source URL\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# We will try to get the content of image\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r = requests.get(image_link).content\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# possibility of decode\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r = str(r, 'utf-8')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except UnicodeDecodeError:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# After checking above condition, Image Download start\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(f\"{folder_name}/images{i+1}.jpg\", \"wb+\") as f:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(r)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# counting number of image downloaded\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# There might be possible, that all\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# images not download\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if all images download\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if count == len(images):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"All Images Downloaded!\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if all images not download\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f\"Total {count} Images Downloaded Out of {len(images)}\")\n\u00a0\u00a0\n# MAIN FUNCTION START\ndef main(url):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# content of URL\n\u00a0\u00a0\u00a0\u00a0r = requests.get(url)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Parse HTML Code\n\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(r.text, 'html.parser')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find all images in URL\n\u00a0\u00a0\u00a0\u00a0images = soup.findAll('img')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Call folder create function\n\u00a0\u00a0\u00a0\u00a0folder_create(images)\n\u00a0\u00a0\n\u00a0\u00a0\n# take url\nurl = input(\"Enter URL:- \")\n\u00a0\u00a0\n# CALL MAIN FUNCTION\nmain(url)", "nl": "How to Download All Images from a Web Page in Python"}
{"code": "import wmi\n\n\n# Initializing the wmi constructor\nf = wmi.WMI()\n\n\n# Printing the header for the later columns\nprint(\"pid\u00a0\u00a0 Process name\")\n\n\n# Iterating through all the running processes\nfor process in f.Win32_Process():\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Displaying the P_ID and P_Name of the process\n\u00a0\u00a0\u00a0\u00a0print(f\"{process.ProcessId:<10} {process.Name}\")", "nl": "Write a Python program to Get list of running processes"}
{"code": "# Python3 code to demonstrate working of\n# Split String on vowels\n# Using split() + regex\nimport re\n\n\n# initializing strings\ntest_str = 'GFGaBste4oCS'\n\n\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\n\n# splitting on vowels\n# constructing vowels list\n# and separating using | operator\nres = re.split('a|e|i|o|u', test_str)\n\n\n# printing result\nprint(\"The splitted string : \" + str(res))", "nl": "Write a Python program to Split String on vowels"}
{"code": "# Python code to demonstrate\n# adding columns in numpy array\n\n\nimport numpy as np\n\n\nini_array = np.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])\n\n\n# printing initial array\nprint(\"initial_array : \", str(ini_array));\n\n\n# Array to be added as column\ncolumn_to_be_added = np.array([1, 2, 3])\n\n\n# Adding column to numpy array\nresult = np.hstack((ini_array, np.atleast_2d(column_to_be_added).T))\n\n\n# printing result\nprint (\"resultant array\", str(result))", "nl": "Write a Python program to Ways to add row/columns in numpy array"}
{"code": "# Python code to demonstrate\n# flattening a 2d numpy array\n# into 1d array\n\u00a0\u00a0\nimport numpy as np\n\u00a0\u00a0\nini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])\n\u00a0\u00a0\n# printing initial arrays\nprint(\"initial array\", str(ini_array1))\n\u00a0\u00a0\n# Multiplying arrays\nresult = ini_array1.flatten()\n\u00a0\u00a0\n# printing result\nprint(\"New resulting array: \", result)", "nl": "Write a Python program to Flatten a 2d numpy array into 1d array"}
{"code": "# importing required libraries\nimport numpy\n\n\n# explicit function to compute column wise sum\ndef colsum(arr, n, m):\n\u00a0\u00a0\u00a0\u00a0for i in range(n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0su = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(m):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0su += arr[j][i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(su, end = \" \")\u00a0\u00a0\u00a0\n\n\n# creating the 2D Array\nTwoDList = [[1, 2, 3], [4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[7, 8, 9], [10, 11, 12]]\nTwoDArray = numpy.array(TwoDList)\n\n\n# displaying the 2D Array\nprint(\"2D Array:\")\nprint(TwoDArray)\n\n\n# printing the sum of each column\nprint(\"\\nColumn-wise Sum:\")\ncolsum(TwoDArray, len(TwoDArray[0]), len(TwoDArray))", "nl": "Calculate the sum of all columns in a 2D NumPy array in Python"}
{"code": "# define two methods\n\n\n# second method that will be returned\n# by first method\ndef B():\n\u00a0\u00a0\u00a0\u00a0print(\"Inside the method B.\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# first method that return second method\ndef A():\n\u00a0\u00a0\u00a0\u00a0print(\"Inside the method A.\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# return second method\n\u00a0\u00a0\u00a0\u00a0return B\n\n\n# form a object of first method\n# i.e; second method\nreturned_function = A()\n\n\n# call second method by first method\nreturned_function()", "nl": "Returning a function from a function \u2013 Python"}
{"code": "# import numpy\nimport numpy as np\n\u00a0\u00a0\n# using numpy.fill_diagonal() method\narray = np.array([[1, 2], [2, 1]])\nnp.fill_diagonal(array, 5)\n\u00a0\u00a0\nprint(array)", "nl": "Write a Python program to numpy.fill_diagonal() method"}
{"code": "# Python code to count the number of occurrences\ndef countX(lst, x):\n\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0for ele in lst:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ele == x):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0return count\n\n\n# Driver Code\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8]\nx = 8\nprint('{} has occurred {} times'.format(x, countX(lst, x)))", "nl": "Write a Python program to Count occurrences of an element in a list"}
{"code": "# Python program to print negative Numbers in given range\n\u00a0\u00a0\nstart, end = -4, 19\n\u00a0\u00a0\n# iterating each number in list\nfor num in range(start, end + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num < 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print all negative numbers in a range"}
{"code": "# import pandas lib as pd\nimport pandas as pd\n\u00a0\u00a0\n# create the data dictionary\ndata = {'Month' : ['January', 'February', 'March', 'April'],\n\u00a0\u00a0\u00a0\u00a0\u00a0'Expense': [ 21525220.653, 31125840.875, 23135428.768, 56245263.942]}\n\u00a0\u00a0\n# create the dataframe\ndataframe = pd.DataFrame(data, columns = ['Month', 'Expense'])\n\u00a0\u00a0\nprint(\"Given Dataframe :\\n\", dataframe)\n\u00a0\u00a0\n# round to two decimal places in python pandas\npd.options.display.float_format = '{:.2f}'.format\n\u00a0\u00a0\nprint('\\nResult :\\n', dataframe)", "nl": "Formatting float column of Dataframe in Pandas in Python"}
{"code": "# Python3 code to demonstrate working of\n# Flatten Tuples List to String\n# using join() + list comprehension\n\u00a0\u00a0\n# initialize list of tuple\ntest_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]\n\u00a0\u00a0\n# printing original tuples list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# Flatten Tuples List to String\n# using join() + list comprehension\nres = ' '.join([idx for tup in test_list for idx in tup])\n\u00a0\u00a0\n# printing result\nprint(\"Tuple list converted to String is : \" + res)", "nl": "Write a Python program to Flatten Tuples List to String"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove Dictionary Key Words\n# Using split() + loop + replace()\n\u00a0\u00a0\n# initializing string\ntest_str = 'gfg is best for geeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing Dictionary\ntest_dict = {'geeks' : 1, 'best': 6}\n\u00a0\u00a0\n# Remove Dictionary Key Words\n# Using split() + loop + replace()\nfor key in test_dict:\n\u00a0\u00a0\u00a0\u00a0if key in test_str.split(' '):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_str = test_str.replace(key, \"\")\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after replace : \" + str(test_str))\u00a0", "nl": "Write a Python program to Remove Dictionary Key Words"}
{"code": "# Python3 code to illustrate the conversion of\n# \"unknown format\" strings to DateTime objects\n\u00a0\u00a0\n# Importing parser from the dateutil.parser\nimport dateutil.parser as parser\n\u00a0\u00a0\n# Initializing an unknown format date string\ndate_string = \"19750503T080120\"\n\u00a0\u00a0\n# Calling the parser to parse the above\n# specified unformatted date string\n# into a datetime objects\ndate_time = parser.parse(date_string)\n\u00a0\u00a0\n# Printing the converted datetime object\nprint(date_time)", "nl": "Convert \u201cunknown format\u201d strings to datetime objects in Python"}
{"code": "# Importing library\nimport numpy as np\n\u00a0\u00a0\n# Creating two 1-D arrays\narray1 = np.array([6,2])\narray2 = np.array([2,5])\nprint(\"Original 1-D arrays:\")\nprint(array1)\nprint(array2)\n\u00a0\u00a0\n# Output\nprint(\"Outer Product of the two array is:\")\nresult = np.outer(array1, array2)\nprint(result)", "nl": "Compute the outer product of two given vectors using NumPy in Python"}
{"code": "# Searching an element in a list/array in python\n# can be simply done using \\'in\\' operator\n# Example:\n# if x in arr:\n#\u00a0\u00a0 print arr.index(x)\n\u00a0\u00a0\n# If you want to implement Linear Search in python\n\u00a0\u00a0\n# Linearly search x in arr[]\n# If x is present then return its location\n# else return -1\n\u00a0\u00a0\ndef search(arr, x):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(len(arr)):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr[i] == x:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return i\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return -1", "nl": "Write a Python Program for Linear Search"}
{"code": "# Import Module\nfrom tkinter import *\nfrom PIL import Image, ImageTk", "nl": "How to resize Image in Write a Python program to Tkinter"}
{"code": "# import required module\nimport ctypes\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# create node class\nclass Node:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.npx = 0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# create linked list class\nclass XorLinkedList:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# constructor\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes = []\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to insert node at beginning\n\u00a0\u00a0\u00a0\u00a0def InsertAtStart(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = Node(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = id(node) ^ self.head.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.npx = id(self.head)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes.append(node)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to insert node at end\n\u00a0\u00a0\u00a0\u00a0def InsertAtEnd(self, value):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = Node(value)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.npx = id(node) ^ self.tail.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.npx = id(self.tail)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__nodes.append(node)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to remove node at beginning\n\u00a0\u00a0\u00a0\u00a0def DeleteAtStart(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.isEmpty():\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"List is empty !\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head == self.tail:\u00a0 # If list has 1 node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif (0 ^ self.head.npx) == id(self.tail):\u00a0 # If list has 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = self.tail.npx = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0 # If list has more than 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = self.head.value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = self.__type_cast(0 ^ self.head.npx)\u00a0 # Address of next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = (id(self.head) ^ x.npx)\u00a0 # Address of next of next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = x\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = 0 ^ y\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to remove node at end\n\u00a0\u00a0\u00a0\u00a0def DeleteAtEnd(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.isEmpty():\u00a0 # If list is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"List is empty !\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head == self.tail:\u00a0 # If list has 1 node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.tail = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.__type_cast(0 ^ self.head.npx) == (self.tail):\u00a0 # If list has 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.npx = self.tail.npx = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0 # If list has more than 2 nodes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = node.value\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = self.__type_cast(prev_id).npx ^ id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = self.__type_cast(prev_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y.npx = x ^ 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = y\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to traverse linked list\n\u00a0\u00a0\u00a0\u00a0def Print(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"We are printing values rather than returning it bacause\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for returning we have to append all values in a list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and it takes extra memory to save all values in a list.\"\"\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head != None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"List is empty !\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to traverse linked list in reverse order\n\u00a0\u00a0\u00a0\u00a0def ReversePrint(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Print Values is reverse order.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"We are printing values rather than returning it bacause\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for returning we have to append all values in a list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and it takes extra memory to save all values in a list.\"\"\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head != None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(node.value, end=' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"List is empty !\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to get length of linked list\n\u00a0\u00a0\u00a0\u00a0def Length(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not self.isEmpty():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return count\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to get node data value by index\n\u00a0\u00a0\u00a0\u00a0def PrintByIndex(self, index):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(index):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_id = prev_id ^ node.npx\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if next_id:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prev_id = id(node)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = self.__type_cast(next_id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Value dosn't found index out of range.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return node.value\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to check if the liked list is empty or not\n\u00a0\u00a0\u00a0\u00a0def isEmpty(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# method to return a new instance of type\n\u00a0\u00a0\u00a0\u00a0def __type_cast(self, id):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ctypes.cast(id, ctypes.py_object).value\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\n\u00a0\u00a0\n# create object\nobj = XorLinkedList()\n\u00a0\u00a0\n# insert nodes\nobj.InsertAtEnd(2)\nobj.InsertAtEnd(3)\nobj.InsertAtEnd(4)\nobj.InsertAtStart(0)\nobj.InsertAtStart(6)\nobj.InsertAtEnd(55)\n\u00a0\u00a0\n# display length\nprint(\"\\nLength:\", obj.Length())\n\u00a0\u00a0\n# traverse\nprint(\"\\nTraverse linked list:\")\nobj.Print()\n\u00a0\u00a0\nprint(\"\\nTraverse in reverse order:\")\nobj.ReversePrint()\n\u00a0\u00a0\n# display data values by index\nprint('\\nNodes:')\nfor i in range(obj.Length()):\n\u00a0\u00a0\u00a0\u00a0print(\"Data value at index\", i, 'is', obj.PrintByIndex(i))\n\u00a0\u00a0\n# removing nodes\nprint(\"\\nDelete Last Node: \", obj.DeleteAtEnd())\nprint(\"\\nDelete First Node: \", obj.DeleteAtStart())\n\u00a0\u00a0\n# new length\nprint(\"\\nUpdated length:\", obj.Length())\n\u00a0\u00a0\n# display data values by index\nprint('\\nNodes:')\nfor i in range(obj.Length()):\n\u00a0\u00a0\u00a0\u00a0print(\"Data value at index\", i, 'is', obj.PrintByIndex(i))\n\u00a0\u00a0\n# traverse\nprint(\"\\nTraverse linked list:\")\nobj.Print()\n\u00a0\u00a0\nprint(\"\\nTraverse in reverse order:\")\nobj.ReversePrint()", "nl": "Implementation of XOR Linked List in Python"}
{"code": "# Extension Quick Sort Code\n# importing time module\nimport time\n\n\n# to implement divide and conquer\ndef partition(data, head, tail, drawData, timeTick):\n\u00a0\u00a0\u00a0\u00a0border = head\n\u00a0\u00a0\u00a0\u00a0pivot = data[tail]\n\n\n\u00a0\u00a0\u00a0\u00a0drawData(data, getColorArray(len(data), head,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tail, border, border))\n\u00a0\u00a0\u00a0\u00a0time.sleep(timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0for j in range(head, tail):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if data[j] < pivot:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawData(data, getColorArray(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0len(data), head, tail, border, j, True))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[border], data[j] = data[j], data[border]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0border += 1\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawData(data, getColorArray(len(data), head,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tail, border, j))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0# swapping pivot with border value\n\u00a0\u00a0\u00a0\u00a0drawData(data, getColorArray(len(data), head,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tail, border, tail, True))\n\u00a0\u00a0\u00a0\u00a0time.sleep(timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0data[border], data[tail] = data[tail], data[border]\n\n\n\u00a0\u00a0\u00a0\u00a0return border\n\n\n\n\n# head\u00a0 --> Starting index,\n# tail\u00a0 --> Ending index\ndef quick_sort(data, head, tail,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawData, timeTick):\n\u00a0\u00a0\u00a0\u00a0if head < tail:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0partitionIdx = partition(data, head,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tail, drawData,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# left partition\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0quick_sort(data, head, partitionIdx-1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawData, timeTick)\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# right partition\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0quick_sort(data, partitionIdx+1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tail, drawData, timeTick)\n\n\n# Function to apply colors to bars while sorting:\n# Grey - Unsorted elements\n# Blue - Pivot point element\n# White - Sorted half/partition\n# Red - Starting pointer\n# Yellow - Ending pointer\n# Green - Sfter all elements are sorted\n\n\n# assign color representation to elements\n\n\n\n\ndef getColorArray(dataLen, head, tail, border,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currIdx, isSwaping=False):\n\u00a0\u00a0\u00a0\u00a0colorArray = []\n\u00a0\u00a0\u00a0\u00a0for i in range(dataLen):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# base coloring\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i >= head and i <= tail:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray.append('Grey')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray.append('White')\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == tail:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray[i] = 'Blue'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif i == border:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray[i] = 'Red'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif i == currIdx:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray[i] = 'Yellow'\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if isSwaping:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == border or i == currIdx:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0colorArray[i] = 'Green'\n\n\n\u00a0\u00a0\u00a0\u00a0return colorArray", "nl": "Visualizing Quick Sort using Tkinter in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Nested dictionary to Mapped Tuple\n# Using list comprehension + generator expression\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg' : {'x' : 5, 'y' : 6}, 'is' : {'x' : 1, 'y' : 4},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'best' : {'x' : 8, 'y' : 3}}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# Convert Nested dictionary to Mapped Tuple\n# Using list comprehension + generator expression\nres = [(key, tuple(sub[key] for sub in test_dict.values()))\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for key in test_dict['gfg']]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The grouped dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Nested dictionary to Mapped Tuple"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove K length Duplicates from String\n# Using loop + slicing\u00a0\n\u00a0\u00a0\n# initializing strings\ntest_str = 'geeksforfreeksfo'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 3\n\u00a0\u00a0\nmemo = set()\nres = []\nfor idx in range(0, len(test_str) - K):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# slicing K length substrings\n\u00a0\u00a0\u00a0\u00a0sub = test_str[idx : idx + K]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for presence\n\u00a0\u00a0\u00a0\u00a0if sub not in memo:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memo.add(sub)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(sub)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nres = ''.join(res[ele] for ele in range(0, len(res), K))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The modified string : \" + str(res))\u00a0", "nl": "Write a Python program to Remove K length Duplicates from String"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Original matrix\nmatrix1 = np.array([[1, 2, 3], [3, 4, 5]])\nprint(matrix1)\n\u00a0\u00a0\n# Decomposition of the said matrix\nq, r = np.linalg.qr(matrix1)\nprint('\\nQ:\\n', q)\nprint('\\nR:\\n', r)", "nl": "Calculate the QR decomposition of a given matrix using NumPy in Python"}
{"code": "// C++ implementation to Count the\n// number of groups having the largest\n// size where groups are according\n// to the sum of its digits\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n// function to return sum of digits of i\nint sumDigits(int n){\n\u00a0\u00a0\u00a0\u00a0int sum = 0;\n\u00a0\u00a0\u00a0\u00a0while(n)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += n%10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n /= 10;\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0return sum;\n}\n\n\n// Create the dictionary of unique sum\nmap<int,int> constDict(int n){\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// dictionary that contain\n\u00a0\u00a0\u00a0\u00a0// unique sum count\n\u00a0\u00a0\u00a0\u00a0map<int,int> d;\n\n\n\u00a0\u00a0\u00a0\u00a0for(int i = 1; i < n + 1; ++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// calculate the sum of its digits\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int sum1 = sumDigits(i);\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(d.find(sum1) == d.end())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d[sum1] = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d[sum1] += 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0return d;\n}\n\n\n// function to find the\n// largest size of group\nint countLargest(int n){\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0map<int,int> d = constDict(n);\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0int size = 0;\n\n\n\u00a0\u00a0\u00a0\u00a0// count of largest size group\n\u00a0\u00a0\u00a0\u00a0int count = 0;\n\n\n\u00a0\u00a0\u00a0\u00a0for(auto it = d.begin(); it != d.end(); ++it){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int k = it->first;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int val = it->second;\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(val > size){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size = val;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(val == size)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1;\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0return count;\n}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n// Driver code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int\u00a0\u00a0\u00a0 n = 13;\n\n\n\u00a0\u00a0\u00a0\u00a0int group = countLargest(n);\n\n\n\u00a0\u00a0\u00a0\u00a0cout << group << endl;\n\n\n\u00a0\u00a0\u00a0\u00a0return 0;\n}", "nl": "Count of groups having largest size while grouping according to sum of its digits in Python"}
{"code": "# Create a simple dataframe\n\u00a0\u00a0\u00a0\n# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# creating a dataframe\ndf = pd.DataFrame({'A': ['john', 'bODAY', 'minA', 'Peter', 'nicky'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'B': ['masters', 'graduate', 'graduate',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Masters', 'Graduate'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'C': [27, 23, 21, 23, 24]})\n\u00a0\u00a0\u00a0\ndf", "nl": "Capitalize first letter of a column in Pandas dataframe in Python"}
{"code": "# Python code to demonstrate\n# to replace negative value with 0\nimport numpy as np\n\u00a0\u00a0\nini_array1 = np.array([1, 2, -3, 4, -5, -6])\n\u00a0\u00a0\n# printing initial arrays\nprint(\"initial array\", ini_array1)\n\u00a0\u00a0\n# code to replace all negative value with 0\nini_array1[ini_array1<0] = 0\n\u00a0\u00a0\n# printing result\nprint(\"New resulting array: \", ini_array1)", "nl": "Write a Python program to Replace negative value with zero in numpy array"}
{"code": "# Python program for implementation of Cocktail Sort\n\u00a0\u00a0\ndef cocktailSort(a):\n\u00a0\u00a0\u00a0\u00a0n = len(a)\n\u00a0\u00a0\u00a0\u00a0swapped = True\n\u00a0\u00a0\u00a0\u00a0start = 0\n\u00a0\u00a0\u00a0\u00a0end = n-1\n\u00a0\u00a0\u00a0\u00a0while (swapped==True):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# reset the swapped flag on entering the loop,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# because it might be true from a previous\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iteration.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped = False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop from left to right same as the bubble\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# sort\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range (start, end):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[i] > a[i+1]) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i], a[i+1]= a[i+1], a[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped=True\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if nothing moved, then array is sorted.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (swapped==False):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# otherwise, reset the swapped flag so that it\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# can be used in the next stage\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped = False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# move the end point back by one, because\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# item at the end is in its rightful spot\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = end-1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# from right to left, doing the same\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# comparison as in the previous stage\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(end-1, start-1,-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[i] > a[i+1]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i], a[i+1] = a[i+1], a[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swapped = True\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# increase the starting point, because\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the last stage would have moved the next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# smallest number to its rightful spot.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start = start+1\n\u00a0\u00a0\n# Driver code to test above\na = [5, 1, 4, 2, 8, 0, 2]\ncocktailSort(a)\nprint(\"Sorted array is:\")\nfor i in range(len(a)):\n\u00a0\u00a0\u00a0\u00a0print (\"%d\" %a[i]),", "nl": "Write a Python Program for Cocktail Sort"}
{"code": "# Import the library tkinter\nfrom tkinter import *\n\u00a0\u00a0\n# Create a GUI app\napp = Tk()\n\u00a0\u00a0\n# Set the title and geometry to your app\napp.title(\"Geeks For Geeks\")\napp.geometry(\"800x500\")\n\u00a0\u00a0\n# Create menubar by setting the color\nmenubar = Menu(app, background='blue', fg='white')\n\u00a0\u00a0\n# Declare file and edit for showing in menubar\nfile = Menu(menubar, tearoff=False, background='yellow')\nedit = Menu(menubar, tearoff=False, background='pink')\n\u00a0\u00a0\n# Add commands in in file menu\nfile.add_command(label=\"New\")\nfile.add_command(label=\"Exit\", command=app.quit)\n\u00a0\u00a0\n# Add commands in edit menu\nedit.add_command(label=\"Cut\")\nedit.add_command(label=\"Copy\")\nedit.add_command(label=\"Paste\")\n\u00a0\u00a0\n# Display the file and edit declared in previous step\nmenubar.add_cascade(label=\"File\", menu=file)\nmenubar.add_cascade(label=\"Edit\", menu=edit)\n\u00a0\u00a0\n# Displaying of menubar in the app\napp.config(menu=menubar)\n\u00a0\u00a0\n# Make infinite loop for displaying app on screen\napp.mainloop()", "nl": "Changing the colour of Tkinter Menu Bar in Python"}
{"code": "# Function to check if string follows order of\u00a0\n# characters defined by a pattern\u00a0\nfrom collections import OrderedDict\u00a0\n\u00a0\u00a0\ndef checkOrder(input, pattern):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create empty OrderedDict\u00a0\n\u00a0\u00a0\u00a0\u00a0# output will be like {'a': None,'b': None, 'c': None}\u00a0\n\u00a0\u00a0\u00a0\u00a0dict = OrderedDict.fromkeys(input)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# traverse generated OrderedDict parallel with\u00a0\n\u00a0\u00a0\u00a0\u00a0# pattern string to check if order of characters\u00a0\n\u00a0\u00a0\u00a0\u00a0# are same or not\u00a0\n\u00a0\u00a0\u00a0\u00a0ptrlen = 0\n\u00a0\u00a0\u00a0\u00a0for key,value in dict.items():\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (key == pattern[ptrlen]):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptrlen = ptrlen + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check if we have traverse complete\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pattern string\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ptrlen == (len(pattern))):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 'true'\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# if we come out from for loop that means\u00a0\n\u00a0\u00a0\u00a0\u00a0# order was mismatched\u00a0\n\u00a0\u00a0\u00a0\u00a0return 'false'\n\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input = 'engineers rock'\n\u00a0\u00a0\u00a0\u00a0pattern = 'egr'\n\u00a0\u00a0\u00a0\u00a0print (checkOrder(input,pattern))\u00a0", "nl": "Write a Python program to Check order of character in string using OrderedDict( )"}
{"code": "# importing pandas module\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\ndf.head(10)", "nl": "Get the index of minimum value in DataFrame column in Python"}
{"code": "# Python3 code to demonstrate working of\n# Adjacent element multiplication\n# using zip() + generator expression + tuple\n\u00a0\u00a0\n# initialize tuple\ntest_tup = (1, 5, 7, 8, 10)\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tup))\n\u00a0\u00a0\n# Adjacent element multiplication\n# using zip() + generator expression + tuple\nres = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n\u00a0\u00a0\n# printing result\nprint(\"Resultant tuple after multiplication : \" + str(res))", "nl": "Write a Python program to Multiply Adjacent elements"}
{"code": "# Python program explaining\n# numpy.char.not_equal() method\u00a0\n\u00a0\u00a0\n# importing numpy\u00a0\nimport numpy as geek\n\u00a0\u00a0\n# input arrays\u00a0\u00a0\nin_arr1 = geek.array('numpy')\nprint (\"1st Input array : \", in_arr1)\n\u00a0\u00a0\nin_arr2 = geek.array('nump')\nprint (\"2nd Input array : \", in_arr2)\u00a0\u00a0\n\u00a0\u00a0\n# checking if they are not equal\nout_arr = geek.char.not_equal(in_arr1, in_arr2)\nprint (\"Output array: \", out_arr)\u00a0", "nl": "numpy string operations | not_equal() function in Python"}
{"code": "# importing numpy library\nimport numpy as np\n\u00a0\u00a0\n# create numpy 2d-array\nm = np.array([[1, 2],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[2, 3]])\n\u00a0\u00a0\nprint(\"Printing the Original square array:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m)\n\u00a0\u00a0\n# finding eigenvalues and eigenvectors\nw, v = np.linalg.eig(m)\n\u00a0\u00a0\n# printing eigen values\nprint(\"Printing the Eigen values of the given square array:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w)\n\u00a0\u00a0\n# printing eigen vectors\nprint(\"Printing Right eigenvectors of the given square array:\\n\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v)", "nl": "How to compute the eigenvalues and right eigenvectors of a given square array using NumPY in Python"}
{"code": "# Python program to impleament cycle sort\n\u00a0\u00a0\ndef cycleSort(array):\n\u00a0\u00a0writes = 0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# Loop through the array to find cycles to rotate.\n\u00a0\u00a0for cycleStart in range(0, len(array) - 1):\n\u00a0\u00a0\u00a0\u00a0item = array[cycleStart]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Find where to put the item.\n\u00a0\u00a0\u00a0\u00a0pos = cycleStart\n\u00a0\u00a0\u00a0\u00a0for i in range(cycleStart + 1, len(array)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if array[i] < item:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# If the item is already there, this is not a cycle.\n\u00a0\u00a0\u00a0\u00a0if pos == cycleStart:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Otherwise, put the item there or right after any duplicates.\n\u00a0\u00a0\u00a0\u00a0while item == array[pos]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos += 1\n\u00a0\u00a0\u00a0\u00a0array[pos], item = item, array[pos]\n\u00a0\u00a0\u00a0\u00a0writes += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Rotate the rest of the cycle.\n\u00a0\u00a0\u00a0\u00a0while pos != cycleStart:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Find where to put the item.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos = cycleStart\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(cycleStart + 1, len(array)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if array[i] < item:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Put the item there or right after any duplicates.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while item == array[pos]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pos += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array[pos], item = item, array[pos]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writes += 1\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0return writes\n\u00a0\u00a0\u00a0\u00a0\n#\u00a0 driver code\u00a0\narr = [1, 8, 3, 9, 10, 10, 2, 4 ]\nn = len(arr)\u00a0\ncycleSort(arr)\n\u00a0\u00a0\nprint(\"After sort : \")\nfor i in range(0, n) :\u00a0\n\u00a0\u00a0\u00a0\u00a0print(arr[i], end = \\' \\')\n\u00a0\u00a0\n# Code Contributed by Mohit Gupta_OMG <(0_o)>", "nl": "Write a Python Program for Cycle Sort"}
{"code": "# Function to Check if frequency of all characters\n# can become same by one removal\nfrom collections import Counter\n\u00a0\u00a0\ndef allSame(input):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# calculate frequency of each character\n\u00a0\u00a0\u00a0\u00a0# and convert string into dictionary\n\u00a0\u00a0\u00a0\u00a0dict=Counter(input)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now get list of all values and push it\n\u00a0\u00a0\u00a0\u00a0# in set\n\u00a0\u00a0\u00a0\u00a0same = list(set(dict.values()))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if len(same)>2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('No')\n\u00a0\u00a0\u00a0\u00a0elif len (same)==2 and same[1]-same[0]>1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('No')\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Yes')\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now check if frequency of all characters\u00a0\n\u00a0\u00a0\u00a0\u00a0# can become same\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'xxxyyzzt'\n\u00a0\u00a0\u00a0\u00a0allSame(input)", "nl": "Write a Python dictionary, set and counter to check if frequencies can become same"}
{"code": "import numpy as np\n\n\n\n\n# sample array\narr = np.array([4, 5, 8, 5, 6, 4,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a09, 2, 4, 3, 6])\nprint(arr)", "nl": "Describe a NumPy Array in Python"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Original Array\narray = np.array(['PHP C# Python C Java C++'], dtype=np.str)\nprint(array)\n\u00a0\u00a0\n# Split the element of the said array with spaces\nsparr = np.char.split(array)\nprint(sparr)", "nl": "How to split the element of a given NumPy array with spaces in Python"}
{"code": "# Python program explaining\n# numpy.size() method\n\n\n# importing numpy\nimport numpy as np\n\n\n# Making a random array\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\n\n# By default, give the total number of elements.\nprint(np.size(arr))", "nl": "Numpy size() function | Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Successive Characters Frequency\n# Using count() + loop + re.findall()\nimport re\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks is best for geeks. A geek should take interest.'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing word\u00a0\nque_word = \"geek\"\n\u00a0\u00a0\n# Successive Characters Frequency\n# Using count() + loop + re.findall()\ntemp = []\nfor sub in re.findall(que_word + '.', test_str):\n\u00a0\u00a0\u00a0\u00a0temp.append(sub[-1])\n\u00a0\u00a0\nres = {que_word : temp.count(que_word) for que_word in temp}\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Characters Frequency is : \" + str(res))", "nl": "Write a Python program to Successive Characters Frequency"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Right and Left Shift characters in String\n# Using String multiplication + string slicing\n\u00a0\u00a0\n# initializing string\ntest_str = 'geeksforgeeks'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# initializing right rot\u00a0\nr_rot = 7\n\u00a0\u00a0\n# initializing left rot\u00a0\nl_rot = 3\n\u00a0\u00a0\n# Right and Left Shift characters in String\n# Using String multiplication + string slicing\nres = (test_str * 3)[len(test_str) + r_rot - l_rot :\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02 * len(test_str) + r_rot - l_rot]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The string after rotation is : \" + str(res))\u00a0", "nl": "Write a Python program to Right and Left Shift characters in String"}
{"code": "# A complete working Python program to demonstrate all\u00a0\n# stack operations using a doubly linked list\u00a0\n\u00a0\u00a0\n# Node class\u00a0\nclass Node:\n\u00a0\u00a0\n# Function to initialise the node object\n\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data # Assign data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None # Initialize next as null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.prev = None # Initialize prev as null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Stack class contains a Node object\nclass Stack:\n\u00a0\u00a0\u00a0\u00a0# Function to initialize head\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to add an element data in the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def push(self, data):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node = Node(data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.prev = new_node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.next = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node.prev = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = new_node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to pop top element and return the element from the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def pop(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif self.head.next is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head.data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head.data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = self.head.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.prev = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to return top element in the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def top(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.head.data\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to return the size of the stack\u00a0\n\u00a0\u00a0\u00a0\u00a0def size(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = temp.next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return count\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Function to check if the stack is empty or not\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def isEmpty(self):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Function to print the stack\n\u00a0\u00a0\u00a0\u00a0def printstack(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"stack elements are:\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while temp is not None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(temp.data, end =\"->\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = temp.next\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Code execution starts here\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nif __name__=='__main__':\u00a0\n\u00a0\u00a0\n# Start with the empty stack\n\u00a0\u00a0stack = Stack()\n\u00a0\u00a0\n# Insert 4 at the beginning. So stack becomes 4->None\u00a0\n\u00a0\u00a0print(\"Stack operations using Doubly LinkedList\")\n\u00a0\u00a0stack.push(4)\n\u00a0\u00a0\n# Insert 5 at the beginning. So stack becomes 4->5->None\u00a0\n\u00a0\u00a0stack.push(5)\n\u00a0\u00a0\n# Insert 6 at the beginning. So stack becomes 4->5->6->None\u00a0\n\u00a0\u00a0stack.push(6)\n\u00a0\u00a0\n# Insert 7 at the beginning. So stack becomes 4->5->6->7->None\u00a0\n\u00a0\u00a0stack.push(7)\n\u00a0\u00a0\n# Print the stack\n\u00a0\u00a0stack.printstack()\n\u00a0\u00a0\n# Print the top element\n\u00a0\u00a0print(\"\\nTop element is \", stack.top())\n\u00a0\u00a0\n# Print the stack size\n\u00a0\u00a0print(\"Size of the stack is \", stack.size())\n\u00a0\u00a0\n# pop the top element\n\u00a0\u00a0stack.pop()\n\u00a0\u00a0\n# pop the top element\n\u00a0\u00a0stack.pop()\n\u00a0\u00a0\u00a0\u00a0\n# two elements are popped\n# Print the stack\n\u00a0\u00a0stack.printstack()\n\u00a0\u00a0\u00a0\u00a0\n# Print True if the stack is empty else False\n\u00a0\u00a0print(\"\\nstack is empty:\", stack.isEmpty())\n\u00a0\u00a0\n#This code is added by Suparna Raut", "nl": "Write a Python program to Stack using Doubly Linked List"}
{"code": "# importing required librariess\nimport numpy as np\nfrom ast import literal_eval\n\u00a0\u00a0\n# creating class of string\nname_list = \"\"\"{\n\u00a0\u00a0\u00a0\"column0\": {\"First_Name\": \"Akash\",\n\u00a0\u00a0\u00a0\"Second_Name\": \"kumar\", \"Interest\": \"Coding\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\"column1\": {\"First_Name\": \"Ayush\",\n\u00a0\u00a0\u00a0\"Second_Name\": \"Sharma\", \"Interest\": \"Cricket\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\"column2\": {\"First_Name\": \"Diksha\",\n\u00a0\u00a0\u00a0\"Second_Name\": \"Sharma\",\"Interest\": \"Reading\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\"column3\": {\"First_Name\":\" Priyanka\",\n\u00a0\u00a0\u00a0\"Second_Name\": \"Kumari\", \"Interest\": \"Dancing\"}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0}\"\"\"\nprint(\"Type of name_list created:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type(name_list))\n\u00a0\u00a0\n# converting string type to dictionary\nt = literal_eval(name_list)\n\u00a0\u00a0\n# printing the original dictionary\nprint(\"\\nPrinting the original Name_list dictionary:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t)\n\u00a0\u00a0\nprint(\"Type of original dictionary:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type(t))\n\u00a0\u00a0\n# converting dictionary to numpy array\nresult_nparra = np.array([[v[j] for j in ['First_Name', 'Second_Name',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Interest']] for k, v in t.items()])\n\u00a0\u00a0\nprint(\"\\nConverted ndarray from the Original dictionary:\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result_nparra)\n\u00a0\u00a0\n# printing the type of converted array\nprint(\"Type:\\n\", type(result_nparra))", "nl": "Different ways to convert a Python dictionary to a NumPy array"}
{"code": "# Function to Check whether a given string is Heterogram or not\u00a0\n\u00a0\u00a0\ndef heterogram(input):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# separate out list of alphabets using list comprehension\n\u00a0\u00a0\u00a0\u00a0\u00a0# ord function returns ascii value of character\n\u00a0\u00a0\u00a0\u00a0\u00a0alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# convert list of alphabets into set and\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# compare lengths\n\u00a0\u00a0\u00a0\u00a0\u00a0if len(set(alphabets))==len(alphabets):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('Yes')\n\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('No')\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'the big dwarf only jumps'\n\u00a0\u00a0\u00a0\u00a0heterogram(input)", "nl": "Write a Python Set | Check whether a given string is Heterogram or not"}
{"code": "def no_of_argu(*args):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# using len() method in args to count\n\u00a0\u00a0\u00a0\u00a0return(len(args))\n\n\n\n\na = 1\nb = 3\n\n\n# arguments passed\nn = no_of_argu(1, 2, 4, a)\n\n\n# result printed\nprint(\" The number of arguments are: \", n)", "nl": "How to find the number of arguments in a Python function"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Last_Price':[1200, 1500, 1600, 352],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Updated_Price':[1250, 1450, 1550, 400],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Discount':[10, 10, 10, 10]})\n\u00a0\u00a0\n# Create the indexes\ndf.index =['Item 1', 'Item 2', 'Item 3', 'Item 4']\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Return the Index label if some condition is satisfied over a column in Pandas Dataframe in Python"}
{"code": "// C++ program to check if a string\u00a0\n// contains any special character\n\u00a0\u00a0\n// import required packages\n#include <iostream>\u00a0\n#include <regex>\u00a0\nusing namespace std;\u00a0\n\u00a0\u00a0\n// Function checks if the string\u00a0\n// contains any special character\nvoid run(string str)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Make own character set\u00a0\n\u00a0\u00a0\u00a0\u00a0regex regx(\"[@_!#$%^&*()<>?/|}{~:]\");\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Pass the string in regex_search\u00a0\n\u00a0\u00a0\u00a0\u00a0// method\n\u00a0\u00a0\u00a0\u00a0if(regex_search(str, regx) == 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"String is accepted\";\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"String is not accepted.\";\n}\u00a0\n\u00a0\u00a0\n// Driver Code\u00a0\nint main()\u00a0\n{\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Enter the string\u00a0\n\u00a0\u00a0\u00a0\u00a0string str = \"Geeks$For$Geeks\";\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Calling run function\n\u00a0\u00a0\u00a0\u00a0run(str);\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\u00a0\n}\n\u00a0\u00a0\n// This code is contributed by Yash_R", "nl": "Program to check if a string contains any special character in Python"}
{"code": "# import datetime module\nimport datetime\n\u00a0\u00a0\n# convert datetime to epoch using strftime from\n# time stamp 2021/7/7/1/2/1\n# for linux:\nepoch = datetime.datetime(2021, 7, 7, 1, 2, 1).strftime('%s')\n# for windows:\n# epoch = datetime.datetime(2021, 7,7 , 1,2,1).strftime('%S')\nprint(epoch)\n\u00a0\u00a0\n# convert datetime to epoch using strftime from\n# time stamp 2021/3/3/4/3/4\nepoch = datetime.datetime(2021, 3, 3, 4, 3, 4).strftime('%s')\nprint(epoch)\n\u00a0\u00a0\n# convert datetime to epoch using strftime from\n# time stamp 2021/7/7/12/12/34\nepoch = datetime.datetime(2021, 7, 7, 12, 12, 34).strftime('%s')\nprint(epoch)\n\u00a0\u00a0\n# convert datetime to epoch using strftime from\u00a0\n# time stamp 2021/7/7/12/56/00\nepoch = datetime.datetime(2021, 7, 7, 12, 56, 0).strftime('%s')\nprint(epoch)", "nl": "Convert Python datetime to epoch"}
{"code": "import requests\nfrom bs4 import BeautifulSoup", "nl": "How to get the Daily News using Python"}
{"code": "# create a set\ns = {'a', 'b', 'c', 'd'}\nprint(\"Initially\")\nprint(\"The datatype of s : \" + str(type(s)))\nprint(\"Contents of s : \", s)\n\u00a0\u00a0\n# convert Set to String\ns = str(s)\nprint(\"\\nAfter the conversion\")\nprint(\"The datatype of s : \" + str(type(s)))\nprint(\"Contents of s : \" + s)", "nl": "Convert Set to String in Python"}
{"code": "# Python program to print all\n# the possible combinations\n\u00a0\u00a0\ndef comb(L):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for k in range(3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check if the indexes are not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# same\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i!=j and j!=k and i!=k):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(L[i], L[j], L[k])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\ncomb([1, 2, 3])", "nl": "Write a Python Program to print all Possible Combinations from the three Digits"}
{"code": "# _importing module\nimport re\n\u00a0\u00a0\n\u00a0\u00a0\ndef check(str, pattern):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# _matching the strings\n\u00a0\u00a0\u00a0\u00a0if re.search(pattern, str):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Valid String\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Invalid String\")\n\u00a0\u00a0\n# _driver code\npattern = re.compile('^[1234]+$')\ncheck('2134', pattern)\ncheck('349', pattern)", "nl": "Write a Python program to Check if String Contain Only Defined Characters using Regex"}
{"code": "# Python code to get the maximum element from a set\ndef MAX(sets):\n\u00a0\u00a0\u00a0\u00a0return (max(sets))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nsets = set([8, 16, 24, 1, 25, 3, 10, 65, 55])\nprint(MAX(sets))", "nl": "Write a Python program to Maximum and Minimum in a Set"}
{"code": "from collections import OrderedDict\u00a0\n\u00a0\u00a0\n# Function to remove all duplicates from string\u00a0\n# and order does not matter\u00a0\ndef removeDupWithoutOrder(str):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# set() --> A Set is an unordered collection\u00a0\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data type that is iterable, mutable,\u00a0\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 and has no duplicate elements.\u00a0\n\u00a0\u00a0\u00a0\u00a0# \"\".join() --> It joins two adjacent elements in\u00a0\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 iterable with any symbol defined in\u00a0\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"\" ( double quotes ) and returns a\u00a0\n\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 single string\u00a0\n\u00a0\u00a0\u00a0\u00a0return \"\".join(set(str))\u00a0\n\u00a0\u00a0\n# Function to remove all duplicates from string\u00a0\n# and keep the order of characters same\u00a0\ndef removeDupWithOrder(str):\u00a0\n\u00a0\u00a0\u00a0\u00a0return \"\".join(OrderedDict.fromkeys(str))\u00a0\n\u00a0\u00a0\n# Driver program\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0str = \"geeksforgeeks\"\n\u00a0\u00a0\u00a0\u00a0print (\"Without Order = \",removeDupWithoutOrder(str))\u00a0\n\u00a0\u00a0\u00a0\u00a0print (\"With Order = \",removeDupWithOrder(str))\u00a0", "nl": "Remove all duplicates from a given string in Python"}
{"code": "# Recursive Python Program for merge sort\n\u00a0\u00a0\ndef merge(left, right):\n\u00a0\u00a0\u00a0\u00a0if not len(left) or not len(right):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return left or right\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0result = []\n\u00a0\u00a0\u00a0\u00a0i, j = 0, 0\n\u00a0\u00a0\u00a0\u00a0while (len(result) < len(left) + len(right)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if left[i] < right[j]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.append(left[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i+= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.append(right[j])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0j+= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == len(left) or j == len(right):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.extend(left[i:] or right[j:])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return result\n\u00a0\u00a0\ndef mergesort(list):\n\u00a0\u00a0\u00a0\u00a0if len(list) < 2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return list\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0middle = len(list)/2\n\u00a0\u00a0\u00a0\u00a0left = mergesort(list[:middle])\n\u00a0\u00a0\u00a0\u00a0right = mergesort(list[middle:])\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return merge(left, right)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nseq = [12, 11, 13, 5, 6, 7]\nprint(\"Given array is\")\nprint(seq);\u00a0\nprint(\"\\n\")\nprint(\"Sorted array is\")\nprint(mergesort(seq))\n\u00a0\u00a0\n# Code Contributed by Mohit Gupta_OMG\u00a0", "nl": "Write a Python Program for Iterative Merge Sort"}
{"code": "# importing the module\nimport numpy as np\n\u00a0\u00a0\n# created array of strings\narr = np.array(['Akash', 'Rohit', 'Ayush',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Dhruv', 'Radhika'], dtype = np.str)\nprint(\"Original Array :\")\nprint(arr)\n\u00a0\u00a0\n# with the help of np.char.multiply()\n# repeating the characters 3 times\nnew_array = np.char.multiply(arr, 3)\nprint(\"\\nNew array :\")\nprint(new_array)", "nl": "Repeat all the elements of a NumPy array of strings in Python"}
{"code": "# Python3 code to demonstrate working of\n# Reverse Kth rows in Matrix\n# Using reversed() + loop\n\u00a0\u00a0\n# initializing list\ntest_list = [[5, 3, 2], [8, 6, 3], [3, 5, 2],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3, 6], [3, 7, 4], [2, 9]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\nK = 3\n\u00a0\u00a0\nres = []\nfor idx, ele in enumerate(test_list):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for K multiple\n\u00a0\u00a0\u00a0\u00a0if (idx + 1) % K == 0:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# reversing using reversed\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(list(reversed(ele)))\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\n# printing result\nprint(\"After reversing every Kth row: \" + str(res))", "nl": "Write a Python Program to Reverse Every Kth row in a Matrix"}
{"code": "# importing necessary packages\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\u00a0\u00a0\n# for holding the resultant list\nelement_list = []\n\u00a0\u00a0\nfor page in range(1, 3, 1):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0page_url = \"https://webscraper.io/test-sites/e-commerce/static/computers/laptops?page=\" + str(page)\n\u00a0\u00a0\u00a0\u00a0driver = webdriver.Chrome(ChromeDriverManager().install())\n\u00a0\u00a0\u00a0\u00a0driver.get(page_url)\n\u00a0\u00a0\u00a0\u00a0title = driver.find_elements_by_class_name(\"title\")\n\u00a0\u00a0\u00a0\u00a0price = driver.find_elements_by_class_name(\"price\")\n\u00a0\u00a0\u00a0\u00a0description = driver.find_elements_by_class_name(\"description\")\n\u00a0\u00a0\u00a0\u00a0rating = driver.find_elements_by_class_name(\"ratings\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(len(title)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0element_list.append([title[i].text, price[i].text, description[i].text, rating[i].text])\n\u00a0\u00a0\nprint(element_list)\n\u00a0\u00a0\n#closing the driver\ndriver.close()", "nl": "How to scrape multiple pages using Selenium in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Order Tuples by List\n# Using dict() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [('Gfg', 3), ('best', 9), ('CS', 10), ('Geeks', 2)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing order list\u00a0\nord_list = ['Geeks', 'best', 'CS', 'Gfg']\n\u00a0\u00a0\n# Order Tuples by List\n# Using dict() + list comprehension\ntemp = dict(test_list)\nres = [(key, temp[key]) for key in ord_list]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The ordered tuple list : \" + str(res))\u00a0", "nl": "Write a Python program to Order Tuples by List"}
{"code": "# Python3 code to demonstrate working of\n# Random Matrix Element\n# Using chain.from_iterables() + random.choice()\nfrom itertools import chain\nimport random\n\u00a0\u00a0\n# initializing list\ntest_list = [[4, 5, 5], [2, 7, 4], [8, 6, 3]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# choice() for random number, from_iterables for flattening\nres = random.choice(list(chain.from_iterable(test_list)))\n\u00a0\u00a0\n# printing result\nprint(\"Random number from Matrix : \" + str(res))", "nl": "Write a Python program to select Random value form list of lists"}
{"code": "# Python program to check\n# if a string is binary or not\n\n\n# function for checking the\n# string is accepted or not\ndef check(string) :\n\n\n\u00a0\u00a0\u00a0\u00a0# set function convert string\n\u00a0\u00a0\u00a0\u00a0# into set of characters .\n\u00a0\u00a0\u00a0\u00a0p = set(string)\n\n\n\u00a0\u00a0\u00a0\u00a0# declare set of '0', '1' .\n\u00a0\u00a0\u00a0\u00a0s = {'0', '1'}\n\n\n\u00a0\u00a0\u00a0\u00a0# check set p is same as set s\n\u00a0\u00a0\u00a0\u00a0# or set p contains only '0'\n\u00a0\u00a0\u00a0\u00a0# or set p contains only '1'\n\u00a0\u00a0\u00a0\u00a0# or not, if any one condition\n\u00a0\u00a0\u00a0\u00a0# is true then string is accepted\n\u00a0\u00a0\u00a0\u00a0# otherwise not .\n\u00a0\u00a0\u00a0\u00a0if s == p or p == {'0'} or p == {'1'}:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yes\")\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"No\")\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# driver code\nif __name__ == \"__main__\" :\n\n\n\u00a0\u00a0\u00a0\u00a0string = \"101010000111\"\n\n\n\u00a0\u00a0\u00a0\u00a0# function calling\n\u00a0\u00a0\u00a0\u00a0check(string)", "nl": "Write a Python program to Check if a given string is binary string or not"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\na = np.zeros(11)\nprint(\"Before any change \")\nprint(a)\n\u00a0\u00a0\na[1] = 2\nprint(\"Before after first change \")\nprint(a)\n\u00a0\u00a0\na.flags.writeable = False\nprint(\"After making array immutable on attempting\u00a0 second change \")\na[1] = 7", "nl": "How to make a NumPy array read-only in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Lists of List to Dictionary\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Convert Lists of List to Dictionary\n# Using loop\nres = dict()\nfor sub in test_list:\n\u00a0\u00a0\u00a0\u00a0res[tuple(sub[:2])] = tuple(sub[2:])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The mapped Dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to Convert Lists of List to Dictionary"}
{"code": "# Import pandas package\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Define a dictionary containing employee data\u00a0\ndata = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[27, 24, 22, 32],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Qualification':['Msc', 'MA', 'MCA', 'Phd']}\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# Convert the dictionary into DataFrame\u00a0\u00a0\ndf = pd.DataFrame(data)\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# select three rows and two columns\u00a0\nprint(df.loc[1:3, ['Name', 'Qualification']])", "nl": "Limited rows selection with given column in Pandas | Python"}
{"code": "# Print Pascal's Triangle in Python\nfrom math import factorial\n\n\n# input n\nn = 5\nfor i in range(n):\n\u00a0\u00a0\u00a0\u00a0for j in range(n-i+1):\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# for left spacing\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(end=\" \")\n\n\n\u00a0\u00a0\u00a0\u00a0for j in range(i+1):\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# nCr = n!/((n-r)!*r!)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(factorial(i)//(factorial(j)*factorial(i-j)), end=\" \")\n\n\n\u00a0\u00a0\u00a0\u00a0# for new line\n\u00a0\u00a0\u00a0\u00a0print()", "nl": "Write a Python program to print Pascal\u2019s Triangle"}
{"code": "import wikipedia\n\n\n\n\nwikipedia.summary(\"Python (programming language)\")", "nl": "How to Extract Wikipedia Data in Python"}
{"code": "# importing pandas\u00a0\nimport pandas as pd\n\u00a0\u00a0\n# Creating the dataframe with dict of lists\ndf = pd.DataFrame({'Name': ['Geeks', 'Peter', 'James', 'Jack', 'Lisa'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Team': ['Boston', 'Boston', 'Boston', 'Chele', 'Barse'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Position': ['PG', 'PG', 'UG', 'PG', 'UG'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Number': [3, 4, 7, 11, 5],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age': [33, 25, 34, 35, 28],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Height': ['6-2', '6-4', '5-9', '6-1', '5-8'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Weight': [89, 79, 113, 78, 84],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'College': ['MIT', 'MIT', 'MIT', 'Stanford', 'Stanford'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Salary': [99999, 99994, 89999, 78889, 87779]},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index =['ind1', 'ind2', 'ind3', 'ind4', 'ind5'])\nprint(df, \"\\n\")\n\u00a0\u00a0\nprint(\"Check PG values in Position column:\\n\")\ndf1 = df['Position'].str.contains(\"PG\")\nprint(df1)", "nl": "Get all rows in a Pandas DataFrame containing given substring in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Filter Strings\u00a0 combination of K substrings\n# Using permutations() + map() + join() + set() + loop\nfrom itertools import permutations\n\u00a0\u00a0\n# initializing list\ntest_list = [\"geeks4u\", \"allbest\", \"abcdef\"]\n\u00a0\u00a0\n# printing string\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing substring list\nsubstr_list = [\"s4u\", \"est\", \"al\", \"ge\", \"ek\", \"def\", \"lb\"]\n\u00a0\u00a0\n# initializing K\u00a0\nK = 3\n\u00a0\u00a0\n# getting all permutations\nperms = list(set(map(''.join, permutations(substr_list, r = K))))\n\u00a0\u00a0\n# using loop to check permutations with list\nres = []\nfor ele in perms:\n\u00a0\u00a0\u00a0\u00a0if ele in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\n# printing results\u00a0\nprint(\"Strings after joins : \" + str(res))", "nl": "Write a Python program to Filter Strings combination of K substrings"}
{"code": "from selenium import webdriver\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.webdriver.support.ui import WebDriverWait\u00a0\nimport time\nimport pandas as pd\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.keys import Keys\nimport csv", "nl": "Scrape and Save Table Data in CSV file using Selenium in Python"}
{"code": "// C++ program to print the pattern\u00a0\n// hollow square with plus inside it\n// window pattern\n#include <bits/stdc++.h>\nusing namespace std;\n\u00a0\u00a0\n// Function to print pattern n means\u00a0\n// number of rows which we want\nvoid window_pattern (int n)\n{\n\u00a0\u00a0\u00a0\u00a0int c, d;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// If n is odd then we will have\n\u00a0\u00a0\u00a0\u00a0// only one middle element\n\u00a0\u00a0\u00a0\u00a0if (n % 2 != 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c = (n / 2) + 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d = 0;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// If n is even then we will have two\n\u00a0\u00a0\u00a0\u00a0// values\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c = (n / 2) + 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d = n / 2 ;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for(int i = 1; i <= n; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int j = 1; j <= n; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// If i,j equals to corner row or\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// column then \"*\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 1 || j == 1 ||\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i == n || j == n)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"* \";\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// If i,j equals to the middle\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// row or column then\u00a0 \"*\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == c || j == c)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"* \";\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (i == d || j == d)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"* \";\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\u00a0 \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << '\\n';\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u00a0\u00a0\n// Driver Code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int n = 7;\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0window_pattern(n);\n\u00a0\u00a0\u00a0\u00a0return 0;\u00a0\u00a0\u00a0\n}\n\u00a0\u00a0\n// This code is contributed by himanshu77", "nl": "Program to print window pattern in Python"}
{"code": "# Function to rearrange positive and negative elements\ndef Rearrange(arr):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# First lambda expression returns list of negative numbers\n\u00a0\u00a0\u00a0\u00a0# in arr.\n\u00a0\u00a0\u00a0\u00a0# Second lambda expression returns list of positive numbers\n\u00a0\u00a0\u00a0\u00a0# in arr.\n\u00a0\u00a0\u00a0\u00a0return [x for x in arr if x < 0] + [x for x in arr if x >= 0]\n\u00a0\u00a0\n# Driver function\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0arr = [12, 11, -13, -5, 6, -7, 5, -3, -6]\n\u00a0\u00a0\u00a0\u00a0print (Rearrange(arr))", "nl": "Lambda expression in Python to rearrange positive and negative numbers"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Sort by Frequency of second element in Tuple List\n# Using sorted() + loop + defaultdict() + lambda\nfrom collections import defaultdict\n\u00a0\u00a0\n# initializing list\ntest_list = [(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# constructing mapping\nfreq_map = defaultdict(int)\nfor idx, val in test_list:\n\u00a0\u00a0\u00a0\u00a0freq_map[val] += 1\n\u00a0\u00a0\n# performing sort of result\u00a0\nres = sorted(test_list, key = lambda ele: freq_map[ele[1]], reverse = True)\n\u00a0\u00a0\n# printing results\nprint(\"Sorted List of tuples : \" + str(res))", "nl": "Write a Python program to Sort by Frequency of second element in Tuple List"}
{"code": "# Python program to count Even\n# and Odd numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, 21, 4, 45, 66, 93, 1]\n\u00a0\u00a0\neven_count, odd_count = 0, 0\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0even_count += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0odd_count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(\"Even numbers in the list: \", even_count)\nprint(\"Odd numbers in the list: \", odd_count)", "nl": "Write a Python program to count Even and Odd numbers in a List"}
{"code": "# Python3 code to demonstrate\u00a0\n# Test if List contains elements in Range\n# using loop\n\u00a0\u00a0\n# Initializing loop\u00a0\ntest_list = [4, 5, 6, 7, 3, 9]\n\u00a0\u00a0\n# printing original list\u00a0\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Initialization of range\u00a0\ni, j = 3, 10\n\u00a0\u00a0\n# Test if List contains elements in Range\n# using loop\nres = True\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0if ele < i or ele >= j :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = False\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"Does list contain all elements in range : \" + str(res))", "nl": "Write a Python program to Test if List contains elements in Range"}
{"code": "# importing pandas and numpy\nimport pandas as pd\nimport numpy as np\n\u00a0\u00a0\n# data of 2018 drivers world championship\ndict1 ={'Driver':['Hamilton', 'Vettel', 'Raikkonen',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Verstappen', 'Bottas', 'Ricciardo',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Hulkenberg', 'Perez', 'Magnussen',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sainz', 'Alonso', 'Ocon', 'Leclerc',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Grosjean', 'Gasly', 'Vandoorne',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Ericsson', 'Stroll', 'Hartley', 'Sirotkin'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Points':[408, 320, 251, 249, 247, 170, 69, 62, 56,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a053, 50, 49, 39, 37, 29, 12, 9, 6, 4, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[33, 31, 39, 21, 29, 29, 31, 28, 26, 24, 37,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a022, 21, 32, 22, 26, 28, 20, 29, 23]}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# creating dataframe using DataFrame constructor\ndf = pd.DataFrame(dict1)\nprint(df.head(10))", "nl": "Select row with maximum and minimum value in Pandas dataframe in Python"}
{"code": "// C++ program for\n// the above approach\n#include <bits/stdc++.h>\nusing namespace std;\n\n\nvoid sub_mat_even(int N)\n{\n\u00a0\u00a0// Counter to initialize\n\u00a0\u00a0// the values in 2-D array\n\u00a0\u00a0int K = 1;\n\u00a0\u00a0\u00a0\n\u00a0\u00a0// To create a 2-D array\n\u00a0\u00a0// from to 1 to N*2\n\u00a0\u00a0int A[N][N];\n\u00a0\u00a0\u00a0\n\u00a0\u00a0for(int i = 0; i < N; i++)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0for(int j = 0; j < N; j++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[i][j] = K;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0K++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\n\n\u00a0\u00a0// If found even we reverse\n\u00a0\u00a0// the alternate row elements\n\u00a0\u00a0// to get all diagonal elements\n\u00a0\u00a0// as all even or all odd\n\u00a0\u00a0if(N % 2 == 0)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0for(int i = 0; i < N; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(i % 2 == 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int s = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int l = N - 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Reverse the row\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(s < l)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swap(A[i][s],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[i][l]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\n\n\u00a0\u00a0// Print the formed array\n\u00a0\u00a0for(int i = 0; i < N; i++)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0for(int j = 0; j < N; j++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << A[i][j] << \" \";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0cout << endl;\n\u00a0\u00a0}\n}\n\n\n// Driver code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int N = 4;\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// Function call\n\u00a0\u00a0\u00a0\u00a0sub_mat_even(N);\n}\n\n\n// This code is contributed by mishrapriyanshu557", "nl": "Create an n x n square matrix, where all the sub-matrix have the sum of opposite corner elements as even in Python"}
{"code": "# Python code to replace, with . and vice-versa\ndef Replace(str1):\n\u00a0\u00a0\u00a0\u00a0maketrans = str1.maketrans\n\u00a0\u00a0\u00a0\u00a0final = str1.translate(maketrans(',.', '.,', ' '))\n\u00a0\u00a0\u00a0\u00a0return final.replace(',', \", \")\n\n\n\n\n# Driving Code\nstring = \"14, 625, 498.002\"\nprint(Replace(string))", "nl": "Write a Python program to Swap commas and dots in a String"}
{"code": "# Python3 code to demonstrate working of\n# Filter Range Length Tuples\n# Using list comprehension + len()\n\u00a0\u00a0\n# Initializing list\ntest_list = [(4, ), (5, 6), (2, 3, 5), (5, 6, 8, 2), (5, 9)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Initializing desired lengths\u00a0\ni, j = 2, 3\n\u00a0\u00a0\n# Filter Range Length Tuples\n# Using list comprehension + len()\nres = [sub for sub in test_list if len(sub) >= i and len(sub) <= j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\nprint(\"The tuple list after filtering range records : \" + str(res))", "nl": "Write a Python program to Filter Range Length Tuples"}
{"code": "# Import pandas package\nimport pandas as pd\n\u00a0\u00a0\u00a0\n# Define a dictionary containing ICC rankings\nrankings = {'test': ['India', 'South Africa', 'England',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'New Zealand', 'Australia'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'odi': ['England', 'India', 'New Zealand',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'South Africa', 'Pakistan'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0't20': ['Pakistan', 'India', 'Australia',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'England', 'New Zealand']}\n\u00a0\u00a0\u00a0\n# Convert the dictionary into DataFrame\nrankings_pd = pd.DataFrame(rankings)\n\u00a0\u00a0\u00a0\n# Before renaming the columns\nprint(rankings_pd)\n\u00a0\u00a0\u00a0\nrankings_pd.rename(columns = {'test':'TEST'}, inplace = True)\n\u00a0\u00a0\u00a0\n# After renaming the columns\nprint(\"\\nAfter modifying first column:\\n\", rankings_pd.columns)", "nl": "How to rename columns in Pandas DataFrame in Python"}
{"code": "# Python program to print positive Numbers in given range\n\u00a0\u00a0\nstart, end = -4, 19\n\u00a0\u00a0\n# iterating each number in list\nfor num in range(start, end + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num >= 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print all positive numbers in a range"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[6.4, 1.3; 12.7, 32.3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.round() method\ngeeks = gfg.round()\n\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(geeks)", "nl": "Write a Python program to Numpy matrix.round()"}
{"code": "# Python3 code to demonstrate working of\n# Elements frequency in Tuple\n# Using defaultdict()\nfrom collections import defaultdict\n\n\n# initializing tuple\ntest_tup = (4, 5, 4, 5, 6, 6, 5, 5, 4)\n\n\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\n\nres = defaultdict(int)\nfor ele in test_tup:\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# incrementing frequency\n\u00a0\u00a0\u00a0\u00a0res[ele] += 1\n\n\n# printing result\nprint(\"Tuple elements frequency is : \" + str(dict(res)))", "nl": "Write a Python program to Elements frequency in Tuple"}
{"code": "# importing pandas module\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\ndf.head(10)", "nl": "Get n-smallest values from a particular column in Pandas DataFrame in Python"}
{"code": "# Python3 code to demonstrate working of\n# Retain records with N occurrences of K\n# Using count() + list comprehension\n\n\n# initializing list\ntest_list = [(4, 5, 6, 4, 4), (4, 4, 3), (4, 4, 4), (3, 4, 9)]\n\n\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\n\n# initializing K\nK = 4\n\n\n# initializing N\nN = 3\n\n\n# Retain records with N occurrences of K\n# Using count() + list comprehension\nres = [ele for ele in test_list if ele.count(K) == N]\n\n\n# printing result\nprint(\"Filtered tuples : \" + str(res))", "nl": "Write a Python program to Retain records with N occurrences of K"}
{"code": "# Python program explaining\n# numpy.matlib.rand() function\n\u00a0\u00a0\n# importing matrix library from numpy\nimport numpy as geek\nimport numpy.matlib\n\u00a0\u00a0\n# desired 3 x 4 random output matrix\u00a0\nout_mat = geek.matlib.rand((3, 4))\u00a0\nprint (\"Output matrix : \", out_mat)\u00a0", "nl": "numpy matrix operations | rand() function in Python"}
{"code": "# importing pandas\nimport pandas as pd\n\u00a0\u00a0\n# List of nested dictionary initialization\nlist = [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Student\": [{\"Exam\": 90, \"Grade\": \"a\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"Exam\": 99, \"Grade\": \"b\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"Exam\": 97, \"Grade\": \"c\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name\": \"Paras Jain\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Student\": [{\"Exam\": 89, \"Grade\": \"a\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"Exam\": 80, \"Grade\": \"b\"}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name\": \"Chunky Pandey\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n\u00a0\u00a0\n#print(list)", "nl": "Write a Python program to Convert list of nested dictionary into Pandas dataframe"}
{"code": "# Python3 code to demonstrate working of\n# Swapping Hierarchy in Nested Dictionaries\n# Using loop + items()\n\n\n# initializing dictionary\ntest_dict = {'Gfg': { 'a' : [1, 3], 'b' : [3, 6], 'c' : [6, 7, 8]},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Best': { 'a' : [7, 9], 'b' : [5, 3, 2], 'd' : [0, 1, 0]}}\n\n\n# printing original dictionary\nprint(\"The original dictionary : \" + str(test_dict))\n\n\n# Swapping Hierarchy in Nested Dictionaries\n# Using loop + items()\nres = dict()\nfor key, val in test_dict.items():\n\u00a0\u00a0\u00a0\u00a0for key_in, val_in in val.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key_in not in res:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = dict()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = res[key_in]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp[key] = val_in\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[key_in] = temp\n\n\n# printing result\nprint(\"The rearranged dictionary : \" + str(res))", "nl": "Write a Python program to Swapping Hierarchy in Nested Dictionaries"}
{"code": "# Import the numpy package\nimport numpy as np\n\u00a0\u00a0\n# Create 3D-numpy array\n# of 4 rows and 4 columns\narr = np.arange(3 * 4 * 4).reshape(3, 4, 4)\n\u00a0\u00a0\nprint(\"Original 3d array:\\n\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr)\n\u00a0\u00a0\n# Create 2D diagonal array\ndiag_arr = np.diagonal(arr,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0axis1 = 1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0axis2 = 2)\n\u00a0\u00a0\nprint(\"2d diagonal array:\\n\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0diag_arr)", "nl": "How to get all 2D diagonals of a 3D NumPy array in Python"}
{"code": "# Function to find the size of largest subset\u00a0\n# of anagram words\nfrom collections import Counter\n\u00a0\u00a0\ndef maxAnagramSize(input):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# split input string separated by space\n\u00a0\u00a0\u00a0\u00a0input = input.split(\" \")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# sort each string in given list of strings\n\u00a0\u00a0\u00a0\u00a0for i in range(0,len(input)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input[i]=''.join(sorted(input[i]))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# now create dictionary using counter method\n\u00a0\u00a0\u00a0\u00a0# which will have strings as key and their\u00a0\n\u00a0\u00a0\u00a0\u00a0# frequencies as value\n\u00a0\u00a0\u00a0\u00a0freqDict = Counter(input)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# get maximum value of frequency\n\u00a0\u00a0\u00a0\u00a0print (max(freqDict.values()))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = 'ant magenta magnate tan gnamate'\n\u00a0\u00a0\u00a0\u00a0maxAnagramSize(input)", "nl": "Write a Python Counter to find the size of largest subset of anagram words"}
{"code": "# Python program to search all\n# anagrams of a pattern in a text\n\u00a0\u00a0\nMAX = 256\u00a0\n\u00a0\u00a0\n# This function returns true\n# if contents of arr1[] and arr2[]\n# are same, otherwise false.\ndef compare(arr1, arr2):\n\u00a0\u00a0\u00a0\u00a0for i in range(MAX):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if arr1[i] != arr2[i]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\u00a0\u00a0return True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# This function search for all\n# permutations of pat[] in txt[]\u00a0\u00a0\ndef search(pat, txt):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0M = len(pat)\n\u00a0\u00a0\u00a0\u00a0N = len(txt)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# countP[]:\u00a0 Store count of\n\u00a0\u00a0\u00a0\u00a0# all characters of pattern\n\u00a0\u00a0\u00a0\u00a0# countTW[]: Store count of\n\u00a0\u00a0\u00a0\u00a0# current window of text\n\u00a0\u00a0\u00a0\u00a0countP = [0]*MAX\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0countTW = [0]*MAX\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(M):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(countP[ord(pat[i]) ]) += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(countTW[ord(txt[i]) ]) += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Traverse through remaining\n\u00a0\u00a0\u00a0\u00a0# characters of pattern\n\u00a0\u00a0\u00a0\u00a0for i in range(M, N):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Compare counts of current\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# window of text with\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# counts of pattern[]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if compare(countP, countTW):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Found at Index\", (i-M))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Add current character to current window\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(countTW[ ord(txt[i]) ]) += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Remove the first character of previous window\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(countTW[ ord(txt[i-M]) ]) -= 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Check for the last window in text\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if compare(countP, countTW):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Found at Index\", N-M)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver program to test above function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\ntxt = \"BACDGABCDA\"\npat = \"ABCD\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nsearch(pat, txt)\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# This code is contributed\n# by Upendra Singh Bartwal", "nl": "Write a Python Program for Anagram Substring Search (Or Search for all permutations)"}
{"code": "# import required libraries\nfrom PIL import Image\nimport numpy as gfg\n\n\n# read an image\nimg = Image.open('geeksforgeeks.jpg')\n\n\n# convert image object into array\nimageToMatrice = gfg.asarray(img)\n\n\n# printing shape of image\nprint(imageToMatrice.shape)", "nl": "How to Convert an image to NumPy array and saveit to CSV file using Python"}
{"code": "class flashcard:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, word, meaning):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.word = word\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.meaning = meaning\n\u00a0\u00a0\u00a0\u00a0def __str__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#we will return a string\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.word+' ( '+self.meaning+' )'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nflash = []\nprint(\"welcome to flashcard application\")\n\u00a0\u00a0\n#the following loop will be repeated until\n#user stops to add the flashcards\nwhile(True):\n\u00a0\u00a0\u00a0\u00a0word = input(\"enter the name you want to add to flashcard : \")\n\u00a0\u00a0\u00a0\u00a0meaning = input(\"enter the meaning of the word : \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0flash.append(flashcard(word, meaning))\n\u00a0\u00a0\u00a0\u00a0option = int(input(\"enter 0 , if you want to add another flashcard : \"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if(option):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing all the flashcards\u00a0\nprint(\"\\nYour flashcards\")\nfor i in flash:\n\u00a0\u00a0\u00a0\u00a0print(\">\", i)", "nl": "Write a Python program to build flashcard using class in Python"}
{"code": "# Python3 code to demonstrate working of\n# Convert date range to N equal durations\n# Using loop\nimport datetime\n\u00a0\u00a0\n# initializing dates\ntest_date1 = datetime.datetime(1997, 1, 4)\ntest_date2 = datetime.datetime(1997, 1, 30)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing original dates\nprint(\"The original date 1 is : \" + str(test_date1))\nprint(\"The original date 2 is : \" + str(test_date2))\n\u00a0\u00a0\n# initializing N\nN = 7\n\u00a0\u00a0\ntemp = []\n\u00a0\u00a0\n# getting diff.\ndiff = ( test_date2 - test_date1) // N\nfor idx in range(0, N):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# computing new dates\n\u00a0\u00a0\u00a0\u00a0temp.append((test_date1 + idx * diff))\n\u00a0\u00a0\n# using strftime to convert to userfriendly\u00a0\n# format\nres = []\nfor sub in temp:\n\u00a0\u00a0res.append(sub.strftime(\"%Y/%m/%d %H:%M:%S\"))\n\u00a0\u00a0\n# printing result\nprint(\"N equal duration dates : \" + str(res))", "nl": "Write a Python program to Divide date range to N equal duration"}
{"code": "import pandas as pd\n\n\n# initialise data dictionary.\ndata_dict = {'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Gender': [\"Male\", \"Female\", \"Female\", \"Male\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Male\", \"Female\", \"Male\", \"Male\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Female\", \"Male\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age': [20, 21, 19, 18, 25, 26, 32, 41, 20, 19],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Annual Income(k$)': [10, 20, 30, 10, 25, 60, 70,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015, 21, 22],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Spending Score': [30, 50, 48, 84, 90, 65, 32, 46,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a012, 56]}\n\n\n# Create DataFrame\ndata = pd.DataFrame(data_dict)\n\n\n# Write to CSV file\ndata.to_csv(\"Customers.csv\")\n\n\n# Print the output.\nprint(data)", "nl": "How to create multiple CSV files from existing CSV file using Pandas  in Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# sample dataframe\ndf = pd.DataFrame({\n\u00a0\u00a0\u00a0\u00a0'A': [1, 2, 3, 4, 5],\n\u00a0\u00a0\u00a0\u00a0'B': ['a', 'b', 'c', 'd', 'e'],\n\u00a0\u00a0\u00a0\u00a0'C': [1.1, '1.0', '1.3', 2, 5] })\n\u00a0\u00a0\n# converting all columns to string type\ndf = df.astype(str)\nprint(df.dtypes)", "nl": "Change Data Type for one or more columns in Pandas Dataframe in Python"}
{"code": "# Python program to convert text\n# file to JSON\n\u00a0\u00a0\n\u00a0\u00a0\nimport json\n\u00a0\u00a0\n\u00a0\u00a0\n# the file to be converted to\u00a0\n# json format\nfilename = 'data.txt'\n\u00a0\u00a0\n# dictionary where the lines from\n# text will be stored\ndict1 = {}\n\u00a0\u00a0\n# creating dictionary\nwith open(filename) as fh:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for line in fh:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# reads each line and trims of extra the spaces\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and gives only the valid words\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command, description = line.strip().split(None, 1)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict1[command] = description.strip()\n\u00a0\u00a0\n# creating json file\n# the JSON file is named as test1\nout_file = open(\"test1.json\", \"w\")\njson.dump(dict1, out_file, indent = 4, sort_keys = False)\nout_file.close()", "nl": "Convert Text file to JSON in Python"}
{"code": "# importing module\nfrom pandas import *\n\n\n# reading CSV file\ndata = read_csv(\"company_sales_data.csv\")\n\n\n# converting column data to list\nmonth = data['month_number'].tolist()\nfc = data['facecream'].tolist()\nfw = data['facewash'].tolist()\ntp = data['toothpaste'].tolist()\nsh = data['shampoo'].tolist()\n\n\n# printing list data\nprint('Facecream:', fc)\nprint('Facewash:', fw)\nprint('Toothpaste:', tp)\nprint('Shampoo:', sh)", "nl": "Write a Python program to Read CSV Columns Into List"}
{"code": "# Python program to Search an Element\n# in a Circular Linked List\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Class to define node of the linked list\u00a0\u00a0\u00a0\u00a0\nclass Node:\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self,data):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nclass CircularLinkedList:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Declaring Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = Node(None);\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = Node(None);\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head.next = self.tail;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = self.head;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Adds new nodes to the Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def add(self,data):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Declares a new node to be added\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newNode = Node(data);\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Checks if the Circular\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Linked List is empty\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.head.data is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If list is empty then new node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# will be the first node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to be added in the Circular Linked List\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newNode.next = self.head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If a node is already present then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# tail of the last node will point to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# new node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# New node will become new tail\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail = newNode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# New Tail will point to the head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tail.next = self.head;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Function to search the element in the\u00a0\n\u00a0\u00a0\u00a0\u00a0# Circular Linked List\n\u00a0\u00a0\u00a0\u00a0def findNode(self,element):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Pointing the head to start the search\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = self.head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Declaring f = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = 0;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check if the list is empty or not\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(self.head == None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Empty list\");\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(True):\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Comparing the elements\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of each node to the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# element to be searched\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current.data ==\u00a0 element):\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the element is present\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# then incrementing f\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f += 1;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Jumping to next node\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = current.next;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = i + 1;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If we reach the head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# again then element is not\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# present in the list so\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# we will break the loop\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current == self.head):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Checking the value of f\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(f > 0):\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"element is present\");\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"element is not present\");\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating a Circular Linked List\n\u00a0\u00a0\u00a0\u00a0'''\n\u00a0\u00a0\u00a0\u00a0Circular Linked List we will be working on:\n\u00a0\u00a0\u00a0\u00a01 -> 2 -> 3 -> 4 -> 5 -> 6\n\u00a0\u00a0\u00a0\u00a0'''\n\u00a0\u00a0\u00a0\u00a0circularLinkedList = CircularLinkedList();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0#Adding nodes to the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(1);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(2);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(3);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(4);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(5);\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.add(6);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Searching for node 2 in the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.findNode(2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0#Searching for node in the list\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0circularLinkedList.findNode(7);", "nl": "Write a Python program to Search an Element in a Circular Linked List"}
{"code": "# importing datetime module\nfrom datetime import datetime\n\u00a0\u00a0\n# Getting today's date\ntodays_Date = datetime.now()\n\u00a0\u00a0\n# Get date into the isoformat\nisoformat_date = todays_Date.isoformat()\n\u00a0\u00a0\n# print the type of date\nprint(type(isoformat_date))\n\u00a0\u00a0\n# convert string date into datetime format\nresult = datetime.fromisoformat(isoformat_date)\nprint(type(result))", "nl": "Isoformat to datetime \u2013 Python"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Read the csv file and construct the\u00a0\n# dataframe\ndf = pd.read_csv('nba.csv')\n\u00a0\u00a0\n# Visualize the dataframe\nprint(df.head(15)\n\u00a0\u00a0\n# Print the shape of the dataframe\nprint(df.shape)", "nl": "Drop rows from the dataframe based on certain condition applied on a column in Python"}
{"code": "# Categorizing password as Strong or\u00a0\n# Weak in Python using Regex\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nimport re\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to categorize password\ndef password(v):\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# the password should not be a\n\u00a0\u00a0\u00a0\u00a0# newline or space\n\u00a0\u00a0\u00a0\u00a0if v == \"\\n\" or v == \" \":\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Password cannot be a newline or space!\"\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# the password length should be in\n\u00a0\u00a0\u00a0\u00a0# between 9 and 20\n\u00a0\u00a0\u00a0\u00a0if 9 <= len(v) <= 20:\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks for occurrence of a character\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# three or more times in a row\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if re.search(r'(.)\\1\\1', v):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Weak Password: Same character repeats three or more times in a row\"\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks for occurrence of same string\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pattern( minimum of two character length)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# repeating\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if re.search(r'(..)(.*?)\\1', v):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Weak password: Same string pattern repetition\"\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Strong Password!\"\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Password length must be 9-20 characters!\"\n\u00a0\u00a0\n# Main method\ndef main():\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Driver code\n\u00a0\u00a0\u00a0\u00a0print(password(\"Qggf!@ghf3\"))\n\u00a0\u00a0\u00a0\u00a0print(password(\"Gggksforgeeks\"))\n\u00a0\u00a0\u00a0\u00a0print(password(\"aaabnil1gu\"))\n\u00a0\u00a0\u00a0\u00a0print(password(\"Aasd!feasn\"))\n\u00a0\u00a0\u00a0\u00a0print(password(\"772*hd897\"))\n\u00a0\u00a0\u00a0\u00a0print(password(\" \"))\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0main()", "nl": "Categorize Password as Strong or Weak using Regex in Python"}
{"code": "# importing Pandas & numpy\nimport pandas as pd\nimport numpy as np\n\u00a0\u00a0\n# numpy array\ndata = np.array(['a', 'b', 'c', 'd', 'e'])\n\u00a0\u00a0\n# creating series\ns = pd.Series(data)\nprint(s)", "nl": "Create a Pandas Series from array in Python"}
{"code": "# Python program to Find the Number\u00a0\n# Occurring Odd Number of Times\n# using Lambda expression and reduce function\n\u00a0\u00a0\nfrom functools import reduce\n\u00a0\u00a0\ndef oddTimes(input):\n\u00a0\u00a0\u00a0\u00a0\u00a0# write lambda expression and apply\n\u00a0\u00a0\u00a0\u00a0\u00a0# reduce function over input list\n\u00a0\u00a0\u00a0\u00a0\u00a0# until single value is left\n\u00a0\u00a0\u00a0\u00a0\u00a0# expression reduces value of a ^ b into single value\n\u00a0\u00a0\u00a0\u00a0\u00a0# a starts from 0 and b from 1\n\u00a0\u00a0\u00a0\u00a0\u00a0# ((((((1 ^ 2)^3)^2)^3)^1)^3)\n\u00a0\u00a0\u00a0\u00a0\u00a0print (reduce(lambda a, b: a ^ b, input))\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = [1, 2, 3, 2, 3, 1, 3]\n\u00a0\u00a0\u00a0\u00a0oddTimes(input)", "nl": "Write a Python program to Find the Number Occurring Odd Number of Times using Lambda expression and reduce function"}
{"code": "# Function to print words which can be created\n# using given set of characters\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\ndef charCount(word):\n\u00a0\u00a0\u00a0\u00a0dict = {}\n\u00a0\u00a0\u00a0\u00a0for i in word:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[i] = dict.get(i, 0) + 1\n\u00a0\u00a0\u00a0\u00a0return dict\n\u00a0\u00a0\n\u00a0\u00a0\ndef possible_words(lwords, charSet):\n\u00a0\u00a0\u00a0\u00a0for word in lwords:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chars = charCount(word)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for key in chars:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key not in charSet:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if charSet.count(key) != chars[key]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if flag == 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(word)\n\u00a0\u00a0\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input = ['goo', 'bat', 'me', 'eat', 'goal', 'boy', 'run']\n\u00a0\u00a0\u00a0\u00a0charSet = ['e', 'o', 'b', 'a', 'm', 'g', 'l']\n\u00a0\u00a0\u00a0\u00a0possible_words(input, charSet)", "nl": "Possible Words using given characters in Python"}
{"code": "# Python3 code to demonstrate working of\n# Custom sorting in list of tuples\n# Using sorted() + lambda\n\u00a0\u00a0\n# Initializing list\ntest_list = [(7, 8), (5, 6), (7, 5), (10, 4), (10, 1)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Custom sorting in list of tuples\n# Using sorted() + lambda\nres = sorted(test_list, key = lambda sub: (-sub[0], sub[1]))\n\u00a0\u00a0\n# printing result\nprint(\"The tuple after custom sorting is : \" + str(res))", "nl": "Write a Python program to Custom sorting in list of tuples"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Skew Nested Tuple Summation\n# Using infinite loop\n\u00a0\u00a0\n# initializing tuple\ntest_tup = (5, (6, (1, (9, (10, None)))))\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\u00a0\u00a0\nres = 0\nwhile test_tup:\n\u00a0\u00a0\u00a0\u00a0res += test_tup[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# assigning inner tuple as original\n\u00a0\u00a0\u00a0\u00a0test_tup = test_tup[1]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Summation of 1st positions : \" + str(res))\u00a0", "nl": "Write a Python program to Skew Nested Tuple Summation"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Filter Tuples by Kth element from List\n# Using list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [(\"GFg\", 5, 9), (\"is\", 4, 3), (\"best\", 10, 29)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing check_list\ncheck_list = [4, 2, 8, 10]\n\u00a0\u00a0\n# initializing K\u00a0\nK = 1\n\u00a0\u00a0\n# checking for presence on Kth element in list\u00a0\n# one liner\u00a0\nres = [sub for sub in test_list if sub[K] in check_list]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The filtered tuples : \" + str(res))", "nl": "Write a Python program to Filter Tuples by Kth element from List"}
{"code": "# import required modules\nimport inspect\nimport collections\n\u00a0\u00a0\n# use signature()\nprint(inspect.signature(collections.Counter))", "nl": "How to get list of parameters name from a function in Python"}
{"code": "# Python program to clear a list\n# using clear() method\u00a0\n\u00a0\u00a0\n# Creating list\nGEEK = [6, 0, 4, 1]\nprint('GEEK before clear:', GEEK)\u00a0\n\u00a0\u00a0\n# Clearing list\u00a0\nGEEK.clear()\u00a0\nprint('GEEK after clear:', GEEK)\u00a0", "nl": "Different ways to clear a list in Python"}
{"code": "# importing re module\nimport re\n\u00a0\u00a0\n# initializing string\ntest_str = '<b>Gfg</b> is <b>Best</b>. I love <b>Reading CS</b> from it.'\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# initializing tag\ntag = \"b\"\n\u00a0\u00a0\n# regex to extract required strings\nreg_str = \"<\" + tag + \">(.*?)</\" + tag + \">\"\nres = re.findall(reg_str, test_str)\n\u00a0\u00a0\n# printing result\nprint(\"The Strings extracted : \" + str(res))", "nl": "Write a Python program to extract Strings between HTML Tags"}
{"code": "# Python 3 code to rename multiple image\n# files in a directory or folder\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nimport os\u00a0\u00a0\nfrom tkinter import messagebox\nimport cv2\nfrom tkinter import filedialog\nfrom tkinter import *\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nheight1 = 0\nwidth1 = 0\n\u00a0\u00a0\n# Function to select folder to rename images\ndef get_folder_path():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0root = Tk()\n\u00a0\u00a0\u00a0\u00a0root.withdraw()\n\u00a0\u00a0\u00a0\u00a0folder_selected = filedialog.askdirectory()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return folder_selected\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to rename multiple files\ndef submit():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0source = src_dir.get()\n\u00a0\u00a0\u00a0\u00a0src_dir.set(\"\")\n\u00a0\u00a0\u00a0\u00a0global width1\n\u00a0\u00a0\u00a0\u00a0global height1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0input_folder = get_folder_path()\n\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for img_file in os.listdir(input_folder):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file_name = os.path.splitext(img_file)[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0extension = os.path.splitext(img_file)[1]\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if extension == '.jpg':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0src = os.path.join(input_folder, img_file)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0img = cv2.imread(src)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0h, w, c = img.shape\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dst = source + '-' + str(i) + '-' + str(w) + \"x\" + str(h) + \".jpg\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dst = os.path.join(input_folder, dst)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# rename() function will rename all the files\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.rename(src, dst)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0messagebox.showinfo(\"Done\", \"All files renamed successfully !!\")\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\nif __name__ == '__main__':\n\u00a0\u00a0\u00a0\u00a0top = Tk()\n\u00a0\u00a0\u00a0\u00a0top.geometry(\"450x300\")\n\u00a0\u00a0\u00a0\u00a0top.title(\"Image Files Renamer\")\n\u00a0\u00a0\u00a0\u00a0top.configure(background =\"Dark grey\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For Input Label\n\u00a0\u00a0\u00a0\u00a0input_path = Label(top,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text =\"Enter Name to Rename files:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg =\"Dark grey\").place(x = 40, y = 60)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# For Input Textbox\n\u00a0\u00a0\u00a0\u00a0src_dir = StringVar()\n\u00a0\u00a0\u00a0\u00a0input_path_entry_area = Entry(top,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = src_dir,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width = 50).place(x = 40, y = 100)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# For submit button\n\u00a0\u00a0\u00a0\u00a0submit_button = Button(top,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text =\"Submit\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = submit).place(x = 200, y = 150)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0top.mainloop()", "nl": "Rename a folder of images using Tkinter in Python"}
{"code": "# Importing difflib\nimport difflib\n\u00a0\u00a0\nwith open('file1.txt') as file_1:\n\u00a0\u00a0\u00a0\u00a0file_1_text = file_1.readlines()\n\u00a0\u00a0\nwith open('file2.txt') as file_2:\n\u00a0\u00a0\u00a0\u00a0file_2_text = file_2.readlines()\n\u00a0\u00a0\n# Find and print the diff:\nfor line in difflib.unified_diff(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file_1_text, file_2_text, fromfile='file1.txt',\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tofile='file2.txt', lineterm=''):\n\u00a0\u00a0\u00a0\u00a0print(line)", "nl": "Compare two Files line by line in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[4, 1; 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.sort() method\ngfg.sort()\n\u00a0\u00a0\u00a0\nprint(gfg)", "nl": "Write a Python program to Numpy matrix.sort()"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Group Elements in Matrix\n# Using dictionary comprehension + loop\n\u00a0\u00a0\n# initializing list\ntest_list = [[5, 8], [2, 0], [5, 4], [2, 3], [7, 9]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing empty dictionary with default empty list\u00a0\nres = {idx[0]: [] for idx in test_list}\n\u00a0\u00a0\n# using loop for grouping\nfor idx in test_list:\n\u00a0\u00a0\u00a0\u00a0res[idx[0]].append(idx[1])\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The Grouped Matrix : \" + str(res))", "nl": "Write a Python program to Group Elements in Matrix"}
{"code": "import re\n\u00a0\u00a0\n# initializing string\ntest_str = \"[gfg,is],[best,for],[all,geeks]\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\nflat_1 = re.findall(r\"\\[(.+?)\\]\", test_str)\nres = [sub.split(\",\") for sub in flat_1]\n\u00a0\u00a0\n# printing result\nprint(\"The type of result : \" + str(type(res)))\nprint(\"Converted Matrix : \" + str(res))", "nl": "Write a Python Program to Convert String Matrix Representation to Matrix"}
{"code": "# Python3 program to get selected\n# value(s) from tkinter listbox\n\n\n# Import tkinter\nfrom tkinter import *\n\n\n# Create the root window\nroot = Tk()\nroot.geometry('180x200')\n\n\n# Create a listbox\nlistbox = Listbox(root, width=40, height=10, selectmode=MULTIPLE)\n\n\n# Inserting the listbox items\nlistbox.insert(1, \"Data Structure\")\nlistbox.insert(2, \"Algorithm\")\nlistbox.insert(3, \"Data Science\")\nlistbox.insert(4, \"Machine Learning\")\nlistbox.insert(5, \"Blockchain\")\n\n\n# Function for printing the\n# selected listbox value(s)\ndef selected_item():\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Traverse the tuple returned by\n\u00a0\u00a0\u00a0\u00a0# curselection method and print\n\u00a0\u00a0\u00a0\u00a0# corresponding value(s) in the listbox\n\u00a0\u00a0\u00a0\u00a0for i in listbox.curselection():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(listbox.get(i))\n\n\n# Create a button widget and\n# map the command parameter to\n# selected_item function\nbtn = Button(root, text='Print Selected', command=selected_item)\n\n\n# Placing the button and listbox\nbtn.pack(side='bottom')\nlistbox.pack()\n\n\nroot.mainloop()", "nl": "How to get selected value from listbox in tkinter in Python"}
{"code": "# Python3 code to demonstrate working of\n# Tuple modulo\n# using zip() + generator expression\n\u00a0\u00a0\n# initialize tuples\ntest_tup1 = (10, 4, 5, 6)\ntest_tup2 = (5, 6, 7, 5)\n\u00a0\u00a0\n# printing original tuples\nprint(\"The original tuple 1 : \" + str(test_tup1))\nprint(\"The original tuple 2 : \" + str(test_tup2))\n\u00a0\u00a0\n# Tuple modulo\n# using zip() + generator expression\nres = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n\u00a0\u00a0\n# printing result\nprint(\"The modulus tuple : \" + str(res))", "nl": "Write a Python program to Modulo of tuple elements"}
{"code": "import time\nimport os\n\u00a0\u00a0\n\u00a0\u00a0\n# Getting the path of the file\nf_path = \"/location/to/gfg.png\"\n\u00a0\u00a0\n# Obtaining the creation time (in seconds)\n# of the file/folder (datatype=int)\nt = os.path.getctime(f_path)\n\u00a0\u00a0\n# Converting the time to an epoch string\n# (the output timestamp string would\n# be recognizable by strptime() without\n# format quantifers)\nt_str = time.ctime(t)\n\u00a0\u00a0\n# Converting the string to a time object\nt_obj = time.strptime(t_str)\n\u00a0\u00a0\n# Transforming the time object to a timestamp\n# of ISO 8601 format\nform_t = time.strftime(\"%Y-%m-%d %H:%M:%S\", t_obj)\n\u00a0\u00a0\n# Since colon is an invalid character for a\n# Windows file name Replacing colon with a\n# similar looking symbol found in unicode\n# Modified Letter Colon \" \" (U+A789)\nform_t = form_t.replace(\":\", \"\ua789\")\n\u00a0\u00a0\n# Renaming the filename to its timestamp\nos.rename(\n\u00a0\u00a0\u00a0\u00a0f_path, os.path.split(f_path)[0] + '/' + form_t + os.path.splitext(f_path)[1])", "nl": "Write a Python Script to change name of a file to its timestamp"}
{"code": "# Python program to count Even\n# and Odd numbers in a List\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, 21, 4, 45, 66, 93, 1]\n\u00a0\u00a0\neven_count, odd_count = 0, 0\n\u00a0\u00a0\n# iterating each number in list\nfor num in list1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0even_count += 1\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0odd_count += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(\"Even numbers in the list: \", even_count)\nprint(\"Odd numbers in the list: \", odd_count)", "nl": "Write a Python program to count Even and Odd numbers in a List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Frequency of numbers in String\n# Using re.findall() + len()\nimport re\n\u00a0\u00a0\n# initializing string\ntest_str = \"geeks4feeks is No. 1 4 geeks\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Frequency of numbers in String\n# Using re.findall() + len()\nres = len(re.findall(r'\\d+', test_str))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Count of numerics in string : \" + str(res))\u00a0", "nl": "Write a Python program to Frequency of numbers in String"}
{"code": "# Python code to sorting list\u00a0\n# according to the column\n\u00a0\u00a0\n# sortarray function is defined\ndef sortarray(array):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for i in range(len(array[0])):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# sorting array in ascending\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# order specific to column i,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# here i is the column index\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sortedcolumn = sorted(array, key = lambda x:x[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# After sorting array Column 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorted array specific to column {}, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{}\".format(i, sortedcolumn))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\u00a0\nif __name__ == '__main__':\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# array of size 3 X 2\u00a0\n\u00a0\u00a0\u00a0\u00a0array = [['java', 1995], ['c++', 1983],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['python', 1989]]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# passing array in sortarray function\n\u00a0\u00a0\u00a0\u00a0sortarray(array)", "nl": "Write a Python Program to Sort the list according to the column using lambda"}
{"code": "# Reversing a list using reversed()\ndef Reverse(lst):\n\u00a0\u00a0\u00a0\u00a0return [ele for ele in reversed(lst)]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver Code\nlst = [10, 11, 12, 13, 14, 15]\nprint(Reverse(lst))", "nl": "Reversing a List in Python"}
{"code": "# Function to find winner of an election where votes\n# are represented as candidate names\nfrom collections import Counter\n\n\ndef winner(input):\n\n\n\u00a0\u00a0\u00a0\u00a0# convert list of candidates into dictionary\n\u00a0\u00a0\u00a0\u00a0# output will be likes candidates = {'A':2, 'B':4}\n\u00a0\u00a0\u00a0\u00a0votes = Counter(input)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# create another dictionary and it's key will\n\u00a0\u00a0\u00a0\u00a0# be count of votes values will be name of\n\u00a0\u00a0\u00a0\u00a0# candidates\n\u00a0\u00a0\u00a0\u00a0dict = {}\n\n\n\u00a0\u00a0\u00a0\u00a0for value in votes.values():\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initialize empty list to each key to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# insert candidate names having same\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# number of votes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[value] = []\n\n\n\u00a0\u00a0\u00a0\u00a0for (key,value) in votes.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[value].append(key)\n\n\n\u00a0\u00a0\u00a0\u00a0# sort keys in descending order to get maximum\n\u00a0\u00a0\u00a0\u00a0# value of votes\n\u00a0\u00a0\u00a0\u00a0maxVote = sorted(dict.keys(),reverse=True)[0]\n\n\n\u00a0\u00a0\u00a0\u00a0# check if more than 1 candidates have same\n\u00a0\u00a0\u00a0\u00a0# number of votes. If yes, then sort the list\n\u00a0\u00a0\u00a0\u00a0# first and print first element\n\u00a0\u00a0\u00a0\u00a0if len(dict[maxVote])>1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (sorted(dict[maxVote])[0])\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (dict[maxVote][0])\n\n\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0input =['john','johnny','jackie','johnny',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'john','jackie','jamie','jamie',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'john','johnny','jamie','johnny',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'john']\n\u00a0\u00a0\u00a0\u00a0winner(input)", "nl": "Dictionary and counter in Python to find winner of election"}
{"code": "# Function calling\ndef dictionairy():\n\u00a0# Declare hash function\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0key_value ={}\u00a0\u00a0\u00a0\n\n\n# Initializing value\n\u00a0key_value[2] = 56\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0key_value[1] = 2\n\u00a0key_value[5] = 12\n\u00a0key_value[4] = 24\n\u00a0key_value[6] = 18\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0key_value[3] = 323\n\n\n\u00a0print (\"Task 1:-\\n\")\n\u00a0print (\"Keys are\")\n\u00a0\u00a0\n\u00a0# iterkeys() returns an iterator over the\n\u00a0# dictionary\u2019s keys.\n\u00a0for i in sorted (key_value.keys()) :\n\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end = \" \")\n\n\ndef main():\n\u00a0\u00a0\u00a0\u00a0# function calling\n\u00a0\u00a0\u00a0\u00a0dictionairy()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Main function calling\nif __name__==\"__main__\":\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0main()", "nl": "Write a Python program to Sort Python Dictionaries by Key or Value"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# list\nlist1 = [3, 4, 5, 6]\nprint(type(list1))\nprint(list1)\nprint()\n\u00a0\u00a0\n# conversion\narray1 = np.asarray(list1)\nprint(type(array1))\nprint(array1)\nprint()\n\u00a0\u00a0\n# tuple\ntuple1 = ([8, 4, 6], [1, 2, 3])\nprint(type(tuple1))\nprint(tuple1)\nprint()\n\u00a0\u00a0\n# conversion\narray2 = np.asarray(tuple1)\nprint(type(array2))\nprint(array2)", "nl": "How to convert a list and tuple into NumPy arrays in Python"}
{"code": "# Python program to find largest\n# number in a list\n\u00a0\u00a0\n# list of numbers\nlist1 = [10, 20, 4, 45, 99]\n\u00a0\u00a0\n# sorting the list\nlist1.sort()\n\u00a0\u00a0\n# printing the last element\nprint(\"Largest element is:\", list1[-1])", "nl": "Write a Python program to find largest number in a list"}
{"code": "# Python3 code to demonstrate working of\n# Removing duplicates from tuple\u00a0\n# using tuple() + set()\n\u00a0\u00a0\n# initialize tuple\ntest_tup = (1, 3, 5, 2, 3, 5, 1, 1, 3)\n\u00a0\u00a0\n# printing original tuple\u00a0\nprint(\"The original tuple is : \" + str(test_tup))\n\u00a0\u00a0\n# Removing duplicates from tuple\u00a0\n# using tuple() + set()\nres = tuple(set(test_tup))\n\u00a0\u00a0\n# printing result\nprint(\"The tuple after removing duplicates : \" + str(res))", "nl": "Write a Python program to Removing duplicates from tuple"}
{"code": "# Python program to find the missing\u00a0\n# and additional elements\u00a0\n\u00a0\u00a0\n# examples of lists\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [4, 5, 6, 7, 8]\n\u00a0\u00a0\n# prints the missing and additional elements in list2\u00a0\nprint(\"Missing values in second list:\", (set(list1).difference(list2)))\nprint(\"Additional values in second list:\", (set(list2).difference(list1)))\n\u00a0\u00a0\n# prints the missing and additional elements in list1\nprint(\"Missing values in first list:\", (set(list2).difference(list1)))\nprint(\"Additional values in first list:\", (set(list1).difference(list2)))", "nl": "Write a Python program to Find missing and additional values in two lists"}
{"code": "# Import required modules\nfrom random import shuffle\n\u00a0\u00a0\n\u00a0\u00a0\n# Define a class to create\n# all type of cards\nclass Cards:\n\u00a0\u00a0\u00a0\u00a0global suites, values\n\u00a0\u00a0\u00a0\u00a0suites = ['Hearts', 'Diamonds', 'Clubs', 'Spades']\n\u00a0\u00a0\u00a0\u00a0values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\n\u00a0\u00a0\n# Define a class to categorize each card\nclass Deck(Cards):\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cards.__init__(self)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.mycardset = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for n in suites:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for c in values:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.mycardset.append((c)+\" \"+\"of\"+\" \"+n)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Method to remove a card from the deck\n\u00a0\u00a0\u00a0\u00a0def popCard(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(self.mycardset) == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"NO CARDS CAN BE POPPED FURTHER\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cardpopped = self.mycardset.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Card removed is\", cardpopped)\n\u00a0\u00a0\n\u00a0\u00a0\n# Define a class gto shuffle the deck of cards\nclass ShuffleCards(Deck):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Constructor\n\u00a0\u00a0\u00a0\u00a0def __init__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Deck.__init__(self)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Method to shuffle cards\n\u00a0\u00a0\u00a0\u00a0def shuffle(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(self.mycardset) < 52:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"cannot shuffle the cards\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle(self.mycardset)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.mycardset\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Method to remove a card from the deck\n\u00a0\u00a0\u00a0\u00a0def popCard(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(self.mycardset) == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"NO CARDS CAN BE POPPED FURTHER\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cardpopped = self.mycardset.pop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (cardpopped)\n\u00a0\u00a0\n\u00a0\u00a0\n# Driver Code\n# Creating objects\nobjCards = Cards()\nobjDeck = Deck()\n\u00a0\u00a0\n# Player 1\nplayer1Cards = objDeck.mycardset\nprint('\\n Player 1 Cards: \\n', player1Cards)\n\u00a0\u00a0\n# Creating object\nobjShuffleCards = ShuffleCards()\n\u00a0\u00a0\n# Player 2\nplayer2Cards = objShuffleCards.shuffle()\nprint('\\n Player 2 Cards: \\n', player2Cards)\n\u00a0\u00a0\n# Remove some cards\nprint('\\n Removing a card from the deck:', objShuffleCards.popCard())\nprint('\\n Removing another card from the deck:', objShuffleCards.popCard())", "nl": "Shuffle a deck of card with OOPS in Python"}
{"code": "from youtube_statistics import YTstats\n\u00a0\u00a0\n# paste the API key generated by you here\nAPI_KEY = \"AIzaSyA-0KfpLK04NpQN1XghxhSlzG-WkC3DHLs\"\n\u00a0\u00a0\n\u00a0# paste the channel id here\nchannel_id = \"UC0RhatS1pyxInC00YKjjBqQ\"\u00a0\n\u00a0\u00a0\nyt = YTstats(API_KEY, channel_id)\nyt.get_channel_statistics()\nyt.dump()", "nl": "How to extract youtube data in Python"}
{"code": "// C++ implementation of the approach\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n// Function that returns true\n// if string is a palindrome\nbool isPalindrome(string s)\n{\n\u00a0\u00a0\u00a0\u00a0int length = s.size();\n\n\n\u00a0\u00a0\u00a0\u00a0// Creating a Stack\n\u00a0\u00a0\u00a0\u00a0stack<char> st;\n\n\n\u00a0\u00a0\u00a0\u00a0// Finding the mid\n\u00a0\u00a0\u00a0\u00a0int i, mid = length / 2;\n\n\n\u00a0\u00a0\u00a0\u00a0for (i = 0; i < mid; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0st.push(s[i]);\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0// Checking if the length of the string\n\u00a0\u00a0\u00a0\u00a0// is odd, if odd then neglect the\n\u00a0\u00a0\u00a0\u00a0// middle character\n\u00a0\u00a0\u00a0\u00a0if (length % 2 != 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0char ele;\n\u00a0\u00a0\u00a0\u00a0// While not the end of the string\n\u00a0\u00a0\u00a0\u00a0while (s[i] != '\\0')\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ele = st.top();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0st.pop();\n\n\n\u00a0\u00a0\u00a0\u00a0// If the characters differ then the\n\u00a0\u00a0\u00a0\u00a0// given string is not a palindrome\n\u00a0\u00a0\u00a0\u00a0if (ele != s[i])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i++;\n\u00a0\u00a0\u00a0\u00a0}\n\n\nreturn true;\n}\n\n\n// Driver code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0string s = \"madam\";\n\n\n\u00a0\u00a0\u00a0\u00a0if (isPalindrome(s)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Yes\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"No\";\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n\n\n// This Code is Contributed by Harshit Srivastava", "nl": "Check whether the given string is Palindrome using Stack in Python"}
{"code": "# Python3 code to demonstrate working of\n# Maximum occurring Substring from list\n# Using regex() + groupby() + max() + lambda\nimport re\nimport itertools\n\n\n# initializing string\ntest_str = \"gfghsisbjknlmkesbestgfgsdcngfgcsdjnisdjnlbestdjsklgfgcdsbestbnjdsgfgdbhisbhsbestdkgfgb\"\ntest_list = ['gfg', 'is', 'best']\n\n\n# printing original string and list\nprint(\"The original string is : \" + test_str)\nprint(\"The original list is : \" + str(test_list))\n\n\n# Maximum occurring Substring from list\n# Using regex() + groupby() + max() + lambda\nseqs = re.findall(str.join('|', test_list), test_str)\ngrps = [(key, len(list(j))) for key, j in itertools.groupby(seqs)]\nres = max(grps, key = lambda ele : ele[1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\nprint(\"Maximum frequency substring : \" + str(res[0]))", "nl": "Write a Python program to Maximum occurring Substring from list"}
{"code": "def checkString(str):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# intializing flag variable\n\u00a0\u00a0\u00a0\u00a0flag_l = False\n\u00a0\u00a0\u00a0\u00a0flag_n = False\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking for letter and numbers in\u00a0\n\u00a0\u00a0\u00a0\u00a0# given string\n\u00a0\u00a0\u00a0\u00a0for i in str:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if string has letter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i.isalpha():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag_l = True\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if string has number\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i.isdigit():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag_n = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# returning and of flag\n\u00a0\u00a0\u00a0\u00a0# for checking required condition\n\u00a0\u00a0\u00a0\u00a0return flag_l and flag_n\n\u00a0\u00a0\n\u00a0\u00a0\n# driver code\nprint(checkString('thishasboth29'))\nprint(checkString('geeksforgeeks'))", "nl": "Write a Python program to check if a string has at least one letter and one number"}
{"code": "# Python3 code to count vowel in\u00a0\n# a string using set\n\u00a0\u00a0\n# Function to count vowel\ndef vowel_count(str):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Initializing count variable to 0\n\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Creating a set of vowels\n\u00a0\u00a0\u00a0\u00a0vowel = set(\"aeiouAEIOU\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Loop to traverse the alphabet\n\u00a0\u00a0\u00a0\u00a0# in the given string\n\u00a0\u00a0\u00a0\u00a0for alphabet in str:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If alphabet is present\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in set vowel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if alphabet in vowel:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print(\"No. of vowels :\", count)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\u00a0\nstr = \"GeeksforGeeks\"\n\u00a0\u00a0\n# Function Call\nvowel_count(str)", "nl": "Write a Python program to count number of vowels using sets in given string"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Matrix to Custom Tuple Matrix\n# Using zip() + loop\n\u00a0\u00a0\n# initializing lists\ntest_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing List elements\u00a0\nadd_list = ['Gfg', 'is', 'best']\n\u00a0\u00a0\n# Convert Matrix to Custom Tuple Matrix\n# Using zip() + loop\nres = []\nfor idx, ele in zip(add_list, test_list):\n\u00a0\u00a0\u00a0\u00a0for e in ele:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append((idx, e))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Matrix after conversion : \" + str(res))", "nl": "Write a Python program to Convert Matrix to Custom Tuple Matrix"}
{"code": "# Python 3 code to demonstrate\n# Duplication Removal List Product\n# using naive methods\n\n\n# getting Product\ndef prod(val) :\n\u00a0\u00a0\u00a0\u00a0res = 1\n\u00a0\u00a0\u00a0\u00a0for ele in val:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res *= ele\n\u00a0\u00a0\u00a0\u00a0return res\u00a0\n\n\n# initializing list\ntest_list = [1, 3, 5, 6, 3, 5, 6, 1]\nprint (\"The original list is : \" + str(test_list))\n\n\n# using naive method\n# Duplication Removal List Product\nres = []\nfor i in test_list:\n\u00a0\u00a0\u00a0\u00a0if i not in res:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(i)\nres = prod(res)\n\n\n# printing list after removal\nprint (\"Duplication removal list product : \" + str(res))", "nl": "Write a Python program to List product excluding duplicates"}
{"code": "# Python program to copy or clone a list\n# Using the Slice Operator\ndef Cloning(li1):\n\u00a0\u00a0\u00a0\u00a0li_copy = li1[:]\n\u00a0\u00a0\u00a0\u00a0return li_copy\n\u00a0\u00a0\n# Driver Code\nli1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)", "nl": "Write a Python program to Cloning or Copying a list"}
{"code": "# Importing required modules\nimport csv\nfrom datetime import datetime\n\u00a0\u00a0\n\u00a0\u00a0\n# Here we are storing our data in a\n# variable. We'll add this data in\n# our csv file\nrows = [['GeeksforGeeks1', 'GeeksforGeeks2'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['GeeksforGeeks3', 'GeeksforGeeks4'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['GeeksforGeeks5', 'GeeksforGeeks6']]\n\u00a0\u00a0\n# Opening the CSV file in read and\n# write mode using the open() module\nwith open(r'YOUR_CSV_FILE.csv', 'r+', newline='') as file:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# creating the csv writer\n\u00a0\u00a0\u00a0\u00a0file_write = csv.writer(file)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# storing current date and time\n\u00a0\u00a0\u00a0\u00a0current_date_time = datetime.now()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Iterating over all the data in the rows\u00a0\n\u00a0\u00a0\u00a0\u00a0# variable\n\u00a0\u00a0\u00a0\u00a0for val in rows:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Inserting the date and time at 0th\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# index\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val.insert(0, current_date_time)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# writing the data in csv file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file_write.writerow(val)", "nl": "How to add timestamp to CSV file in Python"}
{"code": "# creating variable to store the\n# number of words\nnumber_of_words = 0\n\u00a0\u00a0\n# Opening our text file in read only\n# mode using the open() function\nwith open(r'SampleFile.txt','r') as file:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Reading the content of the file\n\u00a0\u00a0\u00a0\u00a0# using the read() function and storing\n\u00a0\u00a0\u00a0\u00a0# them in a new variable\n\u00a0\u00a0\u00a0\u00a0data = file.read()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Splitting the data into seperate lines\n\u00a0\u00a0\u00a0\u00a0# using the split() function\n\u00a0\u00a0\u00a0\u00a0lines = data.split()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Adding the length of the\n\u00a0\u00a0\u00a0\u00a0# lines in our number_of_words\n\u00a0\u00a0\u00a0\u00a0# variable\n\u00a0\u00a0\u00a0\u00a0number_of_words += len(lines)\n\u00a0\u00a0\n\u00a0\u00a0\n# Printing total number of words\nprint(number_of_words)", "nl": "Write a Python Program to Count Words in Text File"}
{"code": "# import necessary libraries\nimport pandas as pd\nimport numpy as np\n\u00a0\u00a0\n# create a dummy array\narr = np.arange(1,11).reshape(2,5)\n\u00a0\u00a0\n# display the array\nprint(arr)\n\u00a0\u00a0\n# convert array into dataframe\nDF = pd.DataFrame(arr)\n\u00a0\u00a0\n# save the dataframe as a csv file\nDF.to_csv(\"data1.csv\")", "nl": "Convert a NumPy array into a csv file in Python"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# Creating a 2X2 Numpy matrix\narray = np.ones((2, 2))\n\u00a0\u00a0\nprint(\"Original array\")\nprint(array)\n\u00a0\u00a0\nprint(\"\\n0 on the border and 1 inside the array\")\n\u00a0\u00a0\n# constructing border of 0 around 2D identity matrix\n# using np.pad()\narray = np.pad(array, pad_width=1, mode='constant',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0constant_values=0)\n\u00a0\u00a0\nprint(array)", "nl": "How to add a border around a NumPy array in Python"}
{"code": "# Python code to demonstrate\n# filtering integers from numpy array\n# containing integers and float\n\n\nimport numpy as np\n\n\n# initialising array\nini_array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])\n\n\n# printing initial array\nprint (\"initial array : \", str(ini_array))\n\n\n# filtering integers\nresult = ini_array[ini_array != ini_array.astype(int)]\n\n\n# printing resultant\nprint (\"final array\", result)", "nl": "Write a Python program to Filter out integers from float numpy array"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Remove Tuples of Length K\n# Using list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = 1\n\u00a0\u00a0\n# 1 liner to perform task\n# filter just lengths other than K\u00a0\n# len() used to compute length\nres = [ele for ele in test_list if len(ele) != K]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Filtered list : \" + str(res))", "nl": "Write a Python program to Remove Tuples of Length K"}
{"code": "# Python program to accept the strings\n# which contains all the vowels\n\n\n# Function for check if string\n# is accepted or not\ndef check(string) :\n\n\n\u00a0\u00a0\u00a0\u00a0string = string.lower()\n\n\n\u00a0\u00a0\u00a0\u00a0# set() function convert \"aeiou\"\n\u00a0\u00a0\u00a0\u00a0# string into set of characters\n\u00a0\u00a0\u00a0\u00a0# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}\n\u00a0\u00a0\u00a0\u00a0vowels = set(\"aeiou\")\n\n\n\u00a0\u00a0\u00a0\u00a0# set() function convert empty\n\u00a0\u00a0\u00a0\u00a0# dictionary into empty set\n\u00a0\u00a0\u00a0\u00a0s = set({})\n\n\n\u00a0\u00a0\u00a0\u00a0# looping through each\n\u00a0\u00a0\u00a0\u00a0# character of the string\n\u00a0\u00a0\u00a0\u00a0for char in string :\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Check for the character is present inside\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the vowels set or not. If present, then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# add into the set s by using add method\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char in vowels :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.add(char)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# check the length of set s equal to length\n\u00a0\u00a0\u00a0\u00a0# of vowels set or not. If equal, string is\u00a0\n\u00a0\u00a0\u00a0\u00a0# accepted otherwise not\n\u00a0\u00a0\u00a0\u00a0if len(s) == len(vowels) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Accepted\")\n\u00a0\u00a0\u00a0\u00a0else :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Not Accepted\")\n\n\n\n\n# Driver code\nif __name__ == \"__main__\" :\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0string = \"SEEquoiaL\"\n\n\n\u00a0\u00a0\u00a0\u00a0# calling function\n\u00a0\u00a0\u00a0\u00a0check(string)", "nl": "Write a Python program to Program to accept the strings which contains all vowels"}
{"code": "# Python program to demonstrate\n# that keywords cant be used as\n# identifiers\n\n\ndef calculate_sum(a, b):\n\u00a0\u00a0return a + b\n\n\nx = 2\ny = 5\nprint(calculate_sum(x,y))\n\n\n# def and if is a keyword, so\n# this would give invalid\n# syntax error\ndef = 12\u00a0\u00a0\nif = 2\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nprint(calculate_sum(def, if))", "nl": "What are the allowed characters in Python function names"}
{"code": "import numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\nmatrix= np.arange(1,9).reshape((3, 3))\n\u00a0\u00a0\n# Original matrix\nprint(matrix)\n\u00a0\u00a0\n# Number of rows and columns of the said matrix\nprint(matrix.shape)", "nl": "Find the number of rows and columns of a given matrix using NumPy in Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Group Sublists by another List\n# using loop + generator(yield)\n\u00a0\u00a0\n# helper function\ndef grp_ele(test_list1, test_list2):\n\u00a0\u00a0\u00a0\u00a0temp = []\n\u00a0\u00a0\u00a0\u00a0for i in test_list1:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i in test_list2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if temp:\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield temp\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield i\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.append(i)\n\u00a0\u00a0\u00a0\u00a0if temp:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield temp\n\u00a0\u00a0\n# Initializing lists\ntest_list1 = [8, 5, 9, 11, 3, 7]\ntest_list2 = [9, 11]\n\u00a0\u00a0\n# printing original lists\nprint(\"The original list 1 is : \" + str(test_list1))\nprint(\"The original list 2 is : \" + str(test_list2))\n\u00a0\u00a0\n# Group Sublists by another List\n# using loop + generator(yield)\nres = list(grp_ele(test_list1, test_list2))\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The Grouped list is : \" + str(res))", "nl": "Write a Python program to Group Sublists by another List"}
{"code": "import os, signal\n\u00a0\u00a0\ndef process():\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Ask user for the name of process\n\u00a0\u00a0\u00a0\u00a0name = input(\"Enter process Name: \")\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iterating through each instance of the process\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in os.popen(\"ps ax | grep \" + name + \" | grep -v grep\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fields = line.split()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# extracting Process ID from the output\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pid = fields[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# terminating process\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.kill(int(pid), signal.SIGKILL)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Process Successfully terminated\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Error Encountered while running script\")\n\u00a0\u00a0\nprocess()", "nl": "Kill a Process by name using Python"}
{"code": "# python 3 code to print inverted star\n# pattern\u00a0\n\u00a0\u00a0\n# n is the number of rows in which\n# star is going to be printed.\nn=11\n\u00a0\u00a0\n# i is going to be enabled to\n# range between n-i t 0 with a\n# decrement of 1 with each iteration.\n# and in print function, for each iteration,\n# \u201d \u201d is multiplied with n-i and \u2018*\u2019 is\n# multiplied with i to create correct\n# space before of the stars.\nfor i in range (n, 0, -1):\n\u00a0\u00a0\u00a0\u00a0print((n-i) * ' ' + i * '*')", "nl": "Write a Python program to Print an Inverted Star Pattern"}
{"code": "# importing Numpy package\u00a0\nimport numpy as np\n\u00a0\u00a0\nnum_1d = np.arange(5)\nprint(\"One dimensional array:\")\nprint(num_1d)\n\u00a0\u00a0\nnum_2d = np.arange(10).reshape(2,5)\nprint(\"\\nTwo dimensional array:\")\nprint(num_2d)\n\u00a0\u00a0\n# Combine 1-D and 2-D arrays and display\u00a0\n# their elements using numpy.nditer()\u00a0\nfor a, b in np.nditer([num_1d, num_2d]):\n\u00a0\u00a0\u00a0\u00a0print(\"%d:%d\" % (a, b),)", "nl": "Combining a one and a two-dimensional NumPy Array in Python"}
{"code": "# Python code to demonstrate\n# length of list\n# using naive method\n\u00a0\u00a0\n# Initializing list\u00a0\ntest_list = [ 1, 4, 5, 7, 8 ]\n\u00a0\u00a0\n# Printing test_list\nprint (\"The list is : \" + str(test_list))\n\u00a0\u00a0\n# Finding length of list\u00a0\n# using loop\n# Initializing counter\ncounter = 0\nfor i in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# incrementing counter\n\u00a0\u00a0\u00a0\u00a0counter = counter + 1\n\u00a0\u00a0\n# Printing length of list\u00a0\nprint (\"Length of list using naive method is : \" + str(counter))", "nl": "Write a Python program to Ways to find length of list"}
{"code": "# Python program to sort a string and return\n# its reverse string according to pattern string\n\u00a0\u00a0\n# This function will return the reverse of sorted string\n# according to the pattern\n\u00a0\u00a0\ndef sortbyPattern(pat, str):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0priority = list(pat)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Create a dictionary to store priority of each character\n\u00a0\u00a0\u00a0\u00a0myDict = { priority[i] : i for i in range(len(priority))}\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0str = list(str)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Pass lambda function as key in sort function\n\u00a0\u00a0\u00a0\u00a0str.sort( key = lambda ele : myDict[ele])\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Reverse the string using reverse()\n\u00a0\u00a0\u00a0\u00a0str.reverse()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0new_str = ''.join(str)\n\u00a0\u00a0\u00a0\u00a0return new_str\n\u00a0\u00a0\n\u00a0\u00a0\nif __name__=='__main__':\n\u00a0\u00a0\u00a0\u00a0pat = \"asbcklfdmegnot\"\n\u00a0\u00a0\u00a0\u00a0str =\u00a0 \"eksge\"\n\u00a0\u00a0\u00a0\u00a0new_str = sortbyPattern(pat, str)\n\u00a0\u00a0\u00a0\u00a0print(new_str)", "nl": "Write a Python program to Sorting string using order defined by another string"}
{"code": "# Python implementation of converting\n# a string into a dictionary\n\u00a0\u00a0\n# initialising string\u00a0\nstr = \" Jan = January; Feb = February; Mar = March\"\n\u00a0\u00a0\n# At first the string will be splitted\n# at the occurence of ';' to divide items\u00a0\n# for the dictionaryand then again splitting\u00a0\n# will be done at occurence of '=' which\n# generates key:value pair for each item\ndictionary = dict(subString.split(\"=\") for subString in str.split(\";\"))\n\u00a0\u00a0\n# printing the generated dictionary\nprint(dictionary)", "nl": "Ways to convert string to dictionary in Python"}
{"code": "# using kwargs\n# in functions\n\n\n\n\ndef printKwargs(**kwargs):\n\u00a0\u00a0\u00a0\u00a0print(kwargs)\n\n\n\n\n# driver code\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0printKwargs(Argument_1='gfg', Argument_2='GFG')", "nl": "Functions that accept variable length key value pair as arguments in Python"}
{"code": "# Lambda function with if but without else.\nsquare = lambda x : x*x if(x > 0)\n\n\nprint(square(6))", "nl": "Lambda with if but without else in Python"}
{"code": "# Python program to count the frequency of\n# elements in a list using a dictionary\n\n\ndef CountFrequency(my_list):\n\n\n\u00a0\u00a0\u00a0\u00a0# Creating an empty dictionary\n\u00a0\u00a0\u00a0\u00a0freq = {}\n\u00a0\u00a0\u00a0\u00a0for item in my_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (item in freq):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq[item] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq[item] = 1\n\n\n\u00a0\u00a0\u00a0\u00a0for key, value in freq.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"% d : % d\"%(key, value))\n\n\n# Driver function\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]\n\n\n\u00a0\u00a0\u00a0\u00a0CountFrequency(my_list)", "nl": "Counting the frequencies in a list using dictionary in Python"}
{"code": "print(sorted([1,26,3,9]))\n\u00a0\u00a0\nprint(sorted(\"Geeks foR gEEks\".split(), key=str.lower))", "nl": "Sorting objects of user defined class in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[4, 1, 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.tolist() method\ngeek = gfg.tolist()\n\u00a0\u00a0\u00a0\u00a0\nprint(geek)", "nl": "Write a Python program to Numpy matrix.tolist()"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Maximum record value key in dictionary\n# Using loop\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'gfg' : {'Manjeet' : 5, 'Himani' : 10},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is' : {'Manjeet' : 8, 'Himani' : 9},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'best' : {'Manjeet' : 10, 'Himani' : 15}}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# initializing search key\nkey = 'Himani'\n\u00a0\u00a0\n# Maximum record value key in dictionary\n# Using loop\nres = None\nres_max = 0\nfor sub in test_dict:\n\u00a0\u00a0\u00a0\u00a0if test_dict[sub][key] > res_max:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res_max = test_dict[sub][key]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = sub\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The required key is : \" + str(res))\u00a0", "nl": "Write a Python program to Maximum record value key in dictionary"}
{"code": "# importing Numpy package\nimport numpy as np\n\u00a0\u00a0\n# creating 2 numpy arrays\narray_1 = np.array([1, 2])\narray_2 = np.array([4, 6])\n\u00a0\u00a0\nprint(\"Array-1\")\nprint(array_1)\n\u00a0\u00a0\nprint(\"\\nArray-2\")\nprint(array_2)\n\u00a0\u00a0\n# combination of elements of array_1 and array_2\n# using numpy.meshgrid().T.reshape()\ncomb_array = np.array(np.meshgrid(array_1, array_2)).T.reshape(-1, 2)\n\u00a0\u00a0\nprint(\"\\nCombine array:\")\nprint(comb_array)", "nl": "How to build an array of all combinations of two NumPy arrays in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Tuple summation\n# Using list() + sum()\n\u00a0\u00a0\n# initializing tup\u00a0\ntest_tup = (7, 8, 9, 1, 10, 7)\u00a0\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\u00a0\n\u00a0\u00a0\n# Tuple elements inversions\n# Using list() + sum()\nres = sum(list(test_tup))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The summation of tuple elements are : \" + str(res))\u00a0", "nl": "Write a Python program to Sum of tuple elements"}
{"code": "# Function to return all anagrams together\u00a0\ndef allAnagram(input):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# empty dictionary which holds subsets\u00a0\n\u00a0\u00a0\u00a0\u00a0# of all anagrams together\u00a0\n\u00a0\u00a0\u00a0\u00a0dict = {}\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# traverse list of strings\u00a0\n\u00a0\u00a0\u00a0\u00a0for strVal in input:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# sorted(iterable) method accepts any\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iterable and rerturns list of items\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in ascending order\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key = ''.join(sorted(strVal))\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# now check if key exist in dictionary\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# or not. If yes then simply append the\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# strVal into the list of it's corresponding\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# key. If not then map empty list onto\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# key and then start appending values\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if key in dict.keys():\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[key].append(strVal)\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[key] = []\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dict[key].append(strVal)\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# traverse dictionary and concatenate values\u00a0\n\u00a0\u00a0\u00a0\u00a0# of keys together\u00a0\n\u00a0\u00a0\u00a0\u00a0output = \"\"\u00a0\n\u00a0\u00a0\u00a0\u00a0for key,value in dict.items():\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output = output + ' '.join(value) + ' '\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return output\u00a0\n\u00a0\u00a0\n# Driver function\u00a0\nif __name__ == \"__main__\":\u00a0\n\u00a0\u00a0\u00a0\u00a0input=['cat', 'dog', 'tac', 'god', 'act']\u00a0\n\u00a0\u00a0\u00a0\u00a0print (allAnagram(input))\u00a0", "nl": "Print anagrams together in Python using List and Dictionary"}
{"code": "# function to check if small string is\u00a0\n# there in big string\ndef check(string, sub_str):\n\u00a0\u00a0\u00a0\u00a0if (string.find(sub_str) == -1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"NO\")\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"YES\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# driver code\nstring = \"geeks for geeks\"\nsub_str =\"geek\"\ncheck(string, sub_str)", "nl": "Write a Python program to Check if a Substring is Present in a Given String"}
{"code": "import numpy as np\n\u00a0\u00a0\u00a0\n# We are creating an array contains n = 10 elements\n# for getting first 10 Fibonacci numbers\na = np.arange(1, 11)\nlengthA = len(a)\n\u00a0\u00a0\n# splitting of terms for easiness\nsqrtFive = np.sqrt(5)\nalpha = (1 + sqrtFive) / 2\nbeta = (1 - sqrtFive) / 2\n\u00a0\u00a0\n# Implementation of formula\n# np.rint is used for rounding off to integer\nFn = np.rint(((alpha ** a) - (beta ** a)) / (sqrtFive))\nprint(\"The first {} numbers of Fibonacci series are {} . \".format(lengthA, Fn))", "nl": "NumPy \u2013 Fibonacci Series using Binet Formula in Python"}
{"code": "# importing libraries\nimport sys\nimport math as mt\nt = 1\n# store prime to reduce overflow\nmod = 9007199254740881\n\n\nfor ___ in range(t):\n\n\n\u00a0\u00a0\u00a0\u00a0# string to check number of distinct substring\n\u00a0\u00a0\u00a0\u00a0s = 'abcd'\n\n\n\u00a0\u00a0\u00a0\u00a0# to store substrings\n\u00a0\u00a0\u00a0\u00a0l = []\n\n\n\u00a0\u00a0\u00a0\u00a0# to store hash values by Rabin Karp algorithm\n\u00a0\u00a0\u00a0\u00a0d = {}\n\n\n\u00a0\u00a0\u00a0\u00a0for i in range(len(s)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0suma = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pre = 0\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Number of input alphabets\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0D = 256\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(i, len(s)):\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calculate new hash value by adding next element\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pre = (pre*D+ord(s[j])) % mod\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store string length if non repeat\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if d.get(pre, -1) == -1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.append([i, j])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d[pre] = 1\n\n\n\u00a0\u00a0\u00a0\u00a0# resulting length\n\u00a0\u00a0\u00a0\u00a0print(len(l))\n\n\n\u00a0\u00a0\u00a0\u00a0# resulting distinct substrings\n\u00a0\u00a0\u00a0\u00a0for i in range(len(l)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(s[l[i][0]:l[i][1]+1], end=\" \")", "nl": "Count distinct substrings of a string using Rabin Karp algorithm in Python"}
{"code": "# Python program to check\u00a0\n# if two lists have at-least\u00a0\n# one element common\n# using traversal of list\n\u00a0\u00a0\ndef common_data(list1, list2):\n\u00a0\u00a0\u00a0\u00a0result = False\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# traverse in the 1st list\n\u00a0\u00a0\u00a0\u00a0for x in list1:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# traverse in the 2nd list\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for y in list2:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if one common\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x == y:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = True\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return result\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# driver code\na = [1, 2, 3, 4, 5]\nb = [5, 6, 7, 8, 9]\nprint(common_data(a, b))\n\u00a0\u00a0\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9]\nprint(common_data(a, b))", "nl": "Write a Python program to Check if two lists have at-least one element common"}
{"code": "# Python code to demonstrate string length\u00a0\n# using len\n\u00a0\u00a0\nstr = \"geeks\"\nprint(len(str))", "nl": "Find length of a string in python (4 ways)"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert List of Dictionaries to List of Lists\n# Using loop + enumerate()\n\u00a0\u00a0\n# initializing list\ntest_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Convert List of Dictionaries to List of Lists\n# Using loop + enumerate()\nres = []\nfor idx, sub in enumerate(test_list, start = 0):\n\u00a0\u00a0\u00a0\u00a0if idx == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(list(sub.keys()))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(list(sub.values()))\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(list(sub.values()))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The converted list : \" + str(res))\u00a0", "nl": "Write a Python program to Convert List of Dictionaries to List of Lists"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract Key's Value, if Key Present in List and Dictionary\n# Using all() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [\"Gfg\", \"is\", \"Good\", \"for\", \"Geeks\"]\n\u00a0\u00a0\n# initializing Dictionary\ntest_dict = {\"Gfg\" : 2, \"is\" : 4, \"Best\" : 6}\n\u00a0\u00a0\n# initializing K\u00a0\nK = \"Gfg\"\n\u00a0\u00a0\n# printing original list and Dictionary\nprint(\"The original list : \" + str(test_list))\nprint(\"The original Dictionary : \" + str(test_dict))\n\u00a0\u00a0\n# using all() to check for occurrence in list and dict\n# encapsulating list and dictionary keys in list\u00a0\nres = None\u00a0\nif all(K in sub for sub in [test_dict, test_list]):\n\u00a0\u00a0\u00a0\u00a0res = test_dict[K]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Extracted Value : \" + str(res))", "nl": "Write a Python program to Extract Key\u2019s Value, if Key Present in List and Dictionary"}
{"code": "# function to print the pattern\ndef pattern(n):\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# traverse through the elements\n\u00a0\u00a0\u00a0\u00a0# in n assuming it as a string\n\u00a0\u00a0\u00a0\u00a0for i in n:\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print | for every line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"|\", end = \"\")\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print i number of * s in\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# each line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\" * int(i))\n\u00a0\u00a0\n# get the input as string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nn = \"41325\"\npattern(n)", "nl": "Write a Python Program to print digit pattern"}
{"code": "# importing the modules\nimport numpy as np\n\u00a0\u00a0\n# creating the array\u00a0\narr = np.array([23, 12, 1, 3, 4, 5, 6])\nprint(\"The Original Array Content\")\nprint(arr)\n\u00a0\u00a0\n# value of k\nk = 4\n\u00a0\u00a0\n# sorting the array\narr1 = np.sort(arr)\n\u00a0\u00a0\n# k smallest number of array\nprint(k, \"smallest elements of the array\")\nprint(arr1[:k])", "nl": "Finding the k smallest values of a NumPy array in Python"}
{"code": "# Used to import the webdriver from selenium\nfrom selenium import webdriver\u00a0\nimport os\n\n\n# Get the path of chromedriver which you have install\n\n\ndef startBot(username, password, url):\n\u00a0\u00a0\u00a0\u00a0path = \"C:\\\\Users\\\\hp\\\\Downloads\\\\chromedriver\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# giving the path of chromedriver to selenium websriver\n\u00a0\u00a0\u00a0\u00a0driver = webdriver.Chrome(path)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# opening the website\u00a0 in chrome.\n\u00a0\u00a0\u00a0\u00a0driver.get(url)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find the id or name or class of\n\u00a0\u00a0\u00a0\u00a0# username by inspecting on username input\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"id/class/name of username\").send_keys(username)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# find the password by inspecting on password input\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_name(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"id/class/name of password\").send_keys(password)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# click on submit\n\u00a0\u00a0\u00a0\u00a0driver.find_element_by_css_selector(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"id/class/name/css selector of login button\").click()\n\n\n\n\n# Driver Code\n# Enter below your login credentials\nusername = \"Enter your username\"\npassword = \"Enter your password\"\n\n\n# URL of the login page of site\n# which you want to automate login.\nurl = \"Enter the URL of login page of website\"\n\n\n# Call the function\nstartBot(username, password, url)", "nl": "How to Build a Simple Auto-Login Bot with Python"}
{"code": "# define size n = even only\nn = 8\n\u00a0\u00a0\n# so this heart can be made n//2 part left,\n# n//2 part right, and one middle line\n# i.e; columns m = n + 1\nm = n+1\n\u00a0\u00a0\n# loops for upper part\nfor i in range(n//2-1):\n\u00a0\u00a0\u00a0\u00a0for j in range(m):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing stars to GFG upper line\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == n//2-2 and (j == 0 or j == m-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing stars to left upper\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif j <= m//2 and ((i+j == n//2-3 and j <= m//4) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or (j-i == m//2-n//2+3 and j > m//4)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing stars to right upper\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif j > m//2 and ((i+j == n//2-3+m//2 and j < 3*m//4) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or (j-i == m//2-n//2+3+m//2 and j >= 3*m//4)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"*\", end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" \", end=\" \")\n\u00a0\u00a0\u00a0\u00a0print()\n\u00a0\u00a0\n# loops for lower part\nfor i in range(n//2-1, n):\n\u00a0\u00a0\u00a0\u00a0for j in range(m):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing stars\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i-j == n//2-1) or (i+j == n-1+m//2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('*', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing GFG\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif i == n//2-1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j == m//2-1 or j == m//2+1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('G', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif j == m//2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('F', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(' ', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# condition for printing spaces\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(' ', end=\" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0print()", "nl": "Write a Python program to Print Heart Pattern"}
{"code": "# opening both the files in reading modes\nwith open(\"file1.txt\") as f1, open(\"file2.txt\") as f2:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# reading f1 contents\n\u00a0\u00a0line1 = f1.readline()\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# reading f2 contents\n\u00a0\u00a0line2 = f2.readline()\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# printing contents of f1 followed by f2\u00a0\n\u00a0\u00a0print(line1, line2)", "nl": "How to open two files together in Python"}
{"code": "# importing pandas module\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\nser = pd.Series(df['Name'])\nser.head(10)\n# or simply df['Name'].head(10)", "nl": "Access the elements of a Series in Pandas in Python"}
{"code": "# import the important module in python\nimport numpy as np\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# make matrix with numpy\ngfg = np.matrix('[64, 1; 12, 3]')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# applying matrix.min() method\ngeeks = gfg.min()\n\u00a0\u00a0\u00a0\u00a0\nprint(geeks)", "nl": "Write a Python program to Numpy matrix.min()"}
{"code": "# importing module\nimport collections\n\n\n# initialising a deque() of arbitary length\nlinked_lst = collections.deque()\n\n\n# filling deque() with elements\nlinked_lst.append('first')\nlinked_lst.append('second')\nlinked_lst.append('third')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# adding element at an arbitary position\nlinked_lst.insert(1, 'fourth')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# deleting the last element\nlinked_lst.pop()\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)\n\n\n# removing a specific element\nlinked_lst.remove('fourth')\n\n\nprint(\"elements in the linked_list:\")\nprint(linked_lst)", "nl": "Write a Python Library for Linked List"}
{"code": "# import pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# create Pandas Series with default index values\n# default index ranges is from 0 to len(list) - 1\nx = pd.Series(['Geeks', 'for', 'Geeks'])\n\u00a0\u00a0\n# print the Series\nprint(x)", "nl": "Creating a Pandas Series from Lists in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# All substrings Frequency in String\n# Using loop + list comprehension\n\u00a0\u00a0\n# initializing string\ntest_str = \"abababa\"\n\u00a0\u00a0\n# printing original string\nprint(\"The original string is : \" + str(test_str))\n\u00a0\u00a0\n# list comprehension to extract substrings\ntemp = [test_str[idx: j] for idx in range(len(test_str))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(idx + 1, len(test_str) + 1)]\n\u00a0\u00a0\n# loop to extract final result of frequencies\nres = {}\nfor idx in temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0if idx not in res.keys():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[idx] = 1\n\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[idx] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"Extracted frequency dictionary : \" + str(res))\u00a0", "nl": "Write a Python program to All substrings Frequency in String"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Join Tuples if similar initial element\n# Using loop\n\u00a0\u00a0\n# initializing list\ntest_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Join Tuples if similar initial element\n# Using loop\nres = []\nfor sub in test_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if res and res[-1][0] == sub[0]:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res[-1].extend(sub[1:])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append([ele for ele in sub])\u00a0\u00a0\u00a0\u00a0\u00a0\nres = list(map(tuple, res))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The extracted elements : \" + str(res))\u00a0", "nl": "Write a Python program to Join Tuples if similar initial element"}
{"code": "# Function to find pairs of complete strings\n# in two sets of strings\n\u00a0\u00a0\ndef completePair(set1,set2):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# consider all pairs of string from\n\u00a0\u00a0\u00a0\u00a0# set1 and set2\n\u00a0\u00a0\u00a0\u00a0count = 0\n\u00a0\u00a0\u00a0\u00a0for str1 in set1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for str2 in set2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = str1 + str2\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# push all alphabets of concatenated\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# string into temporary set\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tmpSet = set([ch for ch in result if (ord(ch)>=ord('a') and ord(ch)<=ord('z'))])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(tmpSet)==26:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\n\u00a0\u00a0\u00a0\u00a0print (count)\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0set1 = ['abcdefgh', 'geeksforgeeks','lmnopqrst', 'abc']\n\u00a0\u00a0\u00a0\u00a0set2 = ['ijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz','defghijklmnopqrstuvwxyz']\n\u00a0\u00a0\u00a0\u00a0completePair(set1,set2)", "nl": "Write a Python Set | Pairs of complete strings in two sets"}
{"code": "# Import Library\nfrom selenium import webdriver\nimport time\n\u00a0\u00a0\n# set webdriver path here it may vary\n# Its the location where you have downloaded the ChromeDriver\ndriver = webdriver.Chrome(executable_path=r\"C:\\\\chromedriver.exe\")\n\u00a0\u00a0\n# Get the target URL\ndriver.get('https://html.com/tags/button/')\n\u00a0\u00a0\n# Wait for 5 seconds to load the webpage completely\ntime.sleep(5)\n\u00a0\u00a0\n# Find the button using text\ndriver.find_element_by_xpath('//button[normalize-space()=\"Click me!\"]').click()\n\u00a0\u00a0\ntime.sleep(5)\n\u00a0\u00a0\n# Close the driver\ndriver.close()", "nl": "Write a Python Selenium \u2013 Find Button by text"}
{"code": "# Python code to demonstrate\n# checking of element existence\n# using loops and in\n\n\n# Initializing list\ntest_list = [ 1, 6, 3, 5, 3, 4 ]\n\n\nprint(\"Checking if 4 exists in list ( using loop ) : \")\n\n\n# Checking if 4 exists in list\n# using loop\nfor i in test_list:\n\u00a0\u00a0\u00a0\u00a0if(i == 4) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Element Exists\")\n\n\nprint(\"Checking if 4 exists in list ( using in ) : \")\n\n\n# Checking if 4 exists in list\n# using in\nif (4 in test_list):\n\u00a0\u00a0\u00a0\u00a0print (\"Element Exists\")", "nl": "Check if element exists in list in Python"}
{"code": "def square_matrix(square):\n\u00a0\u00a0\u00a0\u00a0\"\"\" This function will calculate the value x\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(i.e. blurred pixel value) for each 3 * 3 blur image.\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0tot_sum = 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Calculate sum of all the pixels in 3 * 3 matrix\n\u00a0\u00a0\u00a0\u00a0for i in range(3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tot_sum += square[i][j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return tot_sum // 9\u00a0\u00a0\u00a0\u00a0 # return the average of the sum of pixels\n\u00a0\u00a0\ndef boxBlur(image):\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0This function will calculate the blurred\u00a0\n\u00a0\u00a0\u00a0\u00a0image for given n * n image.\u00a0\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0square = []\u00a0\u00a0\u00a0\u00a0 # This will store the 3 * 3 matrix\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# which will be used to find its blurred pixel\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0square_row = [] # This will store one row of a 3 * 3 matrix and\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# will be appended in square\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0blur_row = []\u00a0\u00a0 # Here we will store the resulting blurred\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pixels possible in one row\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and will append this in the blur_img\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0blur_img = [] # This is the resulting blurred image\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# number of rows in the given image\n\u00a0\u00a0\u00a0\u00a0n_rows = len(image)\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# number of columns in the given image\n\u00a0\u00a0\u00a0\u00a0n_col = len(image[0])\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# rp is row pointer and cp is column pointer\n\u00a0\u00a0\u00a0\u00a0rp, cp = 0, 0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# This while loop will be used to\u00a0\n\u00a0\u00a0\u00a0\u00a0# calculate all the blurred pixel in the first row\u00a0\n\u00a0\u00a0\u00a0\u00a0while rp <= n_rows - 3:\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while cp <= n_col-3:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(rp, rp + 3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(cp, cp + 3):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# append all the pixels in a row of 3 * 3 matrix\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0square_row.append(image[i][j])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# append the row in the square i.e. 3 * 3 matrix\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0square.append(square_row)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0square_row = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calculate the blurred pixel for given 3 * 3 matrix\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# i.e. square and append it in blur_row\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blur_row.append(square_matrix(square))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0square = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# increase the column pointer\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cp = cp + 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# append the blur_row in blur_image\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blur_img.append(blur_row)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blur_row = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rp = rp + 1 # increase row pointer\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cp = 0 # start column pointer from 0 again\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Return the resulting pixel matrix\n\u00a0\u00a0\u00a0\u00a0return blur_img\n\u00a0\u00a0\n# Driver code\nimage = [[7, 4, 0, 1],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[5, 6, 2, 2],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[6, 10, 7, 8],\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 4, 2, 0]]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nprint(boxBlur(image))", "nl": "Box Blur Algorithm \u2013 With Python implementation"}
{"code": "# import library\nimport numpy as np\n\u00a0\u00a0\n# create 1d-array\nx = np.arange(5)\n\u00a0\u00a0\nprint(\"Original array:\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x)\n\u00a0\u00a0\n# apply true division\u00a0\n# on each array element\nrslt = np.true_divide(x, 4)\n\u00a0\u00a0\nprint(\"After the element-wise division:\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rslt)", "nl": "How to get element-wise true division of an array using Numpy in Python"}
{"code": "# Importing library\nimport numpy as np\n\u00a0\u00a0\n# Creating two 2X2 matrix\nmatrix1 = np.array([[1, 2], [0, 2]])\nmatrix2 = np.array([[0, 1], [3, 4]])\n\u00a0\u00a0\nprint(\"Original matrix:\")\nprint(matrix1)\nprint(matrix2)\n\u00a0\u00a0\n# Output\nresult = np.einsum(\"mk,kn\", matrix1, matrix2)\n\u00a0\u00a0\nprint(\"Einstein\u2019s summation convention of the two matrix:\")\nprint(result)", "nl": "Evaluate Einstein\u2019s summation convention of two multidimensional NumPy arrays in Python"}
{"code": "# Python program explaining\n# searchsorted() function\n\u00a0\u00a0\u00a0\nimport numpy as geek\n\u00a0\u00a0\n# input array\nin_arr = [2, 3, 4, 5, 6]\nprint (\"Input array : \", in_arr)\n\u00a0\u00a0\n# the number which we want to insert\nnum = 4\nprint(\"The number which we want to insert : \", num)\u00a0\n\u00a0\u00a0\u00a0\u00a0\nout_ind = geek.searchsorted(in_arr, num)\u00a0\nprint (\"Output indices to maintain sorted array : \", out_ind)", "nl": "numpy.searchsorted() in Python"}
{"code": "# Python code to merge dict using update() method\ndef Merge(dict1, dict2):\n\u00a0\u00a0\u00a0\u00a0return(dict2.update(dict1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\n# Driver code\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\n\n\n# This return None\nprint(Merge(dict1, dict2))\n\n\n# changes made in dict2\nprint(dict2)", "nl": "Write a Python program to Merging two Dictionaries"}
{"code": "class Node:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, val=None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.val = val\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = None\n\u00a0\u00a0\n\u00a0\u00a0\nclass LinkedList:\n\u00a0\u00a0\u00a0\u00a0def __init__(self, head=None):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.head = head\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0def __str__(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# defining a blank res variable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = \"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing ptr to head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = self.head\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# traversing and adding it to res\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ptr:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += str(ptr.val) + \", \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = ptr.next\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# removing trailing commas\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = res.strip(\", \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# chen checking if\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# anything is present in res or not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(res):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"[\" + res + \"]\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"[]\"\n\u00a0\u00a0\n\u00a0\u00a0\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# defining linked list\n\u00a0\u00a0\u00a0\u00a0ll = LinkedList()\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# defining nodes\n\u00a0\u00a0\u00a0\u00a0node1 = Node(10)\n\u00a0\u00a0\u00a0\u00a0node2 = Node(15)\n\u00a0\u00a0\u00a0\u00a0node3 = Node(20)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# connecting the nodes\n\u00a0\u00a0\u00a0\u00a0ll.head = node1\n\u00a0\u00a0\u00a0\u00a0node1.next = node2\n\u00a0\u00a0\u00a0\u00a0node2.next = node3\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# when print is called, by default\u00a0\n\u00a0\u00a0\u00a0\u00a0#it calls the __str__ method\n\u00a0\u00a0\u00a0\u00a0print(ll)", "nl": "Pretty print Linked List in Python"}
{"code": "# Python Program illustrating\u00a0\n# numpy.var() method\u00a0\nimport numpy as np\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# 1D array\u00a0\narr = [20, 2, 7, 1, 34]\u00a0\n\u00a0\u00a0\nprint(\"arr : \", arr)\u00a0\nprint(\"var of arr : \", np.var(arr))\u00a0\n\u00a0\u00a0\nprint(\"\\nvar of arr : \", np.var(arr, dtype = np.float32))\u00a0\nprint(\"\\nvar of arr : \", np.var(arr, dtype = np.float64))\u00a0", "nl": "numpy.var() in Python"}
{"code": "# Python3 code to illustrate the addition\n# of time onto the datetime object\n\u00a0\u00a0\n# Importing datetime\nimport datetime\n\u00a0\u00a0\n# Initializing a date and time\ndate_and_time = datetime.datetime(2021, 8, 22, 11, 2, 5)\n\u00a0\u00a0\nprint(\"Original time:\")\nprint(date_and_time)\n\u00a0\u00a0\n# Calling the timedelta() function\u00a0\ntime_change = datetime.timedelta(minutes=75)\nnew_time = date_and_time + time_change\n\u00a0\u00a0\n# Printing the new datetime object\nprint(\"changed time:\")\nprint(new_time)", "nl": "How to add time onto a DateTime object in Python"}
{"code": "# Python program to convert\n# JSON file to CSV\n\n\n\n\nimport json\nimport csv\n\n\n\n\n# Opening JSON file and loading the data\n# into the variable data\nwith open('data.json') as json_file:\n\u00a0\u00a0\u00a0\u00a0data = json.load(json_file)\n\n\nemployee_data = data['emp_details']\n\n\n# now we will open a file for writing\ndata_file = open('data_file.csv', 'w')\n\n\n# create the csv writer object\ncsv_writer = csv.writer(data_file)\n\n\n# Counter variable used for writing\n# headers to the CSV file\ncount = 0\n\n\nfor emp in employee_data:\n\u00a0\u00a0\u00a0\u00a0if count == 0:\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Writing headers of CSV file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0header = emp.keys()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csv_writer.writerow(header)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1\n\n\n\u00a0\u00a0\u00a0\u00a0# Writing data of CSV file\n\u00a0\u00a0\u00a0\u00a0csv_writer.writerow(emp.values())\n\n\ndata_file.close()", "nl": "Convert JSON to CSV in Python"}
{"code": "# importing the module\nimport re\n\n\n# opening and reading the file\nwith open('C:/Users/user/Desktop/New Text Document.txt') as fh:\n\u00a0\u00a0\u00a0fstring = fh.readlines()\n\n\n# declaring the regex pattern for IP addresses\npattern = re.compile(r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})')\n\n\n# initializing the list object\nlst=[]\n\n\n# extracting the IP addresses\nfor line in fstring:\n\u00a0\u00a0\u00a0lst.append(pattern.search(line)[0])\n\n\n# displaying the extracted IP addresses\nprint(lst)", "nl": "Extract IP address from file using Python"}
{"code": "# Python3 code to demonstrate working of\n# Sort String by Custom Substrings\n# Using sorted() + zip() + lambda + regex()\nimport re\n\n\n# initializing list\ntest_list = [\"Good at 4\", \"Wake at 7\", \"Work till 6\", \"Sleep at 11\"]\n\n\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\n\n# initializing substring list\nsubord_list = [\"6\", \"7\", \"4\", \"11\"]\n\n\n\n\n# creating inverse mapping with index\ntemp_dict = {val: key for key, val in enumerate(subord_list)}\n\n\n# custom sorting\ntemp_list = sorted([[ele, temp_dict[re.search(\"(\\d+)$\", ele).group()]] \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ele in test_list], key = lambda x: x[1])\n# compiling result\nres = [ele for ele in list(zip(*temp_list))[0]]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\nprint(\"The sorted list : \" + str(res))", "nl": "Write a Python program to Sort String by Custom Integer Substrings"}
{"code": "# Python Program illustrating\u00a0\n# numpy.var() method\u00a0\nimport numpy as np\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# 1D array\u00a0\narr = [20, 2, 7, 1, 34]\u00a0\n\u00a0\u00a0\nprint(\"arr : \", arr)\u00a0\nprint(\"var of arr : \", np.var(arr))\u00a0\n\u00a0\u00a0\nprint(\"\\nvar of arr : \", np.var(arr, dtype = np.float32))\u00a0\nprint(\"\\nvar of arr : \", np.var(arr, dtype = np.float64))\u00a0", "nl": "numpy.var() in Python"}
{"code": "# Python program explaining\u00a0\n# loadtxt() function\nimport numpy as geek\n\u00a0\u00a0\n# StringIO behaves like a file object\nfrom io import StringIO\u00a0\u00a0\u00a0\n\u00a0\u00a0\nc = StringIO(\"0 1 2 \\n3 4 5\")\nd = geek.loadtxt(c)\n\u00a0\u00a0\nprint(d)", "nl": "numpy.loadtxt() in Python"}
{"code": "from selenium import webdriver\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.webdriver.support.ui import WebDriverWait\nimport time\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import ElementClickInterceptedException\nfrom selenium.common.exceptions import StaleElementReferenceException\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver import ActionChains\nimport getpass", "nl": "Retweet Tweet using Selenium in Python"}
{"code": "# Python program to demonstrate\n# lambda functions\n\u00a0\u00a0\n\u00a0\u00a0\nstring ='GeeksforGeeks'\n\u00a0\u00a0\n# lambda returns a function object\nprint(lambda string : string)", "nl": "Write a Python lambda"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Replace String by Kth Dictionary value\u00a0\u00a0\n# Using list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [\"Gfg\", \"is\", \"Best\"]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing subs. Dictionary\nsubs_dict = {\n\u00a0\u00a0\u00a0\u00a0\"Gfg\" : [5, 6, 7],\u00a0\n\u00a0\u00a0\u00a0\u00a0\"is\" : [7, 4, 2],\u00a0\n}\n\u00a0\u00a0\n# initializing K\u00a0\nK = 2\n\u00a0\u00a0\n# using list comprehension to solve\n# problem using one liner\nres = [ele if ele not in subs_dict else subs_dict[ele][K]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ele in test_list]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# printing result\u00a0\nprint(\"The list after substitution : \" + str(res))", "nl": "Write a Python program to Replace String by Kth Dictionary value"}
{"code": "# Python Program to find numbers divisible\u00a0\n# by thirteen from a list using anonymous\u00a0\n# function\n\u00a0\u00a0\n# Take a list of numbers.\u00a0\nmy_list = [12, 65, 54, 39, 102, 339, 221, 50, 70, ]\n\u00a0\u00a0\n# use anonymous function to filter and comparing\u00a0\n# if divisible or not\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\u00a0\n\u00a0\u00a0\n# printing the result\nprint(result)\u00a0", "nl": "Lambda and filter in Python Examples"}
{"code": "# importing pandas module\u00a0\nimport pandas as pd\u00a0\n\u00a0\u00a0\u00a0\u00a0\n# making data frame\u00a0\ndf = pd.read_csv(\"https://media.geeksforgeeks.org/wp-content/uploads/nba.csv\")\u00a0\n\u00a0\u00a0\ndf.head(10)", "nl": "Get n-largest values from a particular column in Pandas DataFrame in Python"}
{"code": "# Python3 code to demonstrate working of\n# Replace Different characters in String at Once\n# using join() + generator expression\n\n\n# initializing string\ntest_str = 'geeksforgeeks is best'\n\n\n# printing original String\nprint(\"The original string is : \" + str(test_str))\n\n\n# initializing mapping dictionary\nmap_dict = {'e':'1', 'b':'6', 'i':'4'}\n\n\n# generator expression to construct vals\n# join to get string\nres = ''.join(idx if idx not in map_dict else map_dict[idx] for idx in test_str)\n\n\n# printing result\nprint(\"The converted string : \" + str(res))", "nl": "Write a Python program to Replace Different characters in String at Once"}
{"code": "# Python3 code to demonstrate working of\n# Replace all Characters Except K\n# Using list comprehension and conditional expressions\n\u00a0\u00a0\n# initializing lists\ntest_list = ['G', 'F', 'G', 'I', 'S', 'B', 'E', 'S', 'T']\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# initializing repl_chr\nrepl_chr = '$'\n\u00a0\u00a0\n# initializing retain chararter\nret_chr = 'G'\n\u00a0\u00a0\n# list comprehension to remake list after replacement\nres = [ele if ele == ret_chr else repl_chr for ele in test_list]\n\u00a0\u00a0\n# printing result\nprint(\"List after replacement : \" + str(res))", "nl": "Write a Python program to Replace all Characters of a List Except the given character"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Group Similar items to Dictionary Values List\n# Using defaultdict + loop\nfrom collections import defaultdict\n\u00a0\u00a0\n# initializing list\ntest_list = [4, 6, 6, 4, 2, 2, 4, 4, 8, 5, 8]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# using defaultdict for default list\u00a0\nres = defaultdict(list)\nfor ele in test_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# appending Similar values\n\u00a0\u00a0\u00a0\u00a0res[ele].append(ele)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Similar grouped dictionary : \" + str(dict(res)))", "nl": "Write a Python program to Group Similar items to Dictionary Values List"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract values of Particular Key in Nested Values\n# Using list comprehension\n\u00a0\u00a0\n# initializing dictionary\ntest_dict = {'Gfg' : {\"a\" : 7, \"b\" : 9, \"c\" : 12},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is' : {\"a\" : 15, \"b\" : 19, \"c\" : 20},\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'best' :{\"a\" : 5, \"b\" : 10, \"c\" : 2}}\n\u00a0\u00a0\n# printing original dictionary\nprint(\"The original dictionary is : \" + str(test_dict))\n\u00a0\u00a0\n# initializing key\ntemp = \"c\"\n\u00a0\u00a0\n# using item() to extract key value pair as whole\nres = [val[temp] for key, val in test_dict.items() if temp in val]\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The extracted values : \" + str(res))\u00a0", "nl": "Write a Python program to Extract values of Particular Key in Nested Values"}
{"code": "import pandas as pd\nfrom datetime import datetime\nimport numpy as np\n\n\nrange_date = pd.date_range(start ='1/1/2019', end ='1/08/2019',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq ='Min')\nprint(range_date)", "nl": "Pandas | Basic of Time Series Manipulation in Python"}
{"code": "# Python program to print Even Numbers in given range\n\u00a0\u00a0\nstart, end = 4, 19\n\u00a0\u00a0\n# iterating each number in list\nfor num in range(start, end + 1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# checking condition\n\u00a0\u00a0\u00a0\u00a0if num % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end = \" \")", "nl": "Write a Python program to print all even numbers in a range"}
{"code": "# Python Program explaining\n# numpy.char.swapcase() function\u00a0\n\u00a0\u00a0\nimport numpy as geek\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\nin_arr = geek.array(['P4Q R', '4q Rp', 'Q Rp4', 'rp4q'])\nprint (\"input array : \", in_arr)\n\u00a0\u00a0\nout_arr = geek.char.swapcase(in_arr)\nprint (\"output swapcasecased array :\", out_arr)", "nl": "numpy string operations | swapcase() function in Python"}
{"code": "# Python3 code to demonstrate working of\n# K Multiple Elements Tuples\n# Using list comprehension + all()\n\u00a0\u00a0\n# initializing list\ntest_list = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\nK = 6\n\u00a0\u00a0\n# all() used to filter elements\nres = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n\u00a0\u00a0\n# printing result\nprint(\"K Multiple elements tuples : \" + str(res))", "nl": "Write a Python program to find tuples which have all elements divisible by K from a list of tuples"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Tuple to Tuple Pair\n# Using product() + next()\nfrom itertools import product\n\u00a0\u00a0\n# initializing tuple\ntest_tuple = ('G', 'F', 'G')\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tuple))\n\u00a0\u00a0\n# Convert Tuple to Tuple Pair\n# Using product() + next()\ntest_tuple = iter(test_tuple)\nres = list(product(next(test_tuple), test_tuple))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The paired records : \" + str(res))", "nl": "Write a Python program to Convert Tuple to Tuple Pair"}
{"code": "# Python3 code to demonstrate working of\n# Remove Reduntant Substrings from Strings List\n# Using enumerate() + join() + sort()\n\n\n# initializing list\ntest_list = [\"Gfg\", \"Gfg is best\", \"Geeks\", \"Gfg is for Geeks\"]\n\n\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\n\n# using loop to iterate for each string\ntest_list.sort(key = len)\nres = []\nfor idx, val in enumerate(test_list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# concatenating all next values and checking for existence\n\u00a0\u00a0\u00a0\u00a0if val not in ', '.join(test_list[idx + 1:]):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(val)\n\n\n# printing result\nprint(\"The filtered list : \" + str(res))", "nl": "Write a Python program to Remove Reduntant Substrings from Strings List"}
{"code": "# importing library\nimport numpy as np\n\n\n# creating a array\nx = np.array([-1, -2, -3,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01, 2, 3, 0])\n\n\nprint(\"Printing the Original array:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x)\n\n\n# converting array elements to\n# its corresponding negative value\nr1 = np.negative(x)\n\n\nprint(\"Printing the negative value of the given array:\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r1)", "nl": "How to compute numerical negative value for all elements in a given NumPy array in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Converting binary to string\n# Using BinarytoDecimal(binary)+chr()\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Defining BinarytoDecimal() function\ndef BinaryToDecimal(binary):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0binary1 = binary\u00a0\n\u00a0\u00a0\u00a0\u00a0decimal, i, n = 0, 0, 0\n\u00a0\u00a0\u00a0\u00a0while(binary != 0):\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dec = binary % 10\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decimal = decimal + dec * pow(2, i)\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0binary = binary//10\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0return (decimal)\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\n# Driver's code\u00a0\n# initializing binary data\nbin_data ='10001111100101110010111010111110011'\n\u00a0\u00a0\u00a0\n# print binary data\nprint(\"The binary value is:\", bin_data)\n\u00a0\u00a0\u00a0\n# initializing a empty string for\u00a0\n# storing the string data\nstr_data =' '\n\u00a0\u00a0\u00a0\n# slicing the input and converting it\u00a0\n# in decimal and then converting it in string\nfor i in range(0, len(bin_data), 7):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# slicing the bin_data from index range [0, 6]\n\u00a0\u00a0\u00a0\u00a0# and storing it as integer in temp_data\n\u00a0\u00a0\u00a0\u00a0temp_data = int(bin_data[i:i + 7])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# passing temp_data in BinarytoDecimal() function\n\u00a0\u00a0\u00a0\u00a0# to get decimal value of corresponding temp_data\n\u00a0\u00a0\u00a0\u00a0decimal_data = BinaryToDecimal(temp_data)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Deccoding the decimal value returned by\u00a0\n\u00a0\u00a0\u00a0\u00a0# BinarytoDecimal() function, using chr()\u00a0\n\u00a0\u00a0\u00a0\u00a0# function which return the string corresponding\u00a0\n\u00a0\u00a0\u00a0\u00a0# character for given ASCII value, and store it\u00a0\n\u00a0\u00a0\u00a0\u00a0# in str_data\n\u00a0\u00a0\u00a0\u00a0str_data = str_data + chr(decimal_data)\u00a0\n\u00a0\u00a0\u00a0\n# printing the result\nprint(\"The Binary value after string conversion is:\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str_data)", "nl": "Convert binary to string using Python"}
{"code": "# import required modules\nimport pandas as pd\nimport numpy as np\nimport time\n\u00a0\u00a0\n# time taken to read data\ns_time = time.time()\ndf = pd.read_csv(\"gender_voice_dataset.csv\")\ne_time = time.time()\n\u00a0\u00a0\nprint(\"Read without chunks: \", (e_time-s_time), \"seconds\")\n\u00a0\u00a0\n# data\ndf.sample(10)", "nl": "Working with large CSV files in Python"}
{"code": "# define a function for finding\n# the maximum for adjacent\n# pairs in the array\ndef maximumAdjacent(arr1, n):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# array to store the max\u00a0\n\u00a0\u00a0\u00a0\u00a0# value between adjacent pairs\n\u00a0\u00a0\u00a0\u00a0arr2 = []\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# iterate from 1 to n - 1\n\u00a0\u00a0\u00a0\u00a0for i in range(1, n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# find max value between\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# adjacent\u00a0 pairs gets\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# stored in r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r = max(arr1[i], arr1[i-1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# add element\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr2.append(r)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# printing the elements\n\u00a0\u00a0\u00a0\u00a0for ele in arr2 :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(ele,end=\" \")\n\u00a0\u00a0\nif __name__ == \"__main__\" :\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# size of the input array\n\u00a0\u00a0n = 6\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# input array\n\u00a0\u00a0arr1 = [1,2,2,3,4,5]\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0# function calling\n\u00a0\u00a0maximumAdjacent(arr1, n)", "nl": "Write a Python program to find the Strongest Neighbour"}
{"code": "# Python program for implementation of Bogo Sort\nimport random\n\n\n# Sorts array a[0..n-1] using Bogo sort\ndef bogoSort(a):\n\u00a0\u00a0\u00a0\u00a0n = len(a)\n\u00a0\u00a0\u00a0\u00a0while (is_sorted(a)== False):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle(a)\n\n\n# To check if array is sorted or not\ndef is_sorted(a):\n\u00a0\u00a0\u00a0\u00a0n = len(a)\n\u00a0\u00a0\u00a0\u00a0for i in range(0, n-1):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[i] > a[i+1] ):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n\u00a0\u00a0\u00a0\u00a0return True\n\n\n# To generate permutation of the array\ndef shuffle(a):\n\u00a0\u00a0\u00a0\u00a0n = len(a)\n\u00a0\u00a0\u00a0\u00a0for i in range (0,n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r = random.randint(0,n-1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i], a[r] = a[r], a[i]\n\n\n# Driver code to test above\na = [3, 2, 4, 1, 0, 5]\nbogoSort(a)\nprint(\"Sorted array :\")\nfor i in range(len(a)):\n\u00a0\u00a0\u00a0\u00a0print (\"%d\" %a[i]),", "nl": "Write a Python Program for BogoSort or Permutation Sort"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Convert Character Matrix to single String\n# Using join() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [['g', 'f', 'g'], ['i', 's'], ['b', 'e', 's', 't']]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Convert Character Matrix to single String\n# Using join() + list comprehension\nres = ''.join(ele for sub in test_list for ele in sub)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The String after join : \" + res)\u00a0", "nl": "Write a Python program to Convert Character Matrix to single String"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Flatten tuple of List to tuple\n# Using sum() + tuple()\n\u00a0\u00a0\n# initializing tuple\ntest_tuple = ([5, 6], [6, 7, 8, 9], [3])\n\u00a0\u00a0\n# printing original tuple\nprint(\"The original tuple : \" + str(test_tuple))\n\u00a0\u00a0\n# Flatten tuple of List to tuple\n# Using sum() + tuple()\nres = tuple(sum(test_tuple, []))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The flattened tuple : \" + str(res))", "nl": "Write a Python program to Flatten tuple of List to tuple"}
{"code": "// C/C++ program to reverse linked list\n// using stack\n\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n/* Link list node */\nstruct Node {\n\u00a0\u00a0\u00a0\u00a0int data;\n\u00a0\u00a0\u00a0\u00a0struct Node* next;\n};\n\n\n/* Given a reference (pointer to pointer) to\n\u00a0\u00a0\u00a0the head of a list and an int, push a new\n\u00a0\u00a0\u00a0node on the front of the list. */\nvoid push(struct Node** head_ref, int new_data)\n{\n\u00a0\u00a0\u00a0\u00a0struct Node* new_node = new Node;\n\n\n\u00a0\u00a0\u00a0\u00a0new_node->data = new_data;\n\u00a0\u00a0\u00a0\u00a0new_node->next = (*head_ref);\n\u00a0\u00a0\u00a0\u00a0(*head_ref) = new_node;\n}\n\n\n// Function to reverse linked list\nNode *reverseList(Node* head)\n{\n\u00a0\u00a0\u00a0\u00a0// Stack to store elements of list\n\u00a0\u00a0\u00a0\u00a0stack<Node *> stk;\n\n\n\u00a0\u00a0\u00a0\u00a0// Push the elements of list to stack\n\u00a0\u00a0\u00a0\u00a0Node* ptr = head;\n\u00a0\u00a0\u00a0\u00a0while (ptr->next != NULL) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stk.push(ptr);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = ptr->next;\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0// Pop from stack and replace\n\u00a0\u00a0\u00a0\u00a0// current nodes value'\n\u00a0\u00a0\u00a0\u00a0head = ptr;\n\u00a0\u00a0\u00a0\u00a0while (!stk.empty()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr->next = stk.top();\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = ptr->next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stk.pop();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0ptr->next = NULL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return head;\n}\n\n\n// Function to print the Linked list\nvoid printList(Node* head)\n{\n\u00a0\u00a0\u00a0\u00a0while (head) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << head->data << \" \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head = head->next;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\n// Driver Code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0/* Start with the empty list */\n\u00a0\u00a0\u00a0\u00a0struct Node* head = NULL;\n\n\n\u00a0\u00a0\u00a0\u00a0/* Use push() to construct below list\n\u00a0\u00a0\u00a0\u00a01->2->3->4->5 */\n\u00a0\u00a0\u00a0\u00a0push(&head, 5);\n\u00a0\u00a0\u00a0\u00a0push(&head, 4);\n\u00a0\u00a0\u00a0\u00a0push(&head, 3);\n\u00a0\u00a0\u00a0\u00a0push(&head, 2);\n\u00a0\u00a0\u00a0\u00a0push(&head, 1);\n\n\n\u00a0\u00a0\u00a0\u00a0head = reverseList(head);\n\n\n\u00a0\u00a0\u00a0\u00a0printList(head);\n\n\n\u00a0\u00a0\u00a0\u00a0return 0;\n}", "nl": "Program to reverse a linked list using Stack in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Unique Tuple Frequency [ Order Irrespective ]\n# Using tuple() + list comprehension + sorted() + len()\n\u00a0\u00a0\n# initializing lists\ntest_list = [(3, 4), (1, 2), (4, 3), (5, 6)]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Using tuple() + list comprehension + sorted() + len()\n# Size computed after conversion to set\nres = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"Unique tuples Frequency : \" + str(res))\u00a0", "nl": "Write a Python program to Unique Tuple Frequency (Order Irrespective)"}
{"code": "# Python3 code to demonstrate working of\n# Word Index for K position in Strings List\n# Using enumerate() + list comprehension\n\u00a0\u00a0\n# initializing list\ntest_list = [\"geekforgeeks\", \"is\", \"best\", \"for\", \"geeks\"]\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\nK = 20\n\u00a0\u00a0\n# enumerate to get indices of all inner and outer list\nres = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]\n\u00a0\u00a0\n# getting index of word\nres = res[K]\n\u00a0\u00a0\n# printing result\nprint(\"Index of character at Kth position word : \" + str(res))", "nl": "Write a Python program to find the character position of Kth word from a list of strings"}
{"code": "# Python code to demonstrate\n# method to remove i'th character\n# Naive Method\n\u00a0\u00a0\n# Initializing String\u00a0\ntest_str = \"GeeksForGeeks\"\n\u00a0\u00a0\n# Printing original string\u00a0\nprint (\"The original string is : \" + test_str)\n\u00a0\u00a0\n# Removing char at pos 3\n# using loop\nnew_str = \"\"\n\u00a0\u00a0\nfor i in range(len(test_str)):\n\u00a0\u00a0\u00a0\u00a0if i != 2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_str = new_str + test_str[i]\n\u00a0\u00a0\n# Printing string after removal\u00a0\u00a0\nprint (\"The string after removal of i'th character : \" + new_str)", "nl": "Ways to remove i\u2019th character from string in Python"}
{"code": "# Python code demonstrate the working of\n# sorted() with lambda\n\n\n# Initializing list of dictionaries\nlis = [{ \"name\" : \"Nandini\", \"age\" : 20},\n{ \"name\" : \"Manjeet\", \"age\" : 20 },\n{ \"name\" : \"Nikhil\" , \"age\" : 19 }]\n\n\n# using sorted and lambda to print list sorted\n# by age\nprint \"The list printed sorting by age: \"\nprint sorted(lis, key = lambda i: i['age'])\n\n\nprint (\"\\r\")\n\n\n# using sorted and lambda to print list sorted\n# by both age and name. Notice that \"Manjeet\"\n# now comes before \"Nandini\"\nprint \"The list printed sorting by age and name: \"\nprint sorted(lis, key = lambda i: (i['age'], i['name']))\n\n\nprint (\"\\r\")\n\n\n# using sorted and lambda to print list sorted\n# by age in descending order\nprint \"The list printed sorting by age in descending order: \"\nprint sorted(lis, key = lambda i: i['age'],reverse=True)", "nl": "Ways to sort list of dictionaries by values in Write a Python program to Using lambda function"}
{"code": "import csv\n\u00a0\u00a0\n# creating a nested list of roll numbers,\n# subjects and marks scored by each roll number\nmarks = [\n\u00a0\u00a0\u00a0\u00a0[\"RollNo\", \"Maths\", \"Python\"],\n\u00a0\u00a0\u00a0\u00a0[1000, 80, 85],\n\u00a0\u00a0\u00a0\u00a0[2000, 85, 89],\n\u00a0\u00a0\u00a0\u00a0[3000, 82, 90],\n\u00a0\u00a0\u00a0\u00a0[4000, 83, 98],\n\u00a0\u00a0\u00a0\u00a0[5000, 82, 90]\n]\n\u00a0\u00a0\n# using the open method with 'w' mode\n# for creating a new csv file 'my_csv' with .csv extension\nwith open('my_csv.csv', 'w', newline = '') as file:\n\u00a0\u00a0\u00a0\u00a0writer = csv.writer(file, quoting = csv.QUOTE_NONNUMERIC,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delimiter = ' ')\n\u00a0\u00a0\u00a0\u00a0writer.writerows(marks)\n\u00a0\u00a0\n# opening the 'my_csv' file to read its contents\nwith open('my_csv.csv', newline = '') as file:\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0reader = csv.reader(file, quoting = csv.QUOTE_NONNUMERIC,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delimiter = ' ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# storing all the rows in an output list\n\u00a0\u00a0\u00a0\u00a0output = []\n\u00a0\u00a0\u00a0\u00a0for row in reader:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output.append(row[:])\n\u00a0\u00a0\nfor rows in output:\n\u00a0\u00a0\u00a0\u00a0print(rows)", "nl": "How to read numbers in CSV files in Python"}
{"code": "# import numpy library\nimport numpy as np\n\u00a0\u00a0\n\u00a0\u00a0\n# Enter the coefficients of the poly in the array\ncoeff = [1, 2, 1]\nprint(np.roots(coeff))", "nl": "Find the roots of the polynomials using NumPy in Python"}
{"code": "# Python3 Program to find sum of\n# all items in a Dictionary\n\n\n# Function to print sum\ndef returnSum(myDict):\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0list = []\n\u00a0\u00a0\u00a0\u00a0for i in myDict:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list.append(myDict[i])\n\u00a0\u00a0\u00a0\u00a0final = sum(list)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return final\n\n\n# Driver Function\ndict = {'a': 100, 'b':200, 'c':300}\nprint(\"Sum :\", returnSum(dict))", "nl": "Write a Python program to find the sum of all items in a dictionary"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract words starting with K in String List\n# Using loop + split()\n\u00a0\u00a0\n# initializing list\ntest_list = [\"Gfg is best\", \"Gfg is for geeks\", \"I love G4G\"]\u00a0\n\u00a0\u00a0\n# printing original list\nprint(\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# initializing K\u00a0\nK = \"g\"\n\u00a0\u00a0\nres = []\nfor sub in test_list:\n\u00a0\u00a0\u00a0\u00a0# splitting phrases\n\u00a0\u00a0\u00a0\u00a0temp = sub.split()\n\u00a0\u00a0\u00a0\u00a0for ele in temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checking for matching elements\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ele[0].lower() == K.lower():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.append(ele)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The filtered elements : \" + str(res))", "nl": "Write a Python program to Extract words starting with K in String List"}
{"code": "# Python code to find mean of every numpy array in list\n\u00a0\u00a0\n# Importing module\nimport numpy as np\n\u00a0\u00a0\n# List Initialization\nInput = [np.array([1, 2, 3]),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.array([4, 5, 6]),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.array([7, 8, 9])]\n\u00a0\u00a0\n# Output list initialization\nOutput = []\n\u00a0\u00a0\n# using np.mean()\nfor i in range(len(Input)):\n\u00a0\u00a0\u00a0Output.append(np.mean(Input[i]))\n\u00a0\u00a0\n# Printing output\nprint(Output)", "nl": "Write a Python program to Find Mean of a List of Numpy Array"}
{"code": "# import numpy\nimport numpy as np\n\u00a0\u00a0\n# using np.char.endswith() method\na = np.array(['geeks', 'for', 'geeks'])\ngfg = np.char.endswith(a, 'ks')\n\u00a0\u00a0\nprint(gfg)", "nl": "Write a Python program to Numpy np.char.endswith() method"}
{"code": "# Function to find common elements in three\n# sorted arrays\nfrom collections import Counter\n\u00a0\u00a0\ndef commonElement(ar1,ar2,ar3):\n\u00a0\u00a0\u00a0\u00a0\u00a0# first convert lists into dictionary\n\u00a0\u00a0\u00a0\u00a0\u00a0ar1 = Counter(ar1)\n\u00a0\u00a0\u00a0\u00a0\u00a0ar2 = Counter(ar2)\n\u00a0\u00a0\u00a0\u00a0\u00a0ar3 = Counter(ar3)\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# perform intersection operation\n\u00a0\u00a0\u00a0\u00a0\u00a0resultDict = dict(ar1.items() & ar2.items() & ar3.items())\n\u00a0\u00a0\u00a0\u00a0\u00a0common = []\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0# iterate through resultant dictionary\n\u00a0\u00a0\u00a0\u00a0\u00a0# and collect common elements\n\u00a0\u00a0\u00a0\u00a0\u00a0for (key,val) in resultDict.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(0,val):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0common.append(key)\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0print(common)\n\u00a0\u00a0\n# Driver program\nif __name__ == \"__main__\":\n\u00a0\u00a0\u00a0\u00a0ar1 = [1, 5, 10, 20, 40, 80]\n\u00a0\u00a0\u00a0\u00a0ar2 = [6, 7, 20, 80, 100]\n\u00a0\u00a0\u00a0\u00a0ar3 = [3, 4, 15, 20, 30, 70, 80, 120]\n\u00a0\u00a0\u00a0\u00a0commonElement(ar1,ar2,ar3)", "nl": "Write a Python program to Find common elements in three sorted arrays by dictionary intersection"}
{"code": "# Python3 code to demonstrate working of\n# Remove duplicate lists in tuples(Preserving Order)\n# Using list comprehension + set()\n\n\n# Initializing tuple\ntest_tup = ([4, 7, 8], [1, 2, 3], [4, 7, 8], [9, 10, 11], [1, 2, 3])\n\n\n# printing original tuple\nprint(\"The original tuple is : \" + str(test_tup))\n\n\n# Remove duplicate lists in tuples(Preserving Order)\n# Using list comprehension + set()\ntemp = set()\nres = [ele for ele in test_tup if not(tuple(ele) in temp or temp.add(tuple(ele)))]\n\n\n# printing result\nprint(\"The unique lists tuple is : \" + str(res))", "nl": "Write a Python program to Remove duplicate lists in tuples (Preserving Order)"}
{"code": "// C++ program to print diamond shape\n// with 2n rows\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n// Prints diamond pattern with 2n rows\nvoid printDiamond(int n)\n{\n\u00a0\u00a0\u00a0\u00a0int space = n - 1;\n\n\n\u00a0\u00a0\u00a0\u00a0// run loop (parent loop)\n\u00a0\u00a0\u00a0\u00a0// till number of rows\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < n; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// loop for initially space,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// before star printing\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0;j < space; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" \";\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Print i+1 stars\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j <= i; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"* \";\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space--;\n\u00a0\u00a0\u00a0\u00a0}\n\n\n\u00a0\u00a0\u00a0\u00a0// Repeat again in reverse order\n\u00a0\u00a0\u00a0\u00a0space = 0;\n\n\n\u00a0\u00a0\u00a0\u00a0// run loop (parent loop)\n\u00a0\u00a0\u00a0\u00a0// till number of rows\n\u00a0\u00a0\u00a0\u00a0for (int i = n; i > 0; i--)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// loop for initially space,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// before star printing\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < space; j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" \";\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Print i stars\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0;j < i;j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"* \";\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space++;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\n// Driver code\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0printDiamond(5);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n\n\n// This is code is contributed\n// by rathbhupendra", "nl": "Program to print the diamond shape in Python"}
{"code": "# Python3 code to demonstrate working of\u00a0\n# Extract Indices of substring matches\n# Using loop + enumerate()\n\u00a0\u00a0\n# initializing list\ntest_list = [\"Gfg is good\", \"for Geeks\", \"I love Gfg\", \"Its useful\"]\n\u00a0\u00a0\n# initializing K\u00a0\nK = \"Gfg\"\n\u00a0\u00a0\n# printing original list\nprint(\"The original list : \" + str(test_list))\n\u00a0\u00a0\n# using loop to iterate through list\u00a0\nres = []\nfor idx, ele in enumerate(test_list):\n\u00a0\u00a0if K in ele:\n\u00a0\u00a0\u00a0\u00a0res.append(idx)\n\u00a0\u00a0\n# printing result\u00a0\nprint(\"The indices list : \" + str(res))", "nl": "Write a Python program to Extract Indices of substring matches"}
{"code": "# Python3 code to demonstrate working of\n# Test if tuple is distinct\n# Using loop\n\u00a0\u00a0\n# initialize tuple\u00a0\ntest_tup = (1, 4, 5, 6, 1, 4)\n\u00a0\u00a0\n# printing original tuple\u00a0\nprint(\"The original tuple is : \" + str(test_tup))\n\u00a0\u00a0\n# Test if tuple is distinct\n# Using loop\nres = True\u00a0\ntemp = set()\nfor ele in test_tup:\n\u00a0\u00a0\u00a0\u00a0if ele in temp:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res = False\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0temp.add(ele)\n\u00a0\u00a0\n# printing result\nprint(\"Is tuple distinct ? : \" + str(res))", "nl": "Write a Python program to Test if tuple is distinct"}
{"code": "# Python code demonstrate creating\n# DataFrame from dict narray / lists\n# By default addresses.\n\n\nimport pandas as pd\n\n\n# initialise data of lists.\ndata = {'Category':['Array', 'Stack', 'Queue'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Marks':[20, 21, 19]}\n\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n\n# Print the output.\nprint(df )", "nl": "Write a Python program to Creating DataFrame from dict of narray/lists"}
{"code": "# importing pandas as pd\nimport pandas as pd\n\u00a0\u00a0\n# Create the dataframe\ndf = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Cost':[10000, 5000, 15000, 2000]})\n\u00a0\u00a0\n# Print the dataframe\nprint(df)", "nl": "Create a list from rows in Pandas DataFrame | Set 2 in Python"}
{"code": "# import webdriver\u00a0\nfrom selenium import webdriver\n\u00a0\u00a0\n# create webdriver object\u00a0\ndriver = webdriver.Chrome()\n\u00a0\u00a0\n# URL of the website\u00a0\nurl = \"https://www.geeksforgeeks.org/\"\n\u00a0\u00a0\n# Opening the URL\u00a0\ndriver.get(url)\u00a0\n\u00a0\u00a0\n# Getting current URL source code\u00a0\nget_source = driver.page_source\n\u00a0\u00a0\n# Text you want to search\nsearch_text = \"Floor\"\n\u00a0\u00a0\n# print True if text is present else False\nprint(search_text in get_source)", "nl": "Selenium \u2013 Search for text on page in Python"}
{"code": "# Python3 code to demonstrate\u00a0\n# Reverse Row sort in Lists of List\n# using loop\n\u00a0\u00a0\n# initializing list\u00a0\ntest_list = [[4, 1, 6], [7, 8], [4, 10, 8]]\n\u00a0\u00a0\n# printing original list\nprint (\"The original list is : \" + str(test_list))\n\u00a0\u00a0\n# Reverse Row sort in Lists of List\n# using loop\nfor ele in test_list:\u00a0\n\u00a0\u00a0\u00a0\u00a0ele.sort(reverse = True)\u00a0\n\u00a0\u00a0\n# printing result\u00a0\nprint (\"The reverse sorted Matrix is : \" + str(test_list))", "nl": "Write a Python program to Reverse Row sort in Lists of List"}
{"code": "# Python3 code to print input in your own font\n\n\nname = \"GEEK\"\n\n\n# To take input from User\n# name = input(\"Enter your name: \\n\\n\")\n\n\nlength = len(name)\nl = \"\"\n\n\nfor x in range(0, length):\n\u00a0\u00a0\u00a0\u00a0c = name[x]\n\u00a0\u00a0\u00a0\u00a0c = c.upper()\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if (c == \"A\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..######..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"B\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..#####...\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"C\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#.......\\n..#.......\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.......\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"D\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#####...\\n..#....#..\\n..#....#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..#####...\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"E\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#.......\\n..#####...\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.......\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"F\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#.......\\n..#####...\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.......\\n..#.......\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"G\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#.......\\n..#.####..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..#####...\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"H\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..#....#..\\n..######..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"I\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n....##....\\n....##....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n....##....\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"J\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n....##....\\n....##....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.##....\\n..####....\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"K\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#...#...\\n..#..#....\\n..##......\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#..#....\\n..#...#...\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"L\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#.......\\n..#.......\\n..#.......\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.......\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"M\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..##..##..\\n..#.##.#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"N\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..##...#..\\n..#.#..#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#..#.#..\\n..#...##..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"O\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..#....#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"P\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..######..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#.......\\n..#.......\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"Q\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..#.#..#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#..#.#..\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"R\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#....#..\\n..#.##...\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#...#...\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"S\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n..#.......\\n..######..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n.......#..\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"T\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n....##....\\n....##....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n....##....\\n....##....\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"U\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..#....#..\\n..#....#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..#....#..\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"V\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..#....#..\\n..#....#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n...#..#...\\n....##....\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"W\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n..#....#..\\n..#.##.#..\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..##..##..\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"X\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n...#..#...\\n....##....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n...#..#...\\n..#....#..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"Y\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..#....#..\\n...#..#...\\n....##....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n....##....\\n....##....\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \"Z\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..######..\\n......#...\\n.....#....\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n....#.....\\n..######..\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \" \"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"..........\\n..........\\n..........\", end = \" \")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\n..........\\n\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif (c == \".\"):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"----..----\\n\\n\")", "nl": "Print with your own font using Python !!"}
{"code": "# Python program for random\n# binary string generation\n\u00a0\u00a0\n\u00a0\u00a0\nimport random\n\u00a0\u00a0\n\u00a0\u00a0\n# Function to create the\n# random binary string\ndef rand_key(p):\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Variable to store the\u00a0\n\u00a0\u00a0\u00a0\u00a0# string\n\u00a0\u00a0\u00a0\u00a0key1 = \"\"\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# Loop to find the string\n\u00a0\u00a0\u00a0\u00a0# of desired length\n\u00a0\u00a0\u00a0\u00a0for i in range(p):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# randint function to generate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 0, 1 randomly and converting\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the result into str\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = str(random.randint(0, 1))\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Concatenatin the random 0, 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to the final result\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key1 += temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return(key1)\n\u00a0\u00a0\n# Driver Code\nn = 7\nstr1 = rand_key(n)\nprint(\"Desired length random binary string is: \", str1)", "nl": "Write a Python Program to Generate Random binary string"}
{"code": "import re\n\u00a0\u00a0\n\u00a0\u00a0\nstring = \"ThisIsGeeksforGeeks !, 123\"\n\u00a0\u00a0\n# Creating separate lists using\u00a0\n# the re.findall() method.\nuppercase_characters = re.findall(r\"[A-Z]\", string)\nlowercase_characters = re.findall(r\"[a-z]\", string)\nnumerical_characters = re.findall(r\"[0-9]\", string)\nspecial_characters = re.findall(r\"[, .!?]\", string)\n\u00a0\u00a0\nprint(\"The no. of uppercase characters is\", len(uppercase_characters))\nprint(\"The no. of lowercase characters is\", len(lowercase_characters))\nprint(\"The no. of numerical characters is\", len(numerical_characters))\nprint(\"The no. of special characters is\", len(special_characters))", "nl": "Write a Python program to Count Uppercase, Lowercase, special character and numeric values using Regex"}
{"code": "\nstr=input(\"Enter the String:\")\ncount = 0\nfor i in range(len(str)):\n\u00a0 \u00a0 if str[i] == ' ':\n\u00a0 \u00a0 \u00a0 \u00a0 count+=1\nprint(\"Number of white space in a string are \",count)", "nl": "Count the number of white spaces in a Sentence"}
{"code": "def NthFibonacciNumber(n):\u00a0 \u00a0 if n==0:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 elif(n==1):\u00a0 \u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return NthFibonacciNumber(n-1)+NthFibonacciNumber(n-2)n=int(input(\"Enter the N value:\"))print(\"Nth Fibonacci Number is:\",NthFibonacciNumber(n))", "nl": "Find the nth term in the Fibonacci series using Recursion"}
{"code": "\narr=[]\ntemp=0\npos=0\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"Enter the search element:\")\nele=int(input())\nprint(\"Array elements are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 print(arr[i],end=\" \")\nfor i in range(0,size):\n\u00a0 \u00a0 if arr[i] == ele:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = 1\nif temp==1:\n\u00a0 \u00a0 print(\"\\nElement found....\")\nelse:\n\u00a0 \u00a0 print(\"\\nElement not found....\")", "nl": "Search a specified integer in an array"}
{"code": "\nstr=input(\"Enter the String(Lower case):\")\nprint(\"Upper case String is:\", str.upper())", "nl": "Convert Lowercase to Uppercase using the inbuilt function"}
{"code": "\ndef NumGenerator(n):\n    for i in range(n+1):\n        if i%5==0 and i%7==0:\n            yield i\n\nn=int(raw_input())\nvalues = []\nfor i in NumGenerator(n):\n    values.append(str(i))\n\nprint \",\".join(values)\n\n\n", "nl": "\nPlease write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.\n"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def find_index(self, key):\n        current = self.head\n\u00a0\n        index = 0\n        while current:\n            if current.data == key:\n                return index\n            current = current.next\n            index = index + 1\n\u00a0\n        return -1\n\u00a0\na_llist = LinkedList()\nfor data in [4, -3, 1, 0, 9, 11]:\n    a_llist.append(data)\nprint('The linked list: ', end = '')\na_llist.display()\nprint()\n\u00a0\nkey = int(input('What data item would you like to search for? '))\nindex = a_llist.find_index(key)\nif index == -1:\n    print(str(key) + ' was not found.')\nelse:\n    print(str(key) + ' is at index ' + str(index) + '.')", "nl": "Python Program to Search for an Element in the Linked List without using Recursion"}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the minimum element of the given 2d array\nmin=sys.maxsize\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]<=min:\n            min=matrix[i][j]\n\n# Display the smallest element of the given matrix\nprint(\"The Minimum element of the Given 2d array is: \",min)", "nl": "Find the minimum element in the matrix"}
{"code": "\ni=0\noctal=int(input(\"Enter Octal number:\"))\nHex=['0']*50\ndecimal = 0\nsem = 0\n#Octal to decimal covert\nwhile octal!=0:\n\u00a0 \u00a0 decimal=decimal+(octal%10)*pow(8,sem);\n\u00a0 \u00a0 sem+=1\n\u00a0 \u00a0 octal=octal// 10\n#Decimal to Hexadecimal\nwhile decimal!=0:\n\u00a0 \u00a0 rem=decimal%16\n\u00a0 \u00a0 #Convert Integer to char\n\u00a0 \u00a0 if rem<10:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+48)#48 Ascii=0\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+55) #55 Ascii=7\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 decimal//=16\n\nprint(\"Hexadecimal number is:\")\nfor j in range(i-1,-1,-1):\n\u00a0 \u00a0 print(Hex[j],end=\"\")", "nl": "Program to convert Octal To Hexadecimal"}
{"code": "\nimport math\nnum=int(input(\"Enter the Number:\"))\nprint(\"Square root of \",num,\" is : \",math.sqrt(num))", "nl": "Program to find square root of a number"}
{"code": "def Power(num1,num2):\u00a0 \u00a0 if num2==0:\u00a0 \u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 return num1*Power(num1, num2-1)num1=int(input(\"Enter the base value:\"))num2=int(input(\"Enter the power value:\"))print(\"Power of Number Using Recursion is:\",Power(num1,num2))", "nl": "Find the power of a number using recursion"}
{"code": "str3=\"\"def DecimalToHexadecimal(n):\u00a0 \u00a0 global str3\u00a0 \u00a0 if(n!=0):\u00a0 \u00a0 \u00a0 \u00a0 rem = n % 16\u00a0 \u00a0 \u00a0 \u00a0 if (rem < 10):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str3 += (chr)(rem + 48) # 48 Ascii = 0\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str3 += (chr)(rem + 55) #55 Ascii = 7\u00a0 \u00a0 \u00a0 \u00a0 DecimalToHexadecimal(n // 16)\u00a0 \u00a0 return str3n=int(input(\"Enter the Decimal Value:\"))str=DecimalToHexadecimal(n)print(\"Hexadecimal Value of Decimal number is:\",''.join(reversed(str)))", "nl": "Convert a decimal number to hexadecimal using recursion"}
{"code": "def get_gray_codes(n):\n    \"\"\"Return n-bit Gray code in a list.\"\"\"\n    if n == 0:\n        return ['']\n    first_half = get_gray_codes(n - 1)\n    second_half = first_half.copy()\n\u00a0\n    first_half = ['0' + code for code in first_half]\n    second_half = ['1' + code for code in reversed(second_half)]\n\u00a0\n    return first_half + second_half\n\u00a0\n\u00a0\nn = int(input('Enter the number of bits: '))\ncodes = get_gray_codes(n)\nprint('All {}-bit Gray Codes:'.format(n))\nprint(codes)", "nl": "Python Program to Generate Gray Codes using Recursion"}
{"code": "\nprint(\"Enter the row and column size:\");\nrow_size=int(input())\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for i in range(0,row_size):\n\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")", "nl": "Write a program to print the pattern"}
{"code": "def modify(string):  \n  final = \"\"   \n  for i in range(len(string)):  \n    if i % 2 == 0:  \n      final = final + string[i]  \n  return final\nstring=raw_input(\"Enter string:\")\nprint(\"Modified string is:\")\nprint(modify(string))", "nl": "Python Program to Remove the Characters of Odd Index Values in a String"}
{"code": "\u00a0\nn=int(input(\"Enter an integer:\"))\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)", "nl": "Python Program to Generate all the Divisors of an Integer"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1while i<=n:\u00a0 \u00a0 print((i*i)-i,end=\" \")\u00a0 \u00a0 i+=1", "nl": "Program to print series 0 2 6 12 20 30 42 ...N"}
{"code": "def reverse(string):\n    if len(string) == 0:\n        return string\n    else:\n        return reverse(string[1:]) + string[0]\na = str(input(\"Enter the string to be reversed: \"))\nprint(reverse(a))", "nl": "Python Program to Reverse a String Using Recursion"}
{"code": "class BSTNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.parent = None\n\u00a0\n    def insert(self, node):\n        if self.key > node.key:\n            if self.left is None:\n                self.left = node\n                node.parent = self\n            else:\n                self.left.insert(node)\n        elif self.key < node.key:\n            if self.right is None:\n                self.right = node\n                node.parent = self\n            else:\n                self.right.insert(node)\n\u00a0\n    def search(self, key):\n        if self.key > key:\n            if self.left is not None:\n                return self.left.search(key)\n            else:\n                return None\n        elif self.key < key:\n            if self.right is not None:\n                return self.right.search(key)\n            else:\n                return None\n        return self\n\u00a0\n\u00a0\nclass BSTree:\n    def __init__(self):\n        self.root = None\n\u00a0\n    def add(self, key):\n        new_node = BSTNode(key)\n        if self.root is None:\n            self.root = new_node\n        else:\n            self.root.insert(new_node)\n\u00a0\n    def search(self, key):\n        if self.root is not None:\n            return self.root.search(key)\n\u00a0\n    def get_smallest(self):\n        if self.root is not None:\n            current = self.root\n            while current.left is not None:\n                current = current.left\n            return current.key\n\u00a0\n    def get_largest(self):\n        if self.root is not None:\n            current = self.root\n            while current.right is not None:\n                current = current.right\n            return current.key\n\u00a0\n\u00a0\nbstree = BSTree()\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <key>')\nprint('smallest')\nprint('largest')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        key = int(do[1])\n        bstree.add(key)\n    if operation == 'smallest':\n        smallest = bstree.get_smallest()\n        print('Smallest element: {}'.format(smallest))\n    if operation == 'largest':\n        largest = bstree.get_largest()\n        print('Largest element: {}'.format(largest))\n    elif operation == 'quit':\n        break", "nl": "Python Program To Find the Smallest and Largest Elements in the Binary Search Tree"}
{"code": "def comb_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n\u00a0\n    gap = len(alist)\n    shrink = 1.3\n\u00a0\n    no_swap = False\n    while not no_swap:\n        gap = int(gap/shrink)\n\u00a0\n        if gap < 1:\n            gap = 1\n            no_swap = True\n        else:\n            no_swap = False\n\u00a0\n        i = 0\n        while i + gap < len(alist):\n            if alist[i] > alist[i + gap]:\n                swap(i, i + gap)\n                no_swap = False\n            i = i + 1\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\ncomb_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Comb Sort"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# check Diagonal elements are 1 and rest elements are 0\npoint=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        # check for diagonals element\n        if i == j and matrix[i][j] != 1:\n            point=1\n            break\n        #check for rest elements\n        elif i!=j and matrix[i][j]!=0:\n            point=1\n            break\n\nif point==1:\n    print(\"Given Matrix is not an identity matrix.\")\nelse:\n    print(\"Given Matrix is an identity matrix.\")", "nl": "Check whether a given matrix is an identity matrix or not"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))for out in range(n+1):\u00a0 \u00a0 for i in range(out):\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\u00a0 \u00a0 print(end=\" \")", "nl": "Program to print series 1,22,333,4444...n"}
{"code": "\nnum1=int(input(\"Enter the First numbers :\"))\nnum2=int(input(\"Enter the Second number:\"))\nsum=0\nfor i in range(1,num1+1):\n\u00a0 \u00a0 sum=sum+num2\nprint(\"The multiplication of \",num1,\" and \",num2,\" is \",sum)\n", "nl": "Multiply two numbers without using multiplication(*) operator"}
{"code": "\n\n'''\u00a0Write\na Python program\u00a0to count the number of digits in an integer. or\u00a0\n\n\u00a0 Write a program\u00a0to\u00a0count the\nnumber of digits in an integer using\nPython '''\n\nn=int(input(\"Enter a number:\"))\ncount=0\nwhile n>0:\n\u00a0 \u00a0n=int(n/10)\n\u00a0 \u00a0count+=1\nprint(\"The number of digits in the number is\", count)\n\n\n", "nl": "Program to count the number of digits in an integer."}
{"code": "Solution\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tfor k in d.keys():\t\n\t\tprint k\n\t\t\n\nprintDict()\n\n\n", "nl": "Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.\n:"}
{"code": "import re\nemailAddress = raw_input()\npat2 = \"(\\w+)@(\\w+)\\.(com)\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(2)\n\n\n\n\n", "nl": "\nAssuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.\n"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\narr.sort()\nj=0\n#Remove duplicate element\nfor i in range(0, size-1):\n\u00a0 \u00a0 if arr[i] != arr[i + 1]:\n\u00a0 \u00a0 \u00a0 \u00a0 arr[j]=arr[i]\n\u00a0 \u00a0 \u00a0 \u00a0 j+=1\narr[j] = arr[size - 1]\nj+=1\nprint(\"After removing duplicate element array is\")\nfor i in range(0, j):\n\u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Remove duplicate elements in an array "}
{"code": "n=int(input(\"Enter a number: \"))\na=[]\nwhile(n>0):\n    dig=n%2\n    a.append(dig)\n    n=n//2\na.reverse()\nprint(\"Binary Equivalent is: \")\nfor i in a:\n    print(i,end=\" \")", "nl": "Python Program to Find the Binary Equivalent of a Number without Using Recursion"}
{"code": "Solution\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[5:]\n\t\t\n\nprintList()\n\n\n", "nl": "Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.\n:"}
{"code": "import fractions\na=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nprint(\"The GCD of the two numbers is\",fractions.gcd(a,b))", "nl": "Python Program to Find the GCD of Two Numbers"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __len__(self):\n        return len(self.vertices)\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef floyd_warshall(g):\n    \"\"\"Return dictionaries distance and next_v.\n\u00a0\n    distance[u][v] is the shortest distance from vertex u to v.\n    next_v[u][v] is the next vertex after vertex v in the shortest path from u\n    to v. It is None if there is no path between them. next_v[u][u] should be\n    None for all u.\n\u00a0\n    g is a Graph object which can have negative edge weights.\n    \"\"\"\n    distance = {v:dict.fromkeys(g, float('inf')) for v in g}\n    next_v = {v:dict.fromkeys(g, None) for v in g}\n\u00a0\n    for v in g:\n        for n in v.get_neighbours():\n            distance[v][n] = v.get_weight(n)\n            next_v[v][n] = n\n\u00a0\n    for v in g:\n         distance[v][v] = 0\n         next_v[v][v] = None\n\u00a0\n    for p in g: \n        for v in g:\n            for w in g:\n                if distance[v][w] > distance[v][p] + distance[p][w]:\n                    distance[v][w] = distance[v][p] + distance[p][w]\n                    next_v[v][w] = next_v[v][p]\n\u00a0\n    return distance, next_v\n\u00a0\n\u00a0\ndef print_path(next_v, u, v):\n    \"\"\"Print shortest path from vertex u to v.\n\u00a0\n    next_v is a dictionary where next_v[u][v] is the next vertex after vertex u\n    in the shortest path from u to v. It is None if there is no path between\n    them. next_v[u][u] should be None for all u.\n\u00a0\n    u and v are Vertex objects.\n    \"\"\"\n    p = u\n    while (next_v[p][v]):\n        print('{} -> '.format(p.get_key()), end='')\n        p = next_v[p][v]\n    print('{} '.format(v.get_key()), end='')\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest> <weight>')\nprint('floyd-warshall')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            weight = int(do[4])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest, weight)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'floyd-warshall':\n        distance, next_v = floyd_warshall(g)\n        print('Shortest distances:')\n        for start in g:\n            for end in g:\n                if next_v[start][end]:\n                    print('From {} to {}: '.format(start.get_key(),\n                                                    end.get_key()),\n                            end = '')\n                    print_path(next_v, start, end)\n                    print('(distance {})'.format(distance[start][end]))\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Floyd-Warshall Algorithm"}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the maximum element of the given 2d array\nmax=-sys.maxsize-1\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]>=max:\n            max=matrix[i][j]\n\n# Display the largest element of the given matrix\nprint(\"The Maximum element of the Given 2d array is: \",max)", "nl": "Find the maximum element in the matrix"}
{"code": "\nstr=input(\"Enter the String:\")\nstr2 = []\ni = 0\nwhile i < len(str):\n\u00a0 \u00a0 ch = str[i]\n\u00a0 \u00a0 if not(ch >= '0' and ch <= '9'):\n\u00a0 \u00a0 \u00a0 \u00a0 str2.append(ch)\n\u00a0 \u00a0 i += 1\nFinal_String = ''.join(str2)\nprint(\"After removing numbers string is:\",Final_String)", "nl": "Program to remove all numbers from a String"}
{"code": "\nprint(\"Sourav Patra\")\nprint(\"Welcome to Python\")\nprint(\"Welcome to our page www.csinfo360.com\")\nprint(\"Programming Practice\")\nprint(\"Thank you!\")\n", "nl": "Write a program to Display your name and some Message "}
{"code": "# Get size of 1st matrix\nrow_size=int(input(\"Enter the row Size Of the 1st Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the 1st Matrix:\"))\n\n# Get size of 2nd matrix\nrow_size1=int(input(\"Enter the row Size Of the 1st Matrix:\"))\ncol_size1=int(input(\"Enter the columns Size Of the 2nd Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the 1st Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the 2nd Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compare two matrices\npoint=0\nif row_size==row_size1 and col_size==col_size1:\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] != matrix1[i][j]:\n                point=1\n                break\nelse:\n    print(\"Two matrices are not equal.\")\n    exit(0)\n\nif point==1:\n    print(\"Two matrices are not equal.\")\nelse:\n    print(\"Two matrices are equal.\")", "nl": "Program to check two matrix are equal or not"}
{"code": "\nprint(\"Enter the Nth value:\")\nrangenumber=int(input())\nnum = 1\nc = 0\nletest = 0\nwhile (c != rangenumber):\n\u00a0 \u00a0 \u00a0 num2=num\n\u00a0 \u00a0 \u00a0 num1=num\n\u00a0 \u00a0 \u00a0 sum=0\n\u00a0 \u00a0 \u00a0 while(num1!=0):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0rem=num1%10\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0num1=num1//10\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0sum=sum+rem\n\u00a0 \u00a0 \u00a0 if(num2%sum==0):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest=num\n\u00a0 \u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Harshad number is \",\u00a0 letest);\n\n\n\n", "nl": "Program to find the nth Hashed number"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1pr=0while i<=n:\u00a0 \u00a0 if(i%2==0):\u00a0 \u00a0 \u00a0 \u00a0 pr=2*pow(i, 2) +1\u00a0 \u00a0 \u00a0 \u00a0 print(pr,end=\" \")\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 pr = 2*pow(i, 2) - 1\u00a0 \u00a0 \u00a0 \u00a0 print(pr, end=\" \")\u00a0 \u00a0 i+=1", "nl": "Program to print series 1 9 17 33 49 73 97 ...N"}
{"code": "\ni=0\ndec=int(input(\"Enter Decimal number: \"))\nHex=['0']*50\nwhile dec!=0:\n\u00a0 \u00a0 rem=dec%16;\n\u00a0 \u00a0 #Convert Integer to char\n\u00a0 \u00a0 if rem<10:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+48)#48 Ascii=0\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+55) #55 Ascii=7\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 dec//=16\nprint(\"Hexadecimal number is:\")\nfor j in range(i-1,-1,-1):\n\u00a0 \u00a0 print(Hex[j],end=\"\")", "nl": "Program to convert Decimal to Hexadecimal"}
{"code": "\u00a0\nn=int(input(\"Enter the number of elements to be in the list:\"))\nb=[]\nfor i in range(0,n):\n    a=int(input(\"Element: \"))\n    b.append(a)\nc=[]\nd=[]\nfor i in b:\n    if(i%2==0):\n        c.append(i)\n    else:\n        d.append(i)\nc.sort()\nd.sort()\ncount1=0\ncount2=0\nfor k in c:\n    count1=count1+1\nfor j in d:\n    count2=count2+1\nprint(\"Largest even number:\",c[count1-1])\nprint(\"Largest odd number\",d[count2-1])", "nl": "Python Program to Print Largest Even and Largest Odd Number in a List"}
{"code": "\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=1\nvalue=2\nwhile(i<=n):\n\u00a0 \u00a0 print(value,end=\" \")\n\u00a0 \u00a0 value+=i*13\n\u00a0 \u00a0 i+=1", "nl": "Program to print series 2,15,41,80...n"}
{"code": "class Tree:\n    def __init__(self, data=None, parent=None):\n        self.key = data\n        self.children = []\n        self.parent = parent\n\u00a0\n    def set_root(self, data):\n        self.key = data\n\u00a0\n    def add(self, node):\n        self.children.append(node)\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        for child in self.children:\n            temp = child.search(key)\n            if temp is not None:\n                return temp\n        return None\n\u00a0\n    def remove(self):\n        parent = self.parent\n        index = parent.children.index(self)\n        parent.children.remove(self)\n        for child in reversed(self.children):\n            parent.children.insert(index, child)\n            child.parent = parent\n\u00a0\n    def bfs_display(self):\n        queue = [self]\n        while queue != []:\n            popped = queue.pop(0)\n            for child in popped.children:\n                queue.append(child)\n            print(popped.key, end=' ')\n\u00a0\n\u00a0\ntree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <data> at root')\nprint('add <data> below <data>')\nprint('remove <data>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        data = int(do[1])\n        new_node = Tree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            tree = new_node\n        elif suboperation == 'below':\n            position = do[3].strip().lower()\n            key = int(position)\n            ref_node = None\n            if tree is not None:\n                ref_node = tree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            new_node.parent = ref_node\n            ref_node.add(new_node)\n\u00a0\n    elif operation == 'remove':\n        data = int(do[1])\n        to_remove = tree.search(data)\n        if tree == to_remove:\n            if tree.children == []:\n                tree = None\n            else:\n                leaf = tree.children[0]\n                while leaf.children != []:\n                    leaf = leaf.children[0]\n                leaf.parent.children.remove(leaf)\n                leaf.parent = None\n                leaf.children = tree.children\n                tree = leaf\n        else:\n            to_remove.remove()\n\u00a0\n    elif operation == 'display':\n        if tree is not None:\n            print('BFS traversal display: ', end='')\n            tree.bfs_display()\n            print()\n        else:\n            print('Tree is empty.')\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Construct a Tree & Perform Insertion, Deletion, Display"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\ndef reverse_llist(llist, n):\n    if n == 0:\n        return\n    before = None\n    current = llist.head\n    if current is None:\n        return\n    after = current.next\n    for i in range(n):\n        current.next = before\n        before = current\n        current = after\n        if after is None:\n            break\n        after = after.next\n    llist.head.next = current\n    llist.head = before\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\nn = int(input('Enter the number of elements you want to reverse in the list: '))\n\u00a0\nreverse_llist(a_llist, n)\n\u00a0\nprint('The new list: ')\na_llist.display()", "nl": "Python Program to Reverse only First N Elements of a Linked List"}
{"code": "def cut_rod(p, n):\n    \"\"\"Take a list p of prices and the rod length n and return lists r and s.\n    r[i] is the maximum revenue that you can get and s[i] is the length of the\n    first piece to cut from a rod of length i.\"\"\"\n    # r[i] is the maximum revenue for rod length i\n    # r[i] = -1 means that r[i] has not been calculated yet\n    r = [-1]*(n + 1)\n\u00a0\n    # s[i] is the length of the initial cut needed for rod length i\n    # s[0] is not needed\n    s = [-1]*(n + 1)\n\u00a0\n    cut_rod_helper(p, n, r, s)\n\u00a0\n    return r, s\n\u00a0\n\u00a0\ndef cut_rod_helper(p, n, r, s):\n    \"\"\"Take a list p of prices, the rod length n, a list r of maximum revenues\n    and a list s of initial cuts and return the maximum revenue that you can get\n    from a rod of length n.\n\u00a0\n    Also, populate r and s based on which subproblems need to be solved.\n    \"\"\"\n    if r[n] >= 0:\n        return r[n]\n\u00a0\n    if n == 0:\n        q = 0\n    else:\n        q = -1\n        for i in range(1, n + 1):\n            temp = p[i] + cut_rod_helper(p, n - i, r, s)\n            if q < temp:\n                q = temp\n                s[n] = i\n    r[n] = q\n\u00a0\n    return q\n\u00a0\n\u00a0\nn = int(input('Enter the length of the rod in inches: '))\n\u00a0\n# p[i] is the price of a rod of length i\n# p[0] is not needed, so it is set to None\np = [None]\nfor i in range(1, n + 1):\n    price = input('Enter the price of a rod of length {} in: '.format(i))\n    p.append(int(price))\n\u00a0\nr, s = cut_rod(p, n)\nprint('The maximum revenue that can be obtained:', r[n])\nprint('The rod needs to be cut into length(s) of ', end='')\nwhile n > 0:\n    print(s[n], end=' ')\n    n -= s[n]", "nl": "Python Program to Solve Rod Cutting Problem using Dynamic Programming with Memoization"}
{"code": "s=raw_input(\"Enter string:\")\ncount = 0\nvowels = set(\"aeiou\")\nfor letter in s:\n    if letter in vowels:\n        count += 1\nprint(\"Count of the vowels is:\")\nprint(count)", "nl": "Python Program to Count the Number of Vowels Present in a String using Sets"}
{"code": "\nimport math\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Disarium numbers between \",range1,\" and \",range2,\" are: \")\nfor i in range(range1,range2+1):\n\u00a0 \u00a0 num =i\n\u00a0 \u00a0 c = 0\n\u00a0 \u00a0 while num != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 num //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 c += 1\n\u00a0 \u00a0 num = i\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 while num != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num % 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum += math.pow(rem, c)\n\u00a0 \u00a0 \u00a0 \u00a0 num //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 c -= 1\n\u00a0 \u00a0 if sum == i:\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\" \")", "nl": "Find out all Disarium numbers present within a given range"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def get_node(self, index):\n        current = self.head\n        for i in range(index):\n            if current is None:\n                return None\n            current = current.next\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n    def insert_at_beg(self, new_node):\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n\u00a0\n    def remove(self, node):\n        prev_node = self.get_prev_node(node)\n        if prev_node is None:\n            self.head = self.head.next\n        else:\n            prev_node.next = node.next\n\u00a0\n\u00a0\ndef move_even_before_odd(llist):\n    current = llist.head\n    while current:\n        temp = current.next\n        if current.data % 2 == 0:\n            llist.remove(current)\n            llist.insert_at_beg(current)\n        current = temp\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nmove_even_before_odd(a_llist)\n\u00a0\nprint('The new list: ')\na_llist.display()", "nl": "Python Program to Modify the Linked List such that All Even Numbers appear before all the Odd Numbers in the Modified Linked List"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Display Lower triangular matrix\nprint(\"Lower Triangular Matrix is:\\n\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            print(\"0 \",end=\"\")\n        else:\n            print(matrix[i][j],end=\" \")\n    print()", "nl": "Program to display a lower triangular matrix"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nstar_print=row_size*2-1\nfor out in range(row_size,0,-1):\n\u00a0 \u00a0 for inn in range(row_size,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(0,star_print):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 star_print-=2\n\u00a0 \u00a0 print(\"\\r\")", "nl": "Print the Inverted Full Pyramid Star Pattern"}
{"code": "row_size=int(input(\"Enter the row size:\"))print_control_x=1for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 if inn<=print_control_x or inn>=row_size-print_control_x+1:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 if out <= row_size // 2:\u00a0 \u00a0 \u00a0 \u00a0 print_control_x+=1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 print_control_x-=1\u00a0 \u00a0 print(\"\\r\")", "nl": "Program to print a butterfly shape star pattern"}
{"code": "import math\n\u00a0\nclass FibonacciTree:\n    def __init__(self, key):\n        self.key = key\n        self.children = []\n        self.order = 0\n\u00a0\n    def add_at_end(self, t):\n        self.children.append(t)\n        self.order = self.order + 1\n\u00a0\n\u00a0\nclass FibonacciHeap:\n    def __init__(self):\n        self.trees = []\n        self.least = None\n        self.count = 0\n\u00a0\n    def insert(self, key):\n        new_tree = FibonacciTree(key)\n        self.trees.append(new_tree)\n        if (self.least is None or key < self.least.key):\n            self.least = new_tree\n        self.count = self.count + 1\n\u00a0\n    def get_min(self):\n        if self.least is None:\n            return None\n        return self.least.key\n\u00a0\n    def extract_min(self):\n        smallest = self.least\n        if smallest is not None:\n            for child in smallest.children:\n                self.trees.append(child)\n            self.trees.remove(smallest)\n            if self.trees == []:\n                self.least = None\n            else:\n                self.least = self.trees[0]\n                self.consolidate()\n            self.count = self.count - 1\n            return smallest.key\n\u00a0\n    def consolidate(self):\n        aux = (floor_log2(self.count) + 1)*[None]\n\u00a0\n        while self.trees != []:\n            x = self.trees[0]\n            order = x.order\n            self.trees.remove(x)\n            while aux[order] is not None:\n                y = aux[order]\n                if x.key > y.key:\n                    x, y = y, x\n                x.add_at_end(y)\n                aux[order] = None\n                order = order + 1\n            aux[order] = x\n\u00a0\n        self.least = None\n        for k in aux:\n            if k is not None:\n                self.trees.append(k)\n                if (self.least is None\n                    or k.key < self.least.key):\n                    self.least = k\n\u00a0\n\u00a0\ndef floor_log2(x):\n    return math.frexp(x)[1] - 1\n\u00a0\n\u00a0\nfheap = FibonacciHeap()\n\u00a0\nprint('Menu')\nprint('insert <data>')\nprint('min get')\nprint('min extract')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        fheap.insert(data)\n    elif operation == 'min':\n        suboperation = do[1].strip().lower()\n        if suboperation == 'get':\n            print('Minimum value: {}'.format(fheap.get_min()))\n        elif suboperation == 'extract':\n            print('Minimum value removed: {}'.format(fheap.extract_min()))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Fibonacci Heap"}
{"code": "\nprint(\"Enter the range of number(Limit):\")\nn = int(input())\ni = 1\nsum = 0\nwhile (i <= n):\n\u00a0 \u00a0 for j in range(1, i + 1,2):\n\u00a0 \u00a0 \u00a0 \u00a0 sum+=j\n\u00a0 \u00a0 i += 2\nprint(\"The sum of the series = \", sum)", "nl": "Program to Find sum of series 1+(1+3)+(1+3+5)+....+N"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 \u00a0 \u00a0 sqr = num * num\n\u00a0 \u00a0 \u00a0 \u00a0 # Sum of digit\n\u00a0 \u00a0 \u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 \u00a0 \u00a0 while sqr != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rem = sqr % 10\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum += rem\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sqr //= 10\n\n\u00a0 \u00a0 \u00a0 \u00a0 if sum == num:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 \u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Magic number is \",latest)", "nl": "Program to Find nth Neon Number "}
{"code": "\u00a0\ncelsius=int(input(\"Enter the temperature in celcius:\"))\nf=(celsius*1.8)+32\nprint(\"Temperature in farenheit is:\",f)", "nl": "Python Program to Take the Temperature in Celcius and Covert it to Farenheit"}
{"code": "str=input(\"Enter Your String:\")arr=[0]*256for i in range(len(str)):\u00a0 \u00a0 if str[i]!=' ':\u00a0 \u00a0 \u00a0 \u00a0 num=ord(str[i])\u00a0 \u00a0 \u00a0 \u00a0 arr[num]+=1ch=' 'print(\"All Non-repeating character in a given string is: \",end=\"\")for i in range(len(str)):\u00a0 \u00a0 \u00a0 \u00a0 if arr[ord(str[i])] ==1:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ch=str[i]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(ch,end=\" \")", "nl": "Find all non repeated characters in a string"}
{"code": "def FibonacciSeries(n):\u00a0 \u00a0 if n==0:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 elif(n==1):\u00a0 \u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return FibonacciSeries(n-1)+FibonacciSeries(n-2)n=int(input(\"Enter the Limit:\"))print(\"All Fibonacci Numbers in the given Range are:\")for i in range(0,n):\u00a0 \u00a0 print(FibonacciSeries(i),end=\" \")", "nl": "Print Fibonacci Series using recursion"}
{"code": "a = raw_input()\nn1 = int( \"%s\" % a )\nn2 = int( \"%s%s\" % (a,a) )\nn3 = int( \"%s%s%s\" % (a,a,a) )\nn4 = int( \"%s%s%s%s\" % (a,a,a,a) )\nprint n1+n2+n3+n4\n", "nl": "Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a."}
{"code": "a=int(input(\"Enter the first number:\"))\nb=int(input(\"Enter the second number:\"))\nif(a>b):\n    min1=a\nelse:\n    min1=b\nwhile(1):\n    if(min1%a==0 and min1%b==0):\n        print(\"LCM is:\",min1)\n        break\n    min1=min1+1", "nl": "Python Program to Find the LCM of Two Numbers"}
{"code": "\nfahrenheit=int(input(\"Enter degree in fahrenheit: \"))\ncelsius= (fahrenheit-32)*5/9;\nprint(\"Degree in celsius is\",celsius)", "nl": "Convert temperature from Fahrenheit to Celsius "}
{"code": "s = raw_input()\nd={\"UPPER CASE\":0, \"LOWER CASE\":0}\nfor c in s:\n    if c.isupper():\n        d[\"UPPER CASE\"]+=1\n    elif c.islower():\n        d[\"LOWER CASE\"]+=1\n    else:\n        pass\nprint \"UPPER CASE\", d[\"UPPER CASE\"]\nprint \"LOWER CASE\", d[\"LOWER CASE\"]\n", "nl": "Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters."}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Subtraction of two matrices\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\n\n# display the Subtraction of two matrices\nprint(\"Subtraction of the two Matrices is:\")\nfor m in sub_matrix:\n    print(m)", "nl": "Program to Find subtraction of two matrices"}
{"code": "def length(lst):\n    if not lst:\n        return 0\n    return 1 + length(lst[1::2]) + length(lst[2::2])\na=[1,2,3]\nprint(\"Length of the string is: \")\nprint(a)", "nl": "Python Program to Find the Length of a List Using Recursion"}
{"code": "values=raw_input()\nl=values.split(\",\")\nt=tuple(l)\nprint l\nprint t\n", "nl": "Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number."}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = float(input())\n\u00a0 \u00a0 arr.append(num)\nsum=0.0\nfor j in range(0,size):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum+= arr[j]\nprint(\"sum of \",size,\" number : \",sum)", "nl": " Find the sum of N numbers in an array"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# check except Diagonal elements are 0 or not\npoint=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        # check for diagonals element\n        if i!=j and matrix[i][j]!=0:\n            point=1\n            break\nif point==1:\n    print(\"Given Matrix is not a diagonal Matrix.\")\nelse:\n    print(\"Given Matrix is a diagonal Matrix.\")", "nl": "Program to check whether a matrix is diagonal or not"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nif row_size!=col_size:\n    print(\"Given Matrix is not a Square Matrix.\")\nelse:\n    #compute the transpose matrix\n    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]\n    for i in range(0, row_size):\n        for j in range(0, col_size):\n            tran_matrix[i][j] = matrix[j][i]\n# check given matrix elements and transpose\n# matrix elements are same or not.\n\nflag=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if matrix[i][j] != tran_matrix[i][j]:\n            flag=1\n            break\n\nif flag==1:\n    print(\"Given Matrix is not a symmetric Matrix.\")\nelse:\n    print(\"Given Matrix is a symmetric Matrix.\")", "nl": "Program to check whether a matrix is symmetric or not"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 one_c = 0\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 if num1 % 2 == 1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 one_c += 1\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 2\n\u00a0 \u00a0 if one_c % 2 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Evil number is \",latest)", "nl": "Program to Find nth Evil Number"}
{"code": "\u00a0\nn=int(input(\"Enter the number to print the tables for:\"))\nfor i in range(1,11):\n    print(n,\"x\",i,\"=\",n*i)", "nl": "Python Program to Print Table of a Given Number"}
{"code": "def heapsort(alist):\n    build_max_heap(alist)\n    for i in range(len(alist) - 1, 0, -1):\n        alist[0], alist[i] = alist[i], alist[0]\n        max_heapify(alist, index=0, size=i)\n\u00a0\ndef parent(i):\n    return (i - 1)//2\n\u00a0\ndef left(i):\n    return 2*i + 1\n\u00a0\ndef right(i):\n    return 2*i + 2\n\u00a0\ndef build_max_heap(alist):\n    length = len(alist)\n    start = parent(length - 1)\n    while start >= 0:\n        max_heapify(alist, index=start, size=length)\n        start = start - 1\n\u00a0\ndef max_heapify(alist, index, size):\n    l = left(index)\n    r = right(index)\n    if (l < size and alist[l] > alist[index]):\n        largest = l\n    else:\n        largest = index\n    if (r < size and alist[r] > alist[largest]):\n        largest = r\n    if (largest != index):\n        alist[largest], alist[index] = alist[index], alist[largest]\n        max_heapify(alist, largest, size)\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nheapsort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Heapsort"}
{"code": "class Tree:\n    def __init__(self, data=None):\n        self.key = data\n        self.children = []\n\u00a0\n    def set_root(self, data):\n        self.key = data\n\u00a0\n    def add(self, node):\n        self.children.append(node)\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        for child in self.children:\n            temp = child.search(key)\n            if temp is not None:\n                return temp\n        return None\n\u00a0\n    def count_nonleaf_nodes(self):\n        nonleaf_count = 0\n        if self.children != []:\n            nonleaf_count = 1\n        for child in self.children:\n            nonleaf_count = nonleaf_count + child.count_nonleaf_nodes()\n        return nonleaf_count\n\u00a0\n\u00a0\ntree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <data> at root')\nprint('add <data> below <data>')\nprint('count')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        data = int(do[1])\n        new_node = Tree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            tree = new_node\n        elif suboperation == 'below':\n            position = do[3].strip().lower()\n            key = int(position)\n            ref_node = None\n            if tree is not None:\n                ref_node = tree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            ref_node.add(new_node)\n\u00a0\n    elif operation == 'count':\n        if tree is None:\n            print('Tree is empty.')\n        else:\n            count = tree.count_nonleaf_nodes()\n            print('Number of nonleaf nodes: {}'.format(count))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Count Number of Non Leaf Nodes of a given Tree"}
{"code": "fname = input(\"Enter file name: \")\nnum_lines = 0\nwith open(fname, 'r') as f:\n    for line in f:\n        num_lines += 1\nprint(\"Number of lines:\")\nprint(num_lines)", "nl": "Python Program to Count the Number of Lines in a Text File"}
{"code": "\narr=[]\narr2=[]\nsize = int(input(\"Enter the size of the 1st array: \"))\nsize2 = int(input(\"Enter the size of the 2nd array: \"))\n\nprint(\"Enter the Element of the 1st array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Enter the Element of the 2nd array:\")\nfor i in range(0,size2):\n\u00a0 \u00a0 num2 = int(input())\n\u00a0 \u00a0 arr2.append(num2)\n\ncount=0\nfor i in range(0, size):\n\u00a0 \u00a0 for j in range(0, size2):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[i] == arr2[j]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count+=1\n\nif count>=1:\n\u00a0 \u00a0 print(\"Arrays are not disjoint.\")\nelse:\n\u00a0 \u00a0 print(\"Arrays are disjoint.\")", "nl": "Check if two arrays are the disjoint or not"}
{"code": "str=input(\"Enter Your String:\")for inn in range(0,len(str)):\u00a0 \u00a0 print(str[inn]+str[inn],end=\"\")", "nl": "Print every character of a string twice"}
{"code": "s = raw_input()\nwords = [word for word in s.split(\" \")]\nprint \" \".join(sorted(list(set(words))))\n", "nl": "Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically."}
{"code": "import random\na=[]\nn=int(input(\"Enter number of elements:\"))\nfor j in range(n):\n    a.append(random.randint(1,20))\nprint('Randomised list is: ',a)", "nl": "Python Program to Generate Random Numbers from 1 to 20 and Append Them to the List"}
{"code": "principle=float(input(\"Enter principle:\"))\nrate=float(input(\"Enter rate(%):\"))\nn=float(input(\"Enter n:\"))\ntime=float(input(\"Enter time:\"))\namount=principle*pow(1+(rate/100.0)/n,n*time)\nprint(\"The compound interest is\",amount)", "nl": "Write a program to calculate compound interest"}
{"code": "\nclass American(object):\n    pass\n\nclass NewYorker(American):\n    pass\n\nanAmerican = American()\naNewYorker = NewYorker()\nprint anAmerican\nprint aNewYorker\n\n\n\n\n", "nl": "Define a class named American and its subclass NewYorker. \n:"}
{"code": "\n\nprint(\"Enter the two Diagonals Value:\")\np=int(input())\nq=int(input())\na=int(input(\"Enter the length of the side value:\"))\narea=(p*q)/2.0\nperimeter=(4*a)\nprint(\"Area of the Rhombus = \",area)\nprint(\"Perimeter of the Rhombus = \",perimeter)\n", "nl": "Program to compute the area and perimeter of Rhombus"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nprint_control_x=row_size//2+1\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for inn in range(1,row_size+1):\n\u00a0 \u00a0 \u00a0 \u00a0 if inn==print_control_x or inn==row_size-print_control_x+1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\n\u00a0 \u00a0 if out <= row_size // 2:\n\u00a0 \u00a0 \u00a0 \u00a0 print_control_x-=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print_control_x+=1\n\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to Print the Hollow Diamond Star Pattern"}
{"code": "str=input(\"Enter Your String:\")sub_str=str.split(\" \")len1=len(sub_str)print(\"After removing duplicate words from a given String is:\")for inn in range(len1):\u00a0 \u00a0 out=inn+1\u00a0 \u00a0 while out<len1:\u00a0 \u00a0 \u00a0 \u00a0 if sub_str[out].__eq__(sub_str[inn]):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for p in range(out,len1+1):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if p >= p + 1:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sub_str[p]=sub_str[p+1]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 len1-=1\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 out+=1for inn in range(len1):\u00a0 \u00a0 print(sub_str[inn],end=\" \")", "nl": "Remove duplicate words from string"}
{"code": "\nfrom random import shuffle\nli = [3,6,7,8]\nshuffle(li)\nprint li\n\n", "nl": "\nPlease write a program to shuffle and print the list [3,6,7,8].\n\n\n:"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0find the nth perfect number. or\u00a0Write a\nprogram\u00a0to\u00a0find the nth perfect number using Python '''\n\n\nprint(\"Enter a Nth Number:\")\nrangenumber=int(input())\nc = 0\nletest = 0\nnum = 1\nwhile (c != rangenumber):\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 for i in range(num):\n\u00a0 \u00a0 \u00a0 \u00a0 if (num % i == 0):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0sum = sum + i\n\n\u00a0 \u00a0 if (sum == num):\n\u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th perfect number is \",letest)\n\n", "nl": "Write a program to Find the nth Perfect Number"}
{"code": "class Tree:\n    def __init__(self, data=None):\n        self.key = data\n        self.children = []\n\u00a0\n    def set_root(self, data):\n        self.key = data\n\u00a0\n    def add(self, node):\n        self.children.append(node)\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        for child in self.children:\n            temp = child.search(key)\n            if temp is not None:\n                return temp\n        return None\n\u00a0\n    def count_leaf_nodes(self):\n        leaf_nodes = []\n        self.count_leaf_nodes_helper(leaf_nodes)\n        return len(leaf_nodes)\n\u00a0\n    def count_leaf_nodes_helper(self, leaf_nodes):\n        if self.children == []:\n            leaf_nodes.append(self)\n        else:\n            for child in self.children:\n                child.count_leaf_nodes_helper(leaf_nodes)\n\u00a0\n\u00a0\ntree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <data> at root')\nprint('add <data> below <data>')\nprint('count')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        data = int(do[1])\n        new_node = Tree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            tree = new_node\n        elif suboperation == 'below':\n            position = do[3].strip().lower()\n            key = int(position)\n            ref_node = None\n            if tree is not None:\n                ref_node = tree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            ref_node.add(new_node)\n\u00a0\n    elif operation == 'count':\n        if tree is None:\n            print('Tree is empty.')\n        else:\n            count = tree.count_leaf_nodes()\n            print('Number of leaf nodes: {}'.format(count))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Count Number of Leaf Node in a Tree"}
{"code": "import math\nclass circle():\n    def __init__(self,radius):\n        self.radius=radius\n    def area(self):\n        return math.pi*(self.radius**2)\n    def perimeter(self):\n        return 2*math.pi*self.radius\n\u00a0\nr=int(input(\"Enter radius of circle: \"))\nobj=circle(r)\nprint(\"Area of circle:\",round(obj.area(),2))\nprint(\"Perimeter of circle:\",round(obj.perimeter(),2))", "nl": "Python Program to Create a Class and Compute the Area and the Perimeter of the Circle"}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the minimum element of the given 2d array\nmin=sys.maxsize\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]<=min:\n            min=matrix[i][j]\n\n# Display the smallest element of the given matrix\nprint(\"The Minimum element of the Given 2d array is: \",min)", "nl": "Find the minimum element in the matrix"}
{"code": "def count_paths(m, n, holes):\n    \"\"\"Return number of paths from (0, 0) to (m, n) in an m x n grid.\n\u00a0\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\n    blocked for a path.\n    \"\"\"\n    paths = [[-1]*(m + 1) for _ in range(n + 1)]\n    return count_paths_helper(m, n, holes, paths, n, m)\n\u00a0\n\u00a0\ndef count_paths_helper(m, n, holes, paths, x, y):\n    \"\"\"Return number of paths from (0, 0) to (x, y) in an m x n grid.\n\u00a0\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\n    blocked for a path.\n\u00a0\n    The function uses the table paths (implemented as a list of lists) where\n    paths[a][b] will store the number of paths from (0, 0) to (a, b).\n    \"\"\"\n    if paths[x][y] >= 0:\n        return paths[x][y]\n\u00a0\n    if (x, y) in holes:\n        q = 0\n    elif x == 0 and y == 0:\n        q = 1\n    elif x == 0:\n        q = count_paths_helper(m, n, holes, paths, x, y - 1)\n    elif y == 0:\n        q = count_paths_helper(m, n, holes, paths, x - 1, y)\n    else:\n        q = count_paths_helper(m, n, holes, paths, x - 1, y) \\\n            + count_paths_helper(m, n, holes, paths, x, y - 1)\n\u00a0\n    paths[x][y] = q\n    return q\n\u00a0\n\u00a0\nm, n = input('Enter m, n for the size of the m x n grid (m rows and n columns): ').split(',')\nm = int(m)\nn = int(n)\nprint('Enter the coordinates of holes on each line (empty line to stop): ')\nholes = []\nwhile True:\n    hole = input('')\n    if not hole.strip():\n        break\n    hole = hole.split(',')\n    hole = (int(hole[0]), int(hole[1]))\n    holes.append(hole)\n\u00a0\ncount = count_paths(m, n, holes)\nprint('Number of paths from (0, 0) to ({}, {}): {}.'.format(n, m, count))", "nl": "Python Program to Count all Paths in a Grid with Holes using Dynamic Programming with Memoization"}
{"code": "\nalphabet=input(\"Enter an alphabet:\")\nif(alphabet=='a' or alphabet=='A' or alphabet=='e' or alphabet=='E' or alphabet=='i' or alphabet=='I' or alphabet=='o' or alphabet=='O' or alphabet=='u' or alphabet=='U'):\n\u00a0print(\"It is Vowel\")\nelse:\n\u00a0print(\"It is Consonant\")", "nl": "Check whether an alphabet is vowel or consonant"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# check except Diagonal elements are 0 or not\npoint=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        # check for diagonals element\n        if i!=j and matrix[i][j]!=0:\n            point=1\n            break\nif point==1:\n    print(\"Given Matrix is not a diagonal Matrix.\")\nelse:\n    print(\"Given Matrix is a diagonal Matrix.\")", "nl": "Program to check whether a matrix is diagonal or not"}
{"code": "class Person:\n    # Define the class parameter \"name\"\n    name = \"Person\"\n    \n    def __init__(self, name = None):\n        # self.name is the instance parameter\n        self.name = name\n\njeffrey = Person(\"Jeffrey\")\nprint \"%s name is %s\" % (Person.name, jeffrey.name)\n\nnico = Person()\nnico.name = \"Nico\"\nprint \"%s name is %s\" % (Person.name, nico.name)\n", "nl": "    Define a class, which have a class parameter and have a same instance parameter.\n:"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0Find 2nd smallest digit in a given number. or\u00a0Write a\nprogram\u00a0to\u00a0Find 2nd smallest digit in a given number using Python '''\n\nimport sys\nprint(\"Enter the Number :\")\nnum=int(input())\nsmallest=sys.maxsize\nsec_smallest=sys.maxsize\nwhile num > 0:\n\u00a0 \u00a0 reminder = num % 10\n\u00a0 \u00a0 if smallest >= reminder:\n\u00a0 \u00a0 \u00a0 \u00a0 sec_smallest=smallest\n\u00a0 \u00a0 \u00a0 \u00a0 smallest = reminder\n\u00a0 \u00a0 elif reminder <= sec_smallest:\n\u00a0 \u00a0 \u00a0 \u00a0 sec_smallest=reminder\n\u00a0 \u00a0 num =num // 10\nprint(\"The Second Smallest Digit is \", sec_smallest)\n", "nl": "Find 2nd smallest digit in a given number"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0Find the 2nd largest digit in a given number. or\u00a0Write a\nprogram\u00a0to\u00a0Find 2nd largest digit in a given number using Python '''\n\nprint(\"Enter the Number :\")\nnum=int(input())\nLargest=0\nSec_Largest=0\nwhile num > 0:\n\u00a0 \u00a0 reminder=num%10\n\u00a0 \u00a0 if Largest<reminder:\n\u00a0 \u00a0 \u00a0 \u00a0 Sec_Largest = Largest\n\u00a0 \u00a0 \u00a0 \u00a0 Largest = reminder\n\u00a0 \u00a0 elif reminder >= Sec_Largest:\n\u00a0 \u00a0 \u00a0 \u00a0 Sec_Largest = reminder\n\u00a0 \u00a0 num =num // 10\n\nprint(\"The Second Largest Digit is :\", Sec_Largest)\n", "nl": "Find 2nd largest digit in a given number"}
{"code": "\nnum1=int(input(\"Enter first number:\"))\nnum2=int(input(\"Enter\u00a0 second number:\"))\ndiv=0\nwhile num1>=num2:\n\u00a0 \u00a0 \u00a0 \u00a0 num1=num1-num2\n\u00a0 \u00a0 \u00a0 \u00a0 div+=1\nprint(\"Division of two number is \",div)\n", "nl": "Division Two Numbers Operator without using Division(/) operator"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nif row_size!=col_size:\n    print(\"Given Matrix is not a Square Matrix.\")\nelse:\n    #compute the transpose matrix\n    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]\n    for i in range(0, row_size):\n        for j in range(0, col_size):\n            tran_matrix[i][j] = matrix[j][i]\n# check given matrix elements and transpose\n# matrix elements are same or not.\n\nflag=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if matrix[i][j] != tran_matrix[i][j]:\n            flag=1\n            break\n\nif flag==1:\n    print(\"Given Matrix is not a symmetric Matrix.\")\nelse:\n    print(\"Given Matrix is a symmetric Matrix.\")", "nl": "Program to check whether a matrix is symmetric or not"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef is_cycle_present(graph):\n    \"\"\"Return True if cycle is present in the graph.\"\"\"\n    on_stack = set()\n    visited = set()\n    for v in graph:\n        if v not in visited:\n            if is_cycle_present_helper(v, visited, on_stack):\n                return True\n    return False\n\u00a0\n\u00a0\ndef is_cycle_present_helper(v, visited, on_stack):\n    \"\"\"Return True if the DFS traversal starting at vertex v detects a\n    cycle. Uses set visited to keep track of nodes that have been visited. Uses\n    set on_stack to keep track of nodes that are 'on the stack' of the recursive\n    calls.\"\"\"\n    if v in on_stack:\n        return True\n    on_stack.add(v)\n    for dest in v.get_neighbours():\n        if dest not in visited:\n            if is_cycle_present_helper(dest, visited, on_stack):\n                return True\n    on_stack.remove(v)\n    visited.add(v)\n    return False\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <vertex1> <vertex2>')\nprint('cycle')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            v1 = int(do[2])\n            v2 = int(do[3])\n            if v1 not in g:\n                print('Vertex {} does not exist.'.format(v1))\n            elif v2 not in g:\n                print('Vertex {} does not exist.'.format(v2))\n            else:\n                if not g.does_edge_exist(v1, v2):\n                    g.add_edge(v1, v2)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'cycle':\n        if is_cycle_present(g):\n            print('Cycle present.')\n        else:\n            print('Cycle not present.')\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find if Directed Graph contains Cycle using DFS"}
{"code": "\narr=[]\narr2=[]\nsize = int(input(\"Enter the size of the 1st array: \"))\nsize2 = int(input(\"Enter the size of the 2nd array: \"))\n\nprint(\"Enter the Element of the 1st array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Enter the Element of the 2nd array:\")\nfor i in range(0,size2):\n\u00a0 \u00a0 num2 = int(input())\n\u00a0 \u00a0 arr2.append(num2)\n\ncount=0\nfor i in range(0, size):\n\u00a0 \u00a0 for j in range(0, size2):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[i] == arr2[j]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count+=1\n\nif count==size2:\n\u00a0 \u00a0 print(\"Array two is a subset of array one.\")\nelse:\n\u00a0 \u00a0 print(\"Array two is not a subset of array one.\")", "nl": "Check if one array is a subset of another array or not "}
{"code": "\nsize=int(input(\"Enter the size of the array:\"));\narr=[]\nprint(\"Enter the element of the array:\");\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Before Sorting Array Elements are: \",arr)\nfor out in range(0,size-1):\n\u00a0 \u00a0 min = out\n\u00a0 \u00a0 for inn in range(out+1, size):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[inn] < arr[min]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 min = inn\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=arr[out]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[out]=arr[min]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[min]=temp\n\nprint(\"\\nAfter Sorting Array Elements are: \",arr)\n\n", "nl": "Selection Sort Program in Python | Java | C | C++"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(row_size+1):\n\u00a0 \u00a0 for i in range(1,out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Half Pyramid Number Pattern"}
{"code": "def reverse(s):\u00a0 str = \"\"\u00a0 for i in s:\u00a0 \u00a0 str = i + str\u00a0 return strstr=input(\"Enter Your String:\")sub_str=str.split(\" \")sub_str1=[]p=0flag=0maxInd=0max=0str_rev=\"\"print(\"Palindrome Substring are:\")for inn in range(len(sub_str)):\u00a0 \u00a0 str_rev= sub_str[inn]\u00a0 \u00a0 if reverse(str_rev).__eq__(sub_str[inn]):\u00a0 \u00a0 \u00a0 \u00a0 sub_str1.append(sub_str[inn])\u00a0 \u00a0 \u00a0 \u00a0 print(sub_str1[p])\u00a0 \u00a0 \u00a0 \u00a0 p +=1\u00a0 \u00a0 \u00a0 \u00a0 flag = 1len2 = pif flag==1:\u00a0 \u00a0 max = len(sub_str1[0])\u00a0 \u00a0 for inn in range(0,len2):\u00a0 \u00a0 \u00a0 \u00a0 len1 = len(sub_str1[inn])\u00a0 \u00a0 \u00a0 \u00a0 if len1 > max:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max=len1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxInd=inn\u00a0 \u00a0 print(\"Longest palindrome Substring is \",sub_str1[maxInd])else:\u00a0 \u00a0 print(\"No palindrome Found\")", "nl": "Longest palindromic substring in a string"}
{"code": "print(\"Enter a binary number:\")\nbinary=input()\n\nif(len(binary)%4==1):\n\u00a0 \u00a0 binary=\"000\"+binary\nif(len(binary)%4==2):\n\u00a0 \u00a0 binary=\"00\"+binary\nif(len(binary)%4==3):\n\u00a0 \u00a0 binary=\"0\"+binary\n\nhex=\"\"\n\nlen=int(len(binary)/4)\n\nprint(\"len:\",len)\ni=0\nj=0\nk=4\ndecimal=0\n\nwhile(i<len):\n\u00a0 \u00a0 st=binary[j:k]\n\u00a0 \u00a0 bin=int(st)\n\u00a0 \u00a0 temp=0\n\u00a0 \u00a0 remainder=0\n\u00a0 \u00a0 decimal=0\n\u00a0 \u00a0 while(bin!=0):\n\u00a0 \u00a0 \u00a0 \u00a0 remainder=bin%10\n\u00a0 \u00a0 \u00a0 \u00a0 bin=bin//10\n\u00a0 \u00a0 \u00a0 \u00a0 decimal=decimal+remainder*pow(2,temp)\n\u00a0 \u00a0 \u00a0 \u00a0 temp=temp+1\n\n\u00a0 \u00a0 if decimal==15:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+\"F\"\n\u00a0 \u00a0 elif decimal==14:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+\"E\"\n\u00a0 \u00a0 elif decimal==13:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+\"D\"\n\u00a0 \u00a0 elif decimal==12:\n\u00a0 \u00a0 \u00a0 \u00a0 hex = hex + \"C\"\n\u00a0 \u00a0 elif decimal==11:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+\"B\"\n\u00a0 \u00a0 elif decimal==10:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+\"A\"\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 hex=hex+str(decimal)\n\n\u00a0 \u00a0 j=k\n\u00a0 \u00a0 k=k+4\n\u00a0 \u00a0 i=i+1\n\nprint(\"Binary to HexaDecimal is \",hex)\n", "nl": "Program to Convert Binary to Hexadecimal"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1pr=0while i<=n:\u00a0 \u00a0 pr = (pr * 2) + 1\u00a0 \u00a0 print(pr,end=\" \")\u00a0 \u00a0 i+=1", "nl": "Program to print series 1,3,7,15,31...N"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1pr=0while i<=n:\u00a0 \u00a0 if(i%2==0):\u00a0 \u00a0 \u00a0 \u00a0 pr=pow(i, 2) - 2\u00a0 \u00a0 \u00a0 \u00a0 print(pr,end=\" \")\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 pr = pow(i, 2) - 1\u00a0 \u00a0 \u00a0 \u00a0 print(pr, end=\" \")\u00a0 \u00a0 i+=1", "nl": "Program to print series 0,2,8,14,24,34 ...N"}
{"code": "def BinaryToDecimal(n):\u00a0 \u00a0 if n==0:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return (n% 10 + 2* BinaryToDecimal(n // 10))n=int(input(\"Enter the Binary Value:\"))print(\"Decimal Value of Binary number is:\",BinaryToDecimal(n))", "nl": "Binary to Decimal conversion using recursion"}
{"code": "import sysarr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Max_diff=-sys.maxsize-1for i in range(0,size-1):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 if abs(arr[j]-arr[i])>Max_diff:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max_diff = abs(arr[j] - arr[i])print(\"Maximum difference between two Element is \",Max_diff)", "nl": "Maximum difference between two elements in an array"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def get_node(self, index):\n        current = self.head\n        for i in range(index):\n            if current is None:\n                return None\n            current = current.next\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n    def insert_after(self, ref_node, new_node):\n        new_node.next = ref_node.next\n        ref_node.next = new_node\n\u00a0\n    def insert_before(self, ref_node, new_node):\n        prev_node = self.get_prev_node(ref_node)\n        self.insert_after(prev_node, new_node)\n\u00a0\n    def insert_at_beg(self, new_node):\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\u00a0\n    def remove(self, node):\n        prev_node = self.get_prev_node(node)\n        if prev_node is None:\n            self.head = self.head.next\n        else:\n            prev_node.next = node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\nprint('Menu')\nprint('insert <data> after <index>')\nprint('insert <data> before <index>')\nprint('insert <data> at beg')\nprint('insert <data> at end')\nprint('remove <index>') \nprint('quit')\n\u00a0\nwhile True:\n    print('The list: ', end = '')\n    a_llist.display()\n    print()\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n\u00a0\n    if operation == 'insert':\n        data = int(do[1])\n        position = do[3].strip().lower()\n        new_node = Node(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            if position == 'beg':\n                a_llist.insert_at_beg(new_node)\n            elif position == 'end':\n                a_llist.insert_at_end(new_node)\n        else:\n            index = int(position)\n            ref_node = a_llist.get_node(index)\n            if ref_node is None:\n                print('No such index.')\n                continue\n            if suboperation == 'after':\n                a_llist.insert_after(ref_node, new_node)\n            elif suboperation == 'before':\n                a_llist.insert_before(ref_node, new_node)\n\u00a0\n    elif operation == 'remove':\n        index = int(do[1])\n        node = a_llist.get_node(index)\n        if node is None:\n            print('No such index.')\n            continue\n        a_llist.remove(node)\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Illustrate the Operations of Singly Linked List"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1pr=6diff=5while i<=n:\u00a0 \u00a0 print(pr,end=\" \")\u00a0 \u00a0 pr = pr + diff\u00a0 \u00a0 diff = diff + 5\u00a0 \u00a0 i+=1", "nl": "Program to print series 6,11,21,36,56...n"}
{"code": "def sum1(lst):\n    total = 0\n    for element in lst:\n        if (type(element) == type([])):\n            total = total + sum1(element)\n        else:\n            total = total + element\n    return total\nprint( \"Sum is:\",sum1([[1,2],[3,4]]))", "nl": "Python Program to Find the Total Sum of a Nested List Using Recursion"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nnp=1\nfor out in range(0,row_size):\n\u00a0 \u00a0 for in1 in range(row_size-1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for in2 in range(0, np):\n\u00a0 \u00a0 \u00a0 \u00a0 print(np,end=\"\")\n\u00a0 \u00a0 np+=2\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Full Pyramid Number Pattern"}
{"code": "values = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint \",\".join(values)\n", "nl": "Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.\nThe numbers obtained should be printed in a comma-separated sequence on a single line.\n:"}
{"code": "\nstr=input(\"Enter the 1st String:\")\nstr1=input(\"Enter the 2nd String:\")\nif(len(str)==len(str1)):\n\u00a0 \u00a0 print(\"Two strings are equal.\")\nelse:\n\u00a0 \u00a0 print(\"Two strings are not equal.\")", "nl": "Check whether two strings are equal or not"}
{"code": "\nprint(\"Enter the row and column size:\")\nrow_size=input()\nfor out in range(ord(row_size),ord('A')-1,-1):\n\u00a0 \u00a0 for i in range(ord(row_size)-1,out-1,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(ord('A'), out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(p),end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Alphabet Inverted Half Pyramid Pattern"}
{"code": "\nimport random\nprint random.randrange(7,16)\n\n", "nl": "\nPlease write a program to randomly print a integer number between 7 and 15 inclusive.\n\n\n:"}
{"code": "\u00a0\nyear=int(input(\"Enter year to be checked:\"))\nif(year%4==0 and year%100!=0 or year%400==0):\n    print(\"The year is a leap year!)\nelse:\n    print(\"The year isn't a leap year!)", "nl": "Python Program to Check Whether a Given Year is a Leap Year"}
{"code": "def lcs(u, v):\n    \"\"\"Return c where c[i][j] contains length of LCS of u[i:] and v[j:].\"\"\"\n    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]\n\u00a0\n    for i in range(len(u) + 1):\n        c[i][len(v)] = 0\n    for j in range(len(v)):\n        c[len(u)][j] = 0\n\u00a0\n    for i in range(len(u) - 1, -1, -1):\n        for j in range(len(v) - 1, -1, -1):\n            if u[i] == v[j]:\n                c[i][j] = 1 + c[i + 1][j + 1]\n            else:\n                c[i][j] = max(c[i + 1][j], c[i][j + 1])\n\u00a0\n    return c\n\u00a0\n\u00a0\ndef print_lcs(u, v, c):\n    \"\"\"Print one LCS of u and v using table c.\"\"\"\n    i = j = 0\n    while not (i == len(u) or j == len(v)):\n        if u[i] == v[j]:\n            print(u[i], end='')\n            i += 1\n            j += 1\n        elif c[i][j + 1] > c[i + 1][j]:\n            j += 1\n        else:\n            i += 1\n\u00a0\n\u00a0\nu = input('Enter first string: ')\nv = input('Enter second string: ')\nc = lcs(u, v)\nprint('Longest Common Subsequence: ', end='')\nprint_lcs(u, v, c)", "nl": "Python Program to Find Longest Common Subsequence using Dynamic Programming with Bottom-Up Approach"}
{"code": "\n\nprint(\"Enter the row and column size:\")\n\nrow_size=int(input())\nfor out in range(row_size,0,-1):\n\u00a0 \u00a0 for i in range(row_size,0,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\"\")\n\n\u00a0 \u00a0 print(\"\\r\")\n\n\n", "nl": "Write a program to print the pattern"}
{"code": "def check(string,ch):\n      if not string:\n        return 0\n      elif string[0]==ch:\n            return 1+check(string[1:],ch)\n      else:\n            return check(string[1:],ch)\nstring=raw_input(\"Enter string:\")\nch=raw_input(\"Enter character to check:\")\nprint(\"Count is:\")\nprint(check(string,ch))", "nl": "Python Program to Determine How Many Times a Given Letter Occurs in a String Recursively"}
{"code": "\nch=input(\"Enter a character:\")\nif(ch>='a' and ch<='z'):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"The character is lower case\")\nelif(ch>='A' and ch<='Z'):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"The character is upper case\")\nelif(ch>='0' and ch<='9'):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"The character is number\")\nelse:\nprint(\"It is a special character\")\u00a0\n", "nl": "Check whether a given Character is Upper case, Lower case, Number or Special Character"}
{"code": "Solution\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))\nprint evenNumbers\n\n\n\n\n", "nl": "Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].\n:"}
{"code": "\nprint(\"Enter two number to find G.C.D\")\nnum1=int(input())\nnum2=int(input())\nwhile(num1!=num2):\n\u00a0 \u00a0if (num1 > num2):\n\u00a0 \u00a0 \u00a0 num1 = num1 - num2\n\u00a0 \u00a0else:\n\u00a0 \u00a0 \u00a0 num2= num2 - num1\n\nprint(\"G.C.D is\",num1)\n", "nl": "Program to Find gcd or hcf of two numbers"}
{"code": "def fractional_knapsack(value, weight, capacity):\n    \"\"\"Return maximum value of items and their fractional amounts.\n\u00a0\n    (max_value, fractions) is returned where max_value is the maximum value of\n    items with total weight not more than capacity.\n    fractions is a list where fractions[i] is the fraction that should be taken\n    of item i, where 0 <= i < total number of items.\n\u00a0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 0 <= i < n where n is the number of items.\n\u00a0\n    capacity is the maximum weight.\n    \"\"\"\n    # index = [0, 1, 2, ..., n - 1] for n items\n    index = list(range(len(value)))\n    # contains ratios of values to weight\n    ratio = [v/w for v, w in zip(value, weight)]\n    # index is sorted according to value-to-weight ratio in decreasing order\n    index.sort(key=lambda i: ratio[i], reverse=True)\n\u00a0\n    max_value = 0\n    fractions = [0]*len(value)\n    for i in index:\n        if weight[i] <= capacity:\n            fractions[i] = 1\n            max_value += value[i]\n            capacity -= weight[i]\n        else:\n            fractions[i] = capacity/weight[i]\n            max_value += value[i]*capacity/weight[i]\n            break\n\u00a0\n    return max_value, fractions\n\u00a0\n\u00a0\nn = int(input('Enter number of items: '))\nvalue = input('Enter the values of the {} item(s) in order: '\n              .format(n)).split()\nvalue = [int(v) for v in value]\nweight = input('Enter the positive weights of the {} item(s) in order: '\n               .format(n)).split()\nweight = [int(w) for w in weight]\ncapacity = int(input('Enter maximum weight: '))\n\u00a0\nmax_value, fractions = fractional_knapsack(value, weight, capacity)\nprint('The maximum value of items that can be carried:', max_value)\nprint('The fractions in which the items should be taken:', fractions)", "nl": "Python Program to Solve Fractional Knapsack Problem using Greedy Algorithm"}
{"code": "def reverse(s):\u00a0 str = \"\"\u00a0 for i in s:\u00a0 \u00a0 str = i + str\u00a0 return strstr=input(\"Enter Your String:\")sub_str=str.split(\" \")sub_str1=[]p=0flag=0minInd=0min=0str_rev=\"\"print(\"Palindrome Substrings are:\")for inn in range(len(sub_str)):\u00a0 \u00a0 str_rev= sub_str[inn]\u00a0 \u00a0 if reverse(str_rev).__eq__(sub_str[inn]):\u00a0 \u00a0 \u00a0 \u00a0 sub_str1.append(sub_str[inn])\u00a0 \u00a0 \u00a0 \u00a0 print(sub_str1[p])\u00a0 \u00a0 \u00a0 \u00a0 p +=1\u00a0 \u00a0 \u00a0 \u00a0 flag = 1len2 = pif flag==1:\u00a0 \u00a0 min = len(sub_str1[0])\u00a0 \u00a0 for inn in range(0,len2):\u00a0 \u00a0 \u00a0 \u00a0 len1 = len(sub_str1[inn])\u00a0 \u00a0 \u00a0 \u00a0 if len1 < min:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 min=len1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 minInd=inn\u00a0 \u00a0 print(\"Smallest palindrome Substring is \",sub_str1[minInd])else:\u00a0 \u00a0 print(\"No palindrome Found\")", "nl": "Shortest palindromic substring in a string"}
{"code": "count=0def NumberOfUpperCase(str,i):\u00a0 \u00a0 global count\u00a0 \u00a0 if (str[i] >= 'A' and str[i] <= 'Z'):\u00a0 \u00a0 \u00a0 \u00a0 count+=1\u00a0 \u00a0 if (i >0):\u00a0 \u00a0 \u00a0 \u00a0 NumberOfUpperCase(str, i - 1)\u00a0 \u00a0 return countstr=input(\"Enter your String:\")NoOfUppercase=NumberOfUpperCase(str,len(str)-1)if(NoOfUppercase==0):\u00a0 \u00a0 print(\"No UpperCase Letter present in a given string.\")else:\u00a0 \u00a0 print(\"Number Of UpperCase Letter Present in a given String is:\",NoOfUppercase)", "nl": "Count number of uppercase letters in a string using Recursion"}
{"code": "\nsize=int(input(\"Enter the size of the array:\"));\narr=[]\nprint(\"Enter the element of the array:\");\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"Before Sorting Array Element are: \",arr)\nlow = 0\nhigh= size-1\nwhile low < high:\n\u00a0 \u00a0 for inn in range(low, high):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[inn] > arr[inn+1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=arr[inn]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn]=arr[inn+1]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn+1]=temp\n\u00a0 \u00a0 high-=1\n\u00a0 \u00a0 for inn in range(high,low,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[inn] < arr[inn-1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=arr[inn]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn]=arr[inn-1]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn-1]=temp\nlow+=1\nprint(\"\\nAfter Sorting Array Element are: \",arr)", "nl": "Bidirectional Bubble Sort Program in Python | Java | C | C++"}
{"code": "import arrayarr=array.array('i', [95,88,77,45,69])print(\"Marks obtained by a student in five tests are:\")for i in range(0,5):\u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Print the marks obtained by a student in five tests"}
{"code": "\narr=[]\narr2=[]\nsize = int(input(\"Enter the size of the 1st array: \"))\nsize2 = int(input(\"Enter the size of the 2nd array: \"))\n\nprint(\"Enter the Element of the 1st array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Enter the Element of the 2nd array:\")\nfor i in range(0,size2):\n\u00a0 \u00a0 num2 = int(input())\n\u00a0 \u00a0 arr2.append(num2)\n\narr.sort()\narr2.sort()\n\nflag=1\nif size != size2:\n\u00a0 \u00a0 flag=0\nelse:\n\u00a0 \u00a0 for i in range(0, size):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[i] != arr2[i]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag=0\n\nif flag==0:\n\u00a0 \u00a0 print(\"Not same....\")\nelse:\n\u00a0 \u00a0 print(\"same....\")", "nl": "Check if two arrays are equal or not"}
{"code": "def fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    # r[i] will contain the ith Fibonacci number\n    r = [-1]*(n + 1)\n    return fibonacci_helper(n, r)\n\u00a0\n\u00a0\ndef fibonacci_helper(n, r):\n    \"\"\"Return the nth Fibonacci number and store the ith Fibonacci number in\n    r[i] for 0 <= i <= n.\"\"\"\n    if r[n] >= 0:\n        return r[n]\n\u00a0\n    if (n == 0 or n == 1):\n        q = n\n    else:\n        q = fibonacci_helper(n - 1, r) + fibonacci_helper(n - 2, r)\n    r[n] = q\n\u00a0\n    return q\n\u00a0\n\u00a0\nn = int(input('Enter n: '))\n\u00a0\nans = fibonacci(n)\nprint('The nth Fibonacci number:', ans)", "nl": "Python Program to Print nth Fibonacci Number using Dynamic Programming with Memoization"}
{"code": "def DecimalToBinary(n):\u00a0 \u00a0 if n==0:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 (n% 2 + 10 * DecimalToBinary(n // 2))n=int(input(\"Enter the Decimal Value:\"))print(\"Binary Value of Decimal number is:\",DecimalToBinary(n))", "nl": "Convert decimal to binary using recursion"}
{"code": "\u00a0\nn=int(input(\"Enter a number n: \"))\ntemp=str(n)\nt1=temp+temp\nt2=temp+temp+temp\ncomp=n+int(t1)+int(t2)\nprint(\"The value is:\",comp)", "nl": "Python Program to Read a Number n and Compute n+nn+nnn"}
{"code": "\u00a0\nlower=int(input(\"Enter lower range limit:\"))\nupper=int(input(\"Enter upper range limit:\"))\nn=int(input(\"Enter the number to be divided by:\"))\nfor i in range(lower,upper+1):\n    if(i%n==0):\n        print(i)", "nl": "Python Program to Print all Numbers in a Range Divisible by a Given Number"}
{"code": "sem=1\noctal=0\nprint(\"Enter the Decimal Number:\")\nnumber=int(input())\nwhile(number !=0):\n\u00a0 \u00a0 \u00a0 octal=octal+(number%8)*sem\n\u00a0 \u00a0 \u00a0 number=number//8\n\u00a0 \u00a0 \u00a0 sem=int(sem*10)\n\nprint(\"Octal Number is \",octal)\n\n", "nl": "Program to convert decimal to octal using while loop"}
{"code": "limit=int(input(\"Enter upper limit:\"))\nc=0\nm=2\nwhile(c<limit):\n    for n in range(1,m+1):\n        a=m*m-n*n\n        b=2*m*n\n        c=m*m+n*n\n        if(c>limit):\n            break\n        if(a==0 or b==0 or c==0):\n            break\n        print(a,b,c)\n    m=m+1", "nl": "Python Program to Determine all Pythagorean Triplets in the Range"}
{"code": "row_size=int(input(\"Enter the row size:\"))for out in range(row_size,-(row_size+1),-1):\u00a0 \u00a0 for inn in range(row_size,abs(out)-1,-1):\u00a0 \u00a0 \u00a0 \u00a0 print(inn,end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to print the Solid Half Diamond Number Pattern"}
{"code": "\nnum=int(input(\"Enter a number:\"))\none_c=0\nwhile num!=0:\n\u00a0 \u00a0 if num%2==1:\n\u00a0 \u00a0 \u00a0 \u00a0 one_c+=1\n\u00a0 \u00a0 num//=2\nif one_c%2==0:\n\u00a0 \u00a0 print(\"It is an Evil Number.\")\nelse:\n\u00a0 \u00a0print(\"It is Not an Evil Number.\")", "nl": "Check whether number is Evil Number or Not"}
{"code": "def check_AutomorphicNumber(num):\u00a0 \u00a0 sqr = num * num\u00a0 \u00a0 if (num > 0):\u00a0 \u00a0 \u00a0 \u00a0 if (num % 10 != sqr % 10):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return -1\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 check_AutomorphicNumber(num // 10)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 return 0num=int(input(\"Enter a number:\"))if (check_AutomorphicNumber(num) == 0):\u00a0 \u00a0 print(\"It is an Automorphic Number.\")else:\u00a0 \u00a0 print(\"It is not an Automorphic Number.\")", "nl": "Check a given number is an Automorphic number using recursion"}
{"code": "fname = input(\"Enter file name: \")\n\u00a0\nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            for letter in i:\n                if(letter.isdigit()):\n                    print(letter)", "nl": "Python Program to Read a Text File and Print all the Numbers Present in the Text File"}
{"code": "\u00a0\nlower=int(input(\"Enter the lower range:\"))\nupper=int(input(\"Enter the upper range:\"))\nfor i in range (lower,upper+1):\n    if(i%7==0 and i%5==0):\n        print(i)", "nl": "Python Program to Find Those Numbers which are Divisible by 7 and Multiple of 5 in a Given Range of Numbers"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n\u00a0\ndef is_equal(llist1, llist2):\n    current1 = llist1.head\n    current2 = llist2.head\n    while (current1 and current2):\n        if current1.data != current2.data:\n            return False\n        current1 = current1.next\n        current2 = current2.next\n    if current1 is None and current2 is None:\n        return True\n    else:\n        return False\n\u00a0\n\u00a0\nllist1 = LinkedList()\nllist2 = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the first linked list: ').split()\nfor data in data_list:\n    llist1.append(int(data))\n\u00a0\ndata_list = input('Please enter the elements in the second linked list: ').split()\nfor data in data_list:\n    llist2.append(int(data))\n\u00a0\nif is_equal(llist1, llist2):\n    print('The two linked lists are the same.')\nelse:\n    print('The two linked list are not the same.', end = '')", "nl": "Python Program to Check whether 2 Linked Lists are Same"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def inorder(self):\n        if self.left is not None:\n            self.left.inorder()\n        print(self.key, end=' ')\n        if self.right is not None:\n            self.right.inorder()\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('quit')\n\u00a0\nwhile True:\n    print('inorder traversal of binary tree: ', end='')\n    if btree is not None:\n        btree.inorder()\n    print()\n\u00a0\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Binary Tree using Linked List"}
{"code": "\n\nimport math\nprint(\"Enter the length of the side:\")\na=int(input())\narea=(3*math.sqrt(3)*math.pow(a,2))/2.0\nperimeter=(6*a)\nprint(\"Area of the Hexagon = \",area)\nprint(\"Perimeter of the Hexagon = \",perimeter)\n", "nl": "Program to compute the area and perimeter of Hexagon"}
{"code": "\ndef f(n):\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+100\n\nn=int(raw_input())\nprint f(n)\n\n", "nl": "\nWrite a program to compute:\n\nf(n)=f(n-1)+100 when n>0\nand f(0)=1\n\nwith a given n input by console (n>0).\n"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Calculate sum of Upper triangular matrix element\nsum=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i>j:\n            sum += matrix[i][j]\n\n# display the sum of the Upper triangular matrix element\nprint(\"Sum of Upper Triangular Matrix Elements is: \",sum)", "nl": "Program to find the sum of an upper triangular matrix"}
{"code": "def BubbleSort(arr,n):\u00a0 \u00a0 if(n>0):\u00a0 \u00a0 \u00a0 \u00a0 for i in range(0,n):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (arr[i]>arr[i+1]):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = arr[i]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[i] = arr[i + 1]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[i + 1] = temp\u00a0 \u00a0 \u00a0 \u00a0 BubbleSort(arr, n - 1)arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)BubbleSort(arr, n - 1)print(\"After Sorting Array Elements are:\")for i in range(0,n):\u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Bubble sort using recursion"}
{"code": "\ni=0\noctal=int(input(\"Enter Octal number:\"))\nHex=['0']*50\ndecimal = 0\nsem = 0\n#Octal to decimal covert\nwhile octal!=0:\n\u00a0 \u00a0 decimal=decimal+(octal%10)*pow(8,sem);\n\u00a0 \u00a0 sem+=1\n\u00a0 \u00a0 octal=octal// 10\n#Decimal to Hexadecimal\nwhile decimal!=0:\n\u00a0 \u00a0 rem=decimal%16\n\u00a0 \u00a0 #Convert Integer to char\n\u00a0 \u00a0 if rem<10:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+48)#48 Ascii=0\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 Hex[i]=chr(rem+55) #55 Ascii=7\n\u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 decimal//=16\n\nprint(\"Hexadecimal number is:\")\nfor j in range(i-1,-1,-1):\n\u00a0 \u00a0 print(Hex[j],end=\"\")", "nl": "Program to convert Octal To Hexadecimal"}
{"code": "\nprint(\"Enter the row size:\")\nrow_size=int(input())\nfor out in range(row_size+1):\n\u00a0 \u00a0 for j in range(row_size-out):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 print(\"\\r\")", "nl": "Program to print mirrored right triangle star pattern"}
{"code": "\nimport random\nprint random.random()*100\n\n", "nl": "\nPlease generate a random float where the value is between 10 and 100 using Python math module.\n\n\n:"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)sum=int(input(\"Enter the Sum Value:\"))flag=0for i in range(0,size-1):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 if arr[i]+arr[j]==sum:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Given sum pairs of elements are \", arr[i],\" and \", arr[j],\".\\n\")if flag==0:\u00a0 print(\"Given sum Pair is not Present.\")", "nl": "Find a pair with given sum in the array"}
{"code": "import sysarr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Min_diff=sys.maxsizefor i in range(0,size-1):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 if abs(arr[j]-arr[i])<Min_diff:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min_diff = abs(arr[j] - arr[i])print(\"Minimum difference between two Element is \",Min_diff)", "nl": "Minimum difference between two elements in an array"}
{"code": "def bucket_sort(alist):\n    largest = max(alist)\n    length = len(alist)\n    size = largest/length\n\u00a0\n    buckets = [[] for _ in range(length)]\n    for i in range(length):\n        j = int(alist[i]/size)\n        if j != length:\n            buckets[j].append(alist[i])\n        else:\n            buckets[length - 1].append(alist[i])\n\u00a0\n    for i in range(length):\n        insertion_sort(buckets[i])\n\u00a0\n    result = []\n    for i in range(length):\n        result = result + buckets[i]\n\u00a0\n    return result\n\u00a0\ndef insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        j = i - 1\n        while (j >= 0 and temp < alist[j]):\n            alist[j + 1] = alist[j]\n            j = j - 1\n        alist[j + 1] = temp\n\u00a0\n\u00a0\nalist = input('Enter the list of (nonnegative) numbers: ').split()\nalist = [int(x) for x in alist]\nsorted_list = bucket_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)", "nl": "Python Program to Implement Bucket Sort"}
{"code": "def minimize_lateness(ttimes, dtimes):\n    \"\"\"Return minimum max lateness and the schedule to obtain it.\n\u00a0\n    (min_lateness, schedule) is returned.\n\u00a0\n    Lateness of a request i is L(i) = finish time of i - deadline of if\n    request i finishes after its deadline.\n    The maximum lateness is the maximum value of L(i) over all i.\n    min_lateness is the minimum value of the maximum lateness that can be\n    achieved by optimally scheduling the requests.\n\u00a0\n    schedule is a list that contains the indexes of the requests ordered such\n    that minimum maximum lateness is achieved.\n\u00a0\n    ttime[i] is the time taken to complete request i.\n    dtime[i] is the deadline of request i.\n    \"\"\"\n    # index = [0, 1, 2, ..., n - 1] for n requests\n    index = list(range(len(dtimes)))\n    # sort according to deadlines\n    index.sort(key=lambda i: dtimes[i])\n\u00a0\n    min_lateness = 0\n    start_time = 0\n    for i in index:\n        min_lateness = max(min_lateness,\n                           (ttimes[i] + start_time) - dtimes[i])\n        start_time += ttimes[i]\n\u00a0\n    return min_lateness, index\n\u00a0\n\u00a0\nn = int(input('Enter number of requests: '))\nttimes = input('Enter the time taken to complete the {} request(s) in order: '\n              .format(n)).split()\nttimes = [int(tt) for tt in ttimes]\ndtimes = input('Enter the deadlines of the {} request(s) in order: '\n               .format(n)).split()\ndtimes = [int(dt) for dt in dtimes]\n\u00a0\nmin_lateness, schedule = minimize_lateness(ttimes, dtimes)\nprint('The minimum maximum lateness:', min_lateness)\nprint('The order in which the requests should be scheduled:', schedule)", "nl": "Python Program to Minimize Lateness using Greedy Algorithm"}
{"code": "row_size=int(input(\"Enter the row size:\"))np=1for out in range(0,row_size):\u00a0 \u00a0 for inn in range(row_size-1,out,-1):\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\u00a0 \u00a0 for p in range(0, np):\u00a0 \u00a0 \u00a0 \u00a0 print(chr(out+65),end=\"\")\u00a0 \u00a0 np+=2\u00a0 \u00a0 print(\"\\r\")", "nl": "Print the Full Pyramid Alphabet Pattern"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num3 = num\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 # Sum of digit\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num1 % 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum += rem\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 10\n\u00a0 \u00a0 # Reverse of sum\n\u00a0 \u00a0 rev = 0\n\u00a0 \u00a0 num2 = sum\n\u00a0 \u00a0 while num2 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem2 = num2 % 10\n\u00a0 \u00a0 \u00a0 \u00a0 rev = rev * 10 + rem2\n\u00a0 \u00a0 \u00a0 \u00a0 num2 //= 10\n\u00a0 \u00a0 if sum * rev == num3:\n\u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Magic number is \",letest)", "nl": "Program to find the nth Magic Number"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)sum=int(input(\"Enter the Sum Value:\"))flag=0for i in range(0,size-1):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 if arr[i]+arr[j]==sum:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Given sum pairs of elements are \", arr[i],\" and \", arr[j],\".\\n\")if flag==0:\u00a0 print(\"Given sum Pair is not Present.\")", "nl": "Find a pair with given sum in the array"}
{"code": "\n\nprint(\"Enter the value of base:\")\na=int(input())\nb=int(input())\nprint(\"Enter the value of side:\")\nc=int(input())\nd=int(input())\nperimeter=a+b+c+d\nprint(\"Perimeter of the Trapezoid = \",perimeter)\n", "nl": "Program to compute the perimeter of Trapezoid"}
{"code": "n=int(raw_input())\nd=dict()\nfor i in range(1,n+1):\n    d[i]=i*i\n\nprint d\n", "nl": "With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary."}
{"code": "str=input(\"Enter Your String:\")arr=[0]*256max=0sec_max=0i=0for i in range(len(str)):\u00a0 \u00a0 if str[i]!=' ':\u00a0 \u00a0 \u00a0 \u00a0 num=ord(str[i])\u00a0 \u00a0 \u00a0 \u00a0 arr[num]+=1for i in range(256):\u00a0 \u00a0 if arr[i] > arr[max]:\u00a0 \u00a0 \u00a0 \u00a0 sec_max = max\u00a0 \u00a0 \u00a0 \u00a0 max = i\u00a0 \u00a0 elif arr[i]>arr[sec_max] and arr[i]!=arr[max]:\u00a0 \u00a0 \u00a0 \u00a0 sec_max = iprint(\"The Second Most occurring character in a string is \"+(chr)(sec_max))", "nl": "Find the second most frequent character in a given string"}
{"code": "def gaps(size):\n    # uses the gap sequence 2^k - 1: 1, 3, 7, 15, 31, ...\n    length = size.bit_length()\n    for k in range(length - 1, 0, -1):\n        yield 2**k - 1\n\u00a0\n\u00a0\ndef shell_sort(alist):\n    def insertion_sort_with_gap(gap):\n        for i in range(gap, len(alist)):\n            temp = alist[i]\n            j = i - gap\n            while (j >= 0 and temp < alist[j]):\n                alist[j + gap] = alist[j]\n                j = j - gap\n            alist[j + gap] = temp\n\u00a0\n    for g in gaps(len(alist)):\n        insertion_sort_with_gap(g)\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nshell_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Shell Sort"}
{"code": "\ndef merge(arr,first,mid,last):\n\n\u00a0 \u00a0 n1 = (mid - first + 1)\n\u00a0 \u00a0 n2 = (last - mid)\n\u00a0 \u00a0 Left=[0]*n1\n\u00a0 \u00a0 Right=[0]*n2\n\u00a0 \u00a0 for i in range(n1):\n\u00a0 \u00a0 \u00a0 \u00a0 Left[i] = arr[i + first]\n\u00a0 \u00a0 for j in range(n2):\n\u00a0 \u00a0 \u00a0 \u00a0 Right[j] = arr[mid + j + 1];\n\n\u00a0 \u00a0 k = first\n\u00a0 \u00a0 i = 0\n\u00a0 \u00a0 j = 0\n\n\u00a0 \u00a0 while i < n1 and j < n2:\n\u00a0 \u00a0 \u00a0 \u00a0 if Left[i] <= Right[j]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[k]=Left[i]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[k]=Right[j]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 j+=1\n\u00a0 \u00a0 \u00a0 \u00a0 k+=1\n\n\u00a0 \u00a0 while i < n1:\n\u00a0 \u00a0 \u00a0 \u00a0 arr[k] = Left[i]\n\u00a0 \u00a0 \u00a0 \u00a0 i +=1\n\u00a0 \u00a0 \u00a0 \u00a0 k +=1\n\u00a0 \u00a0 while j < n2 :\n\u00a0 \u00a0 \u00a0 \u00a0 arr[k] = Right[j]\n\u00a0 \u00a0 \u00a0 \u00a0 j +=1\n\u00a0 \u00a0 \u00a0 \u00a0 k +=1\n\ndef mergesort(arr,first,last):\n\u00a0 \u00a0 if(first<last):\n\u00a0 \u00a0 \u00a0 \u00a0 mid =first + (last - first)// 2\n\u00a0 \u00a0 \u00a0 \u00a0 mergesort(arr, first, mid)\n\u00a0 \u00a0 \u00a0 \u00a0 mergesort(arr, mid + 1, last)\n\u00a0 \u00a0 \u00a0 \u00a0 merge(arr, first, mid, last)\n\nsize=int(input(\"Enter the size of the array:\"))\narr=[]\nprint(\"Enter the element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Before Sorting Array Element are: \",arr)\n\nmergesort(arr,0,size-1)\n\nprint(\"\\nAfter Sorting Array Element are: \",arr)", "nl": "Merge Sort Program in Python | Java | C | C++"}
{"code": "\nnum1=int(input(\"Enter first number:\"))\nnum2=int(input(\"Enter\u00a0 second number:\"))\nsub=num1+(~num2+1)#number + 2's complement of number\nprint(\"Subtraction of two number is \",sub)\n", "nl": "Subtract Two Numbers Operator without using Minus(-) operator"}
{"code": "Solution\ndef printDict():\n\td=dict()\n\tfor i in range(1,21):\n\t\td[i]=i**2\n\tprint d\n\t\t\n\nprintDict()\n\n\n", "nl": "Define a function which can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.\n:"}
{"code": "n=int(input(\"Enter the range of number(Limit):\"))i=1while i<=n:\u00a0 \u00a0 print(i,end=\" \")\u00a0 \u00a0 i*=2", "nl": "Program to Print series 1,2,8,16,32...n"}
{"code": "key=int(input(\"Enter the key (int) to be added:\"))\nvalue=int(input(\"Enter the value for the key to be added:\"))\nd={}\nd.update({key:value})\nprint(\"Updated dictionary is:\")\nprint(d)", "nl": "Python Program to Add a Key-Value Pair to the Dictionary"}
{"code": "print(\"Enter a binary number: \")\nbinary=int(input());\noctal = 0\ndecimal = 0\ni = 0\nwhile (binary != 0):\n\u00a0 \u00a0 \u00a0 decimal = decimal + (binary % 10) * pow (2, i)\n\u00a0 \u00a0 \u00a0 i+=1\n\u00a0 \u00a0 \u00a0 binary = binary // 10\ni = 1\nwhile (decimal != 0):\n\u00a0 \u00a0 \u00a0 octal = octal + (decimal % 8) * i\n\u00a0 \u00a0 \u00a0 decimal = decimal // 8\n\u00a0 \u00a0 \u00a0 i = i * 10\n\n\nprint(\"octal value: \",octal)\n\n", "nl": "Program to convert binary to octal using while loop"}
{"code": "string=raw_input(\"Enter string:\")\nvowels=0\nfor i in string:\n      if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):\n            vowels=vowels+1\nprint(\"Number of vowels are:\")\nprint(vowels)", "nl": "Python Program to Count the Number of Vowels in a String"}
{"code": "\narr=[]\ncout=0\nsum=0\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"After reversing array is :\");\nfor i in range(size-1,-1,-1):\n\u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Print array elements in reverse order"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def append(self, data):\n        node = Node(data)\n        self.insert_at_end(node)\n\u00a0\n    def get_node(self, index, start):\n        if self.head is None:\n            return None\n        current = start\n        for i in range(index):\n            current = current.next\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        if self.head is None:\n            return None\n        current = self.head\n        while current.next != ref_node:\n            current = current.next\n        return current\n\u00a0\n    def insert_after(self, ref_node, new_node):\n        new_node.next = ref_node.next\n        ref_node.next = new_node\n\u00a0\n    def insert_before(self, ref_node, new_node):\n        prev_node = self.get_prev_node(ref_node)\n        self.insert_after(prev_node, new_node)\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.head is None:\n            self.head = new_node\n            new_node.next = new_node\n        else:\n            self.insert_before(self.head, new_node)\n\u00a0\n    def remove(self, node):\n        if self.head.next == self.head:\n            self.head = None\n        else:\n            prev_node = self.get_prev_node(node)\n            prev_node.next = node.next\n            if self.head == node:\n                self.head = node.next\n\u00a0\n\u00a0\ndef has_one_node(cllist):\n    if cllist.head.next == cllist.head:\n        return True\n    else:\n        return False\n\u00a0\n\u00a0\ndef get_josephus_solution(cllist, k):\n    if cllist.head is None:\n        return None\n    start = cllist.head\n    while not has_one_node(cllist):\n        to_remove = cllist.get_node(k - 1, start)\n        start = to_remove.next\n        cllist.remove(to_remove)\n    return cllist.head.data\n\u00a0\n\u00a0\na_cllist = CircularLinkedList()\nn = int(input('Input number of people: '))\nk = int(input('The kth person will be executed. Input k: '))\nfor i in range(1, n + 1):\n    a_cllist.append(i)\n\u00a0\nans = get_josephus_solution(a_cllist, k)\nprint('The person at position {} won\\'t be killed.'.format(ans))", "nl": "Python Program to Solve Josephus Problem using Linked List"}
{"code": "n=int(input(\"Enter upper limit of range: \"))\nsieve=set(range(2,n+1))\nwhile sieve:\n    prime=min(sieve)\n    print(prime,end=\"\\t\")\n    sieve-=set(range(prime,n+1,prime))\n\u00a0\nprint()", "nl": "Python Program to Read Print Prime Numbers in a Range using Sieve of Eratosthenes"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for i in range(row_size+1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Half Pyramid Number Pattern"}
{"code": "Solution\nli = [1,2,3,4,5,6,7,8,9,10]\nevenNumbers = filter(lambda x: x%2==0, li)\nprint evenNumbers\n\n\n", "nl": "Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].\n:"}
{"code": "\nstr=input(\"Enter the String:\")\nstr2 = []\ni = 0\nwhile i < len(str):\n\u00a0 \u00a0 ch = str[i]\n\u00a0 \u00a0 if (ch>='a' and ch <= 'z') or\u00a0 (ch >= 'A' and ch<= 'Z') or (ch >= '0' and ch <= '9') or (ch == '\\0'):\n\u00a0 \u00a0 \u00a0 \u00a0 str2.append(ch)\n\u00a0 \u00a0 i += 1\nFinal_String = ''.join(str2)\nprint(\"After removing special character letter string is:\",Final_String)", "nl": "Remove special characters from String"}
{"code": "\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=1\nj=3\nvalue=6\nwhile(i<=n):\n\u00a0 \u00a0 print(value,end=\" \")\n\u00a0 \u00a0 value+=j\n\u00a0 \u00a0 j+=2\n\u00a0 \u00a0 i+=1", "nl": "Program to print series 6,9,14,21,30,41,54...N"}
{"code": "\nnum=int(input(\"Enter a number:\"))\nsqr=num*num\n#Sum of digit\nsum=0\nwhile sqr!=0:\n\u00a0 \u00a0 rem = sqr % 10\n\u00a0 \u00a0 sum += rem\n\u00a0 \u00a0 sqr //= 10\n\nif sum==num:\n\u00a0 \u00a0 print(\"It is a Neon Number.\")\nelse:\n\u00a0 \u00a0print(\"It is not a Neon Number.\")", "nl": "Check whether number is Neon Number or Not."}
{"code": "row_size=int(input(\"Enter the row size:\"))for out in range(row_size,-(row_size+1),-1):\u00a0 \u00a0 for in1 in range(1,abs(out)+1):\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\u00a0 \u00a0 for p in range(abs(out),row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 print((chr)(p+65),end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to print the Solid Inverted Half Diamond Alphabet Pattern"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\ntemp=size\nwhile(temp>=0):\n\u00a0 \u00a0 for k in range(0,temp-1,1):\n\u00a0 \u00a0 \u00a0 \u00a0 temp2=arr[k]\n\u00a0 \u00a0 \u00a0 \u00a0 arr[k]=arr[k+1]\n\u00a0 \u00a0 \u00a0 \u00a0 arr[k+1]=temp2\n\u00a0 \u00a0 temp-=1\nprint(\"After reversing array is :\")\nfor i in range(0, size):\n\u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Print array elements in reverse order"}
{"code": "class Queue:\n    def __init__(self):\n        self.inbox = Stack()\n        self.outbox = Stack()\n\u00a0\n    def is_empty(self):\n        return (self.inbox.is_empty() and self.outbox.is_empty())\n\u00a0\n    def enqueue(self, data):\n        self.inbox.push(data)\n\u00a0\n    def dequeue(self):\n        if self.outbox.is_empty():\n            while not self.inbox.is_empty():\n                popped = self.inbox.pop()\n                self.outbox.push(popped)\n        return self.outbox.pop()\n\u00a0\n\u00a0\nclass Stack:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def push(self, data):\n        self.items.append(data)\n\u00a0\n    def pop(self):\n        return self.items.pop()\n\u00a0\n\u00a0\na_queue = Queue()\nwhile True:\n    print('enqueue <value>')\n    print('dequeue')\n    print('quit')\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'enqueue':\n        a_queue.enqueue(int(do[1]))\n    elif operation == 'dequeue':\n        if a_queue.is_empty():\n            print('Queue is empty.')\n        else:\n            dequeued = a_queue.dequeue()\n            print('Dequeued element: ', int(dequeued))\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Queues using Stacks"}
{"code": "\nimport sys\narr=[]\nfreq=[]\nmax=-sys.maxsize-1\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nfor i in range(0, size):\n\u00a0 \u00a0 if arr[i]>=max:\n\u00a0 \u00a0 \u00a0 \u00a0 max=arr[i]\nfor i in range(0,max+1):\n\u00a0 \u00a0 freq.append(0)\nfor i in range(0, size):\n\u00a0 \u00a0 freq[arr[i]]+=1\nmost_oc=0\nmost_v=0\nfor i in range(0, size):\n\u00a0 \u00a0 if freq[arr[i]] > most_oc:\n\u00a0 \u00a0 \u00a0 \u00a0 most_oc = freq[arr[i]]\n\u00a0 \u00a0 \u00a0 \u00a0 most_v = arr[i]\nprint(\"The Most occurring Number \",most_v,\" occurs \",most_oc,\" times.\")", "nl": "Print the most occurring elements in an array"}
{"code": "\nprint(\"Enter the range of number:\")\nn=int(input())\nprint(\"Enter the value of x:\");\nx=int(input())\nsum=0\ni=1\nwhile(i<=n):\n\u00a0 \u00a0 sum+=pow(x,i)\n\u00a0 \u00a0 i+=2\nprint(\"The sum of the series = \",sum)", "nl": "Program to find the sum of series 1/1+1/2+1/3..+1/N"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n       self.prev = None\n\u00a0\n\u00a0\nclass DoublyLinkedList:\n    def __init__(self):\n        self.first = None\n        self.last = None\n\u00a0\n    def get_node(self, index):\n        current = self.first\n        for i in range(index):\n            if current is None:\n                return None\n            current = current.next\n        return current\n\u00a0\n    def insert_after(self, ref_node, new_node):\n        new_node.prev = ref_node\n        if ref_node.next is None:\n            self.last = new_node\n        else:\n            new_node.next = ref_node.next\n            new_node.next.prev = new_node\n        ref_node.next = new_node\n\u00a0\n    def insert_before(self, ref_node, new_node):\n        new_node.next = ref_node\n        if ref_node.prev is None:\n            self.first = new_node\n        else:\n            new_node.prev = ref_node.prev\n            new_node.prev.next = new_node\n        ref_node.prev = new_node\n\u00a0\n    def insert_at_beg(self, new_node):\n        if self.first is None:\n            self.first = new_node\n            self.last = new_node\n        else:\n            self.insert_before(self.first, new_node)\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.last is None:\n            self.last = new_node\n            self.first = new_node\n        else:\n            self.insert_after(self.last, new_node)\n\u00a0\n    def remove(self, node):\n        if node.prev is None:\n            self.first = node.next\n        else:\n            node.prev.next = node.next\n\u00a0\n        if node.next is None:\n            self.last = node.prev\n        else:\n            node.next.prev = node.prev\n\u00a0\n    def display(self):\n        current = self.first\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\na_dllist = DoublyLinkedList()\n\u00a0\nprint('Menu')\nprint('insert <data> after <index>')\nprint('insert <data> before <index>')\nprint('insert <data> at beg')\nprint('insert <data> at end')\nprint('remove <index>') \nprint('quit')\n\u00a0\nwhile True:\n    print('The list: ', end = '')\n    a_dllist.display()\n    print()\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n\u00a0\n    if operation == 'insert':\n        data = int(do[1])\n        position = do[3].strip().lower()\n        new_node = Node(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            if position == 'beg':\n                a_dllist.insert_at_beg(new_node)\n            elif position == 'end':\n                a_dllist.insert_at_end(new_node)\n        else:\n            index = int(position)\n            ref_node = a_dllist.get_node(index)\n            if ref_node is None:\n                print('No such index.')\n                continue\n            if suboperation == 'after':\n                a_dllist.insert_after(ref_node, new_node)\n            elif suboperation == 'before':\n                a_dllist.insert_before(ref_node, new_node)\n\u00a0\n    elif operation == 'remove':\n        index = int(do[1])\n        node = a_dllist.get_node(index)\n        if node is None:\n            print('No such index.')\n            continue\n        a_dllist.remove(node)\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement a Doubly Linked List & provide Insertion, Deletion & Display Operations"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\ndef reverse_llist(llist):\n    before = None\n    current = llist.head\n    if current is None:\n        return\n    after = current.next\n    while after:\n        current.next = before\n        before = current\n        current = after\n        after = after.next\n    current.next = before\n    llist.head = current\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nreverse_llist(a_llist)\n\u00a0\nprint('The reversed list: ')\na_llist.display()", "nl": "Python Program to Reverse a Linked List"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def length(self):\n        return self.length_helper(self.head)\n\u00a0\n    def length_helper(self, current):\n        if current is None:\n            return 0\n        return 1 + self.length_helper(current.next)\n\u00a0\na_llist = LinkedList()\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nprint('The length of the linked list is ' + str(a_llist.length()) + '.', end = '')", "nl": "Python Program to Find the Length of the Linked List using Recursion"}
{"code": "d={'A':100,'B':540,'C':239}\nprint(\"Total sum of values in the dictionary:\")\nprint(sum(d.values()))", "nl": "Python Program to Sum All the Items in a Dictionary"}
{"code": "\nimport math\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 flag = 0\n\u00a0 \u00a0 for j in range(0, num + 1):\n\u00a0 \u00a0 \u00a0 \u00a0 if j * (j + 1) == num:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag = 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 if flag == 1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Pronic number is \",letest)\n\n\n", "nl": "Program to Find nth Pronic Number"}
{"code": "str=input(\"Enter Your String:\")ch=input(\"Enter the Character:\")sub_str=str.split(\" \")print(\"All the words starting with \",ch,\" are:\")for inn in range(0,len(sub_str)):\u00a0 \u00a0 if sub_str[inn].startswith(ch):\u00a0 \u00a0 \u00a0 \u00a0 print(sub_str[inn],end=\" \")", "nl": "Find words Starting with given characters(Prefix)"}
{"code": "\nimport math\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=2\nsum=1\nwhile(i<=n):\n\u00a0 \u00a0 if(i%2==0):\n\u00a0 \u00a0 \u00a0 \u00a0 sum+=pow(i,2)\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 sum-=pow(i,2)\n\u00a0 \u00a0 i+=1\nprint(\"The sum of the series = \",sum)", "nl": "Program to find sum of series 1+4-9+16-25+.....+N"}
{"code": "Solution\ntp=(1,2,3,4,5,6,7,8,9,10)\nli=list()\nfor i in tp:\n\tif tp[i]%2==0:\n\t\tli.append(tp[i])\n\ntp2=tuple(li)\nprint tp2\n\n\n\n", "nl": "Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10). \n:"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(row_size,-row_size,-1):\n\u00a0 \u00a0 for in1 in range(1,abs(out)+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for in2 in range(row_size,abs(out),-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"* \",end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Solid Diamond Star Pattern"}
{"code": "a=[['A',34],['B',21],['C',26]]\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j][1]>a[j+1][1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp\n\u00a0\nprint(a)", "nl": "Python Program to Sort the List According to the Second Element in Sublist"}
{"code": "\u00a0\nsum1=0\nnum=int(input(\"Enter a number:\"))\ntemp=num\nwhile(num):\n    i=1\n    f=1\n    r=num%10\n    while(i<=r):\n        f=f*i\n        i=i+1\n    sum1=sum1+f\n    num=num//10\nif(sum1==temp):\n    print(\"The number is a strong number\")\nelse:\n    print(\"The number is not a strong number\")", "nl": "Python Program to Check if a Number is a Strong Number"}
{"code": "\nimport random\nprint random.sample([i for i in range(100,201) if i%2==0], 5)\n\n\n", "nl": "\nPlease write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.\n\n\n:"}
{"code": "str=input(\"Enter Your String:\")sub_str=str.split(\" \")minInd=0min=0min = len(sub_str[0])for inn in range(0,len(sub_str)):\u00a0 \u00a0 len1 = len(sub_str[inn])\u00a0 \u00a0 if len1 < min:\u00a0 \u00a0 \u00a0 \u00a0 min=len1\u00a0 \u00a0 \u00a0 \u00a0 minInd=innprint(\"Smallest Substring(Word) is \",sub_str[minInd])", "nl": "Find the shortest word in a string"}
{"code": "\nclass Shape(object):\n    def __init__(self):\n        pass\n\n    def area(self):\n        return 0\n\nclass Square(Shape):\n    def __init__(self, l):\n        Shape.__init__(self)\n        self.length = l\n\n    def area(self):\n        return self.length*self.length\n\naSquare= Square(3)\nprint aSquare.area()\n\n\n\n\n\n\n\n\n", "nl": "\n\n7.2\n\nDefine a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.\n:"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Display Lower triangular matrix\nprint(\"Lower Triangular Matrix is:\\n\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            print(\"0 \",end=\"\")\n        else:\n            print(matrix[i][j],end=\" \")\n    print()", "nl": "Program to display a lower triangular matrix"}
{"code": "a=[]\nn=int(input(\"Enter number of elements:\"))\nfor i in range(1,n+1):\n    b=input(\"Enter element:\")\n    a.append(b)\na.sort(key=len)\nprint(a)", "nl": "Python Program to Sort a List According to the Length of the Elements"}
{"code": "import re\nemailAddress = raw_input()\npat2 = \"(\\w+)@((\\w+\\.)+(com))\"\nr2 = re.match(pat2,emailAddress)\nprint r2.group(1)\n\n\n", "nl": "\nAssuming that we have some email addresses in the \"username@companyname.com\" format, please write program to print the user name of a given email address. Both user names and company names are composed of letters only.\n"}
{"code": "string=raw_input(\"Enter string:\")\nsub_str=raw_input(\"Enter word:\")\nif(string.find(sub_str)==-1):\n      print(\"Substring not found in string!\")\nelse:\n      print(\"Substring in string!\")", "nl": "Python Program to Check if a Substring is Present in a Given String"}
{"code": "\n\n\n'''Write\na Python program\u00a0to check whether a given number is a prime or not. or\u00a0\n\n\n\n\u00a0\u00a0 Write a program\u00a0to\u00a0check whether\na given number is a prime or not using\nPython '''\n\nimport math\nnum=int(input(\"Enter a number:\"))\ncount=0\nfor i in range(2,int(math.sqrt(num))+1):\n\u00a0 \u00a0if num%i==0:\n\u00a0 \u00a0 \u00a0 count+=1\nif count==0:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"It is Prime\")\nelse:\n\u00a0 \u00a0 \u00a0 print(\"It is not Prime\")\n", "nl": "Check whether a given number is  prime or not"}
{"code": "def lcw(u, v):\n    \"\"\"Return length of an LCW of strings u and v and its starting indexes.\n\u00a0\n    (l, i, j) is returned where l is the length of an LCW of the strings u, v\n    where the LCW starts at index i in u and index j in v.\n    \"\"\"\n    # c[i][j] will contain the length of the LCW at the start of u[i:] and\n    # v[j:].\n    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]\n\u00a0\n    for i in range(len(u) + 1):\n        c[i][len(v)] = 0\n    for j in range(len(v)):\n        c[len(u)][j] = 0\n\u00a0\n    lcw_i = lcw_j = -1\n    length_lcw = 0\n    for i in range(len(u) - 1, -1, -1):\n        for j in range(len(v)):\n            if u[i] != v[j]:\n                c[i][j] = 0\n            else:\n                c[i][j] = 1 + c[i + 1][j + 1]\n                if length_lcw < c[i][j]:\n                    length_lcw = c[i][j]\n                    lcw_i = i\n                    lcw_j = j\n\u00a0\n    return length_lcw, lcw_i, lcw_j\n\u00a0\n\u00a0\nu = input('Enter first string: ')\nv = input('Enter second string: ')\nlength_lcw, lcw_i, lcw_j = lcw(u, v)\nprint('Longest Common Subword: ', end='')\nif length_lcw > 0:\n    print(u[lcw_i:lcw_i + length_lcw])", "nl": "Python Program to Find Longest Common Substring using Dynamic Programming with Bottom-Up Approach"}
{"code": "def lcw(u, v):\n    \"\"\"Return length of an LCW of strings u and v and its starting indexes.\n\u00a0\n    (l, i, j) is returned where l is the length of an LCW of the strings u, v\n    where the LCW starts at index i in u and index j in v.\n    \"\"\"\n    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]\n\u00a0\n    lcw_i = lcw_j = -1\n    length_lcw = 0\n    for i in range(len(u)):\n        for j in range(len(v)):\n            temp = lcw_starting_at(u, v, c, i, j)\n            if length_lcw < temp:\n                length_lcw = temp\n                lcw_i = i\n                lcw_j = j\n\u00a0\n    return length_lcw, lcw_i, lcw_j\n\u00a0\n\u00a0\ndef lcw_starting_at(u, v, c, i, j):\n    \"\"\"Return length of the LCW starting at u[i:] and v[j:] and fill table c.\n\u00a0\n    c[i][j] contains the length of the LCW at the start of u[i:] and v[j:].\n    This function fills in c as smaller subproblems for solving c[i][j] are\n    solved.\"\"\"\n    if c[i][j] >= 0:\n        return c[i][j]\n\u00a0\n    if i == len(u) or j == len(v):\n        q = 0\n    elif u[i] != v[j]:\n        q = 0\n    else:\n        q = 1 + lcw_starting_at(u, v, c, i + 1, j + 1)\n\u00a0\n    c[i][j] = q\n    return q\n\u00a0\n\u00a0\nu = input('Enter first string: ')\nv = input('Enter second string: ')\nlength_lcw, lcw_i, lcw_j = lcw(u, v)\nprint('Longest Common Subword: ', end='')\nif length_lcw > 0:\n    print(u[lcw_i:lcw_i + length_lcw])", "nl": "Python Program to Find Longest Common Substring using Dynamic Programming with Memoization"}
{"code": "from math import factorial\n\u00a0\ndef print_permutations_lexicographic_order(s):\n    \"\"\"Print all permutations of string s in lexicographic order.\"\"\"\n    seq = list(s)\n\u00a0\n    # there are going to be n! permutations where n = len(seq)\n    for _ in range(factorial(len(seq))):\n        # print permutation\n        print(''.join(seq))\n\u00a0\n        # find p such that seq[p:] is the largest sequence with elements in\n        # descending lexicographic order\n        p = len(seq) - 1\n        while p > 0 and seq[p - 1] > seq[p]:\n            p -= 1\n\u00a0\n        # reverse seq[p:]\n        seq[p:] = reversed(seq[p:])\n\u00a0\n        if p > 0:\n            # find q such that seq[q] is the smallest element in seq[p:] such that\n            # seq[q] > seq[p - 1]\n            q = p\n            while seq[p - 1] > seq[q]:\n                q += 1\n\u00a0\n            # swap seq[p - 1] and seq[q]\n            seq[p - 1], seq[q] = seq[q], seq[p - 1]\n\u00a0\n\u00a0\ns = input('Enter the string: ')\nprint_permutations_lexicographic_order(s)", "nl": "Python Program to Print All Permutations of a String in Lexicographic Order without Recursion"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0add find the Smallest digit in a number. or\u00a0Write a\nprogram\u00a0to\u00a0add find the Smallest digit in a number using Python '''\n\nprint(\"Enter the Number :\")\nnum=int(input())\nsmallest=num%10\nwhile num > 0:\n\u00a0 \u00a0 reminder = num % 10\n\u00a0 \u00a0 if smallest > reminder:\n\u00a0 \u00a0 \u00a0 \u00a0 smallest = reminder\n\u00a0 \u00a0 num =int(num / 10)\nprint(\"The Smallest Digit is \", smallest)\u00a0\n", "nl": "Find the Smallest digit in a number"}
{"code": "a=[]\nn=int(input(\"Enter number of elements:\"))\nfor i in range(1,n+1):\n    b=int(input(\"Enter element:\"))\n    a.append(b)\neven=[]\nodd=[]\nfor j in a:\n    if(j%2==0):\n        even.append(j)\n    else:\n        odd.append(j)\nprint(\"The even list\",even)\nprint(\"The odd list\",odd)", "nl": "Python Program to Put Even and Odd elements in a List into Two Different Lists"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# Compute transpose of two matrices\ntran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(0,row_size):\n    for j in range(0,col_size):\n        tran_matrix[i][j]=matrix[j][i]\n\n# display transpose of the matrix\nprint(\"Transpose of the Given Matrix is:\")\nfor m in tran_matrix:\n    print(m)", "nl": "Program to find the transpose of a matrix"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0add between 2 numbers without using arithmetic operators.\nor\u00a0Write a program\u00a0to\u00a0add between 2 numbers without using\narithmetic operators using Python '''\n\nprint(\"Enter first number:\")\nnum1=int(input())\nprint(\"Enter\u00a0 second number:\")\nnum2=int(input())\nwhile num2 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0carry= num1 & num2\n\u00a0 \u00a0 \u00a0 \u00a0num1= num1 ^ num2\n\u00a0 \u00a0 \u00a0 \u00a0num2=carry << 1\nprint(\"Addition of two number is \",num1)\u00a0\n", "nl": "Add between 2 numbers without using arithmetic operators"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def inorder(self):\n        if self.left is not None:\n            self.left.inorder()\n        print(self.key, end=' ')\n        if self.right is not None:\n            self.right.inorder()\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n\u00a0\ndef count_nodes(node):\n    if node is None:\n        return 0\n    return 1 + count_nodes(node.left) + count_nodes(node.right)\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('count')\nprint('quit')\n\u00a0\nwhile True:\n    print('inorder traversal of binary tree: ', end='')\n    if btree is not None:\n        btree.inorder()\n    print()\n\u00a0\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'count':\n        print('Number of nodes in tree: {}'.format(count_nodes(btree)))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find the Number of Nodes in a Binary Tree"}
{"code": "Solution\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[-5:]\n\t\t\n\nprintList()\n\n\n", "nl": "Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.\n:"}
{"code": "def even(num1,num2):\u00a0 \u00a0 if num1>num2:\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 print(num1,end=\" \")\u00a0 \u00a0 return even(num1+2,num2)num1=2print(\"Enter your Limit:\")num2=int(input())print(\"All Even number given range are:\")even(num1,num2)", "nl": "Print even numbers in given range using recursion"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.\"\"\"\n        self.add_edge(v1_key, v2_key, weight)\n        self.add_edge(v2_key, v1_key, weight)\n\u00a0\n    def does_undirected_edge_exist(self, v1_key, v2_key):\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\n        return (self.does_edge_exist(v1_key, v2_key)\n                and self.does_edge_exist(v1_key, v2_key))\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef label_all_reachable(vertex, component, label):\n    \"\"\"Set component[v] = label for all v in the component containing vertex.\"\"\"\n    label_all_reachable_helper(vertex, set(), component, label)\n\u00a0\n\u00a0\ndef label_all_reachable_helper(vertex, visited, component, label):\n    \"\"\"Set component[v] = label for all v in the component containing\n    vertex. Uses set visited to keep track of nodes alread visited.\"\"\"\n    visited.add(vertex)\n    component[vertex] = label\n    for dest in vertex.get_neighbours():\n        if dest not in visited:\n            label_all_reachable_helper(dest, visited, component, label)\n\u00a0\n\u00a0\ng = Graph()\nprint('Undirected Graph')\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('components')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_undirected_edge_exist(src, dest):\n                    g.add_undirected_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'components':\n        component = dict.fromkeys(g, None)\n        label = 1\n        for v in g:\n            if component[v] is None:\n                label_all_reachable(v, component, label)\n                label += 1\n\u00a0\n        max_label = label\n        for label in range(1, max_label):\n            print('Component {}:'.format(label),\n                  [v.get_key() for v in component if component[v] == label])\n\u00a0\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find All Connected Components using DFS in an Undirected Graph"}
{"code": "import math\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# Calculate sum of the diagonals element\n# and Calculate sum of all the element\ntrace=0\nsum=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if i==j:\n            trace += matrix[i][j]\n        sum+=matrix[i][j]\nnormal=math.sqrt(sum)\n\n# Display the normal and trace of the matrix\nprint(\"Normal Of the Matrix is: \",normal)\nprint(\"Trace Of the Matrix is: \",trace)", "nl": "Program to find the normal and trace of a matrix"}
{"code": "sum=0def check_ArmstrongNumber(num):\u00a0 \u00a0 global sum\u00a0 \u00a0 if (num!=0):\u00a0 \u00a0 \u00a0 \u00a0 sum+=pow(num%10,3)\u00a0 \u00a0 \u00a0 \u00a0 check_ArmstrongNumber(num//10)\u00a0 \u00a0 return sumnum=int(input(\"Enter a number:\"))if (check_ArmstrongNumber(num) == num):\u00a0 \u00a0 print(\"It is an Armstrong Number.\")else:\u00a0 \u00a0 print(\"It is not an Armstrong Number.\")", "nl": "Check Armstrong number using recursion"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def get_node(self, index):\n        if self.head is None:\n            return None\n        current = self.head\n        for i in range(index):\n            current = current.next\n            if current == self.head:\n                return None\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        if self.head is None:\n            return None\n        current = self.head\n        while current.next != ref_node:\n            current = current.next\n        return current\n\u00a0\n    def insert_after(self, ref_node, new_node):\n        new_node.next = ref_node.next\n        ref_node.next = new_node\n\u00a0\n    def insert_before(self, ref_node, new_node):\n        prev_node = self.get_prev_node(ref_node)\n        self.insert_after(prev_node, new_node)\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.head is None:\n            self.head = new_node\n            new_node.next = new_node\n        else:\n            self.insert_before(self.head, new_node)\n\u00a0\n    def append(self, data):\n        self.insert_at_end(Node(data))\n\u00a0\n    def display(self):\n        if self.head is None:\n            return\n        current = self.head\n        while True:\n            print(current.data, end = ' ')\n            current = current.next\n            if current == self.head:\n                break\n\u00a0\ndef interchange(llist, n):\n    current = llist.get_node(n)\n    current2 = current.next\n    if current2.next != current:\n        before = llist.get_prev_node(current)\n        after = current2.next\n        before.next = current2\n        current2.next = current\n        current.next = after\n    if llist.head == current:\n        llist.head = current2\n    elif llist.head == current2:\n        llist.head = current\n\u00a0\n\u00a0\na_cllist = CircularLinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_cllist.append(int(data))\n\u00a0\nn = int(input('The nodes at indices n and n+1 will be interchanged.'\n              ' Please enter n: '))\n\u00a0\ninterchange(a_cllist, n)\n\u00a0\nprint('The new list: ')\na_cllist.display()", "nl": "Python Program to Interchange the two Adjacent Nodes given a circular Linked List"}
{"code": "\nimport sys\narr=[]\nfreq=[]\nmax=-sys.maxsize-1\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nfor i in range(0, size):\n\u00a0 \u00a0 if(arr[i]>=max):\n\u00a0 \u00a0 \u00a0 \u00a0 max=arr[i]\nfor i in range(0,max+1):\n\u00a0 \u00a0 freq.append(0)\n\nfor i in range(0, size):\n\u00a0 \u00a0 freq[arr[i]]+=1\nfor i in range(0, max+1):\n\u00a0 \u00a0 if(freq[i]!=0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"occurs \",i,\" \",freq[i],\" times\")", "nl": "Print the frequency of all numbers in an array"}
{"code": "def SumEven(num1,num2):\u00a0 \u00a0 if num1>num2:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 return num1+SumEven(num1+2,num2)num1=2print(\"Enter your Limit:\")num2=int(input())print(\"Sum of all Even numbers in the given range is:\",SumEven(num1,num2))", "nl": "Find the sum of Even numbers using recursion"}
{"code": "def SumOdd(num1,num2):\u00a0 \u00a0 if num1>num2:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 return num1+SumOdd(num1+2,num2)num1=1print(\"Enter your Limit:\")num2=int(input())print(\"Sum of all odd numbers in the given range is:\",SumOdd(num1,num2))", "nl": "Find the sum of odd numbers using recursion"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nprint_control_x=row_size\nprint_control_y=row_size\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for in1 in range(1,row_size*2+1):\n\u00a0 \u00a0 \u00a0 \u00a0 if in1==print_control_x or in1==print_control_y:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\n\u00a0 \u00a0 print_control_x-=1\n\u00a0 \u00a0 print_control_y+=1\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Inverted V Star Pattern"}
{"code": "\n\n'''Write\na Python program\u00a0to check the given number is a palindrome or not. or\u00a0\n\n\u00a0\u00a0 Write a program\u00a0to\u00a0check the\ngiven number is a palindrome or not\nusing Python '''\n\n\nnum=int(input(\"Enter a number:\"))\nnum1=num\nnum2=0\nwhile(num!=0):\n\u00a0 \u00a0rem=num%10\n\u00a0 \u00a0num=int(num/10)\n\u00a0 \u00a0num2=num2*10+rem\nif(num1==num2):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"It is Palindrome\")\nelse:\n\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"It is not Palindrome\")\u00a0", "nl": "Program to check the given number is a palindrome or not"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def insert_at_beg(self, new_node):\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\na_llist = LinkedList()\nn = int(input('How many elements would you like to add? '))\nfor i in range(n):\n    data = int(input('Enter data item: '))\n    node = Node(data)\n    a_llist.insert_at_beg(node)\n\u00a0\nprint('The linked list: ', end = '')\na_llist.display()", "nl": "Python Program to Read a Linked List in Reverse"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Subtraction of two matrices\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\n\n# display the Subtraction of two matrices\nprint(\"Subtraction of the two Matrices is:\")\nfor m in sub_matrix:\n    print(m)", "nl": "Program to Find subtraction of two matrices"}
{"code": "s = raw_input()\nd={\"DIGITS\":0, \"LETTERS\":0}\nfor c in s:\n    if c.isdigit():\n        d[\"DIGITS\"]+=1\n    elif c.isalpha():\n        d[\"LETTERS\"]+=1\n    else:\n        pass\nprint \"LETTERS\", d[\"LETTERS\"]\nprint \"DIGITS\", d[\"DIGITS\"]\n", "nl": "Write a program that accepts a sentence and calculate the number of letters and digits."}
{"code": "days=int(input(\"Enter Day:\"))\n\nyears =(int) (days / 365)\nweeks =(int) (days / 7)\nmonths =(int) (days / 30)\n\nprint(\"Days to Years:\",years)\nprint(\"Days to Weeks:\",weeks)\nprint(\"Days to Months:\",months)", "nl": "Program to convert Days into years, months and Weeks"}
{"code": "def last(n):\n    return n[-1]  \n\u00a0\ndef sort(tuples):\n    return sorted(tuples, key=last)\n\u00a0\na=input(\"Enter a list of tuples:\")\nprint(\"Sorted:\")\nprint(sort(a))", "nl": "Python program to Sort a List of Tuples in Increasing Order by the Last Element in Each Tuple"}
{"code": "def radix_sort(alist, base=10):\n    if alist == []:\n        return\n\u00a0\n    def key_factory(digit, base):\n        def key(alist, index):\n            return ((alist[index]//(base**digit)) % base)\n        return key\n    largest = max(alist)\n    exp = 0\n    while base**exp <= largest:\n        alist = counting_sort(alist, base - 1, key_factory(exp, base))\n        exp = exp + 1\n    return alist\n\u00a0\ndef counting_sort(alist, largest, key):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[key(alist, i)] = c[key(alist, i)] + 1\n\u00a0\n    # Find the last index for each element\n    c[0] = c[0] - 1 # to decrement each element for zero-based indexing\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n\u00a0\n    result = [None]*len(alist)\n    for i in range(len(alist) - 1, -1, -1):\n        result[c[key(alist, i)]] = alist[i]\n        c[key(alist, i)] = c[key(alist, i)] - 1\n\u00a0\n    return result\n\u00a0\nalist = input('Enter the list of (nonnegative) numbers: ').split()\nalist = [int(x) for x in alist]\nsorted_list = radix_sort(alist)\nprint('Sorted list: ', end='')\nprint(sorted_list)", "nl": " Python Program to Implement Radix Sort "}
{"code": "def count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\u00a0\n\u00a0\nn = int(input('Enter n: '))\nprint('Number of set bits:', count_set_bits(n))", "nl": "Python Program to Count Set Bits in a Number"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\ncount_zero=0\n#Count number of zeros present in the given Matrix\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]==0:\n            count_zero+=1\n\n#check if zeros present in the given Matrix>(row*column)/2\nif count_zero>(row_size*col_size)//2:\n    print(\"Given Matrix is a sparse Matrix.\")\nelse:\n    print(\"Given Matrix is not a sparse Matrix.\")", "nl": "Program to check whether a matrix is sparse or not"}
{"code": "a=[]\nn=int(input(\"Enter number of elements:\"))\nfor i in range(1,n+1):\n    b=int(input(\"Enter element:\"))\n    a.append(b)\na.sort()\nprint(\"Largest element is:\",a[n-1])", "nl": "Python Program to Find the Largest Number in a List"}
{"code": "\n\nprint(\"Enter 3 numbers:\")\nnum1=int(input())\nnum2=int(input())\nnum3=int(input())\nprint(\"The smallest number is \",min(num1,num2,num3))\n\n", "nl": "Program to Find the smallest of three numbers"}
{"code": "def printno(upper):\n    if(upper>0):\n        printno(upper-1)\n        print(upper)\nupper=int(input(\"Enter upper limit: \"))\nprintno(upper)", "nl": "Python Program to Print Numbers in a Range (1,upper) Without Using any Loops"}
{"code": "\nprint(\"Enter the row size:\")\nrow_size=int(input())\nfor out in range(row_size+1):\n\u00a0 \u00a0 for j in range(row_size,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": "Program to print inverted right triangle star pattern"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display_reversed(self):\n        end_node = None\n\u00a0\n        while end_node != self.head:\n            current = self.head\n            while current.next != end_node:\n                current = current.next\n            print(current.data, end = ' ')\n            end_node = current\n\u00a0\na_llist = LinkedList()\nn = int(input('How many elements would you like to add? '))\nfor i in range(n):\n    data = int(input('Enter data item: '))\n    a_llist.append(data)\n\u00a0\nprint('The reversed linked list: ', end = '')\na_llist.display_reversed()", "nl": " Python Program to Display the Nodes of a Linked List in Reverse without using Recursion"}
{"code": "str3=\"\"def DecimalToHexadecimal(n):\u00a0 \u00a0 global str3\u00a0 \u00a0 if(n!=0):\u00a0 \u00a0 \u00a0 \u00a0 rem = n % 16\u00a0 \u00a0 \u00a0 \u00a0 if (rem < 10):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str3 += (chr)(rem + 48) # 48 Ascii = 0\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str3 += (chr)(rem + 55) #55 Ascii = 7\u00a0 \u00a0 \u00a0 \u00a0 DecimalToHexadecimal(n // 16)\u00a0 \u00a0 return str3n=int(input(\"Enter the Decimal Value:\"))str=DecimalToHexadecimal(n)print(\"Hexadecimal Value of Decimal number is:\",''.join(reversed(str)))", "nl": "Convert a decimal number to hexadecimal using recursion"}
{"code": "\nnum=int(input(\"Enter a number:\"))\nsum=0\nmult=1\nwhile num!=0:\n\u00a0 \u00a0 rem = num % 10\n\u00a0 \u00a0 sum += rem\n\u00a0 \u00a0 mult *= rem\n\u00a0 \u00a0 num //= 10\n\nif sum==mult:\n\u00a0 \u00a0 print(\"It is a spy Number.\")\nelse:\n\u00a0 \u00a0print(\"It is not a spy Number.\")", "nl": "Program to check whether number is Spy Number or Not"}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the maximum element of the given 2d array\nmax=-sys.maxsize-1\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]>=max:\n            max=matrix[i][j]\n\n# Display the largest element of the given matrix\nprint(\"The Maximum element of the Given 2d array is: \",max)", "nl": "Find the maximum element in the matrix"}
{"code": "string=raw_input(\"Enter string:\")\ncount1=0\ncount2=0\nfor i in string:\n      if(i.islower()):\n            count1=count1+1\n      elif(i.isupper()):\n            count2=count2+1\nprint(\"The number of lowercase characters is:\")\nprint(count1)\nprint(\"The number of uppercase characters is:\")\nprint(count2)", "nl": "Python Program to Calculate the Number of Upper Case Letters and Lower Case Letters in a String"}
{"code": "\nprint(\"Enter the row and column size:\");\nrow_size=int(input())\nfor out in range(0,row_size):\n\u00a0 \u00a0 for i in range(0,row_size):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\")\n\u00a0 \u00a0 print(\"\\r\")\n\n\n", "nl": "Program to print square star pattern"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(row_size,0,-1):\n\u00a0 \u00a0 for in1 in range(row_size,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for in2 in range(1, out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(in2,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Inverted Half Pyramid Number Pattern"}
{"code": "\nimport sys\narr=[]\nfreq=[]\nmax=-sys.maxsize-1\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nfor i in range(0, size):\n\u00a0 \u00a0 if(arr[i]>=max):\n\u00a0 \u00a0 \u00a0 \u00a0 max=arr[i]\nfor i in range(0,max+1):\n\u00a0 \u00a0 freq.append(0)\n\nfor i in range(0, size):\n\u00a0 \u00a0 freq[arr[i]]+=1\ncount=0\nfor i in range(0, max+1):\n\u00a0 \u00a0 if freq[i] == 1:\n\u00a0 \u00a0 \u00a0 \u00a0 count+=1\nprint(\"Numbers of distinct elements are \",count)", "nl": "Count distinct elements in an array"}
{"code": "\nsize=int(input(\"Enter number of names:\"))\nprint(\"Enter \",size,\" names:\")\nstr=[]\nfor i in range(size):\n\u00a0 \u00a0 ele=input()\n\u00a0 \u00a0 str.append(ele)\nfor i in range(size):\n\u00a0 \u00a0 for j in range(i+1,size):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (str[i]>str[j])>0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=str[i]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str[i]=str[j]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 str[j]=temp\nprint(\"After sorting names are:\")\nfor i in range(size):\n\u00a0 \u00a0 print(str[i])", "nl": "Sort names in alphabetical order"}
{"code": "Solution\ndef printList():\n\tli=list()\n\tfor i in range(1,21):\n\t\tli.append(i**2)\n\tprint li[:5]\n\t\t\n\nprintList()\n\n\n", "nl": "Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.\n:"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def count(self, key):\n        return self.count_helper(self.head, key)\n\u00a0\n    def count_helper(self, current, key):\n        if current is None:\n            return 0\n\u00a0\n        if current.data == key:\n            return 1 + self.count_helper(current.next, key)\n        else:\n            return self.count_helper(current.next, key)\n\u00a0\na_llist = LinkedList()\nfor data in [7, 3, 7, 4, 7, 11, 4, 0, 3, 7]:\n    a_llist.append(data)\nprint('The linked list: ', end = '')\na_llist.display()\nprint()\n\u00a0\nkey = int(input('Enter data item: '))\ncount = a_llist.count(key)\nprint('{0} occurs {1} time(s) in the list.'.format(key, count))", "nl": "Python Program to Count the Number of Occurrences of an Element in the Linked List using Recursion"}
{"code": "\nclass Rectangle(object):\n    def __init__(self, l, w):\n        self.length = l\n        self.width  = w\n\n    def area(self):\n        return self.length*self.width\n\naRectangle = Rectangle(2,10)\nprint aRectangle.area()\n\n\n\n\n", "nl": "\n\n7.2\n\nDefine a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. \n:"}
{"code": "\nimport math\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num1=num\n\u00a0 \u00a0 c1 = 0\n\u00a0 \u00a0 num2 = num\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 c1 += 1\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num1 % 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum += math.pow(rem, c1)\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 c1 -= 1\n\u00a0 \u00a0 if sum == num2:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Sunny number is \",letest)", "nl": "Program to Find nth Disarium Number"}
{"code": "def select(alist, start, end, i):\n    \"\"\"Find ith largest element in alist[start... end-1].\"\"\"\n    if end - start <= 1:\n        return alist[start]\n    pivot = partition(alist, start, end)\n\u00a0\n    # number of elements in alist[pivot... end - 1]\n    k = end - pivot\n\u00a0\n    if i < k:\n        return select(alist, pivot + 1, end, i)\n    elif i > k:\n        return select(alist, start, pivot, i - k)\n\u00a0\n    return alist[pivot]\n\u00a0\ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n\u00a0\n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n\u00a0\n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ')\nalist = alist.split()\nalist = [int(x) for x in alist]\ni = int(input('The ith smallest element will be found. Enter i: '))\n\u00a0\nith_smallest_item = select(alist, 0, len(alist), i)\nprint('Result: {}.'.format(ith_smallest_item))", "nl": "Python Program to Select the ith Largest Element from a List in Expected Linear Time"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\nsum=0\n# Compute Multiplication of two matrices\nmul_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        for k in range(row_size):\n            sum+=matrix[i][j]*matrix1[i][j]\n        mul_matrix[i][j]=sum\n\n# display the Multiplication of two matrices\nprint(\"Multiplication of the two Matrices is:\")\nfor m in mul_matrix:\n    print(m)", "nl": "Program to Find the multiplication of two matrices"}
{"code": "\n\n'''Write\na Python program\u00a0to check whether a given number is a strong number or\nnot. or\u00a0\n\nWrite a program\u00a0to\u00a0check whether\na given number is a strong number or not\nusing Python '''\n\nnum=int(input(\"Enter a number:\"))\nnum2=num\nsum=0\nwhile(num!=0):\n\u00a0 \u00a0fact=1\n\u00a0 \u00a0rem=num%10\n\u00a0 \u00a0num=int(num/10)\n\u00a0 \u00a0for i in range(1,rem+1):\n\u00a0 \u00a0 \u00a0 fact=fact*i\n\u00a0 \u00a0sum=sum+fact\nif sum==num2:\n\u00a0 \u00a0print(\"It is a Strong Number\")\nelse:\n\u00a0 \u00a0print(\"It is not a Strong Number\")\n\n\n", "nl": "Check whether a given number is a strong number or not"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(row_size,-row_size,-1):\n\u00a0 \u00a0 for in1 in range(1,abs(out)+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(row_size,abs(out),-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to print the Solid Inverted Half Diamond Star Pattern"}
{"code": "\nprint(\"Enter the range of number:\")\nn=int(input())\nprint(\"Enter the value of x:\")\nx=int(input())\nsum=1.0\ni=1\nwhile(i<=n):\n\u00a0 \u00a0 fact=1\n\u00a0 \u00a0 for j in range(1,i+1):\n\u00a0 \u00a0 \u00a0 \u00a0 fact*=j\n\u00a0 \u00a0 \u00a0 \u00a0 sum+=pow(x,i)/fact\n\u00a0 \u00a0 i+=1\nprint(\"The sum of the series = \",sum)", "nl": "Program to find the sum of series 1+X+X^2/2!+X^3/3!...+X^N/N!"}
{"code": "\nrangenumber=int(input(\"Enter an Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 sqr = num1 * num1\n\u00a0 \u00a0 flag = 0\n\u00a0 \u00a0 while num1>0:\n\u00a0 \u00a0 \u00a0 \u00a0 if num1%10 != sqr%10:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag = -1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 num1 = num1 // 10\n\u00a0 \u00a0 \u00a0 \u00a0 sqr = sqr // 10\n\n\u00a0 \u00a0 if flag==0:\n\u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Automorphic number is \",letest)", "nl": "Program to Find the nth Automorphic number"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nfor i in range(0,size):\n\u00a0 \u00a0 word = (input())\n\u00a0 \u00a0 arr.append(word)\nfor i in range(0,size):\n\u00a0 \u00a0 print(arr[i],end=\"\")", "nl": " Input a string through the keyboard and Print the same"}
{"code": "def knapsack(value, weight, capacity):\n    \"\"\"Return the maximum value of items that doesn't exceed capacity.\n\u00a0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n\u00a0\n    capacity is the maximum weight.\n    \"\"\"\n    n = len(value) - 1\n\u00a0\n    # m[i][w] will store the maximum value that can be attained with a maximum\n    # capacity of w and using only the first i items\n    m = [[-1]*(capacity + 1) for _ in range(n + 1)]\n\u00a0\n    return knapsack_helper(value, weight, m, n, capacity)\n\u00a0\n\u00a0\ndef knapsack_helper(value, weight, m, i, w):\n    \"\"\"Return maximum value of first i items attainable with weight <= w.\n\u00a0\n    m[i][w] will store the maximum value that can be attained with a maximum\n    capacity of w and using only the first i items\n    This function fills m as smaller subproblems needed to compute m[i][w] are\n    solved.\n\u00a0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n    \"\"\"\n    if m[i][w] >= 0:\n        return m[i][w]\n\u00a0\n    if i == 0:\n        q = 0\n    elif weight[i] <= w:\n        q = max(knapsack_helper(value, weight,\n                                m, i - 1 , w - weight[i])\n                + value[i],\n                knapsack_helper(value, weight,\n                                m, i - 1 , w))\n    else:\n        q = knapsack_helper(value, weight,\n                            m, i - 1 , w)\n    m[i][w] = q\n    return q\n\u00a0\n\u00a0\nn = int(input('Enter number of items: '))\nvalue = input('Enter the values of the {} item(s) in order: '\n              .format(n)).split()\nvalue = [int(v) for v in value]\nvalue.insert(0, None) # so that the value of the ith item is at value[i]\nweight = input('Enter the positive weights of the {} item(s) in order: '\n               .format(n)).split()\nweight = [int(w) for w in weight]\nweight.insert(0, None) # so that the weight of the ith item is at weight[i]\ncapacity = int(input('Enter maximum weight: '))\n\u00a0\nans = knapsack(value, weight, capacity)\nprint('The maximum value of items that can be carried:', ans)", "nl": "Python Program to Solve 0-1 Knapsack Problem using Dynamic Programming with Memoization"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nsearch_elm=int(input(\"Enter the search element: \"))\nfound=0\n\nfor i in range(size):\n\u00a0 \u00a0 if arr[i]==search_elm:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 found=1\n\nif found==1:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Search element is found.\")\nelse:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Search element is not found.\")\n\n", "nl": "Linear Search Program in C | C++ | Java | Python "}
{"code": "def swap_Element(arr,i,j):\u00a0 \u00a0 temp = arr[i]\u00a0 \u00a0 arr[i] = arr[j]\u00a0 \u00a0 arr[j] = tempdef Decreasing_sort_element(arr,n):\u00a0 \u00a0 if(n>0):\u00a0 \u00a0 \u00a0 \u00a0 for i in range(0,n):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (arr[i] <= arr[n - 1]):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 swap_Element(arr, i, n - 1)\u00a0 \u00a0 \u00a0 \u00a0 Decreasing_sort_element(arr, n - 1)def printArr(arr,n):\u00a0 \u00a0 for i in range(0, n):\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Decreasing_sort_element(arr,n)print(\"After Decreasing order sort Array Elements are:\")printArr(arr, n)", "nl": "Sort array in descending order using recursion"}
{"code": "class Stack:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def push(self, data):\n        self.items.append(data)\n\u00a0\n    def pop(self):\n        return self.items.pop()\n\u00a0\n    def display(self):\n        for data in reversed(self.items):\n            print(data)\n\u00a0\ndef insert_at_bottom(s, data):\n    if s.is_empty():\n        s.push(data)\n    else:\n        popped = s.pop()\n        insert_at_bottom(s, data)\n        s.push(popped)\n\u00a0\n\u00a0\ndef reverse_stack(s):\n    if not s.is_empty():\n        popped = s.pop()\n        reverse_stack(s)\n        insert_at_bottom(s, popped)\n\u00a0\n\u00a0\ns = Stack()\ndata_list = input('Please enter the elements to push: ').split()\nfor data in data_list:\n    s.push(int(data))\n\u00a0\nprint('The stack:')\ns.display()\nreverse_stack(s)\nprint('After reversing:')\ns.display()", "nl": "Python Program to Reverse a Stack using Recursion"}
{"code": "\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=1\na=0\nb=1\nc=a+b\nwhile(i<=n):\n\u00a0 \u00a0 print(c,end=\" \")\n\u00a0 \u00a0 c = a + b\n\u00a0 \u00a0 a = b\n\u00a0 \u00a0 b = c\n\u00a0 \u00a0 i+=1", "nl": "Program to print Fibonacci series in Python | C | C++ | Java"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Calculate sum of lower triangular matrix element\nsum=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            sum += matrix[i][j]\n\n# display the sum of a lower triangular matrix element\nprint(\"Sum of Lower Triangular Matrix Elements is: \",sum)", "nl": "Program to Find the sum of a lower triangular matrix"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 flag = 0\n\u00a0 \u00a0 num1=num\n\u00a0 \u00a0 cube_power = num * num * num\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 if num1 % 10 != cube_power % 10:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag = 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 cube_power //= 10\n\u00a0 \u00a0 if flag == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Trimorphic number is \",latest)", "nl": "Program to Find nth Trimorphic Number"}
{"code": "\nstr=input(\"Enter the String:\")\nv_count = 0\ns_count = 0\nn_count = 0\nfor i in range(len(str)):\n\u00a0 \u00a0 if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i' or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U':\n\u00a0 \u00a0 \u00a0 \u00a0 v_count+=1\n\u00a0 \u00a0 elif str[i] >= '0' and str[i] <= '9':\n\u00a0 \u00a0 \u00a0 \u00a0 n_count+=1\n\u00a0 \u00a0 elif str[i] >=chr(0) and str[i] <= chr(47) or str[i] >= chr(58) and str[i] <=chr(64) or str[i] >=chr(91) and str[i] <= chr(96) or str[i] >= chr(123) and str[i] <= chr(127):\n\u00a0 \u00a0 \u00a0 \u00a0 s_count+=1\nprint(\"Number of digits: \",n_count)\nprint(\"Number of vowels: \", v_count)\nprint(\"Number of special character: \",s_count)\nprint(\"Number of consonants: \",len(str) - n_count - v_count - s_count)", "nl": "Count the number of vowels, consonants, numbers, and special characters present in a string"}
{"code": "def binary_search(alist, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    start = 0\n    end = len(alist)\n    while start < end:\n        mid = (start + end)//2\n        if alist[mid] > key:\n            end = mid\n        elif alist[mid] < key:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n\u00a0\n\u00a0\nalist = input('Enter the sorted list of numbers: ')\nalist = alist.split()\nalist = [int(x) for x in alist]\nkey = int(input('The number to search for: '))\n\u00a0\nindex = binary_search(alist, key)\nif index < 0:\n    print('{} was not found.'.format(key))\nelse:\n    print('{} was found at index {}.'.format(key, index))", "nl": "Python Program to Implement Binary Search without Recursion"}
{"code": "\u00a0\nn=int(input(\"Enter an integer:\"))\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1", "nl": "Python Program to Compute Prime Factors of an Integer"}
{"code": "row_size=int(input(\"Enter the row size:\"))for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size*2):\u00a0 \u00a0 \u00a0 \u00a0 if inn<=out or inn>=row_size*2-out:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": "Print the Inverted Pant's Shape Star Pattern"}
{"code": "row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 if inn==1 or out==inn or out==row_size:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": "Program to Print the Hollow Half Pyramid Star Pattern"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# Compute transpose of two matrices\ntran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(0,row_size):\n    for j in range(0,col_size):\n        tran_matrix[i][j]=matrix[j][i]\n\n# display transpose of the matrix\nprint(\"Transpose of the Given Matrix is:\")\nfor m in tran_matrix:\n    print(m)", "nl": "Program to find the transpose of a matrix"}
{"code": "\nstr=input(\"Enter the String:\")\nprint(\"All the consonants in the string are:\")\nfor i in range(len(str)):\n\u00a0 \u00a0 if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i'or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U':\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(str[i],end=\" \")", "nl": "Print only consonants in a string"}
{"code": "\nnum1=int(input(\"Enter the First numbers :\"))\nnum2=int(input(\"Enter the Second number:\"))\nsum=0\nfor i in range(1,num1+1):\n\u00a0 \u00a0 sum=sum+num2\nprint(\"The multiplication of \",num1,\" and \",num2,\" is \",sum)\n", "nl": "Multiply two numbers without using multiplication(*) operator"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n    def preorder_depth_first(self):\n        s = Stack()\n        s.push(self)\n        while (not s.is_empty()):\n            node = s.pop()\n            print(node.key, end=' ')\n            if node.right is not None:\n                s.push(node.right)\n            if node.left is not None:\n                s.push(node.left)\n\u00a0\n\u00a0\nclass Stack:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def push(self, data):\n        self.items.append(data)\n\u00a0\n    def pop(self):\n        return self.items.pop()\n\u00a0\n\u00a0\nbtree = BinaryTree()\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('dfs')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'dfs':\n        print('pre-order dfs traversal: ', end='')\n        if btree is not None:\n            btree.preorder_depth_first()\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program for Depth First Binary Tree Search without using Recursion"}
{"code": "def CheckPrime(i,num):\u00a0 \u00a0 if num==i:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 if(num%i==0):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return CheckPrime(i+1,num)n=int(input(\"Enter your Number:\"))print(\"Prime Number Between 1 to n are: \")for i in range(2,n+1):\u00a0 \u00a0 if(CheckPrime(2,i)==0):\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\" \")", "nl": "Print prime numbers from 1 to n using recursion"}
{"code": "s1=raw_input(\"Enter first string:\")\ns2=raw_input(\"Enter second string:\")\nif(sorted(s1)==sorted(s2)):\n      print(\"The strings are anagrams.\")\nelse:\n      print(\"The strings aren't anagrams.\")", "nl": "Python Program to Detect if Two Strings are Anagrams"}
{"code": "\nstr=input(\"Enter the String(Lower case):\")\nprint(\"Upper case String is:\", str.upper())", "nl": "Convert Lowercase to Uppercase using the inbuilt function"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# Calculate sum of given matrix Elements\nsum=0\nfor i in range(0,row_size):\n    for j in range(0,col_size):\n        sum+=matrix[i][j]\n\n# Display The Sum Of Given Matrix Elements\nprint(\"Sum of the Given Matrix Elements is: \",sum)", "nl": "Find the sum of all elements in a 2D Array"}
{"code": "Solutions:\nfrom operator import itemgetter, attrgetter\n\nl = []\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    l.append(tuple(s.split(\",\")))\n\nprint sorted(l, key=itemgetter(0,1,2))\n", "nl": "You are required to write a program to sort the (name, age, height) tuples by ascending order where name is string, age and height are numbers. The tuples are input by console. The sort criteria is:\n1: Sort based on name;\n2: Then sort based on age;\n3: Then sort by score.\nThe priority is that name > age > score.\nIf the following tuples are given as input to the program:\nTom,19,80\nJohn,20,90\nJony,17,91\nJony,17,93\nJson,21,85\nThen, the output of the program should be:\n[('John', '20', '90'), ('Jony', '17', '91'), ('Jony', '17', '93'), ('Json', '21', '85'), ('Tom', '19', '80')]\n:"}
{"code": "print(\"Enter a hyphen separated sequence of words:\")\nlst=[n for n in raw_input().split('-')]  \nlst.sort()\nprint(\"Sorted:\")\nprint('-'.join(lst))", "nl": "Python Program to Accept a Hyphen Separated Sequence of Words as Input and Print the Words in a Hyphen-Separated Sequence after Sorting them Alphabetically"}
{"code": "string=raw_input(\"Enter string:\")\ncount1=0\ncount2=0\nfor i in string:\n      if(i.isdigit()):\n            count1=count1+1\n      count2=count2+1\nprint(\"The number of digits is:\")\nprint(count1)\nprint(\"The number of characters is:\")\nprint(count2)", "nl": "Python Program to Calculate the Number of Digits and Letters in a String"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nstar_print=1\nfor out in range(0,row_size):\n\u00a0 \u00a0 for inn in range(row_size-1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(0,star_print):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\n\u00a0 \u00a0 star_print+=2\n\u00a0 \u00a0 print(\"\\r\")", "nl": "Program to print the Full Pyramid Star Pattern"}
{"code": "class rectangle():\n    def __init__(self,breadth,length):\n        self.breadth=breadth\n        self.length=length\n    def area(self):\n        return self.breadth*self.length\na=int(input(\"Enter length of rectangle: \"))\nb=int(input(\"Enter breadth of rectangle: \"))\nobj=rectangle(a,b)\nprint(\"Area of rectangle:\",obj.area())\n\u00a0\nprint()", "nl": "Python Program to Find the Area of a Rectangle Using Classes"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def length(self):\n        current = self.head\n        length = 0\n        while current:\n            length = length + 1\n            current = current.next\n        return length\n\u00a0\na_llist = LinkedList()\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nprint('The length of the linked list is ' + str(a_llist.length()) + '.', end = '')", "nl": "Python Program to Find the Length of the Linked List without using Recursion"}
{"code": "\nstr=input(\"Enter the String:\")\nj=0\nnewStr=\"\"\nfor i in range(len(str)):\n\u00a0 \u00a0 if j%2==1:\n\u00a0 \u00a0 \u00a0 \u00a0 if str[i]>='A' and str[i]<='Z' :\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ch=chr(ord(str[i])+32)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newStr=newStr+ch\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newStr=newStr+str[i]\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 if str[i] >= 'a' and str[i] <= 'z':\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ch=chr(ord(str[i])-32)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newStr=newStr+ch\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newStr=newStr+str[i]\n\u00a0 \u00a0 if str[i]==' ':\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 j=j+1\nprint(\"After converting Your String is :\", newStr)", "nl": "Convert alternate characters to capital letters"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nsearch_elm=int(input(\"Enter the search element: \"))\nfound=0\n\nlowerBound = 0\nupperBound = size-1\n\nwhile lowerBound<=upperBound and not found:\n\u00a0 \u00a0 mid = (lowerBound + upperBound ) // 2\n\u00a0 \u00a0 if arr[mid]==search_elm:\n\u00a0 \u00a0 \u00a0 \u00a0 found=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[mid] < search_elm:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 lowerBound = mid + 1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 upperBound = mid - 1\nif found==1:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Search element is found.\")\nelse:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Search element is not found.\")\n\n\n", "nl": "Binary Search Program in C | C++ | Java | Python "}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef display_dfs(v):\n    \"\"\"Display DFS traversal starting at vertex v.\"\"\"\n    display_dfs_helper(v, set())\n\u00a0\n\u00a0\ndef display_dfs_helper(v, visited):\n    \"\"\"Display DFS traversal starting at vertex v. Uses set visited to keep\n    track of already visited nodes.\"\"\"\n    visited.add(v)\n    print(v.get_key(), end=' ')\n    for dest in v.get_neighbours():\n        if dest not in visited:\n            display_dfs_helper(dest, visited)\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('dfs <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'dfs':\n        key = int(do[1])\n        print('Depth-first Traversal: ', end='')\n        vertex = g.get_vertex(key)\n        display_dfs(vertex)\n        print()\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Depth-First Search on a Graph using Recursion"}
{"code": "Solution\ndef SumFunction(number1, number2):\n\treturn number1+number2\n\nprint SumFunction(1,2)\n\n", "nl": "Define a function which can compute the sum of two numbers.\n:"}
{"code": "import java.util.Scanner;public class AnagramString { static void rotate(char str[],int n) { \u00a0 \u00a0int j,size=str.length; \u00a0 \u00a0int p=size-n; \u00a0 \u00a0char temp=str[p]; \u00a0 \u00a0 for(j=p+1;j<size;j++) \u00a0 \u00a0 \u00a0 \u00a0str[j-1]=str[j]; \u00a0 \u00a0 str[j-1]=temp; } static void doAnagram(char str[], int n) { \u00a0 \u00a0 if(n==1) \u00a0 \u00a0 \u00a0 \u00a0 return; \u00a0 \u00a0 for(int j=0;j<n;j++) \u00a0 \u00a0 \u00a0{ \u00a0 \u00a0 \u00a0 \u00a0 doAnagram(str,n-1); \u00a0 \u00a0 \u00a0 \u00a0 if(n==2) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 display(str); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0} \u00a0 \u00a0 \u00a0 \u00a0 rotate(str,n); \u00a0 \u00a0 \u00a0} } static void display(char str[]) {\u00a0 int size=str.length,j; \u00a0 \u00a0 for(j=0; j<size; j++) \u00a0 \u00a0   System.out.print(str[j]); \u00a0 \u00a0 System.out.print(\" \"); } public static void main(String[] args) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Scanner cs=new Scanner(System.in);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0String str1;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0System.out.print(\"Enter your String:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0str1=cs.nextLine();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0char str[]=str1.toCharArray();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0System.out.print(\"All permutations of a Given string are:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0doAnagram(str,str.length); \u00a0 \u00a0 \u00a0 \u00a0 cs.close(); } }", "nl": "Print all permutations of a string using recursion"}
{"code": "str=input(\"Enter Your String:\")str1=input(\"Enter your Searching word:\")out = 0i=0j=0while out< len(str1):\u00a0 \u00a0 for i in range(len(str)):\u00a0 \u00a0 \u00a0 \u00a0 for j in range(len(str1)):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (str[i] == str1[j]):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 j+=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 j=0\u00a0 \u00a0 out+=1if(j==out):\u00a0 \u00a0 print(\"Searching word is Found.\")else:\u00a0 \u00a0 print(\"Searching Word is not Found.\")", "nl": "Check if a string contains a given substring"}
{"code": "fname = input(\"Enter file name: \")\n\u00a0\nwith open(fname, 'r') as f:\n    for line in f:\n        l=line.title()\n        print(l)", "nl": "Python Program to Read a File and Capitalize the First Letter of Every Word in the File"}
{"code": "Solution\ndef checkValue(n):\n\tif n%2 == 0:\n\t\tprint \"It is an even number\"\n\telse:\n\t\tprint \"It is an odd number\"\n\t\t\n\ncheckValue(7)\n\n\n", "nl": "Define a function that can accept an integer number as input and print the \"It is an even number\" if the number is even, otherwise print \"It is an odd number\".\n:"}
{"code": "def InsertionSort(arr,n):\u00a0 \u00a0 if(n<=1):\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 InsertionSort(arr, n-1)\u00a0 \u00a0 temp = arr[n - 1]\u00a0 \u00a0 i = n - 2\u00a0 \u00a0 while (i >= 0 and arr[i] > temp):\u00a0 \u00a0 \u00a0 \u00a0 arr[ i +1] = arr[ i]\u00a0 \u00a0 \u00a0 \u00a0 i=i-1\u00a0 \u00a0 arr[i+1] = temparr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)print(\"Before Sorting Array Element are: \",arr)InsertionSort(arr, n)print(\"After Sorting Array Elements are:\",arr)", "nl": "Insertion sort using recursion"}
{"code": "import math\npos = [0,0]\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    movement = s.split(\" \")\n    direction = movement[0]\n    steps = int(movement[1])\n    if direction==\"UP\":\n        pos[0]+=steps\n    elif direction==\"DOWN\":\n        pos[0]-=steps\n    elif direction==\"LEFT\":\n        pos[1]-=steps\n    elif direction==\"RIGHT\":\n        pos[1]+=steps\n    else:\n        pass\n\nprint int(round(math.sqrt(pos[1]**2+pos[0]**2)))\n", "nl": "A robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\n\u00c2\u00a1\u00c2\u00ad\nThe numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer."}
{"code": "class BSTNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.parent = None\n\u00a0\n    def insert(self, node):\n        if self.key > node.key:\n            if self.left is None:\n                self.left = node\n                node.parent = self\n            else:\n                self.left.insert(node)\n        elif self.key <= node.key:\n            if self.right is None:\n                self.right = node\n                node.parent = self\n            else:\n                self.right.insert(node)\n\u00a0\n    def inorder(self):\n        if self.left is not None:\n            self.left.inorder()\n        print(self.key, end=' ')\n        if self.right is not None:\n            self.right.inorder()\n\u00a0\n\u00a0\nclass BSTree:\n    def __init__(self):\n        self.root = None\n\u00a0\n    def inorder(self):\n        if self.root is not None:\n            self.root.inorder()\n\u00a0\n    def add(self, key):\n        new_node = BSTNode(key)\n        if self.root is None:\n            self.root = new_node\n        else:\n            self.root.insert(new_node)\n\u00a0\n\u00a0\nbstree = BSTree()\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nfor x in alist:\n    bstree.add(x)\nprint('Sorted list: ', end='')\nbstree.inorder()", "nl": "Python Program to Sort using a Binary Search Tree"}
{"code": "\ndef removeDuplicate( li ):\n    newli=[]\n    seen = set()\n    for item in li:\n        if item not in seen:\n            seen.add( item )\n            newli.append(item)\n\n    return newli\n\nli=[12,24,35,24,88,120,155,88,120,155]\nprint removeDuplicate(li)\n\n\n", "nl": "\n\nWith a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original order reserved.\n:"}
{"code": "num=int(input(\"Enter a number:\"))\nif(num<0):\n\u00a0 \u00a0 print(\"The number is negative\")\nelif(num>0):\n\u00a0 \u00a0 print(\"The number is positive\")\nelse:\n\u00a0 \u00a0 \u00a0print(\"The number is neither negative nor positive\")", "nl": "Check whether a given number is positive or negative"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\na_llist = LinkedList()\nn = int(input('How many elements would you like to add? '))\nfor i in range(n):\n    data = int(input('Enter data item: '))\n    a_llist.append(data)\nprint('The linked list: ', end = '')\na_llist.display()", "nl": "Python Program to Create a Linked List & Display the Elements in the List"}
{"code": "\n\n'''Write\na Python program\u00a0to check whether a given number is Friendly pair or\nnot. or\u00a0\n\n\u00a0\u00a0 Write a program\u00a0to\u00a0check whether\na given number is Friendly pair or not\nusing Python '''\n\nprint(\"Enter two numbers:\")\nnum1=int(input())\nnum2=int(input())\nsum1=0\nsum2=0\nfor i in range(1,num1):\n\u00a0 \u00a0if(num1%i==0):\n\u00a0 \u00a0 \u00a0 sum1=sum1+i\nfor i in range(1,num2):\n\u00a0 \u00a0if(num2%i==0):\n\u00a0 \u00a0 \u00a0 sum2=sum2+i\nif num1/num2==sum1/sum2:\n\u00a0 \u00a0print(\"It is a Friendly Pair\")\nelse:\n\u00a0 \u00a0print(\"It is not a Friendly Pair\")\n", "nl": "Check whether a given number is Friendly pair or not"}
{"code": "def Find_median(arr,arr2,size,size2):\u00a0 \u00a0 m_size = size + size2\u00a0 \u00a0 merge_arr = [0]*m_size\u00a0 \u00a0 i=0\u00a0 \u00a0 k=0\u00a0 \u00a0 j=0\u00a0 \u00a0 while k<m_size:\u00a0 \u00a0 \u00a0 \u00a0if i<size:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0merge_arr[k] = arr[i]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0i+=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0k+=1\u00a0 \u00a0 \u00a0 \u00a0if j<size2:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0merge_arr[k] = arr2[j]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0j+=1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0k+=1\u00a0 \u00a0 if size % 2 == 1:\u00a0 \u00a0 \u00a0 \u00a0 median = merge_arr[size // 2]\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\nMedian= \", median)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 median = (merge_arr[m_size // 2] + (merge_arr[(m_size // 2) - 1])) / 2.0\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\nMedian= \", median)arr=[]arr2=[]size = int(input(\"Enter the size of the 1st array: \"))size2 = int(input(\"Enter the size of the 2nd array: \"))print(\"Enter the Element of the 1st array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)print(\"Enter the Element of the 2nd array:\")for i in range(0,size2):\u00a0 \u00a0 num2 = int(input())\u00a0 \u00a0 arr2.append(num2)Find_median(arr,arr2,size,size2)", "nl": "Find median of two sorted arrays of different sizes"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n    def duplicate(self):\n        copy = LinkedList()\n        current = self.head\n        while current:\n            node = Node(current.data)\n            copy.insert_at_end(node)\n            current = current.next\n        return copy\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\u00a0\n    def remove(self, node):\n        prev_node = self.get_prev_node(node)\n        if prev_node is None:\n            self.head = self.head.next\n        else:\n            prev_node.next = node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\ndef remove_duplicates(llist):\n    current1 = llist.head\n    while current1:\n        current2 = current1.next\n        data = current1.data\n        while current2:\n            temp = current2\n            current2 = current2.next\n            if temp.data == data:\n                llist.remove(temp)\n        current1 = current1.next\n\u00a0\n\u00a0\ndef find_union(llist1, llist2):\n    if llist1.head is None:\n        union = llist2.duplicate()\n        remove_duplicates(union)\n        return union\n    if llist2.head is None:\n        union = llist1.duplicate()\n        remove_duplicates(union)\n        return union\n\u00a0\n    union = llist1.duplicate()\n    last_node = union.head\n    while last_node.next is not None:\n        last_node = last_node.next\n    llist2_copy = llist2.duplicate()\n    last_node.next = llist2_copy.head\n    remove_duplicates(union)\n\u00a0\n    return union\n\u00a0\n\u00a0\ndef find_intersection(llist1, llist2):\n    if (llist1.head is None or llist2.head is None):\n        return LinkedList()\n\u00a0\n    intersection = LinkedList()\n    current1 = llist1.head\n    while current1:\n        current2 = llist2.head\n        data = current1.data\n        while current2:\n            if current2.data == data:\n                node = Node(data)\n                intersection.insert_at_end(node)\n                break\n            current2 = current2.next\n        current1 = current1.next\n    remove_duplicates(intersection)\n\u00a0\n    return intersection\n\u00a0\n\u00a0\na_llist1 = LinkedList()\na_llist2 = LinkedList()\ndata_list = input('Please enter the elements in the first linked list: ').split()\nfor data in data_list:\n    node = Node(int(data))\n    a_llist1.insert_at_end(node)\ndata_list = input('Please enter the elements in the second linked list: ').split()\nfor data in data_list:\n    node = Node(int(data))\n    a_llist2.insert_at_end(node)\n\u00a0\nunion = find_union(a_llist1, a_llist2)\nintersection = find_intersection(a_llist1, a_llist2)\n\u00a0\nprint('Their union: ')\nunion.display()\nprint()\nprint('Their intersection: ')\nintersection.display()\nprint()", "nl": "Python Program to Find Intersection & Union of 2 Linked Lists"}
{"code": "def collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n\u00a0\n\u00a0\nn = int(input('Enter n: '))\nprint('Sequence: ', end='')\ncollatz(n)", "nl": "Python Program to test Collatz Conjecture for a Given Number"}
{"code": "\nn=int(raw_input())\nsum=0.0\nfor i in range(1,n+1):\n    sum += float(float(i)/(i+1))\nprint sum\n\n\n", "nl": "\nWrite a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).\n"}
{"code": "input_str = raw_input()\ndimensions=[int(x) for x in input_str.split(',')]\nrowNum=dimensions[0]\ncolNum=dimensions[1]\nmultilist = [[0 for col in range(colNum)] for row in range(rowNum)]\n\nfor row in range(rowNum):\n    for col in range(colNum):\n        multilist[row][col]= row*col\n\nprint multilist\n", "nl": "Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\nNote: i=0,1.., X-1; j=0,1,\u00c2\u00a1\u00c2\u00adY-1."}
{"code": "\n\nyear=int(input(\"Enter a Year:\"))\nif ((year % 100 == 0 and year % 400 == 0) or (year % 100 != 0 and year % 4 == 0)):\n\u00a0 \u00a0 \u00a0print(\"It is a Leap Year\")\nelse:\nprint(\"It is not a Leap Year\")", "nl": "Check whether a year is leap year or not"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nprint_control_x=row_size\nprint_control_y=row_size\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for inn in range(1,row_size*2):\n\u00a0 \u00a0 \u00a0 \u00a0 if inn>print_control_x and inn<print_control_y:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\", end=\"\")\n\u00a0 \u00a0 print_control_x-=1\n\u00a0 \u00a0 print_control_y+=1\n\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to Print the Pant's Shape Star Pattern"}
{"code": "import math\nn=int(input(\"Enter the number of terms: \"))\nsum1=1\nfor i in range(1,n+1):\n    sum1=sum1+(1/math.factorial(i))\nprint(\"The sum of series is\",round(sum1,2))", "nl": "Python Program to Compute the Value of Euler's Number e. Use the Formula: e = 1 + 1/1! + 1/2! + \u2026\u2026 1/n!"}
{"code": "radius=int(input(\"Enter the radius of a circle :\"))\n\narea=3.14*radius*radius\nperimeter=2*3.14*radius\n\nprint(\"Area =\",area)\nprint(\"Perimeter =\",perimeter)\n", "nl": "Program to Find the area and perimeter of a circle"}
{"code": "d1={'A':1,'B':2}\nd2={'C':3}\nd1.update(d2)\nprint(\"Concatenated dictionary is:\")\nprint(d1)", "nl": "Python Program to Concatenate Two Dictionaries Into One"}
{"code": "\ndef reverse(num):\n\u00a0 \u00a0 if num<10:\n\u00a0 \u00a0 \u00a0 print(num)\n\u00a0 \u00a0 \u00a0 return\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(num % 10,end=\"\")\n\u00a0 \u00a0 \u00a0 \u00a0 reverse(int(num / 10))\nprint(\"Enter your number:\")\nnum=int(input())\nprint(\"Reverse of the input number is:\")\nreverse(num)\u00a0\n", "nl": "Find reverse of a number using recursion"}
{"code": "\ndef throws():\n    return 5/0\n\ntry:\n    throws()\nexcept ZeroDivisionError:\n    print \"division by zero!\"\nexcept Exception, err:\n    print 'Caught an exception'\nfinally:\n    print 'In finally block for cleanup'\n\n\n", "nl": "\nWrite a function to compute 5/0 and use try/except to catch the exceptions.\n:"}
{"code": "\nnum=int(input(\"Enter a number:\"))\nnum2=0\nwhile(num!=0):\n\u00a0 \u00a0rem=num%10\n\u00a0 \u00a0num=int(num/10)\n\u00a0 \u00a0num2=num2*10+rem\nprint(\"The reverse of the number is\",num2)\n", "nl": "Program to Find the reverse of a given number"}
{"code": "import math\na=int(input(\"Enter first side: \"))\nb=int(input(\"Enter second side: \"))\nc=int(input(\"Enter third side: \"))\ns=(a+b+c)/2\narea=math.sqrt(s*(s-a)*(s-b)*(s-c))\nprint(\"Area of the triangle is: \",round(area,2))", "nl": "Python Program to Find the Area of a Triangle Given All Three Sides"}
{"code": "\nli = [12,24,35,70,88,120,155]\nli = [x for (i,x) in enumerate(li) if i%2!=0]\nprint li\n\n", "nl": "\nBy using list comprehension, please write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].\n:"}
{"code": "netAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n", "nl": "Write a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following:\nD 100\nW 200\n\nD means deposit while W means withdrawal."}
{"code": "row_size=int(input(\"Enter the row size:\"))\nnp=1\nfor out in range(0,row_size):\n\u00a0 \u00a0 for in1 in range(row_size-1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for in2 in range(1, np+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(in2,end=\"\")\n\u00a0 \u00a0 np+=2\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Full Pyramid Number Pattern"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)First_element=arr[0]Second_element=arr[1]Closest_Zero_Sum=First_element+Second_elementfor i in range(0,size-1):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 sum = arr[i] + arr[j]\u00a0 \u00a0 \u00a0 \u00a0 if abs(sum) <= abs(Closest_Zero_Sum):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Closest_Zero_Sum = sum\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 First_element = arr[i]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Second_element = arr[j]print(\"Closest to Zero Pair is (\",First_element,\",\",Second_element,\")\")", "nl": "Find two elements whose sum is closest to zero"}
{"code": "class A(object):  \n     def __init__(self):  \n         self.A=1  \n         self.B=2  \nobj=A()  \nprint(obj.__dict__)", "nl": "Python Program to Form a Dictionary from an Object of a Class"}
{"code": "\nsize=int(input(\"Enter the size of the array:\"));\narr=[]\nprint(\"Enter the element of the array:\");\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Before Sorting Array Element are: \",arr)\n\n\nfor out in range(1,size-1):\n\u00a0 \u00a0 temp = arr[out]\n\u00a0 \u00a0 inn=out\n\u00a0 \u00a0 while inn > 0 and arr[inn -1] >= temp:\n\u00a0 \u00a0 \u00a0 \u00a0 arr[inn] = arr[inn -1]\n\u00a0 \u00a0 \u00a0 \u00a0 inn-=1\n\u00a0 \u00a0 arr[inn] = temp\n\nprint(\"\\nAfter Sorting Array Element are: \",arr)\n\n", "nl": "Insertion Sort Program in Python | Java | C | C++"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)pos=int(input(\"Enter the position of the Element:\"))print(\"Before deleting array elements are:\")for i in range(0,size):\u00a0 \u00a0 print(arr[i],end=\" \")arr.pop(pos)print(\"\\nAfter Deleting Array Element are:\")print(arr)", "nl": "Remove element from an array by index"}
{"code": "\nprint(\"Enter the row and column size:\")\nrow_size=input()\nfor out in range(ord(row_size),ord('A')-1,-1):\n\u00a0 \u00a0 for i in range(ord(row_size)-1,out-1,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for p in range(ord('A'), out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(out),end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n\n", "nl": "Print the Alphabet Inverted Half Pyramid Pattern"}
{"code": "\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Trimorphic numbers between \",range1,\" and \",range2,\" are: \")\nfor i in range(range1,range2+1):\n\u00a0 \u00a0 flag = 0\n\u00a0 \u00a0 num=i\n\u00a0 \u00a0 cube_power = num * num * num\n\u00a0 \u00a0 while num != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 if num % 10 != cube_power % 10:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag = 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 num //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 cube_power //= 10\n\u00a0 \u00a0 if flag == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\" \")", "nl": "Find out all Trimorphic numbers present within a given range"}
{"code": "def Factorial(num):\u00a0 \u00a0 if num<=0:\u00a0 \u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return num*Factorial(num-1)sum=0def check_StrongNumber(num):\u00a0 \u00a0 global sum\u00a0 \u00a0 if (num>0):\u00a0 \u00a0 \u00a0 \u00a0 fact = 1\u00a0 \u00a0 \u00a0 \u00a0 rem = num % 10\u00a0 \u00a0 \u00a0 \u00a0 check_StrongNumber(num // 10)\u00a0 \u00a0 \u00a0 \u00a0 fact = Factorial(rem)\u00a0 \u00a0 \u00a0 \u00a0 sum+=fact\u00a0 \u00a0 return sumnum=int(input(\"Enter a number:\"))if (check_StrongNumber(num) == num):\u00a0 \u00a0 print(\"It is a strong Number.\")else:\u00a0 \u00a0 print(\"It is not a strong Number.\")", "nl": "Check strong number using recursion"}
{"code": "def Copy_String(str, str1,i):\u00a0 \u00a0 str1[i]=str[i]\u00a0 \u00a0 if (str[i] == '\\0'):\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 Copy_String(str, str1, i + 1)str=input(\"Enter your String:\")str+='\\0'str1=[0]*(len(str))Copy_String(str, str1,0)print(\"Copy Done...\")print(\"Copy string is:\",\"\".join(str1))", "nl": "Copy one string to another using recursion"}
{"code": "\nstr=input(\"Enter the 1st String:\")\nstr2=input(\"Enter the 2nd String:\")\nprint(\"After concatenate string is:\")\nprint(str+\" \"+str2)", "nl": "Program to concatenate two String"}
{"code": "n=int(input(\"Enter the range of number:\"))sum=0p=3for i in range(1,n+1):\u00a0 \u00a0 sum += p\u00a0 \u00a0 p=(p*10)+3print(\"The sum of the series = \",sum)", "nl": "Program to Find the sum of series 3+33+333.....+N"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)sum=0for i in range(0,size):\u00a0 \u00a0 sum += arr[i]size2=size+1miss=int((size2*(size2+1))/2)print(\"Missing Number is: \",abs(miss-sum))", "nl": "Find missing numbers in an array"}
{"code": "print(\"Enter marks of 5 subjects out of 100:\")\nsub1=float(input(\"Enter sub1 marks:\"))\nsub2=float(input(\"Enter sub2 marks:\"))\nsub3=float(input(\"Enter sub3 marks:\"))\nsub4=float(input(\"Enter sub4 marks:\"))\nsub5=float(input(\"Enter sub5 marks:\"))\n\ntotal_marks=sub1+sub2+sub3+sub4+sub5;\navg=total_marks/5.0;\npercentage=total_marks/500*100;\n\nprint(\"Total Marks:\",total_marks)\nprint(\"Average:\",avg)\nprint(\"Percentage:\",percentage,\"%\")", "nl": "Enter marks of five subjects and calculate total, average, and percentage"}
{"code": "n=int(input(\"Enter the range of number:\"))sum=0p=3for i in range(1,n+1):\u00a0 \u00a0 sum += p\u00a0 \u00a0 p=(p*10)+3print(\"The sum of the series = \",sum)", "nl": "Program to Find the sum of series 3+33+333.....+N"}
{"code": "\n# -*- coding: utf-8 -*-\n\n", "nl": "\nWrite a special comment to indicate a Python source code file is in unicode.\n:"}
{"code": "value = []\nitems=[x for x in raw_input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\n\nprint ','.join(value)\n", "nl": "Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence."}
{"code": "\nnum=int(input(\"Enter a number:\"))\nflag=0\ncube_power=num*num*num\nwhile num!=0:\n\u00a0 \u00a0 if num%10!=cube_power%10:\n\u00a0 \u00a0 \u00a0 \u00a0 flag=1\n\u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 num//=10\n\u00a0 \u00a0 cube_power//=10\nif flag==0:\n\u00a0 \u00a0 print(\"It is a Trimorphic Number.\")\nelse:\n\u00a0 \u00a0print(\"It is Not a Trimorphic Number.\")", "nl": "Check whether number is Trimorphic Number or Not"}
{"code": "\nprint(\"Enter the row and column size:\");\nrow_size=input()\nfor out in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 for i in range(ord('A'),out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(i),end=\" \")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": "Print mirrored right triangle Alphabet pattern"}
{"code": "row_size=int(input(\"Enter the row size:\"))x=0for out in range(row_size,-(row_size+1),-1):\u00a0 \u00a0 for inn in range(1,abs(out)+1):\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\u00a0 \u00a0 for p in range(row_size,abs(out)-1,-1):\u00a0 \u00a0 \u00a0 \u00a0 print((chr)(x+65),end=\" \")\u00a0 \u00a0 if out > 0:\u00a0 \u00a0 \u00a0 \u00a0 x +=1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 x -=1\u00a0 \u00a0 print(\"\\r\")", "nl": "Program to print the Solid Diamond Alphabet Pattern"}
{"code": "Solution\nli = [1,2,3,4,5,6,7,8,9,10]\nsquaredNumbers = map(lambda x: x**2, li)\nprint squaredNumbers\n\n", "nl": "Write a program which can map() to make a list whose elements are square of elements in [1,2,3,4,5,6,7,8,9,10].\n:"}
{"code": "\nfrom timeit import Timer\nt = Timer(\"for i in range(100):1+1\")\nprint t.timeit()\n\n", "nl": "\nPlease write a program to print the running time of execution of \"1+1\" for 100 times.\n\n\n:"}
{"code": "celsius=float(input(\"Enter degree in celsius: \"))\nfahrenheit=(celsius*(9/5))+32\nprint(\"Degree in Fahrenheit is\",fahrenheit)", "nl": "Convert Temperature from degree Celsius to Fahrenheit "}
{"code": "y=[('a','12CS039'),('b','12CS320'),('c','12CS055'),('d','12CS100')]\nlow=int(input(\"Enter lower roll number (starting with 12CS):\"))\nup=int(input(\"Enter upper roll number (starting with 12CS):\"))\nl='12CS0'+str(low)\nu='12CS'+str(up)\np=[x for x in y if x[1]>l and x[1]<u]\nprint(p)", "nl": "Python Program to Remove All Tuples in a List of Tuples with the USN Outside the Given Range"}
{"code": "\n\nimport math\nr=int(input(\"Enter the radius of the Hemisphere:\"))\nPI=3.14\nsurface_area=3*PI*math.pow(r,2)\nvolume=(2.0/3.0)*PI*math.pow(r,3)\nprint(\"Surface Area of the Hemisphere = \",surface_area)\nprint(\"Volume of the Hemisphere = \",volume)\n", "nl": "Program to Calculate the surface area and volume of a Hemisphere"}
{"code": "class check():\n    def __init__(self):\n        self.n=[]\n    def add(self,a):\n        return self.n.append(a)\n    def remove(self,b):\n        self.n.remove(b)\n    def dis(self):\n        return (self.n)\n\u00a0\nobj=check()\n\u00a0\nchoice=1\nwhile choice!=0:\n    print(\"0. Exit\")\n    print(\"1. Add\")\n    print(\"2. Delete\")\n    print(\"3. Display\")\n    choice=int(input(\"Enter choice: \"))\n    if choice==1:\n        n=int(input(\"Enter number to append: \"))\n        obj.add(n)\n        print(\"List: \",obj.dis())\n\u00a0\n    elif choice==2:\n        n=int(input(\"Enter number to remove: \"))\n        obj.remove(n)\n        print(\"List: \",obj.dis())\n\u00a0\n    elif choice==3:\n        print(\"List: \",obj.dis())\n    elif choice==0:\n        print(\"Exiting!\")\n    else:\n        print(\"Invalid choice!!\")\n\u00a0\nprint()", "nl": "Python Program to Append, Delete and Display Elements of a List Using Classes"}
{"code": "Solution\ndef printValue(s1,s2):\n\tlen1 = len(s1)\n\tlen2 = len(s2)\n\tif len1>len2:\n\t\tprint s1\n\telif len2>len1:\n\t\tprint s2\n\telse:\n\t\tprint s1\n\t\tprint s2\n\t\t\n\nprintValue(\"one\",\"three\")\n\n\n\n", "nl": "Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should print al l strings line by line.\n:"}
{"code": "d = {'a':1,'b':2,'c':3,'d':4}\nprint(\"Initial dictionary\")\nprint(d)\nkey=raw_input(\"Enter the key to delete(a-d):\")\nif key in d: \n    del d[key]\nelse:\n    print(\"Key not found!\")\n    exit(0)\nprint(\"Updated dictionary\")\nprint(d)", "nl": "Python Program to Remove the Given Key from a Dictionary"}
{"code": "test_string=raw_input(\"Enter string:\")\nl=test_string.split()\nd={}\nfor word in l:\n    if(word[0] not in d.keys()):\n        d[word[0]]=[]\n        d[word[0]].append(word)\n    else:\n        if(word not in d[word[0]]):\n          d[word[0]].append(word)\nfor k,v in d.items():\n        print(k,\":\",v)", "nl": "Python Program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass Stack:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def push(self, data):\n        if self.head is None:\n            self.head = Node(data)\n        else:\n            new_node = Node(data)\n            new_node.next = self.head\n            self.head = new_node\n\u00a0\n    def pop(self):\n        if self.head is None:\n            return None\n        else:\n            popped = self.head.data\n            self.head = self.head.next\n            return popped\n\u00a0\na_stack = Stack()\nwhile True:\n    print('push <value>')\n    print('pop')\n    print('quit')\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'push':\n        a_stack.push(int(do[1]))\n    elif operation == 'pop':\n        popped = a_stack.pop()\n        if popped is None:\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', int(popped))\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement a Stack using Linked List"}
{"code": "\u00a0\nlower=int(input(\"Enter the lower limit for the range:\"))\nupper=int(input(\"Enter the upper limit for the range:\"))\nfor i in range(lower,upper+1):\n    if(i%2!=0):\n        print(i)", "nl": "Python Program to Print Odd Numbers Within a Given Range"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)for i in range(0,size):\u00a0 \u00a0 for j in range(i+1, size):\u00a0 \u00a0 \u00a0 \u00a0 if arr[i]>=arr[j]:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = arr[i]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[i] = arr[j]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[j] = tempprint(\"After segregate 0s, 1s and 2s in an Array, Array is:\",arr)", "nl": "Sort an array of 0s, 1s and 2s"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def inorder_largest(self):\n        # largest will be a single element list\n        # this is a workaround to reference an integer\n        largest = []\n        self.inorder_largest_helper(largest)\n        return largest[0]\n\u00a0\n    def inorder_largest_helper(self, largest):\n        if self.left is not None:\n            self.left.inorder_largest_helper(largest)\n        if largest == []:\n            largest.append(self.key)\n        elif largest[0] < self.key:\n            largest[0] = self.key\n        if self.right is not None:\n            self.right.inorder_largest_helper(largest)\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('largest')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'largest':\n        if btree is None:\n            print('Tree is empty.')\n        else:\n            print('Largest element: {}'.format(btree.inorder_largest()))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find the Largest value in a Tree using Inorder Traversal"}
{"code": "\nimport math\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=5\nsum=0\nwhile(i<=n):\n\u00a0 \u00a0 sum+=pow(i,2)\n\u00a0 \u00a0 i+=5\nprint(\"The sum of the series = \",sum)", "nl": "Program to Find sum of series 5^2+10^2+15^2+.....N^2"}
{"code": "n=int(input(\"Enter number:\"))\ncount=0\nwhile(n>0):\n    count=count+1\n    n=n//10\nprint(\"The number of digits in the number are:\",count)", "nl": "Python Program to Count the Number of Digits in a Number"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nnp=1\nfor out in range(0,row_size):\n\u00a0 \u00a0 for in1 in range(row_size-1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\n\u00a0 \u00a0 for in2 in range(np,0,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(in2,end=\"\")\n\u00a0 \u00a0 np+=2\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Full Pyramid Number Pattern"}
{"code": "def counting_sort(alist, largest):\n    c = [0]*(largest + 1)\n    for i in range(len(alist)):\n        c[alist[i]] = c[alist[i]] + 1\n\u00a0\n    # Find the last index for each element\n    c[0] = c[0] - 1 # to decrement each element for zero-based indexing\n    for i in range(1, largest + 1):\n        c[i] = c[i] + c[i - 1]\n\u00a0\n    result = [None]*len(alist)\n\u00a0\n    # Though it is not required here,\n    # it becomes necessary to reverse the list\n    # when this function needs to be a stable sort\n    for x in reversed(alist):\n        result[c[x]] = x\n        c[x] = c[x] - 1\n\u00a0\n    return result\n\u00a0\n\u00a0\nalist = input('Enter the list of (nonnegative) numbers: ').split()\nalist = [int(x) for x in alist]\nk = max(alist)\nsorted_list = counting_sort(alist, k)\nprint('Sorted list: ', end='')\nprint(sorted_list)", "nl": "Python Program to Implement Counting Sort"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0Find the Generic root of a number.''\n\nprint(\"Enter a number:\")\nnum = int(input())\nwhile num > 10:\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 while num:\n\u00a0 \u00a0 \u00a0 \u00a0 r=num % 10\n\u00a0 \u00a0 \u00a0 \u00a0 num= num / 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum+= r\n\u00a0 \u00a0 if sum > 10:\n\u00a0 \u00a0 \u00a0 \u00a0 num = sum\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 break\nprint(\"Generic root of the number is \", int(sum))\u00a0\n", "nl": "Find the Generic root of a number"}
{"code": "def fibonacci(n):\n    if(n <= 1):\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nn = int(input(\"Enter number of terms:\"))\nprint(\"Fibonacci sequence:\")\nfor i in range(n):\n    print(fibonacci(i))", "nl": "Python Program to Find the Fibonacci Series Using Recursion"}
{"code": "class Tree:\n    def __init__(self, data=None):\n        self.key = data\n        self.children = []\n\u00a0\n    def set_root(self, data):\n        self.key = data\n\u00a0\n    def add(self, node):\n        self.children.append(node)\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        for child in self.children:\n            temp = child.search(key)\n            if temp is not None:\n                return temp\n        return None\n\u00a0\n    def print_all_paths_to_leaf(self):\n        self.print_all_paths_to_leaf_helper([])\n\u00a0\n    def print_all_paths_to_leaf_helper(self, path_till_now):\n        path_till_now.append(self.key)\n        if self.children == []:\n            for key in path_till_now:\n                print(key, end=' ')\n            print()\n        else:\n            for child in self.children:\n                child.print_all_paths_to_leaf_helper(path_till_now[:])\n\u00a0\n\u00a0\ntree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <data> at root')\nprint('add <data> below <data>')\nprint('paths')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        data = int(do[1])\n        new_node = Tree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            tree = new_node\n        elif suboperation == 'below':\n            position = do[3].strip().lower()\n            key = int(position)\n            ref_node = None\n            if tree is not None:\n                ref_node = tree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            ref_node.add(new_node)\n\u00a0\n    elif operation == 'paths':\n        if tree is None:\n            print('Tree is empty.')\n        else:\n            tree.print_all_paths_to_leaf()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Print all the Paths from the Root to the Leaf in a Tree"}
{"code": "a=[]\nn=int(input(\"Enter number of elements:\"))\nfor i in range(1,n+1):\n    b=int(input(\"Enter element:\"))\n    a.append(b)\nfor i in range(0,len(a)):\n    for j in range(0,len(a)-i-1):\n        if(a[j]>a[j+1]):\n            temp=a[j]\n            a[j]=a[j+1]\n            a[j+1]=temp \nprint('Second largest number is:',a[n-2])", "nl": "Python Program to Find the Second Largest Number in a List Using Bubble Sort"}
{"code": "class QueenChessBoard:\n    def __init__(self, size):\n        # board has dimensions size x size\n        self.size = size\n        # columns[r] is a number c if a queen is placed at row r and column c.\n        # columns[r] is out of range if no queen is place in row r.\n        # Thus after all queens are placed, they will be at positions\n        # (columns[0], 0), (columns[1], 1), ... (columns[size - 1], size - 1)\n        self.columns = []\n\u00a0\n    def place_in_next_row(self, column):\n        self.columns.append(column)\n\u00a0\n    def remove_in_current_row(self):\n        return self.columns.pop()\n\u00a0\n    def is_this_column_safe_in_next_row(self, column):\n        # index of next row\n        row = len(self.columns)\n\u00a0\n        # check column\n        for queen_column in self.columns:\n            if column == queen_column:\n                return False\n\u00a0\n        # check diagonal\n        for queen_row, queen_column in enumerate(self.columns):\n            if queen_column - queen_row == column - row:\n                return False\n\u00a0\n        # check other diagonal\n        for queen_row, queen_column in enumerate(self.columns):\n            if ((self.size - queen_column) - queen_row\n                == (self.size - column) - row):\n                return False\n\u00a0\n        return True\n\u00a0\n    def display(self):\n        for row in range(self.size):\n            for column in range(self.size):\n                if column == self.columns[row]:\n                    print('Q', end=' ')\n                else:\n                    print('.', end=' ')\n            print()\n\u00a0\n\u00a0\ndef solve_queen(size):\n    \"\"\"Display a chessboard for each possible configuration of placing n queens\n    on an n x n chessboard and print the number of such configurations.\"\"\"\n    board = QueenChessBoard(size)\n    number_of_solutions = 0\n\u00a0\n    row = 0\n    column = 0\n    # iterate over rows of board\n    while True:\n        # place queen in next row\n        while column < size:\n            if board.is_this_column_safe_in_next_row(column):\n                board.place_in_next_row(column)\n                row += 1\n                column = 0\n                break\n            else:\n                column += 1\n\u00a0\n        # if could not find column to place in or if board is full\n        if (column == size or row == size):\n            # if board is full, we have a solution\n            if row == size:\n                board.display()\n                print()\n                number_of_solutions += 1\n\u00a0\n                # small optimization:\n                # In a board that already has queens placed in all rows except\n                # the last, we know there can only be at most one position in\n                # the last row where a queen can be placed. In this case, there\n                # is a valid position in the last row. Thus we can backtrack two\n                # times to reach the second last row.\n                board.remove_in_current_row()\n                row -= 1\n\u00a0\n            # now backtrack\n            try:\n                prev_column = board.remove_in_current_row()\n            except IndexError:\n                # all queens removed\n                # thus no more possible configurations\n                break\n            # try previous row again\n            row -= 1\n            # start checking at column = (1 + value of column in previous row)\n            column = 1 + prev_column\n\u00a0\n    print('Number of solutions:', number_of_solutions)\n\u00a0\n\u00a0\nn = int(input('Enter n: '))\nsolve_queen(n)", "nl": "Python Program to Solve n-Queen Problem without Recursion"}
{"code": "\nimport math\nnum=int(input(\"Enter a number:\"))\nroot=math.sqrt(num+1)\nif int(root)==root:\n\u00a0 \u00a0 print(\"It is a Sunny Number.\")\nelse:\n\u00a0 \u00a0print(\"It is Not a Sunny Number.\")", "nl": "Check whether number is Sunny Number or Not."}
{"code": "count=0def count_digit(num):\u00a0 \u00a0 global count\u00a0 \u00a0 if (num >0):\u00a0 \u00a0 \u00a0 \u00a0 if(num%10==0):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count +=1\u00a0 \u00a0 \u00a0 \u00a0 count_digit(num // 10)\u00a0 \u00a0 return countn=int(input(\"Enter a number:\"))print(\"The number of Zeros in the Given number is:\",count_digit(n))", "nl": "Count number of zeros in a number using recursion"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def inorder(self):\n        if self.left is not None:\n            self.left.inorder()\n        print(self.key, end=' ')\n        if self.right is not None:\n            self.right.inorder()\n\u00a0\n    def postorder(self):\n        if self.left is not None:\n            self.left.postorder()\n        if self.right is not None:\n            self.right.postorder()\n        print(self.key, end=' ')\n\u00a0\n\u00a0\ndef construct_btree(postord, inord):\n    if postord == [] or inord == []:\n        return None\n    key = postord[-1]\n    node = BinaryTree(key)\n    index = inord.index(key)\n    node.left = construct_btree(postord[:index], inord[:index])\n    node.right = construct_btree(postord[index:-1], inord[index + 1:])\n    return node\n\u00a0\n\u00a0\npostord = input('Input post-order traversal: ').split()\npostord = [int(x) for x in postord]\ninord = input('Input in-order traversal: ').split()\ninord = [int(x) for x in inord]\n\u00a0\nbtree = construct_btree(postord, inord)\nprint('Binary tree constructed.')\nprint('Verifying:')\nprint('Post-order traversal: ', end='')\nbtree.postorder()\nprint()\nprint('In-order traversal: ', end='')\nbtree.inorder()\nprint()", "nl": "Python Program to Build Binary Tree if Inorder or Postorder Traversal as Input"}
{"code": "def find_max_subarray(alist, start, end):\n    \"\"\"Returns (l, r, m) such that alist[l:r] is the maximum subarray in\n    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <\n    end.\"\"\"\n    max_ending_at_i = max_seen_so_far = alist[start]\n    max_left_at_i = max_left_so_far = start\n    # max_right_at_i is always i + 1\n    max_right_so_far = start + 1\n    for i in range(start + 1, end):\n        if max_ending_at_i > 0:\n            max_ending_at_i += alist[i]\n        else:\n            max_ending_at_i = alist[i]\n            max_left_at_i = i\n        if max_ending_at_i > max_seen_so_far:\n            max_seen_so_far = max_ending_at_i\n            max_left_so_far = max_left_at_i\n            max_right_so_far = i + 1\n    return max_left_so_far, max_right_so_far, max_seen_so_far\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ')\nalist = alist.split()\nalist = [int(x) for x in alist]\nstart, end, maximum = find_max_subarray(alist, 0, len(alist))\nprint('The maximum subarray starts at index {}, ends at index {}'\n      ' and has sum {}.'.format(start, end - 1, maximum))", "nl": "Python Program to solve Maximum Subarray Problem using Kadane\u2019s Algorithm"}
{"code": "string=raw_input(\"Enter string:\")\nchar=0\nword=1\nfor i in string:\n      char=char+1\n      if(i==' '):\n            word=word+1\nprint(\"Number of words in the string:\")\nprint(word)\nprint(\"Number of characters in the string:\")\nprint(char)", "nl": "Python Program to Calculate the Number of Words and the Number of Characters Present in a String"}
{"code": "length=int(input(\"Enter length of a rectangle :\"))\nbreadth=int(input(\"Enter breadth of a rectangle :\"))\n\narea=length*breadth\nperimeter=2*(length+breadth)\n\nprint(\"Area =\",area)\nprint(\"Perimeter =\",perimeter)", "nl": "Program to calculate the area and perimeter of a rectangle"}
{"code": "def check(n):\n    if (n < 2):\n        return (n % 2 == 0)\n    return (check(n - 2))\nn=int(input(\"Enter number:\"))\nif(check(n)==True):\n      print(\"Number is even!\")\nelse:\n      print(\"Number is odd!\")", "nl": "Python Program to Determine Whether a Given Number is Even or Odd Recursively"}
{"code": "string=raw_input(\"Enter string:\")\nword=raw_input(\"Enter word:\")\na=[]\ncount=0\na=string.split(\" \")\nfor i in range(0,len(a)):\n      if(word==a[i]):\n            count=count+1\nprint(\"Count of the word is:\")\nprint(count)", "nl": "Python Program to Count the Occurrences of Each Word in a Given String Sentence"}
{"code": "principle=float(input(\"Enter a principle:\"))\nrate=float(input(\"Enter a rate:\"))\ntime=float(input(\"Enter a time(year):\"))\n\nsimple_interest=(principle*rate*time)/100;\n\nprint(\"Simple Interest:\",simple_interest)", "nl": "Write a program to calculate simple Interest"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __len__(self):\n        return len(self.vertices)\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def set_weight(self, dest, weight):\n        \"\"\"Set weight of edge from this vertex to dest.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef johnson(g):\n    \"\"\"Return distance where distance[u][v] is the min distance from u to v.\n\u00a0\n    distance[u][v] is the shortest distance from vertex u to v.\n\u00a0\n    g is a Graph object which can have negative edge weights.\n    \"\"\"\n    # add new vertex q\n    g.add_vertex('q')\n    # let q point to all other vertices in g with zero-weight edges\n    for v in g:\n        g.add_edge('q', v.get_key(), 0)\n\u00a0\n    # compute shortest distance from vertex q to all other vertices\n    bell_dist = bellman_ford(g, g.get_vertex('q'))\n\u00a0\n    # set weight(u, v) = weight(u, v) + bell_dist(u) - bell_dist(v) for each\n    # edge (u, v)\n    for v in g:\n        for n in v.get_neighbours():\n            w = v.get_weight(n)\n            v.set_weight(n, w + bell_dist[v] - bell_dist[n])\n\u00a0\n    # remove vertex q\n    # This implementation of the graph stores edge (u, v) in Vertex object u\n    # Since no other vertex points back to q, we do not need to worry about\n    # removing edges pointing to q from other vertices.\n    del g.vertices['q']\n\u00a0\n    # distance[u][v] will hold smallest distance from vertex u to v\n    distance = {}\n    # run dijkstra's algorithm on each source vertex\n    for v in g:\n        distance[v] = dijkstra(g, v)\n\u00a0\n    # correct distances\n    for v in g:\n        for w in g:\n            distance[v][w] += bell_dist[w] - bell_dist[v]\n\u00a0\n    # correct weights in original graph\n    for v in g:\n        for n in v.get_neighbours():\n            w = v.get_weight(n)\n            v.set_weight(n, w + bell_dist[n] - bell_dist[v])\n\u00a0\n    return distance\n\u00a0\n\u00a0\ndef bellman_ford(g, source):\n    \"\"\"Return distance where distance[v] is min distance from source to v.\n\u00a0\n    This will return a dictionary distance.\n\u00a0\n    g is a Graph object which can have negative edge weights.\n    source is a Vertex object in g.\n    \"\"\"\n    distance = dict.fromkeys(g, float('inf'))\n    distance[source] = 0\n\u00a0\n    for _ in range(len(g) - 1):\n        for v in g:\n            for n in v.get_neighbours():\n                distance[n] = min(distance[n], distance[v] + v.get_weight(n))\n\u00a0\n    return distance\n\u00a0\n\u00a0\ndef dijkstra(g, source):\n    \"\"\"Return distance where distance[v] is min distance from source to v.\n\u00a0\n    This will return a dictionary distance.\n\u00a0\n    g is a Graph object.\n    source is a Vertex object in g.\n    \"\"\"\n    unvisited = set(g)\n    distance = dict.fromkeys(g, float('inf'))\n    distance[source] = 0\n\u00a0\n    while unvisited != set():\n        # find vertex with minimum distance\n        closest = min(unvisited, key=lambda v: distance[v])\n\u00a0\n        # mark as visited\n        unvisited.remove(closest)\n\u00a0\n        # update distances\n        for neighbour in closest.get_neighbours():\n           if neighbour in unvisited:\n               new_distance = distance[closest] + closest.get_weight(neighbour)\n               if distance[neighbour] > new_distance:\n                   distance[neighbour] = new_distance\n\u00a0\n    return distance\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest> <weight>')\nprint('johnson')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            weight = int(do[4])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest, weight)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'johnson':\n        distance = johnson(g)\n        print('Shortest distances:')\n        for start in g:\n            for end in g:\n                print('{} to {}'.format(start.get_key(), end.get_key()), end=' ')\n                print('distance {}'.format(distance[start][end]))\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Johnson\u2019s Algorithm"}
{"code": "a=[[1,[[2]],[[[3]]]],[[4],5]]\nflatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]\nprint(flatten(a))", "nl": "Python Program to Flatten a List without using Recursion"}
{"code": "class BinomialTree:\n    def __init__(self, key):\n        self.key = key\n        self.children = []\n        self.order = 0\n\u00a0\n    def add_at_end(self, t):\n        self.children.append(t)\n        self.order = self.order + 1\n\u00a0\n\u00a0\nclass BinomialHeap:\n    def __init__(self):\n        self.trees = []\n\u00a0\n    def extract_min(self):\n        if self.trees == []:\n            return None\n        smallest_node = self.trees[0]\n        for tree in self.trees:\n            if tree.key < smallest_node.key:\n                smallest_node = tree\n        self.trees.remove(smallest_node)\n        h = BinomialHeap()\n        h.trees = smallest_node.children\n        self.merge(h)\n\u00a0\n        return smallest_node.key\n\u00a0\n    def get_min(self):\n        if self.trees == []:\n            return None\n        least = self.trees[0].key\n        for tree in self.trees:\n            if tree.key < least:\n                least = tree.key\n        return least\n\u00a0\n    def combine_roots(self, h):\n        self.trees.extend(h.trees)\n        self.trees.sort(key=lambda tree: tree.order)\n\u00a0\n    def merge(self, h):\n        self.combine_roots(h)\n        if self.trees == []:\n            return\n        i = 0\n        while i < len(self.trees) - 1:\n            current = self.trees[i]\n            after = self.trees[i + 1]\n            if current.order == after.order:\n                if (i + 1 < len(self.trees) - 1\n                    and self.trees[i + 2].order == after.order):\n                    after_after = self.trees[i + 2]\n                    if after.key < after_after.key:\n                        after.add_at_end(after_after)\n                        del self.trees[i + 2]\n                    else:\n                        after_after.add_at_end(after)\n                        del self.trees[i + 1]\n                else:\n                    if current.key < after.key:\n                        current.add_at_end(after)\n                        del self.trees[i + 1]\n                    else:\n                        after.add_at_end(current)\n                        del self.trees[i]\n            i = i + 1\n\u00a0\n    def insert(self, key):\n        g = BinomialHeap()\n        g.trees.append(BinomialTree(key))\n        self.merge(g)\n\u00a0\n\u00a0\nbheap = BinomialHeap()\n\u00a0\nprint('Menu')\nprint('insert <data>')\nprint('min get')\nprint('min extract')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        bheap.insert(data)\n    elif operation == 'min':\n        suboperation = do[1].strip().lower()\n        if suboperation == 'get':\n            print('Minimum value: {}'.format(bheap.get_min()))\n        elif suboperation == 'extract':\n            print('Minimum value removed: {}'.format(bheap.extract_min()))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Binomial Heap"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Calculate sum of Upper triangular matrix element\nsum=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i>j:\n            sum += matrix[i][j]\n\n# display the sum of the Upper triangular matrix element\nprint(\"Sum of Upper Triangular Matrix Elements is: \",sum)", "nl": "Program to find the sum of an upper triangular matrix"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0find out all Perfect numbers present within a given range.\nor\u00a0Write a program\u00a0to\u00a0find out all Perfect numbers present\nwithin a given range using Python '''\n\n\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Perfect numbers between \",range1,\" and \",range2,\" are: \")\n\nfor j in range(range1,range2+1):\n\u00a0 \u00a0 sum=0\n\u00a0 \u00a0 num=j\n\u00a0 \u00a0 for i in range(1,j):\n\u00a0 \u00a0 \u00a0 \u00a0 if(j%i==0):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum=sum+i\n\u00a0 \u00a0 if sum==num:\n\u00a0 \u00a0 \u00a0 print(j,end=\" \")\u00a0\n", "nl": " Find out all Perfect numbers present within a given range"}
{"code": "n=int(input(\"Enter a number: \"))\na=[]\nfor i in range(1,n+1):\n    print(i,sep=\" \",end=\" \")\n    if(i<n):\n        print(\"+\",sep=\" \",end=\" \")\n    a.append(i)\nprint(\"=\",sum(a))\n\u00a0\nprint()", "nl": "Python Program to Read a Number n And Print the Series \"1+2+\u2026..+n= \""}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the maximum element of the given 2d array\nmax=-sys.maxsize-1\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]>=max:\n            max=matrix[i][j]\n\n# Display the largest element of the given matrix\nprint(\"The Maximum element of the Given 2d array is: \",max)", "nl": "Find the maximum element in the matrix"}
{"code": "def matrix_product(p):\n    \"\"\"Return m and s.\n\u00a0\n    m[i][j] is the minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j).\n\u00a0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n\u00a0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    \"\"\"\n    length = len(p) # len(p) = number of matrices + 1\n\u00a0\n    # m[i][j] is the minimum number of multiplications needed to compute the\n    # product of matrices A(i), A(i+1), ..., A(j)\n    # s[i][j] is the matrix after which the product is split in the minimum\n    # number of multiplications needed\n    m = [[-1]*length for _ in range(length)]\n    s = [[-1]*length for _ in range(length)]\n\u00a0\n    matrix_product_helper(p, 1, length - 1, m, s)\n\u00a0\n    return m, s\n\u00a0\n\u00a0\ndef matrix_product_helper(p, start, end, m, s):\n    \"\"\"Return minimum number of scalar multiplications needed to compute the\n    product of matrices A(start), A(start + 1), ..., A(end).\n\u00a0\n    The minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j) is stored in m[i][j].\n\u00a0\n    The index of the matrix after which the above product is split in an optimal\n    parenthesization is stored in s[i][j].\n\u00a0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    \"\"\"\n    if m[start][end] >= 0:\n        return m[start][end]\n\u00a0\n    if start == end:\n        q = 0\n    else:\n        q = float('inf')\n        for k in range(start, end):\n            temp = matrix_product_helper(p, start, k, m, s) \\\n                   + matrix_product_helper(p, k + 1, end, m, s) \\\n                   + p[start - 1]*p[k]*p[end]\n            if q > temp:\n                q = temp\n                s[start][end] = k\n\u00a0\n    m[start][end] = q\n    return q\n\u00a0\n\u00a0\ndef print_parenthesization(s, start, end):\n    \"\"\"Print the optimal parenthesization of the matrix product A(start) x\n    A(start + 1) x ... x A(end).\n\u00a0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n    \"\"\"\n    if start == end:\n        print('A[{}]'.format(start), end='')\n        return\n\u00a0\n    k = s[start][end]\n\u00a0\n    print('(', end='')\n    print_parenthesization(s, start, k)\n    print_parenthesization(s, k + 1, end)\n    print(')', end='')\n\u00a0\n\u00a0\nn = int(input('Enter number of matrices: '))\np = []\nfor i in range(n):\n    temp = int(input('Enter number of rows in matrix {}: '.format(i + 1)))\n    p.append(temp)\ntemp = int(input('Enter number of columns in matrix {}: '.format(n)))\np.append(temp)\n\u00a0\nm, s = matrix_product(p)\nprint('The number of scalar multiplications needed:', m[1][n])\nprint('Optimal parenthesization: ', end='')\nprint_parenthesization(s, 1, n)", "nl": "Python Program to Solve Matrix-Chain Multiplication using Dynamic Programming with Memoization"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num2 = num\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num1 % 10\n\u00a0 \u00a0 \u00a0 \u00a0 num1 = num1 // 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum = sum + rem * rem * rem\n\u00a0 \u00a0 if sum == num2:\n\u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Armstrong Number is \",latest)", "nl": "Program to Find nth Armstrong Number "}
{"code": "def change(string):\n      return string[-1:] + string[1:-1] + string[:1]\nstring=raw_input(\"Enter string:\")\nprint(\"Modified string:\")\nprint(change(string))", "nl": "Python Program to Form a New String where the First Character and the Last Character have been Exchanged"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for i in range(row_size+1,out,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Half Pyramid Number Pattern"}
{"code": "decimal=0sem=0def OctalToDecimal(n):\u00a0 \u00a0 global sem,decimal\u00a0 \u00a0 if(n!=0):\u00a0 \u00a0 \u00a0 \u00a0 decimal+=(n%10)*pow(8,sem)\u00a0 \u00a0 \u00a0 \u00a0 sem+=1\u00a0 \u00a0 \u00a0 \u00a0 OctalToDecimal(n // 10)\u00a0 \u00a0 return decimaln=int(input(\"Enter the Octal Value:\"))print(\"Decimal Value of Octal number is:\",OctalToDecimal(n))", "nl": "Convert Octal to decimal using recursion"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nif row_size!=col_size:\n    print(\"Given Matrix is not a Square Matrix.\")\nelse:\n    #compute the transpose matrix\n    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]\n    for i in range(0, row_size):\n        for j in range(0, col_size):\n            tran_matrix[i][j] = matrix[j][i]\n# check given matrix elements and transpose\n# matrix elements are same or not.\n\nflag=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if matrix[i][j] != tran_matrix[i][j]:\n            flag=1\n            break\n\nif flag==1:\n    print(\"Given Matrix is not a symmetric Matrix.\")\nelse:\n    print(\"Given Matrix is a symmetric Matrix.\")", "nl": "Program to check whether a matrix is symmetric or not"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n    def remove(self, node):\n        prev_node = self.get_prev_node(node)\n        if prev_node is None:\n            self.head = self.head.next\n        else:\n            prev_node.next = node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\ndef remove_duplicates(llist):\n    current1 = llist.head\n    while current1:\n        data = current1.data\n        current2 = current1.next\n        while current2:\n            if current2.data == data:\n                llist.remove(current2)\n            current2 = current2.next\n        current1 = current1.next\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nremove_duplicates(a_llist)\n\u00a0\nprint('The list with duplicates removed: ')\na_llist.display()", "nl": "Python Program to Remove Duplicates from a Linked List"}
{"code": "\u00a0\nn=int(input(\"Enter an integer:\"))\na=[]\nfor i in range(2,n+1):\n    if(n%i==0):\n        a.append(i)\na.sort()\nprint(\"Smallest divisor is:\",a[0])", "nl": "Python Program to Find the Smallest Divisor of an Integer"}
{"code": "row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 if inn==1 or out==inn or out==row_size:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": "Print the Hollow Half Pyramid Number Pattern"}
{"code": "\nimport math\nprint(\"Enter the range of number:\")\nn=int(input())\nsum=0.0\nfact=1\nfor i in range(1,n+1):\n\u00a0 \u00a0 fact*=i\n\u00a0 \u00a0 sum += pow(i, i) / fact\nprint(\"The sum of the series = \",sum)", "nl": "Program to find sum of series 1^1/1!+2^2/2!+3^3/3!...+n^n/n!"}
{"code": "# Get size of 1st matrix\nrow_size=int(input(\"Enter the row Size Of the 1st Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the 1st Matrix:\"))\n\n# Get size of 2nd matrix\nrow_size1=int(input(\"Enter the row Size Of the 1st Matrix:\"))\ncol_size1=int(input(\"Enter the columns Size Of the 2nd Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the 1st Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the 2nd Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compare two matrices\npoint=0\nif row_size==row_size1 and col_size==col_size1:\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] != matrix1[i][j]:\n                point=1\n                break\nelse:\n    print(\"Two matrices are not equal.\")\n    exit(0)\n\nif point==1:\n    print(\"Two matrices are not equal.\")\nelse:\n    print(\"Two matrices are equal.\")", "nl": "Program to check two matrix are equal or not"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"\\nOdd numbers are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 if (arr[i] % 2 != 0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")\n\nprint(\"\\nEven numbers are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 if (arr[i] % 2 == 0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Separate even and odd numbers in an array"}
{"code": "def SumOfNaturalNumber(n):\u00a0 \u00a0 if n>0:\u00a0 \u00a0 \u00a0 \u00a0 return n+SumOfNaturalNumber(n-1)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return nn=int(input(\"Enter the N Number:\"))print(\"Sum of N Natural Number Using Recursion is:\",SumOfNaturalNumber(n))", "nl": "Find the sum of n natural numbers using recursion"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n    def depth_first(self):\n        print('entering {}...'.format(self.key))\n        if self.left is not None:\n            self.left.depth_first()\n        print('at {}...'.format(self.key))\n        if self.right is not None:\n            self.right.depth_first()\n        print('leaving {}...'.format(self.key))\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('dfs')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'dfs':\n        print('depth-first search traversal:')\n        if btree is not None:\n            btree.depth_first()\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program for Depth First Binary Tree Search using Recursion"}
{"code": "x=int(input('Enter number 1: '))\ny=int(input('Enter number 2: '))\nsum1=0\nsum2=0\nfor i in range(1,x):\n    if x%i==0:\n        sum1+=i\nfor j in range(1,y):\n    if y%j==0:\n        sum2+=j\nif(sum1==y and sum2==x):\n    print('Amicable!')\nelse:\n    print('Not Amicable!')", "nl": "Python Program to Check If Two Numbers are Amicable Numbers"}
{"code": "sem=1octal=0def DecimalToOctal(n):\u00a0 \u00a0 global sem,octal\u00a0 \u00a0 if(n!=0):\u00a0 \u00a0 \u00a0 \u00a0 octal = octal + (n % 8) * sem\u00a0 \u00a0 \u00a0 \u00a0 sem = sem * 10\u00a0 \u00a0 \u00a0 \u00a0 DecimalToOctal(n // 8)\u00a0 \u00a0 return octaln=int(input(\"Enter the Decimal Value:\"))print(\"Octal Value of Decimal number is: \",DecimalToOctal(n))", "nl": "Decimal to Octal conversion using recursion"}
{"code": "import math\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# Calculate sum of the diagonals element\n# and Calculate sum of all the element\ntrace=0\nsum=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if i==j:\n            trace += matrix[i][j]\n        sum+=matrix[i][j]\nnormal=math.sqrt(sum)\n\n# Display the normal and trace of the matrix\nprint(\"Normal Of the Matrix is: \",normal)\nprint(\"Trace Of the Matrix is: \",trace)", "nl": "Program to find the normal and trace of a matrix"}
{"code": "\n\nprint(\"Enter the row and column size:\");\n\nrow_size=input()\nfor out in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 for i in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(i),end=\" \")\n\u00a0 \u00a0 print(\"\\r\")\n\n", "nl": "Write a program to print the alphabet pattern"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\ncount_zero=0\n#Count number of zeros present in the given Matrix\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]==0:\n            count_zero+=1\n\n#check if zeros present in the given Matrix>(row*column)/2\nif count_zero>(row_size*col_size)//2:\n    print(\"Given Matrix is a sparse Matrix.\")\nelse:\n    print(\"Given Matrix is not a sparse Matrix.\")", "nl": "Program to check whether a matrix is sparse or not"}
{"code": "\nimport random\nprint random.choice([i for i in range(11) if i%2==0])\n\n\n", "nl": "\nPlease write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.\n\n\n:"}
{"code": "\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num2=0\n\u00a0 \u00a0 num1 = num\n\u00a0 \u00a0 while num1 != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num1 % 10\n\u00a0 \u00a0 \u00a0 \u00a0 num1 //= 10\n\u00a0 \u00a0 \u00a0 \u00a0 num2 = num2 * 10 + rem\n\u00a0 \u00a0 if num==num2:\n\u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Palindrome Number is \",letest)", "nl": "Program to Find the nth Palindrome Number"}
{"code": "\nprint(\"Enter the row and column size:\");\nrow_size=input()\nfor out in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 for i in range(ord('A'),out+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(i),end=\" \")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": "Program to print the right triangle Alphabet pattern"}
{"code": "def gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\na=int(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nGCD=gcd(a,b)\nprint(\"GCD is: \")\nprint(GCD)", "nl": "Python Program to Find the GCD of Two Numbers Using Recursion"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __len__(self):\n        return len(self.vertices)\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef transitive_closure(g):\n    \"\"\"Return dictionary reachable.\n\u00a0\n    reachable[u][v] = True iff there is a path from vertex u to v.\n\u00a0\n    g is a Graph object which can have negative edge weights.\n    \"\"\"\n    reachable = {v:dict.fromkeys(g, False) for v in g}\n\u00a0\n    for v in g:\n        for n in v.get_neighbours():\n            reachable[v][n] = True\n\u00a0\n    for v in g:\n         reachable[v][v] = True\n\u00a0\n    for p in g: \n        for v in g:\n            for w in g:\n                if reachable[v][p] and reachable[p][w]:\n                    reachable[v][w] = True\n\u00a0\n    return reachable\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('transitive-closure')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'transitive-closure':\n        reachable = transitive_closure(g)\n        print('All pairs (u, v) such that there is a path from u to v: ')\n        for start in g:\n            for end in g:\n                if reachable[start][end]:\n                    print('{}, {}'.format(start.get_key(), end.get_key()))\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find Transitive Closure of a Graph"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Addition of two matrices\nsum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]\n\n# display the sum of two matrices\nprint(\"Sum of the two Matrices is:\")\nfor m in sum_matrix:\n    print(m)", "nl": "Program to find addition of two matrices "}
{"code": "\nstr=input(\"Enter the String:\")\nstr2 = []\ni = 0\nwhile i < len(str):\n\u00a0 \u00a0 ch = str[i]\n\u00a0 \u00a0 if not ch.isupper():\n\u00a0 \u00a0 \u00a0 \u00a0 str2.append(ch)\n\u00a0 \u00a0 i += 1\nFinal_String = ''.join(str2)\nprint(\"After removing uppercase letter string is:\",Final_String)", "nl": "Remove all uppercase characters in the String "}
{"code": "sem=1octal=0def DecimalToOctal(n):\u00a0 \u00a0 global sem,octal\u00a0 \u00a0 if(n!=0):\u00a0 \u00a0 \u00a0 \u00a0 octal = octal + (n % 8) * sem\u00a0 \u00a0 \u00a0 \u00a0 sem = sem * 10\u00a0 \u00a0 \u00a0 \u00a0 DecimalToOctal(n // 8)\u00a0 \u00a0 return octaln=int(input(\"Enter the Decimal Value:\"))print(\"Octal Value of Decimal number is: \",DecimalToOctal(n))", "nl": "Decimal to Octal conversion using recursion"}
{"code": "num=int(input(\"Enter a number:\"))\nif(num<0):\n\u00a0 \u00a0 print(\"The number is negative\")\nelif(num>0):\n\u00a0 \u00a0 print(\"The number is positive\")\nelse:\n\u00a0 \u00a0 \u00a0print(\"The number is neither negative nor positive\")", "nl": "Check whether a given number is positive or negative"}
{"code": "def sum_arr(arr,size):\n   if (size == 0):\n     return 0\n   else:\n     return arr[size-1] + sum_arr(arr,size-1)\nn=int(input(\"Enter the number of elements for list:\"))\na=[]\nfor i in range(0,n):\n    element=int(input(\"Enter element:\"))\n    a.append(element)\nprint(\"The list is:\")\nprint(a)\nprint(\"Sum of items in list:\")\nb=sum_arr(a,n)\nprint(b)", "nl": "Python Program to Find the Sum of Elements in a List Recursively"}
{"code": "def matrix_product(p):\n    \"\"\"Return m and s.\n\u00a0\n    m[i][j] is the minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j).\n\u00a0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n\u00a0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    \"\"\"\n    length = len(p) # len(p) = number of matrices + 1\n\u00a0\n    # m[i][j] is the minimum number of multiplications needed to compute the\n    # product of matrices A(i), A(i+1), ..., A(j)\n    # s[i][j] is the matrix after which the product is split in the minimum\n    # number of multiplications needed\n    m = [[-1]*length for _ in range(length)]\n    s = [[-1]*length for _ in range(length)]\n\u00a0\n    for i in range(1, length):\n        m[i][i] = 0\n\u00a0\n    for chain_length in range(2, length):\n        for start in range(1, length - chain_length + 1):\n            end = start + chain_length - 1\n            q = float('inf')\n            for k in range(start, end):\n                temp = m[start][k] + m[k + 1][end] + p[start - 1]*p[k]*p[end]\n                if temp < q:\n                    q = temp\n                    s[start][end] = k\n            m[start][end] = q\n\u00a0\n    return m, s\n\u00a0\n\u00a0\ndef print_parenthesization(s, start, end):\n    \"\"\"Print the optimal parenthesization of the matrix product A(start) x\n    A(start + 1) x ... x A(end).\n\u00a0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n    \"\"\"\n    if start == end:\n        print('A[{}]'.format(start), end='')\n        return\n\u00a0\n    k = s[start][end]\n\u00a0\n    print('(', end='')\n    print_parenthesization(s, start, k)\n    print_parenthesization(s, k + 1, end)\n    print(')', end='')\n\u00a0\n\u00a0\nn = int(input('Enter number of matrices: '))\np = []\nfor i in range(n):\n    temp = int(input('Enter number of rows in matrix {}: '.format(i + 1)))\n    p.append(temp)\ntemp = int(input('Enter number of columns in matrix {}: '.format(n)))\np.append(temp)\n\u00a0\nm, s = matrix_product(p)\nprint('The number of scalar multiplications needed:', m[1][n])\nprint('Optimal parenthesization: ', end='')\nprint_parenthesization(s, 1, n)", "nl": "Python Program to Solve Matrix-Chain Multiplication using Dynamic Programming with Bottom-Up Approach"}
{"code": "class BinomialTree:\n    def __init__(self, key):\n        self.key = key\n        self.children = []\n        self.order = 0\n\u00a0\n    def add_at_end(self, t):\n        self.children.append(t)\n        self.order = self.order + 1\n\u00a0\n\u00a0\ntrees = []\n\u00a0\nprint('Menu')\nprint('create <key>')\nprint('combine <index1> <index2>')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'create':\n        key = int(do[1])\n        btree = BinomialTree(key)\n        trees.append(btree)\n        print('Binomial tree created.')\n    elif operation == 'combine':\n        index1 = int(do[1])\n        index2 = int(do[2])\n        if trees[index1].order == trees[index2].order:\n            trees[index1].add_at_end(trees[index2])\n            del trees[index2]\n            print('Binomial trees combined.')\n        else:\n            print('Orders of the trees need to be the same.')\n\u00a0\n    elif operation == 'quit':\n        break\n\u00a0\n    print('{:>8}{:>12}{:>8}'.format('Index', 'Root key', 'Order'))\n    for index, t in enumerate(trees):\n        print('{:8d}{:12d}{:8d}'.format(index, t.key, t.order))", "nl": "Python Program to Implement Binomial Tree"}
{"code": "l=[]\nfor i in range(2000, 3201):\n    if (i%7==0) and (i%5!=0):\n        l.append(str(i))\n\nprint ','.join(l)\n", "nl": "Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,\nbetween 2000 and 3200 (both included).\nThe numbers obtained should be printed in a comma-separated sequence on a single line.\n:"}
{"code": "def smallest_unit_length_intervals(points):\n    \"\"\"Return smallest set with unit-length intervals that includes all points.\n\u00a0\n    A smallest set containing closed intervals is returned such that each point\n    is included in some interval.\n    The intervals are in the form of tuples (a, b).\n\u00a0\n    points is a list of points on the x-axis.\n    \"\"\"\n    points.sort()\n\u00a0\n    smallest_set = set()\n    end_of_last_interval = float('-inf')\n    for p in points:\n        if end_of_last_interval <= p:\n            interval = (p, p + 1)\n            smallest_set.add(interval)\n            end_of_last_interval = p + 1\n\u00a0\n    return smallest_set\n\u00a0\n\u00a0\npoints = input('Enter the points: ').split()\npoints = [float(p) for p in points]\n\u00a0\nans = smallest_unit_length_intervals(points)\nprint('A smallest-size set containing unit-length intervals '\n      'that contain all of these points is', ans)", "nl": "Python Program to Find the Smallest Set of Unit-Length Closed Intervals that Contains All Points using Greedy Algorithm"}
{"code": "\nprint(\"Enter the row and column size:\");\nrow_size=int(input())\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for i in range(0,row_size):\n\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")", "nl": "Write a program to print the pattern"}
{"code": "def knapsack(value, weight, capacity):\n    \"\"\"Return the maximum value of items that doesn't exceed capacity.\n\u00a0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n\u00a0\n    capacity is the maximum weight.\n    \"\"\"\n    n = len(value) - 1\n\u00a0\n    # m[i][w] will store the maximum value that can be attained with a maximum\n    # capacity of w and using only the first i items\n    m = [[-1]*(capacity + 1) for _ in range(n + 1)]\n\u00a0\n    for w in range(capacity + 1):\n        m[0][w] = 0\n\u00a0\n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weight[i] > w:\n                m[i][w] = m[i - 1][w]\n            else:\n                m[i][w] = max(m[i - 1][w - weight[i]] + value[i], \n                              m[i - 1][w])\n\u00a0\n    return m[n][capacity]\n\u00a0\n\u00a0\nn = int(input('Enter number of items: '))\nvalue = input('Enter the values of the {} item(s) in order: '\n              .format(n)).split()\nvalue = [int(v) for v in value]\nvalue.insert(0, None) # so that the value of the ith item is at value[i]\nweight = input('Enter the positive weights of the {} item(s) in order: '\n               .format(n)).split()\nweight = [int(w) for w in weight]\nweight.insert(0, None) # so that the weight of the ith item is at weight[i]\ncapacity = int(input('Enter maximum weight: '))\n\u00a0\nans = knapsack(value, weight, capacity)\nprint('The maximum value of items that can be carried:', ans)", "nl": "Python Program to Solve 0-1 Knapsack Problem using Dynamic Programming with Bottom-Up Approach"}
{"code": "\nimport itertools\nprint list(itertools.permutations([1,2,3]))\n\n", "nl": "\nPlease write a program which prints all permutations of [1,2,3]\n\n:"}
{"code": "print(\"Enter the octal number: \");\noctal=int(input());\ndecimal = 0\nsem = 0\nwhile(octal!= 0):\n\u00a0 \u00a0 \u00a0 \u00a0 decimal=decimal+(octal%10)*pow(8,sem)\n\u00a0 \u00a0 \u00a0 \u00a0 sem+=1\n\u00a0 \u00a0 \u00a0 \u00a0 octal=octal// 10\nprint(\"Decimal number is: \",decimal)\n", "nl": "Program to convert octal to decimal"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n\u00a0\n    def get_node(self, index):\n        if self.head is None:\n            return None\n        current = self.head\n        for i in range(index):\n            current = current.next\n            if current == self.head:\n                return None\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        if self.head is None:\n            return None\n        current = self.head\n        while current.next != ref_node:\n            current = current.next\n        return current\n\u00a0\n    def insert_after(self, ref_node, new_node):\n        new_node.next = ref_node.next\n        ref_node.next = new_node\n\u00a0\n    def insert_before(self, ref_node, new_node):\n        prev_node = self.get_prev_node(ref_node)\n        self.insert_after(prev_node, new_node)\n\u00a0\n    def insert_at_end(self, new_node):\n        if self.head is None:\n            self.head = new_node\n            new_node.next = new_node\n        else:\n            self.insert_before(self.head, new_node)\n\u00a0\n    def insert_at_beg(self, new_node):\n        self.insert_at_end(new_node)\n        self.head = new_node\n\u00a0\n    def remove(self, node):\n        if self.head.next == self.head:\n            self.head = None\n        else:\n            prev_node = self.get_prev_node(node)\n            prev_node.next = node.next\n            if self.head == node:\n                self.head = node.next\n\u00a0\n    def display(self):\n        if self.head is None:\n            return\n        current = self.head\n        while True:\n            print(current.data, end = ' ')\n            current = current.next\n            if current == self.head:\n                break\n\u00a0\n\u00a0\na_cllist = CircularLinkedList()\n\u00a0\nprint('Menu')\nprint('insert <data> after <index>')\nprint('insert <data> before <index>')\nprint('insert <data> at beg')\nprint('insert <data> at end')\nprint('remove <index>') \nprint('quit')\n\u00a0\nwhile True:\n    print('The list: ', end = '')\n    a_cllist.display()\n    print()\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n\u00a0\n    if operation == 'insert':\n        data = int(do[1])\n        position = do[3].strip().lower()\n        new_node = Node(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            if position == 'beg':\n                a_cllist.insert_at_beg(new_node)\n            elif position == 'end':\n                a_cllist.insert_at_end(new_node)\n        else:\n            index = int(position)\n            ref_node = a_cllist.get_node(index)\n            if ref_node is None:\n                print('No such index.')\n                continue\n            if suboperation == 'after':\n                a_cllist.insert_after(ref_node, new_node)\n            elif suboperation == 'before':\n                a_cllist.insert_before(ref_node, new_node)\n\u00a0\n    elif operation == 'remove':\n        index = int(do[1])\n        node = a_cllist.get_node(index)\n        if node is None:\n            print('No such index.')\n            continue\n        a_cllist.remove(node)\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Demonstrate Circular Single Linked List"}
{"code": "\u00a0\nn=int(input(\"Enter number: \"))\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)", "nl": "Python Program to Reverse a Given Number"}
{"code": "\nsize=int(input(\"Enter the size of the array:\"));\narr=[]\nprint(\"Enter the element of the array:\");\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Before Sorting Array Element are: \",arr)\n\n\nfor out in range(0,size):\n\u00a0 \u00a0 for inn in range(0, size-1,+2):\n\u00a0 \u00a0 \u00a0 \u00a0 if inn != size-1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if arr[ inn] > arr[inn +1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = arr[inn]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn]=arr[inn +1]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn +1]=temp\n\n\u00a0 \u00a0 for inn in range(1, size - 1, +2):\n\u00a0 \u00a0 \u00a0 \u00a0 if inn != size-1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if arr[ inn] > arr[inn +1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = arr[inn]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn]=arr[inn +1]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn +1]=temp\n\nprint(\"\\nAfter Sorting Array Element are: \",arr)", "nl": "Odd Even Sort Program in Python | Java | C | C++"}
{"code": "\n\nimport math\nprint(\"Enter the length of the side:\")\na=int(input())\narea=3.634*pow(a,2)\nperimeter=(7*a)\nprint(\"Area of the Heptagon = \",area)\nprint(\"Perimeter of the Heptagon= \",perimeter)\n", "nl": "Program to compute the area and perimeter of Heptagon"}
{"code": "\nli = [12,24,35,70,88,120,155]\nli = [x for x in li if x%5!=0 and x%7!=0]\nprint li\n\n\n", "nl": "\nBy using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].\n:"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def inorder_nth(self, n):\n        return self.inorder_nth_helper(n, [])\n\u00a0\n    def inorder_nth_helper(self, n, inord):\n        if self.left is not None:\n            temp = self.left.inorder_nth_helper(n, inord)\n            if temp is not None:\n                return temp\n        inord.append(self)\n        if n == len(inord):\n            return self\n        if self.right is not None:\n            temp = self.right.inorder_nth_helper(n, inord)\n            if temp is not None:\n                return temp\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('inorder <index>')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'inorder':\n        if btree is not None:\n            index = int(do[1].strip().lower())\n            node = btree.inorder_nth(index)\n            if node is not None:\n                print('nth term of inorder traversal: {}'.format(node.key))\n            else:\n                print('index exceeds maximum possible index.')\n        else:\n            print('Tree is empty.')\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find Nth Node in the Inorder Traversal of a Tree"}
{"code": "Solutions:\nimport re\nvalue = []\nitems=[x for x in raw_input().split(',')]\nfor p in items:\n    if len(p)<6 or len(p)>12:\n        continue\n    else:\n        pass\n    if not re.search(\"[a-z]\",p):\n        continue\n    elif not re.search(\"[0-9]\",p):\n        continue\n    elif not re.search(\"[A-Z]\",p):\n        continue\n    elif not re.search(\"[$#@]\",p):\n        continue\n    elif re.search(\"\\s\",p):\n        continue\n    else:\n        pass\n    value.append(p)\nprint \",\".join(value)\n", "nl": "A website requires the users to input username and password to register. Write a program to check the validity of password input by users.\nFollowing are the criteria for checking the password:\n1. At least 1 letter between [a-z]\n2. At least 1 number between [0-9]\n1. At least 1 letter between [A-Z]\n3. At least 1 character from [$#@]\n4. Minimum length of transaction password: 6\n5. Maximum length of transaction password: 12\nYour program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma."}
{"code": "\u00a0\na=int(input(\"Enter first number:\"))\nb=int(input(\"Enter second number:\"))\nc=int(input(\"Enter third number:\"))\nd=[]\nd.append(a)\nd.append(b)\nd.append(c)\nfor i in range(0,3):\n    for j in range(0,3):\n        for k in range(0,3):\n            if(i!=j&j!=k&k!=i):\n                print(d[i],d[j],d[k])", "nl": "Python Program to Accept Three Digits and Print all Possible Combinations from the Digits"}
{"code": "\nclass Person(object):\n    def getGender( self ):\n        return \"Unknown\"\n\nclass Male( Person ):\n    def getGender( self ):\n        return \"Male\"\n\nclass Female( Person ):\n    def getGender( self ):\n        return \"Female\"\n\naMale = Male()\naFemale= Female()\nprint aMale.getGender()\nprint aFemale.getGender()\n\n\n\n", "nl": "\nDefine a class Person and its two child classes: Male and Female. All classes have a method \"getGender\" which can print \"Male\" for Male class and \"Female\" for Female class.\n:"}
{"code": "l=int(input(\"Enter lower range: \"))\nu=int(input(\"Enter upper range: \"))\na=[]\na=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]\nprint(a)", "nl": "Python Program to Find all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10"}
{"code": "kilo_meter=int(input(\"Enter Kilo Meter: \"))\n\nmiles=kilo_meter/1.609;\nmeter=kilo_meter*1000;\n\nprint(\"Kilo Meter to Miles:\",miles)\nprint(\"Kilo Meter to Meter:\",meter)", "nl": "Program to convert kilometers into miles and meters"}
{"code": "def product(a,b):\n    if(a<b):\n        return product(b,a)\n    elif(b!=0):\n        return(a+product(a,b-1))\n    else:\n        return 0\na=int(input(\"Enter first number: \"))\nb=int(input(\"Enter second number: \"))\nprint(\"Product is: \",product(a,b))", "nl": "Python Program to Find the Product of two Numbers Using Recursion"}
{"code": "class TernaryHeap:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def size(self):\n        return len(self.items)\n\u00a0\n    def parent(self, i):\n        return (i - 1)//3\n\u00a0\n    def left(self, i):\n        return 3*i + 1\n\u00a0\n    def mid(self, i):\n        return 3*i + 2\n\u00a0\n    def right(self, i):\n        return 3*i + 3\n\u00a0\n    def get(self, i):\n        return self.items[i]\n\u00a0\n    def get_max(self):\n        if self.size() == 0:\n            return None\n        return self.items[0]\n\u00a0\n    def extract_max(self):\n        if self.size() == 0:\n            return None\n        largest = self.get_max()\n        self.items[0] = self.items[-1]\n        del self.items[-1]\n        self.max_heapify(0)\n        return largest\n\u00a0\n    def max_heapify(self, i):\n        l = self.left(i)\n        r = self.right(i)\n        m = self.mid(i)\n        if (l <= self.size() - 1 and self.get(l) > self.get(i)):\n            largest = l\n        else:\n            largest = i\n        if (m <= self.size() - 1 and self.get(m) > self.get(largest)):\n            largest = m\n        if (r <= self.size() - 1 and self.get(r) > self.get(largest)):\n            largest = r\n        if (largest != i):\n            self.swap(largest, i)\n            self.max_heapify(largest)\n\u00a0\n    def swap(self, i, j):\n        self.items[i], self.items[j] = self.items[j], self.items[i]\n\u00a0\n    def insert(self, key):\n        index = self.size()\n        self.items.append(key)\n\u00a0\n        while (index != 0):\n            p = self.parent(index)\n            if self.get(p) < self.get(index):\n                self.swap(p, index)\n            index = p\n\u00a0\n\u00a0\ntheap = TernaryHeap()\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data>')\nprint('max get')\nprint('max extract')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        theap.insert(data)\n    elif operation == 'max':\n        suboperation = do[1].strip().lower()\n        if suboperation == 'get':\n            print('Maximum value: {}'.format(theap.get_max()))\n        elif suboperation == 'extract':\n            print('Maximum value removed: {}'.format(theap.extract_max()))\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Ternary Heap"}
{"code": "import re\ns = raw_input()\nprint re.findall(\"\\d+\",s)\n\n\n", "nl": "\nWrite a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.\n"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# check except Diagonal all elements are 0 or not\n# and check all diagonal elements are same or not\npoint=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i!=j and matrix[i][j]!=0:\n            point=1\n            break\n        if i==j and matrix[i][j]!=matrix[i][j]:\n            point = 1\n            break\n\nif point==1:\n    print(\"Given Matrix is not a Scaler Matrix.\")\nelse:\n    print(\"Given Matrix is a Scaler Matrix.\")", "nl": "Program to check whether a matrix is a scalar or not"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n    def is_bst_p(self):\n        if self.left is not None:\n            if self.key < self.left.key:\n                return False\n            elif not self.left.is_bst_p():\n                return False\n        if self.right is not None:\n            if self.key > self.right.key:\n                return False\n            elif not self.right.is_bst_p():\n                return False\n        return True\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('bst')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'bst':\n        if btree is not None:\n            if btree.is_bst_p():\n                print('Tree is a binary search tree.')\n            else:\n                print('Tree is not a binary search tree.')\n        else:\n            print('Tree is empty.')\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Check whether a Tree is a Binary Search Tree"}
{"code": "\n\n'''Write\na Python program\u00a0to find out all palindrome numbers present within a\ngiven range. or\u00a0Write a program\u00a0to\u00a0find out all\npalindrome numbers present within a given range using Python '''\n\n\nprint(\"Enter a range in numbers(num1-num2):\")\nrange1=int(input())\nrange2=int(input())\nprint(range1,\" to \",range2,\" palindrome numbers are \");\nfor i in range(range1,range2+1):\n\u00a0 \u00a0num1=i\n\u00a0 \u00a0num2=0\n\u00a0 \u00a0while(num1!=0):\n\u00a0 \u00a0 \u00a0 rem=num1%10\n\u00a0 \u00a0 \u00a0 num1=int(num1/10)\n\u00a0 \u00a0 \u00a0 num2=num2*10+rem\n\u00a0 \u00a0if(i==num2):\n\u00a0 \u00a0 \u00a0 print(i,end=\" \")\n\n\n", "nl": "Find out all palindrome numbers present within a given range."}
{"code": "str=input(\"Enter Your String:\")sub_str=str.split(\" \")print(\"After reversing words in a given string is:\")for out in range(len(sub_str)-1,-1,-1):\u00a0 \u00a0 print(sub_str[out],end=\" \")", "nl": "Reverse words in a given string"}
{"code": "class Stack:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def push(self, data):\n        self.items.append(data)\n\u00a0\n    def pop(self):\n        return self.items.pop()\n\u00a0\n\u00a0\ns = Stack()\ntext = input('Please enter the string: ')\n\u00a0\nfor character in text:\n    s.push(character)\n\u00a0\nreversed_text = ''\nwhile not s.is_empty():\n    reversed_text = reversed_text + s.pop()\n\u00a0\nif text == reversed_text:\n    print('The string is a palindrome.')\nelse:\n    print('The string is not a palindrome.')", "nl": "Python Program to Check String is Palindrome using Stack"}
{"code": "\narr=[]\narr2=[]\nsize = int(input(\"Enter the size of the 1st array: \"))\nsize2 = int(input(\"Enter the size of the 2nd array: \"))\n\nprint(\"Enter the Element of the 1st array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Enter the Element of the 2nd array:\")\nfor i in range(0,size2):\n\u00a0 \u00a0 num2 = int(input())\n\u00a0 \u00a0 arr2.append(num2)\n\ncount=0\nfor i in range(0, size):\n\u00a0 \u00a0 for j in range(0, size2):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[i] == arr2[j]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count+=1\n\nif count==size2:\n\u00a0 \u00a0 print(\"Array two is a subset of array one.\")\nelse:\n\u00a0 \u00a0 print(\"Array two is not a subset of array one.\")", "nl": "Check if one array is a subset of another array or not "}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\nclass Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\ndef find_all_reachable_nodes(vertex):\n    \"\"\"Return set containing all vertices reachable from vertex.\"\"\"\n    visited = set()\n    q = Queue()\n    q.enqueue(vertex)\n    visited.add(vertex)\n    while not q.is_empty():\n        current = q.dequeue()\n        for dest in current.get_neighbours():\n            if dest not in visited:\n                visited.add(dest)\n                q.enqueue(dest)\n    return visited\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('reachable <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'reachable':\n        key = int(do[1])\n        vertex = g.get_vertex(key)\n        reachable = find_all_reachable_nodes(vertex)\n        print('All nodes reachable from {}:'.format(key),\n              [v.get_key() for v in reachable])\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find All Nodes Reachable from a Node using BFS in a Graph"}
{"code": "\nimport sys\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nmin=sys.maxsize\nsec_min=sys.maxsize\nfor j in range(0,size):\n\u00a0 \u00a0 if (arr[j] <= min):\n\u00a0 \u00a0 \u00a0 \u00a0 sec_min=min\n\u00a0 \u00a0 \u00a0 \u00a0 min = arr[j]\n\u00a0 \u00a0 elif(arr[i] <= sec_min):\n\u00a0 \u00a0 \u00a0 \u00a0 sec_min = arr[j]\nprint(\"The 2nd smallest element of array: \",sec_min)", "nl": " Find the 2nd smallest element in the array"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def find_index(self, key):\n        return self.find_index_helper(key, 0, self.head)\n\u00a0\n    def find_index_helper(self, key, start, node):\n        if node is None:\n            return -1\n\u00a0\n        if node.data == key:\n            return start\n        else:\n            return self.find_index_helper(key, start + 1, node.next)\n\u00a0\na_llist = LinkedList()\nfor data in [3, 5, 0, 10, 7]:\n    a_llist.append(data)\nprint('The linked list: ', end = '')\na_llist.display()\nprint()\n\u00a0\nkey = int(input('What data item would you like to search for? '))\nindex = a_llist.find_index(key)\nif index == -1:\n    print(str(key) + ' was not found.')\nelse:\n    print(str(key) + ' is at index ' + str(index) + '.')", "nl": "Python Program to Search for an Element in the Linked List using Recursion"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n\u00a0\ndef add_linked_lists(llist1, llist2):\n    sum_llist = LinkedList()\n    current1 = llist1.head\n    current2 = llist2.head\n    while (current1 and current2):\n        sum = current1.data + current2.data\n        sum_llist.append(sum)\n        current1 = current1.next\n        current2 = current2.next\n    if current1 is None:\n        while current2:\n            sum_llist.append(current2.data)\n            current2 = current2.next\n    else:\n        while current1:\n            sum_llist.append(current1.data)\n            current1 = current1.next\n    return sum_llist\n\u00a0\n\u00a0\n\u00a0\nllist1 = LinkedList()\nllist2 = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the first linked list: ').split()\nfor data in data_list:\n    llist1.append(int(data))\n\u00a0\ndata_list = input('Please enter the elements in the second linked list: ').split()\nfor data in data_list:\n    llist2.append(int(data))\n\u00a0\nsum_llist = add_linked_lists(llist1, llist2)\n\u00a0\nprint('The sum linked list: ', end = '')\nsum_llist.display()", "nl": "Python Program to Add Corresponding Positioned Elements of 2 Linked Lists"}
{"code": "name1 = input(\"Enter file to be read from: \")\nname2 = input(\"Enter file to be appended to: \")\nfin = open(name1, \"r\")\ndata2 = fin.read()\nfin.close()\nfout = open(name2, \"a\")\nfout.write(data2)\nfout.close()", "nl": "Python Program to Append the Contents of One File to Another File"}
{"code": "\ns=raw_input()\ns = s[::2]\nprint s\n", "nl": "\nPlease write a program which accepts a string from console and print the characters that have even indexes.\n"}
{"code": "def odd(num1,num2):\u00a0 \u00a0 if num1>num2:\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 print(num1,end=\" \")\u00a0 \u00a0 return odd(num1+2,num2)num1=1print(\"Enter your Limit:\")num2=int(input())print(\"All odd number given range are:\")odd(num1,num2)", "nl": "Print odd numbers in given range using recursion"}
{"code": "\nsize=int(input(\"Enter the size of the array:\"));\narr=[]\nprint(\"Enter the element of the array:\");\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\n\nprint(\"Before Sorting Array Element are: \",arr)\n\nfor out in range(size-1,0,-1):\n\u00a0 \u00a0 for inn in range(out):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[inn] > arr[inn +1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=arr[inn]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn]=arr[inn +1]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[inn +1]=temp\n\nprint(\"\\nAfter Sorting Array Element are: \",arr)", "nl": "Bubble Sort Program in Python | Java | C | C++"}
{"code": "lines = []\nwhile True:\n    s = raw_input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print sentence\n", "nl": "Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized."}
{"code": "def cocktail_shaker_sort(alist):\n    def swap(i, j):\n        alist[i], alist[j] = alist[j], alist[i]\n\u00a0\n    upper = len(alist) - 1\n    lower = 0\n\u00a0\n    no_swap = False\n    while (not no_swap and upper - lower > 1):\n        no_swap = True\n        for j in range(lower, upper):\n            if alist[j + 1] < alist[j]:\n                swap(j + 1, j)\n                no_swap = False\n        upper = upper - 1\n\u00a0\n        for j in range(upper, lower, -1):\n            if alist[j - 1] > alist[j]:\n                swap(j - 1, j)\n                no_swap = False\n        lower = lower + 1\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\ncocktail_shaker_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Cocktail Shaker Sort"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Addition of two matrices\nsum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]\n\n# display the sum of two matrices\nprint(\"Sum of the two Matrices is:\")\nfor m in sum_matrix:\n    print(m)", "nl": "Program to find addition of two matrices "}
{"code": "def Find_mean(arr,size):\u00a0 \u00a0 sum=0\u00a0 \u00a0 for i in range(0, size):\u00a0 \u00a0 \u00a0 \u00a0 sum+=arr[i]\u00a0 \u00a0 mean=sum/size\u00a0 \u00a0 print(\"Mean = \",mean)def Find_median(arr,size):\u00a0 \u00a0 arr.sort()\u00a0 \u00a0 if size%2==1:\u00a0 \u00a0 \u00a0 \u00a0 median=arr[size//2]\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\nMedian= \",median)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 median = (arr[size // 2] + (arr[(size // 2) - 1])) / 2.0\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\nMedian= \", median)arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Find_mean(arr,size)Find_median(arr,size)", "nl": "Find mean and median of unsorted array"}
{"code": "s1=raw_input(\"Enter first string:\")\ns2=raw_input(\"Enter second string:\")\na=list(set(s1)-set(s2))\nprint(\"The letters are:\")\nfor i in a:\n    print(i)", "nl": "Python Program that Displays which Letters are in the First String but not in the Second"}
{"code": "def binary_search(alist, start, end, key):\n    \"\"\"Search key in alist[start... end - 1].\"\"\"\n    if not start < end:\n        return -1\n\u00a0\n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search(alist, mid + 1, end, key)\n    elif alist[mid] > key:\n        return binary_search(alist, start, mid, key)\n    else:\n        return mid\n\u00a0\n\u00a0\nalist = input('Enter the sorted list of numbers: ')\nalist = alist.split()\nalist = [int(x) for x in alist]\nkey = int(input('The number to search for: '))\n\u00a0\nindex = binary_search(alist, 0, len(alist), key)\nif index < 0:\n    print('{} was not found.'.format(key))\nelse:\n    print('{} was found at index {}.'.format(key, index))", "nl": "Python Program to Implement Binary Search with Recursion"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def get_node(self, index):\n        current = self.head\n        for i in range(index):\n            current = current.next\n            if current is None:\n                return None\n        return current\n\u00a0\n\u00a0\ndef has_cycle(llist):\n    slow = llist.head\n    fast = llist.head\n    while (fast != None and fast.next != None):\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nlength = len(data_list)\nif length != 0:\n    values = '0-' + str(length - 1)\n    last_ptr = input('Enter the index [' + values + '] of the node'\n                     ' to which you want the last node to point'\n                     ' (enter nothing to make it point to None): ').strip()\n    if last_ptr == '':\n        last_ptr = None\n    else:\n        last_ptr = a_llist.get_node(int(last_ptr))\n        a_llist.last_node.next = last_ptr\n\u00a0\nif has_cycle(a_llist):\n    print('The linked list has a cycle.')\nelse:\n    print('The linked list does not have a cycle.')", "nl": "Python Program to Detect the Cycle in a Linked List"}
{"code": "\nimport zlib\ns = 'hello world!hello world!hello world!hello world!'\nt = zlib.compress(s)\nprint t\nprint zlib.decompress(t)\n\n", "nl": "\nPlease write a program to compress and decompress the string \"hello world!hello world!hello world!hello world!\".\n\n\n:"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def get_node(self, index):\n        current = self.head\n        for i in range(index):\n            if current is None:\n                return None\n            current = current.next\n        return current\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n\u00a0\ndef interchange(llist, n, m):\n    node1 = llist.get_node(n)\n    node2 = llist.get_node(m)\n    prev_node1 = llist.get_prev_node(node1)\n    prev_node2 = llist.get_prev_node(node2)\n    if prev_node1 is not None:\n        prev_node1.next = node2\n    else:\n        llist.head = node2\n    if prev_node2 is not None:\n        prev_node2.next = node1\n    else:\n        llist.head = node1\n    temp = node2.next\n    node2.next = node1.next\n    node1.next = temp\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nans = input('Please enter the two indices of the two elements that'\n            ' you want to exchange: ').split()\nn = int(ans[0])\nm = int(ans[1])\n\u00a0\ninterchange(a_llist, n, m)\n\u00a0\nprint('The new list: ')\na_llist.display()", "nl": "Python Program to Interchange two Elements of the List without touching the Key Field"}
{"code": "\n\nprint(\"Enter the row and column size:\")\n\nrow_size=int(input())\nfor out in range(row_size,0,-1):\n\u00a0 \u00a0 for i in range(row_size,0,-1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\"\")\n\n\u00a0 \u00a0 print(\"\\r\")\n\n\n", "nl": "Write a program to print the pattern"}
{"code": "\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Strong numbers between \",range1,\" and \",range2,\" are: \")\nfor i in range(range1,range2+1):\n\u00a0 \u00a0 num2=i\n\u00a0 \u00a0 num1=i\n\u00a0 \u00a0 sum=0\n\u00a0 \u00a0 while(num1!=0):\n\u00a0 \u00a0 \u00a0 \u00a0 fact=1\n\u00a0 \u00a0 \u00a0 \u00a0 rem=num1%10\n\u00a0 \u00a0 \u00a0 \u00a0 num1=int(num1/10)\n\u00a0 \u00a0 \u00a0 \u00a0 for j in range(1,rem+1):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fact=fact*j\n\u00a0 \u00a0 \u00a0 \u00a0 sum=sum+fact\n\u00a0 \u00a0 if sum==num2:\nprint(i,end=\" \")\u00a0\n", "nl": "Print Strong numbers in a given range(1 to n)"}
{"code": "\nimport math\nhex=input(\"Enter Hexadecimal Number:\")\nvalue=0\ndecimal=0\nj=len(hex)\nj-=1\nfor i in range(0,len(hex)):\n\u00a0 \u00a0 if hex[i]>='0' and hex[i]<='9' :\n\u00a0 \u00a0 \u00a0 \u00a0 value=(int)(hex[i])\n\u00a0 \u00a0 if hex[i]=='A' or hex[i]=='a':\n\u00a0 \u00a0 \u00a0 \u00a0 value=10\n\u00a0 \u00a0 if hex[i] == 'B' or hex[i] == 'b':\n\u00a0 \u00a0 \u00a0 \u00a0 value=11\n\u00a0 \u00a0 if hex[i] == 'C' or hex[i] == 'c':\n\u00a0 \u00a0 \u00a0 \u00a0 value=12\n\u00a0 \u00a0 if hex[i] == 'D' or hex[i] == 'd':\n\u00a0 \u00a0 \u00a0 \u00a0 value=13\n\u00a0 \u00a0 if hex[i] == 'E' or hex[i] == 'e':\n\u00a0 \u00a0 \u00a0 \u00a0 value=14\n\u00a0 \u00a0 if hex[i] == 'F' or hex[i] == 'f':\n\u00a0 \u00a0 \u00a0 \u00a0 value=15\n\u00a0 \u00a0 decimal=decimal+(int)(value*math.pow(16,j))\n\u00a0 \u00a0 j-=1\nsem=1\noctal=0\nwhile(decimal !=0):\n\u00a0 \u00a0 \u00a0 octal=octal+(decimal%8)*sem\n\u00a0 \u00a0 \u00a0 decimal=decimal//8\n\u00a0 \u00a0 \u00a0 sem=int(sem*10)\nprint(\"Octal Number is:\",octal)", "nl": "Program to convert Hexadecimal To Octal"}
{"code": "print(\"Enter the number:\")\nnum=int(input())\nodd=0\neven=0\nwhile(num!=0):\n\u00a0 \u00a0 rem=num%10\n\u00a0 \u00a0 if(rem%2==1):\n\u00a0 \u00a0 \u00a0 \u00a0 odd+=1\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 even+=1\n\u00a0 \u00a0 num//=10\nprint(\"Number of even digits = \",even)\nprint(\"Number of odd digits = \",odd)\u00a0", "nl": "Count the number of odd and even digits"}
{"code": "def interval_scheduling(stimes, ftimes):\n    \"\"\"Return largest set of mutually compatible activities.\n\u00a0\n    This will return a maximum-set subset of activities (numbered from 0 to n -\n    1) that are mutually compatible. Two activities are mutually compatible if\n    the start time of one activity is not less then the finish time of the other.\n\u00a0\n    stimes[i] is the start time of activity i.\n    ftimes[i] is the finish time of activity i.\n    \"\"\"\n    # index = [0, 1, 2, ..., n - 1] for n items\n    index = list(range(len(stimes)))\n    # sort according to finish times\n    index.sort(key=lambda i: ftimes[i])\n\u00a0\n    maximal_set = set()\n    prev_finish_time = 0\n    for i in index:\n        if stimes[i] >= prev_finish_time:\n            maximal_set.add(i)\n            prev_finish_time = ftimes[i]\n\u00a0\n    return maximal_set\n\u00a0\n\u00a0\nn = int(input('Enter number of activities: '))\nstimes = input('Enter the start time of the {} activities in order: '\n              .format(n)).split()\nstimes = [int(st) for st in stimes]\nftimes = input('Enter the finish times of the {} activities in order: '\n               .format(n)).split()\nftimes = [int(ft) for ft in ftimes]\n\u00a0\nans = interval_scheduling(stimes, ftimes)\nprint('A maximum-size subset of activities that are mutually compatible is', ans)", "nl": "Python Program to Solve Interval Scheduling Problem using Greedy Algorithm"}
{"code": "r=int(input(\"Enter upper limit: \"))\nfor a in range(2,r+1):\n    k=0\n    for i in range(2,a//2+1):\n        if(a%i==0):\n            k=k+1\n    if(k<=0):\n        print(a)", "nl": "Python Program to Print all the Prime Numbers within a Given Range"}
{"code": "import sys\n# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#compute the maximum element of the given 2d array\nmax=-sys.maxsize-1\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if matrix[i][j]>=max:\n            max=matrix[i][j]\n\n# Display the largest element of the given matrix\nprint(\"The Maximum element of the Given 2d array is: \",max)", "nl": "Find the maximum element in the matrix"}
{"code": "arr=[]temp=0pos=0index=0size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)print(\"Enter the search element:\")ele=int(input())print(\"Array elements are:\")for i in range(0,size):\u00a0 \u00a0 print(arr[i],end=\" \")for i in range(0,size):\u00a0 \u00a0 if arr[i] == ele:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 index=iif temp==1:\u00a0 \u00a0 print(\"\\nIndex of Search Element \",ele,\" is \",index)else:\u00a0 \u00a0 print(\"\\nElement not found....\")", "nl": "Find the index of an element in an array"}
{"code": "\nrow_size=int(input(\"Enter the row size:\"))\nfor out in range(row_size+1):\n\u00a0 \u00a0 for i in range(out):\n\u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": " Program to print the Half Pyramid Number Pattern"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nif row_size!=col_size:\n    print(\"Given Matrix is not a Square Matrix.\")\nelse:\n    #compute the transpose matrix\n    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]\n    for i in range(0, row_size):\n        for j in range(0, col_size):\n            tran_matrix[i][j] = matrix[j][i]\n# check given matrix elements and transpose\n# matrix elements are same or not.\n\nflag=0\nfor i in range(0, row_size):\n    for j in range(0, col_size):\n        if matrix[i][j] != tran_matrix[i][j]:\n            flag=1\n            break\n\nif flag==1:\n    print(\"Given Matrix is not a symmetric Matrix.\")\nelse:\n    print(\"Given Matrix is a symmetric Matrix.\")", "nl": "Program to check whether a matrix is symmetric or not"}
{"code": "def quicksort(alist, start, end):\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\n    if end - start > 1:\n        p = partition(alist, start, end)\n        quicksort(alist, start, p)\n        quicksort(alist, p + 1, end)\n\u00a0\n\u00a0\ndef partition(alist, start, end):\n    pivot = alist[start]\n    i = start + 1\n    j = end - 1\n\u00a0\n    while True:\n        while (i <= j and alist[i] <= pivot):\n            i = i + 1\n        while (i <= j and alist[j] >= pivot):\n            j = j - 1\n\u00a0\n        if i <= j:\n            alist[i], alist[j] = alist[j], alist[i]\n        else:\n            alist[start], alist[j] = alist[j], alist[start]\n            return j\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nquicksort(alist, 0, len(alist))\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Quicksort"}
{"code": "test_string=raw_input(\"Enter string:\")\nl=[]\nl=test_string.split()\nwordfreq=[l.count(p) for p in l]\nprint(dict(zip(l,wordfreq)))", "nl": "Python Program to Count the Frequency of Words Appearing in a String Using a Dictionary"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Calculate sum of lower triangular matrix element\nsum=0\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            sum += matrix[i][j]\n\n# display the sum of a lower triangular matrix element\nprint(\"Sum of Lower Triangular Matrix Elements is: \",sum)", "nl": "Program to Find the sum of a lower triangular matrix"}
{"code": "num=int(input(\"Enter a number:\"))\nif num%2 == 0:\n\u00a0 \u00a0 \u00a0print(\"It is Even\")\nelse:\n\u00a0 \u00a0 print(\"It is Odd\")", "nl": "Program to check whether the given number is even or odd"}
{"code": "class cal():\n    def __init__(self,a,b):\n        self.a=a\n        self.b=b\n    def add(self):\n        return self.a+self.b\n    def mul(self):\n        return self.a*self.b\n    def div(self):\n        return self.a/self.b\n    def sub(self):\n        return self.a-self.b\na=int(input(\"Enter first number: \"))\nb=int(input(\"Enter second number: \"))\nobj=cal(a,b)\nchoice=1\nwhile choice!=0:\n    print(\"0. Exit\")\n    print(\"1. Add\")\n    print(\"2. Subtraction\")\n    print(\"3. Multiplication\")\n    print(\"4. Division\")\n    choice=int(input(\"Enter choice: \"))\n    if choice==1:\n        print(\"Result: \",obj.add())\n    elif choice==2:\n        print(\"Result: \",obj.sub())\n    elif choice==3:\n        print(\"Result: \",obj.mul())\n    elif choice==4:\n        print(\"Result: \",round(obj.div(),2))\n    elif choice==0:\n        print(\"Exiting!\")\n    else:\n        print(\"Invalid choice!!\")\n\u00a0\n\u00a0\nprint()", "nl": "Python Program to Create a Class which Performs Basic Calculator Operations"}
{"code": "row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 if inn==out or inn+out==row_size+1:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"*\",end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to Print Cross Sign (\u2573 ) Star Pattern"}
{"code": "\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Spy numbers between \",range1,\" and \",range2,\" are: \")\nfor i in range(range1,range2+1):\n\u00a0 \u00a0 num=i\n\u00a0 \u00a0 sum = 0\n\u00a0 \u00a0 mult = 1\n\u00a0 \u00a0 while num != 0:\n\u00a0 \u00a0 \u00a0 \u00a0 rem = num % 10\n\u00a0 \u00a0 \u00a0 \u00a0 sum += rem\n\u00a0 \u00a0 \u00a0 \u00a0 mult *= rem\n\u00a0 \u00a0 \u00a0 \u00a0 num //= 10\n\n\u00a0 \u00a0 if sum == mult:\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\" \")", "nl": "Find out all Spy numbers present within a given range"}
{"code": "def bubble_sort(alist):\n    for i in range(len(alist) - 1, 0, -1):\n        no_swap = True\n        for j in range(0, i):\n            if alist[j + 1] < alist[j]:\n                alist[j], alist[j + 1] = alist[j + 1], alist[j]\n                no_swap = False\n        if no_swap:\n            return\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nbubble_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Bubble Sort "}
{"code": "class BSTNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.parent = None\n\u00a0\n    def insert(self, node):\n        if self.key > node.key:\n            if self.left is None:\n                self.left = node\n                node.parent = self\n            else:\n                self.left.insert(node)\n        elif self.key < node.key:\n            if self.right is None:\n                self.right = node\n                node.parent = self\n            else:\n                self.right.insert(node)\n\u00a0\n    def inorder(self):\n        if self.left is not None:\n            self.left.inorder()\n        print(self.key, end=' ')\n        if self.right is not None:\n            self.right.inorder()\n\u00a0\n    def replace_node_of_parent(self, new_node):\n        if self.parent is not None:\n            if new_node is not None:\n                new_node.parent = self.parent\n            if self.parent.left == self:\n                self.parent.left = new_node\n            elif self.parent.right == self:\n                self.parent.right = new_node\n        else:\n            self.key = new_node.key\n            self.left = new_node.left\n            self.right = new_node.right\n            if new_node.left is not None:\n                new_node.left.parent = self\n            if new_node.right is not None:\n                new_node.right.parent = self\n\u00a0\n    def find_min(self):\n        current = self\n        while current.left is not None:\n            current = current.left\n        return current\n\u00a0\n    def remove(self):\n        if (self.left is not None and self.right is not None):\n            successor = self.right.find_min()\n            self.key = successor.key\n            successor.remove()\n        elif self.left is not None:\n            self.replace_node_of_parent(self.left)\n        elif self.right is not None:\n            self.replace_node_of_parent(self.right)\n        else:\n            self.replace_node_of_parent(None)\n\u00a0\n    def search(self, key):\n        if self.key > key:\n            if self.left is not None:\n                return self.left.search(key)\n            else:\n                return None\n        elif self.key < key:\n            if self.right is not None:\n                return self.right.search(key)\n            else:\n                return None\n        return self\n\u00a0\n\u00a0\nclass BSTree:\n    def __init__(self):\n        self.root = None\n\u00a0\n    def inorder(self):\n        if self.root is not None:\n            self.root.inorder()\n\u00a0\n    def add(self, key):\n        new_node = BSTNode(key)\n        if self.root is None:\n            self.root = new_node\n        else:\n            self.root.insert(new_node)\n\u00a0\n    def remove(self, key):\n        to_remove = self.search(key)\n        if (self.root == to_remove\n            and self.root.left is None and self.root.right is None):\n            self.root = None\n        else:\n            to_remove.remove()\n\u00a0\n    def search(self, key):\n        if self.root is not None:\n            return self.root.search(key)\n\u00a0\n\u00a0\nbstree = BSTree()\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <key>')\nprint('remove <key>')\nprint('inorder')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        key = int(do[1])\n        bstree.add(key)\n    elif operation == 'remove':\n        key = int(do[1])\n        bstree.remove(key)\n    elif operation == 'inorder':\n        print('Inorder traversal: ', end='')\n        bstree.inorder()\n        print()\n    elif operation == 'quit':\n        break", "nl": "Python Program to Construct a Binary Search Tree and perform deletion and inorder traversal"}
{"code": "\nprint(\"Printing a-z using ASCII\")\nfor i in range(97,123):\n\u00a0 \u00a0 print(chr(i),end=\" \")", "nl": "Program to print a to z in c using ascii value"}
{"code": "def hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n\u00a0\n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n\u00a0\n\u00a0\ndisks = int(input('Enter number of disks: '))\nhanoi(disks, 'A', 'B', 'C')", "nl": "Python Program to Implement Tower of Hanoi"}
{"code": "\nnum1=int(input(\"Enter first number:\"))\nnum2=int(input(\"Enter\u00a0 second number:\"))\ndiv=0\nwhile num1>=num2:\n\u00a0 \u00a0 \u00a0 \u00a0 num1=num1-num2\n\u00a0 \u00a0 \u00a0 \u00a0 div+=1\nprint(\"Division of two number is \",div)\n", "nl": "Division Two Numbers Operator without using Division(/) operator"}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n\u00a0\ndef convert_to_circular(llist):\n    if llist.last_node:\n        llist.last_node.next = llist.head\n\u00a0\n\u00a0\ndef print_last_node_points_to(llist):\n    last = llist.last_node\n    if last is None:\n        print('List is empty.')\n        return\n    if last.next is None:\n        print('Last node points to None.')\n    else:\n        print('Last node points to element with data {}.'.format(last.next.data))\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nprint_last_node_points_to(a_llist)\n\u00a0\nprint('Converting linked list to a circular linked list...')\nconvert_to_circular(a_llist)\n\u00a0\nprint_last_node_points_to(a_llist)", "nl": "Python Program to Convert a given Singly Linked List to a Circular List"}
{"code": "\u00a0\nn=int(input(\"Enter a number:\"))\ntot=0\nwhile(n>0):\n    dig=n%10\n    tot=tot+dig\n    n=n//10\nprint(\"The total sum of digits is:\",tot)", "nl": "Python Program to Find the Sum of Digits in a Number"}
{"code": "fname = input(\"Enter file name: \")\nl=input(\"Enter letter to be searched:\")\nk = 0\n\u00a0\nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            for letter in i:\n                if(letter==l):\n                    k=k+1\nprint(\"Occurrences of the letter:\")\nprint(k)", "nl": "Python Program that Reads a Text File and Counts the Number of Times a Certain Letter Appears in the Text File"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0Calculate Amicable pairs. or\u00a0Write a\nprogram\u00a0to\u00a0Calculate Amicable pairs using Python '''\n\nprint(\"Enter the two number:\")\nnum1=int(input())\nnum2=int(input())\nsum1=0;\nsum2=0;\nfor i in range(1,num1):\n\u00a0 \u00a0 if num1%i==0:\n\u00a0 \u00a0 \u00a0 \u00a0 sum1+=i\nfor i in range(1,num2):\n\u00a0 \u00a0 if num2%i==0:\n\u00a0 \u00a0 \u00a0 \u00a0 sum2+=i\nif sum1==num2:\n\u00a0 \u00a0 if sum2==num1:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"This is an amicable pair.\")\nelse:\n\u00a0 \u00a0 \u00a0 \u00a0print(\"This is not an amicable pair.\")\n", "nl": "Write a program to calculate Amicable pairs"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        self.display_helper(self.head)\n\u00a0\n    def display_helper(self, current):\n        if current is None:\n            return\n\u00a0\n        print(current.data, end = ' ')\n        self.display_helper(current.next)\n\u00a0\na_llist = LinkedList()\nn = int(input('How many elements would you like to add? '))\nfor i in range(n):\n    data = int(input('Enter data item: '))\n    a_llist.append(data)\n\u00a0\nprint('The linked list: ', end = '')\na_llist.display()", "nl": "Python Program to Display all the Nodes in a Linked List using Recursion"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"Before sorting array elements are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 print(arr[i],end=\" \")\nfor i in range(0,size):\n\u00a0 \u00a0 for j in range(i+1, size):\n\u00a0 \u00a0 \u00a0 \u00a0 if arr[i] >= arr[j]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp = arr[i]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[i] = arr[j]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[j] = temp\n\nprint(\"\\nAfter sorting array elements are:\")\nfor i in range(0, size):\n\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Sort the elements of an array in ascending order"}
{"code": "def ReverseArray(arr,n):\u00a0 \u00a0 if(n>0):\u00a0 \u00a0 \u00a0 \u00a0 i=n-1\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i], end=\" \")\u00a0 \u00a0 \u00a0 \u00a0 ReverseArray(arr, i)arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)print(\"After reversing Array Element Are:\")ReverseArray(arr,n)", "nl": "Print array in reverse order using recursion"}
{"code": "\nstr=input(\"Enter the String:\")\nprint(\"Your Enter String is:\", str)", "nl": " Read a String with spaces"}
{"code": "class BinaryTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n\u00a0\n    def set_root(self, key):\n        self.key = key\n\u00a0\n    def insert_left(self, new_node):\n        self.left = new_node\n\u00a0\n    def insert_right(self, new_node):\n        self.right = new_node\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        if self.left is not None:\n            temp =  self.left.search(key)\n            if temp is not None:\n                return temp\n        if self.right is not None:\n            temp =  self.right.search(key)\n            return temp\n        return None\n\u00a0\n    def mirror_copy(self):\n        mirror = BinaryTree(self.key)\n        if self.right is not None:\n            mirror.left = self.right.mirror_copy()\n        if self.left is not None:\n            mirror.right = self.left.mirror_copy()\n        return mirror\n\u00a0\n    def bfs(self):\n        queue = [self]\n        while queue != []:\n            popped = queue.pop(0)\n            if popped.left is not None:\n                queue.append(popped.left)\n            if popped.right is not None:\n                queue.append(popped.right)\n            print(popped.key, end=' ')\n\u00a0\n\u00a0\nbtree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('insert <data> at root')\nprint('insert <data> left of <data>')\nprint('insert <data> right of <data>')\nprint('mirror')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'insert':\n        data = int(do[1])\n        new_node = BinaryTree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n                btree = new_node\n        else:\n            position = do[4].strip().lower()\n            key = int(position)\n            ref_node = None\n            if btree is not None:\n                ref_node = btree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            if suboperation == 'left':\n                ref_node.insert_left(new_node)\n            elif suboperation == 'right':\n                ref_node.insert_right(new_node)\n\u00a0\n    elif operation == 'mirror':\n        if btree is not None:\n            print('Creating mirror copy...')\n            mirror = btree.mirror_copy()\n            print('BFS traversal of original tree: ')\n            btree.bfs()\n            print()\n            print('BFS traversal of mirror: ')\n            mirror.bfs()\n            print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Create a Mirror Copy of a Tree and Display using BFS Traversal"}
{"code": "#Take input number of natural number\u00a0\nn=int(input(\"Enter the N value:\"))#Calculate the sum of the n natural number\nsum=0\nfor i in range(1,n+1):\n\u00a0 \u00a0sum=sum+i#display the\u00a0sum of the n natural number\nprint(\"The sum of n natural numbers is \", sum)\u00a0\n", "nl": "Program to Find sum of N Natural Numbers"}
{"code": "\nimport math\ndef bin_search(li, element):\n    bottom = 0\n    top = len(li)-1\n    index = -1\n    while top>=bottom and index==-1:\n        mid = int(math.floor((top+bottom)/2.0))\n        if li[mid]==element:\n            index = mid\n        elif li[mid]>element:\n            top = mid-1\n        else:\n            bottom = mid+1\n\n    return index\n\nli=[2,5,7,9,11,17,222]\nprint bin_search(li,11)\nprint bin_search(li,12)\n\n\n\n\n", "nl": "\nPlease write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.\n\n:"}
{"code": "num1=int(input(\"Enter 1st number:\"))\nnum2=int(input(\"Enter 2nd number:\"))\nnum3=int(input(\"Enter 3rd number:\"))\n\nnum1=num1+num2+num3\nnum2=num1-num2-num3\nnum3=num1-num2-num3\nnum1=num1-num2-num3\n\nprint(\"***After swapping***\")\nprint(\"Number 1: \",num1)\nprint(\"Number 2: \",num2)\nprint(\"Number 3: \",num3)", "nl": "Write a program to swap three numbers "}
{"code": "a=int(input(\"Enter number: \"))\nk=0\nfor i in range(2,a//2+1):\n    if(a%i==0):\n        k=k+1\nif(k<=0):\n    print(\"Number is prime\")\nelse:\n    print(\"Number isn't prime\")", "nl": "Python Program to Check if a Number is a Prime Number"}
{"code": "row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1for out in range(1,row_size+1):\u00a0 \u00a0 for inn in range(1,row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 if inn==out or inn+out==row_size+1:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(out,end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\" \", end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to Print Cross Sign (\u2573 ) Number Pattern"}
{"code": "class Stack:\n    def __init__(self):\n        self.queue1 = Queue()\n        self.queue2 = Queue()\n\u00a0\n    def is_empty(self):\n        return self.queue2.is_empty()\n\u00a0\n    def push(self, data):\n        self.queue1.enqueue(data)\n        while not self.queue2.is_empty():\n            x = self.queue2.dequeue()\n            self.queue1.enqueue(x)\n        self.queue1, self.queue2 = self.queue2, self.queue1\n\u00a0\n    def pop(self):\n        return self.queue2.dequeue()\n\u00a0\nclass Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\ns = Stack()\n\u00a0\nprint('Menu')\nprint('push <value>')\nprint('pop')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'push':\n        s.push(int(do[1]))\n    elif operation == 'pop':\n        if s.is_empty():\n            print('Stack is empty.')\n        else:\n            print('Popped value: ', s.pop())\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Stack Using Two Queues"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n\u00a0\ndef print_middle(llist):\n    current = llist.head\n    length = 0\n    while current:\n        current = current.next\n        length = length + 1\n\u00a0\n    current = llist.head\n    for i in range((length - 1)//2):\n        current = current.next\n\u00a0\n    if current:\n        if length % 2 == 0:\n            print('The two middle elements are {} and {}.'\n                .format(current.data, current.next.data))\n        else:\n            print('The middle element is {}.'.format(current.data))\n    else:\n        print('The list is empty.')\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nprint_middle(a_llist)", "nl": "Python Program to Print Middle most Node of a Linked List"}
{"code": "\nli = [12,24,35,24,88,120,155]\nli = [x for x in li if x!=24]\nprint li\n\n\n", "nl": "\nBy using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].\n:"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def alternate(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            if current.next is not None:\n                current = current.next.next\n            else:\n                break\n\u00a0\na_llist = LinkedList()\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nprint('The alternate nodes of the linked list: ', end = '')\na_llist.alternate()", "nl": "Python Program to Print the Alternate Nodes in a Linked List without using Recursion"}
{"code": "\nclass Circle(object):\n    def __init__(self, r):\n        self.radius = r\n\n    def area(self):\n        return self.radius**2*3.14\n\naCircle = Circle(2)\nprint aCircle.area()\n\n\n\n\n\n\n", "nl": "Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. \n:"}
{"code": "\nstr1=input(\"Enter the String:\")\nstr2=len(str1.split())\nprint(\"Word present in a string are \",str(str2))", "nl": "Count number of the words in a String"}
{"code": "\n\nprint(\"Enter the row and column size:\");\n\nrow_size=input()\nfor out in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 for i in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(i),end=\" \")\n\u00a0 \u00a0 print(\"\\r\")\n\n", "nl": "Write a program to print the alphabet pattern"}
{"code": "def DecimalToBinary(n):\u00a0 \u00a0 if n==0:\u00a0 \u00a0 \u00a0 \u00a0 return 0\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 (n% 2 + 10 * DecimalToBinary(n // 2))n=int(input(\"Enter the Decimal Value:\"))print(\"Binary Value of Decimal number is:\",DecimalToBinary(n))", "nl": "Convert decimal to binary using recursion"}
{"code": "string=raw_input(\"Enter string:\")\ncount=0\nfor i in string:\n      count=count+1\nprint(\"Length of the string is:\")\nprint(count)", "nl": "Python Program to Calculate the Length of a String Without Using a Library Function"}
{"code": "\nimport math\nPI=3.14\nr=int(input(\"Enter the radius of the cylinder:\"))\nh=int(input(\"Enter the height of the cylinder:\"))\nsurface_area=(2*PI*r*h)+(2*PI*math.pow(r,2))\nvolume=PI*math.pow(r,2)*h\nprint(\"Surface Area of the cylinder = \",surface_area)\n\nprint(\"Volume of the cylinder = \",volume)", "nl": "Program to Calculate the surface area and volume of a Cylinder"}
{"code": "\nimport math\nrangenumber=int(input(\"Enter a Nth Number:\"))\nc = 0\nletest = 0\nnum = 1\nwhile c != rangenumber:\n\u00a0 \u00a0 num1=num\n\u00a0 \u00a0 root = math.sqrt(num1 + 1)\n\u00a0 \u00a0 if int(root) == root:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 c+=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 letest = num\n\n\u00a0 \u00a0 num = num + 1\nprint(rangenumber,\"th Sunny number is \",letest)", "nl": "Program to Find nth Sunny Number"}
{"code": "\n\nprint(\"Enter the range of number:\")\n\nn=int(input())\nsum=0\nfor i in range(1,n+1):\n\u00a0 \u00a0 sum+=i\nprint(\"The sum of the series = \",sum)\u00a0", "nl": "Program to find the sum of series 1+2+3..+N"}
{"code": "def intersection(a, b):\n    return list(set(a) & set(b))\n\u00a0\ndef main():\n    alist=[]\n    blist=[]\n    n1=int(input(\"Enter number of elements for list1:\"))\n    n2=int(input(\"Enter number of elements for list2:\"))\n    print(\"For list1:\")\n    for x in range(0,n1):\n        element=int(input(\"Enter element\" + str(x+1) + \":\"))\n        alist.append(element)\n    print(\"For list2:\")\n    for x in range(0,n2):\n        element=int(input(\"Enter element\" + str(x+1) + \":\"))\n        blist.append(element)\n    print(\"The intersection is :\")\n    print(intersection(alist, blist))\nmain()", "nl": "Python Program to Find the Intersection of Two Lists"}
{"code": "num1=int(input(\"Enter 1st number:\"))\nnum2=int(input(\"Enter 2nd number:\"))\n\ntemp=num1\nnum1=num2\nnum2=temp\n\nprint(\"***After swapping***\")\nprint(\"Number 1: \",num1)\nprint(\"Number 2: \",num2)", "nl": "Program to swap two numbers using third variable"}
{"code": "\nprint(\"Enter a range\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Abundant numbers between \",range1,\" and \",range2,\" are: \")\nfor j in range(range1,range2+1):\n\u00a0 \u00a0 sum=0\n\u00a0 \u00a0 for i in range(1,j):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0if(j%i==0):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum=sum+i\n\u00a0 \u00a0 if sum>j:\n\u00a0 \u00a0 \u00a0 \u00a0print(j,end=\" \")\n", "nl": "Print Abundant numbers in a given range(1 to n)"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array(only 0s and 1s):\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)c=0for i in range(0,size):\u00a0 \u00a0 if arr[i]==0:\u00a0 \u00a0 \u00a0 \u00a0 c+=1for i in range(0,c):\u00a0 \u00a0 \u00a0 \u00a0 arr[i]=0for i in range(c,size):\u00a0 \u00a0 \u00a0 \u00a0 arr[i]=1print(\"After segregate 0s and 1s in an Array, Array is:\")print(arr)", "nl": "Segregate 0s and 1s in an array"}
{"code": "\nprint(\"Enter the row and column size:\")\nrow_size=input()\nfor out in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 for i in range(ord('A'),ord(row_size)+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(chr(out),end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": "Write a program to print the alphabet pattern"}
{"code": "\u00a0\nsub1=int(input(\"Enter marks of the first subject: \"))\nsub2=int(input(\"Enter marks of the second subject: \"))\nsub3=int(input(\"Enter marks of the third subject: \"))\nsub4=int(input(\"Enter marks of the fourth subject: \"))\nsub5=int(input(\"Enter marks of the fifth subject: \"))\navg=(sub1+sub2+sub3+sub4+sub4)/5\nif(avg>=90):\n    print(\"Grade: A\")\nelif(avg>=80&avg<90):\n    print(\"Grade: B\")\nelif(avg>=70&avg<80):\n    print(\"Grade: C\")\nelif(avg>=60&avg<70):\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")", "nl": "Python Program to Take in the Marks of 5 Subjects and Display the Grade"}
{"code": "class print1():\n    def __init__(self):\n        self.string=\"\"\n\u00a0\n    def get(self):\n        self.string=input(\"Enter string: \")\n\u00a0\n    def put(self):\n        print(\"String is:\")\n        print(self.string)\n\u00a0\nobj=print1()\nobj.get()\nobj.put()", "nl": "Python Program to Create a Class in which One Method Accepts a String from the User and Another Prints it"}
{"code": "def binary_insertion_sort(alist):\n    for i in range(1, len(alist)):\n        temp = alist[i]\n        pos = binary_search(alist, temp, 0, i) + 1\n\u00a0\n        for k in range(i, pos, -1):\n            alist[k] = alist[k - 1]\n\u00a0\n        alist[pos] = temp\n\u00a0\ndef binary_search(alist, key, start, end):\n    '''If key is in the list at index p, then return p.\n    If there are multiple such keys in the list, then return the index of any one.\n    If key is not in the list and a < key < b where a and b are elements in the list, then return the index of a.\n    If key is not in the list and key < a where a is the first element in the list, then return -1.\n    Only elements with indexes start to end - 1 inclusive are considered.\n    '''\n    if end - start <= 1:\n        if key < alist[start]:\n            return start - 1\n        else:\n            return start\n\u00a0\n    mid = (start + end)//2\n    if alist[mid] < key:\n        return binary_search(alist, key, mid, end)\n    elif alist[mid] > key:\n        return binary_search(alist, key, start, mid)\n    else:\n        return mid\n\u00a0\n\u00a0\nalist = input('Enter the list of numbers: ').split()\nalist = [int(x) for x in alist]\nbinary_insertion_sort(alist)\nprint('Sorted list: ', end='')\nprint(alist)", "nl": "Python Program to Implement Binary Insertion Sort"}
{"code": "def PrintArray(arr,i,n):\u00a0 \u00a0 if(i>=n):\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 print(arr[i],end=\" \")\u00a0 \u00a0 PrintArray(arr,i+1,n)arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)print(\"Array Element Are:\")PrintArray(arr,0,n)", "nl": "Print array elements using recursion"}
{"code": "def find_odd_occurring(alist):\n    \"\"\"Return the element that occurs odd number of times in alist.\n\u00a0\n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    \"\"\"\n    ans = 0\n\u00a0\n    for element in alist:\n        ans ^= element\n\u00a0\n    return ans\n\u00a0\n\u00a0\nalist = input('Enter the list: ').split()\nalist = [int(i) for i in alist]\nans = find_odd_occurring(alist)\nprint('The element that occurs odd number of times:', ans)", "nl": "Python Program to Find Element Occurring Odd Number of Times in a List"}
{"code": "def binary_search(arr, start, end, Search_ele):\u00a0 \u00a0 if(start>end):\u00a0 \u00a0 \u00a0 \u00a0 return -1\u00a0 \u00a0 mid=(int)((start+end)/2)\u00a0 \u00a0 if(arr[mid]==Search_ele):\u00a0 \u00a0 \u00a0 \u00a0 return mid\u00a0 \u00a0 if (Search_ele < arr[mid]):\u00a0 \u00a0 \u00a0 \u00a0 return (binary_search(arr, start, mid - 1, Search_ele))\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return (binary_search(arr, mid + 1, end, Search_ele))arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Search_ele=int(input(\"Enter the search element:\"))pos=binary_search(arr, 0, n, Search_ele)if (pos== -1):\u00a0 \u00a0 print(Search_ele,\" not found in array\")else:\u00a0 \u00a0 print(Search_ele,\" found at \",\"arr[\",pos,\"]\")", "nl": "Binary search Program using recursion "}
{"code": "n=int(input(\"Enter number:\"))\nfact=1\nwhile(n>0):\n    fact=fact*n\n    n=n-1\nprint(\"Factorial of the number is: \")\nprint(fact)", "nl": "Python Program to find the factorial of a number without recursion"}
{"code": "\nstr=input(\"Enter the 1st String:\")\nstr2=input(\"Enter the 2nd String:\")\ncount = 0\nif len(str) != len(str2):\n\u00a0 \u00a0 print(\"Strings are not the same.\")\nelse:\n\u00a0 \u00a0 for i in range(0,len(str)):\n\u00a0 \u00a0 \u00a0 \u00a0 if str[i] == str2[i]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count=1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 if count!=1:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Input strings are not the same.\")\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Input strings are the same.\")", "nl": "Program to Check whether two strings are same or not"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Subtraction of two matrices\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\n\n# display the Subtraction of two matrices\nprint(\"Subtraction of the two Matrices is:\")\nfor m in sub_matrix:\n    print(m)", "nl": "Program to Find subtraction of two matrices"}
{"code": "def flatten(S):\n    if S == []:\n        return S\n    if isinstance(S[0], list):\n        return flatten(S[0]) + flatten(S[1:])\n    return S[:1] + flatten(S[1:])\ns=[[1,2],[3,4]]\nprint(\"Flattened list is: \",flatten(s))", "nl": "Python Program to Flatten a Nested List using Recursion"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\nclass Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\ndef display_bfs(vertex):\n    \"\"\"Display BFS Traversal starting at vertex.\"\"\"\n    visited = set()\n    q = Queue()\n    q.enqueue(vertex)\n    visited.add(vertex)\n    while not q.is_empty():\n        current = q.dequeue()\n        print(current.get_key(), end=' ')\n        for dest in current.get_neighbours():\n            if dest not in visited:\n                visited.add(dest)\n                q.enqueue(dest)\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('bfs <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'bfs':\n        key = int(do[1])\n        print('Breadth-first Traversal: ', end='')\n        vertex = g.get_vertex(key)\n        display_bfs(vertex)\n        print()\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Breadth-First Search on a Graph"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef get_topological_sorting(graph):\n    \"\"\"Return a topological sorting of the DAG. Return None if graph is not a DAG.\"\"\"\n    tlist = []\n    visited = set()\n    on_stack = set()\n    for v in graph:\n        if v not in visited:\n            if not get_topological_sorting_helper(v, visited, on_stack, tlist):\n                return None\n    return tlist\n\u00a0\n\u00a0\ndef get_topological_sorting_helper(v, visited, on_stack, tlist):\n    \"\"\"Perform DFS traversal starting at vertex v and store a topological\n    sorting of the DAG in tlist. Return False if it is found that the graph is\n    not a DAG. Uses set visited to keep track of already visited nodes.\"\"\"\n    if v in on_stack:\n        # graph has cycles and is therefore not a DAG.\n        return False\n\u00a0\n    on_stack.add(v)\n    for dest in v.get_neighbours():\n        if dest not in visited:\n            if not get_topological_sorting_helper(dest, visited, on_stack, tlist):\n                return False\n    on_stack.remove(v)\n    visited.add(v)\n    tlist.insert(0, v.get_key()) # prepend node key to tlist\n    return True\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('topological')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'topological':\n        tlist = get_topological_sorting(g)\n        if tlist is not None:\n            print('Topological Sorting: ', end='')\n            print(tlist)\n        else:\n            print('Graph is not a DAG.')\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Print a Topological Sorting of a Directed Acyclic Graph using DFS"}
{"code": "str=input(\"Enter Your String:\")max=-1arr=[0]*256for i in range(len(str)):\u00a0 \u00a0 if str[i]==' ':\u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 num=ord(str[i])\u00a0 \u00a0 arr[num]+=1ch=' 'for i in range(len(str)):\u00a0 \u00a0 if arr[ord(str[i])] != 0:\u00a0 \u00a0 \u00a0 \u00a0 if arr[ord(str[i])] >= max:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max = arr[ord(str[i])]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ch=str[i]print(\"The Maximum occurring character in a string is \",ch)", "nl": "Find the maximum occurring character in given string"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.\"\"\"\n        self.add_edge(v1_key, v2_key, weight)\n        self.add_edge(v2_key, v1_key, weight)\n\u00a0\n    def does_undirected_edge_exist(self, v1_key, v2_key):\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\n        return (self.does_edge_exist(v1_key, v2_key)\n                and self.does_edge_exist(v1_key, v2_key))\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\nclass Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\ndef is_cycle_present(vertex, visited):\n    \"\"\"Return True if cycle is present in component containing vertex and put\n    all vertices in component in set visited.\"\"\"\n    parent = {vertex: None}\n    q = Queue()\n    q.enqueue(vertex)\n    visited.add(vertex)\n    while not q.is_empty():\n        current = q.dequeue()\n        for dest in current.get_neighbours():\n            if dest not in visited:\n                visited.add(dest)\n                parent[dest] = current\n                q.enqueue(dest)\n            else:\n                if parent[current] is not dest:\n                    return True\n    return False\n\u00a0\n\u00a0\ng = Graph()\nprint('Undirected Graph')\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <vertex1> <vertex2>')\nprint('cycle')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            v1 = int(do[2])\n            v2 = int(do[3])\n            if v1 not in g:\n                print('Vertex {} does not exist.'.format(v1))\n            elif v2 not in g:\n                print('Vertex {} does not exist.'.format(v2))\n            else:\n                if not g.does_undirected_edge_exist(v1, v2):\n                    g.add_undirected_edge(v1, v2)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'cycle':\n        present = False\n        visited = set()\n        for v in g:\n            if v not in visited:\n                if is_cycle_present(v, visited):\n                    present = True\n                    break\n\u00a0\n        if present:\n            print('Cycle present.')\n        else:\n            print('Cycle not present.')\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find if Undirected Graph contains Cycle using BFS"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"Enter the element:\")\nele=int(input())\nprint(\"Enter the position:\")\npos=int(input())\nprint(\"Before inserting array elements are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 print(arr[i],end=\" \")\narr.insert(pos-1,ele)\nprint(\"\\nAfter inserting array elements are:\")\nprint(arr)", "nl": "Insert an element into an array at a specified position"}
{"code": "num=int(input(\"Enter a number:\"))\u00a0print(\"Square of the number:\",num*num)\u00a0", "nl": "Find the square of a number accept from user"}
{"code": "\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nprint(\"\\nPositive numbers are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 if(arr[i]>0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")\n\nprint(\"\\nNegative numbers are:\")\nfor i in range(0,size):\n\u00a0 \u00a0 if(arr[i]<0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(arr[i],end=\" \")", "nl": "Separate positive and negative numbers in an array"}
{"code": "\nstr=input(\"Enter the String:\")\narr=[0]*256\nfor i in range(len(str)):\n\u00a0 \u00a0 if str[i]==' ':\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 num=ord(str[i])\n\u00a0 \u00a0 arr[num]+=1\nprint(\"Repeated character in a string are:\")\nfor i in range(256):\n\u00a0 \u00a0 if arr[i]>1:\n\u00a0 \u00a0 \u00a0 \u00a0 print((chr)(i),\" occurs \",arr[i],\" times\")", "nl": "Count repeated characters in a string"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n\u00a0\ndef first_common(llist1, llist2):\n    current1 = llist1.head\n    while current1:\n        data = current1.data\n        current2 = llist2.head\n        while current2:\n            if data == current2.data:\n                return data\n            current2 = current2.next\n        current1 = current1.next\n    return None\n\u00a0\n\u00a0\nllist1 = LinkedList()\nllist2 = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the first linked list: ').split()\nfor data in data_list:\n    llist1.append(int(data))\n\u00a0\ndata_list = input('Please enter the elements in the second linked list: ').split()\nfor data in data_list:\n    llist2.append(int(data))\n\u00a0\ncommon = first_common(llist1, llist2)\n\u00a0\nif common:\n    print('The element that appears first in the first linked list that'\n          ' is common to both is {}.'.format(common))\nelse:\n    print('The two lists have no common elements.')", "nl": "Python Program to Find the first Common Element between the 2 given Linked Lists"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.\"\"\"\n        self.add_edge(v1_key, v2_key, weight)\n        self.add_edge(v2_key, v1_key, weight)\n\u00a0\n    def does_undirected_edge_exist(self, v1_key, v2_key):\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\n        return (self.does_edge_exist(v1_key, v2_key)\n                and self.does_edge_exist(v1_key, v2_key))\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\nclass Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\ndef label_all_reachable(vertex, component, label):\n    \"\"\"Set component[v] = label for all v in the component containing vertex.\"\"\"\n    visited = set()\n    q = Queue()\n    q.enqueue(vertex)\n    visited.add(vertex)\n    while not q.is_empty():\n        current = q.dequeue()\n        component[current] = label\n        for dest in current.get_neighbours():\n            if dest not in visited:\n                visited.add(dest)\n                q.enqueue(dest)\n\u00a0\n\u00a0\ng = Graph()\nprint('Undirected Graph')\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('components')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_undirected_edge_exist(src, dest):\n                    g.add_undirected_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'components':\n        component = dict.fromkeys(g, None)\n        label = 1\n        for v in g:\n            if component[v] is None:\n                label_all_reachable(v, component, label)\n                label += 1\n\u00a0\n        max_label = label\n        for label in range(1, max_label):\n            component_vertices = [v.get_key() for v in component\n                                  if component[v] == label]\n            print('Component {}:'.format(label), component_vertices)\n\u00a0\n\u00a0\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find All Connected Components using BFS in an Undirected Graph"}
{"code": "\n\nimport math\n\nprint(\"Enter the range of number:\")\nn=int(input())\nsum=0\nfor i in range(1,n+1):\n\u00a0 \u00a0 sum+=pow(i,i)\nprint(\"The sum of the series = \",sum)", "nl": "Program to find the sum of series 1^1+2^2+3^3...+N^N"}
{"code": "# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n# compute square of the matrix\nfor i in range(0,row_size):\n    for j in range(0,col_size):\n        matrix[i][j]=pow(matrix[i][j],2)\n\n# display square of the matrix\nprint(\"Square of the Matrix elements are:\")\nfor m in matrix:\n    print(m)", "nl": "Program to Find square of a matrix "}
{"code": "string=raw_input(\"Enter string:\")\ncount=0\nfor i in string:\n      if(i.islower()):\n            count=count+1\nprint(\"The number of lowercase characters is:\")\nprint(count)", "nl": "Python Program to Count Number of Lowercase Characters in a String"}
{"code": "\nch=input(\"Enter the String:\")\nj=0\nstr=list(ch)\nstr+='\\0'\nfor i in range(len(str)):\n\u00a0 \u00a0 if i==0 or str[i-1]==' ':\n\u00a0 \u00a0 \u00a0 \u00a0 str[i]=str[i].upper()\n\u00a0 \u00a0 elif str[i]==' ' or str[i]=='\\0':\n\u00a0 \u00a0 \u00a0 \u00a0 str[i-1] = str[i-1].upper()\n\nprint(\"Your String is:\", \"\".join(str))", "nl": "Capitalize the first and last letter of every word in a string"}
{"code": "\narray = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\nprint array\n\n", "nl": "\nBy using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.\n:"}
{"code": "\nprint(\"Enter the Number :\")\nnum=int(input())\nLargest=0;\nwhile (num > 0):\n\u00a0 \u00a0 reminder=num%10\n\u00a0 \u00a0 if Largest<reminder:\n\u00a0 \u00a0 \u00a0 \u00a0 Largest = reminder\n\n\u00a0 \u00a0 num =int(num / 10)\nprint(\"The Largest Digit is :\", Largest)\n\n", "nl": "Find the largest digit in a number"}
{"code": "\nimport sys\narr=[]\nsize = int(input(\"Enter the size of the array: \"))\nprint(\"Enter the Element of the array:\")\nfor i in range(0,size):\n\u00a0 \u00a0 num = int(input())\n\u00a0 \u00a0 arr.append(num)\nmax=-sys.maxsize-1\nsec_max=-sys.maxsize-1\nfor j in range(0,size):\n\u00a0 \u00a0 if (arr[j] >= max):\n\u00a0 \u00a0 \u00a0 \u00a0 sec_max=max\n\u00a0 \u00a0 \u00a0 \u00a0 max = arr[j]\n\u00a0 \u00a0 elif(arr[i] >= sec_max):\n\u00a0 \u00a0 \u00a0 \u00a0 sec_max = arr[j]\n\nprint(\"The 2nd largest element of array: \",sec_max)", "nl": "Find the 2nd largest element in the array"}
{"code": "\n\nn=int(input(\"Enter the n value:\"))\nprint(\"Printing even numbers between 1 to \",n)\nfor i in range(1,n+1):\n\u00a0 \u00a0 if i%2==0:\n\u00a0 \u00a0 \u00a0print(i)\n", "nl": "Print all the Even numbers from 1 to n"}
{"code": "class Queue:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def enqueue(self, data):\n        self.items.append(data)\n\u00a0\n    def dequeue(self):\n        return self.items.pop(0)\n\u00a0\n\u00a0\nq = Queue()\nwhile True:\n    print('enqueue <value>')\n    print('dequeue')\n    print('quit')\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'enqueue':\n        q.enqueue(int(do[1]))\n    elif operation == 'dequeue':\n        if q.is_empty():\n            print('Queue is empty.')\n        else:\n            print('Dequeued value: ', q.dequeue())\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Queue"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nsum=0\n#Calculate sum of the diagonals element\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i==j:\n            sum+=matrix[i][j]\n# Display the sum of diagonals Element\nprint(\"Sum of diagonals Element is: \",sum)", "nl": "Find the sum of all diagonal elements of a matrix"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the 1st matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\nmatrix1=[]\n# Taking input of the 2nd matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix1.append([int(j) for j in input().split()])\n\n# Compute Subtraction of two matrices\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\n\n# display the Subtraction of two matrices\nprint(\"Subtraction of the two Matrices is:\")\nfor m in sub_matrix:\n    print(m)", "nl": "Program to Find subtraction of two matrices"}
{"code": "Solution\ndef printValue(n):\n\tprint str(n)\n\nprintValue(3)\n\t\n\n", "nl": "Define a function that can convert a integer into a string and print it in console.\n:"}
{"code": "\n\nprint(\"Enter the value of base:\")\na=int(input())\nb=int(input())\nh=int(input(\"Enter the value of height:\"))\narea=((a+b)*h)/2.0\nprint(\"Area of the Trapezoid = \",area)\n", "nl": "Program to compute the area of Trapezoid"}
{"code": "def gcd(num1,num2):\u00a0 \u00a0 if num2==0:\u00a0 \u00a0 \u00a0 \u00a0 return num1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return gcd(num2,num1%num2)print(\"Enter the two Number:\")num1=int(input())num2=int(input())print(\"Gcd of Given Numbers Using Recursion is:\",gcd(num1,num2))", "nl": "Find GCD of two numbers using recursion"}
{"code": "class Tree:\n    def __init__(self, data=None):\n        self.key = data\n        self.children = []\n\u00a0\n    def set_root(self, data):\n        self.key = data\n\u00a0\n    def add(self, node):\n        self.children.append(node)\n\u00a0\n    def search(self, key):\n        if self.key == key:\n            return self\n        for child in self.children:\n            temp = child.search(key)\n            if temp is not None:\n                return temp\n        return None\n\u00a0\n    def postorder(self):\n        for child in self.children:\n            child.postorder()\n        print(self.key, end=' ')\n\u00a0\n\u00a0\ntree = None\n\u00a0\nprint('Menu (this assumes no duplicate keys)')\nprint('add <data> at root')\nprint('add <data> below <data>')\nprint('dfs')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0].strip().lower()\n    if operation == 'add':\n        data = int(do[1])\n        new_node = Tree(data)\n        suboperation = do[2].strip().lower() \n        if suboperation == 'at':\n            tree = new_node\n        elif suboperation == 'below':\n            position = do[3].strip().lower()\n            key = int(position)\n            ref_node = None\n            if tree is not None:\n                ref_node = tree.search(key)\n            if ref_node is None:\n                print('No such key.')\n                continue\n            ref_node.add(new_node)\n\u00a0\n    elif operation == 'dfs':\n        print('Post-order traversal: ', end='')\n        tree.postorder()\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Depth First Search Traversal using Post Order"}
{"code": "\n\nimport math\n\nprint(\"Enter the range of number:\")\nn=int(input())\nsum=0\nfor i in range(1,n+1):\n\u00a0 \u00a0 sum+=pow(i,i)\nprint(\"The sum of the series = \",sum)", "nl": "Program to find the sum of series 1^1+2^2+3^3...+N^N"}
{"code": "arr=[]sum=0avg=0.0print(\"Enter the five test Marks:\")for i in range(0,5):\u00a0 \u00a0 mark = int(input())\u00a0 \u00a0 sum+=mark\u00a0 \u00a0 arr.append(mark)avg=sum/5.0print(\"Average of five tests marks is: \",avg)", "nl": "Print the average marks obtained by a student in five tests"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef find_all_reachable_nodes(v):\n    \"\"\"Return set containing all vertices reachable from vertex.\"\"\"\n    reachable = set()\n    find_all_reachable_nodes_helper(v, reachable)\n    return reachable\n\u00a0\n\u00a0\ndef find_all_reachable_nodes_helper(v, visited):\n    \"\"\"Add all vertices visited by DFS traversal starting at v to the set visited.\"\"\"\n    visited.add(v)\n    for dest in v.get_neighbours():\n        if dest not in visited:\n            find_all_reachable_nodes_helper(dest, visited)\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('reachable <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'reachable':\n        key = int(do[1])\n        vertex = g.get_vertex(key)\n        reachable = find_all_reachable_nodes(vertex)\n        print('All nodes reachable from {}:'.format(key),\n              [v.get_key() for v in reachable])\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Find All Nodes Reachable from a Node using DFS in a Graph"}
{"code": "\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=1\na=0\nb=6\nk=10\np=11\nwhile(i<=n):\n\u00a0 \u00a0 if (i % 2 == 0):\n\u00a0 \u00a0 \u00a0 \u00a0 print(b,end=\" \")\n\u00a0 \u00a0 \u00a0 \u00a0 b += p\n\u00a0 \u00a0 \u00a0 \u00a0 p += 2\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(a,end=\" \")\n\u00a0 \u00a0 \u00a0 \u00a0 a += k\n\u00a0 \u00a0 \u00a0 \u00a0 k += 2\n\u00a0 \u00a0 i+=1", "nl": "Program to print series 0,6,10,17,22,30,36...N"}
{"code": "\n\nprint(\"Enter the row and column size:\");\nrow_size=int(input())\nfor out in range(1,row_size+1):\n\u00a0 \u00a0 for i in range(1,row_size+1):\n\u00a0 \u00a0 \u00a0 \u00a0 print(i,end=\"\")\n\u00a0 \u00a0 print(\"\\r\")\n", "nl": "Program to print square pattern of numbers"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Display Lower triangular matrix\nprint(\"Lower Triangular Matrix is:\\n\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            print(\"0 \",end=\"\")\n        else:\n            print(matrix[i][j],end=\" \")\n    print()", "nl": "Program to display a lower triangular matrix"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\nclass Stack:\n    def __init__(self):\n        self.items = []\n\u00a0\n    def is_empty(self):\n        return self.items == []\n\u00a0\n    def push(self, data):\n        self.items.append(data)\n\u00a0\n    def pop(self):\n        return self.items.pop()\n\u00a0\n\u00a0\ndef display_dfs(v):\n    visited = set()\n    s = Stack()\n    s.push(vertex)\n    while not s.is_empty():\n        current = s.pop()\n        if current in visited:\n            continue\n        print(current.get_key(), end=' ')\n        visited.add(current)\n        for dest in current.get_neighbours():\n            if dest not in visited:\n                s.push(dest)\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('dfs <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'dfs':\n        key = int(do[1])\n        print('Depth-first Traversal: ', end='')\n        vertex = g.get_vertex(key)\n        display_dfs(vertex)\n        print()\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Depth-First Search on a Graph without Recursion"}
{"code": "\nimport random\nprint random.random()*100-5\n\n\n", "nl": "\nPlease generate a random float where the value is between 5 and 95 using Python math module.\n\n\n:"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def get_prev_node(self, ref_node):\n        current = self.head\n        while (current and current.next != ref_node):\n            current = current.next\n        return current\n\u00a0\n\u00a0\ndef is_palindrome(llist):\n    start = llist.head\n    end = llist.last_node\n    while (start != end and end.next != start):\n        if start.data != end.data:\n            return False\n        start = start.next\n        end = llist.get_prev_node(end)\n    return True\n\u00a0\n\u00a0\na_llist = LinkedList()\n\u00a0\ndata_list = input('Please enter the elements in the linked list: ').split()\nfor data in data_list:\n    a_llist.append(int(data))\n\u00a0\nif is_palindrome(a_llist):\n    print('The linked list is palindromic.')\nelse:\n    print('The linked list is not palindromic.')", "nl": "Python Program to Check whether a Singly Linked List is a Palindrome"}
{"code": "\nimport math\nprint(\"Enter the range of number(Limit):\")\nn=int(input())\ni=1\nwhile(i<=n):\n\u00a0 \u00a0 sum += pow(i, 2)\n\u00a0 \u00a0 i+=1\nprint(\"The sum of the series = \",sum)", "nl": "Program to find sum of series 1+4+9+16+25+.....+N"}
{"code": "n=int(input(\"Enter the range of number:\"))sum=0p=9for i in range(1,n+1):\u00a0 \u00a0 sum += p\u00a0 \u00a0 p=(p*10)+9print(\"The sum of the series = \",sum)", "nl": "Program to Find the sum of series 9+99+999.....+N"}
{"code": "\u00a0\na=int(input(\"Enter the first number: \"))\nb=int(input(\"Enter the second number: \"))\nquotient=a//b\nremainder=a%b\nprint(\"Quotient is:\",quotient)\nprint(\"Remainder is:\",remainder)", "nl": "Python Program to Read Two Numbers and Print Their Quotient and Remainder"}
{"code": "n=int(input(\"Enter the number of terms: \"))\nsum1=0\nfor i in range(1,n+1):\n    sum1=sum1+(1/i)\nprint(\"The sum of series is\",round(sum1,2))", "nl": "Python Program to Find the Sum of the Series: 1 + 1/2 + 1/3 + \u2026.. + 1/N"}
{"code": "row_size=int(input(\"Enter the row size:\"))for out in range(row_size,-(row_size+1),-1):\u00a0 \u00a0 for in1 in range(1,abs(out)+1):\u00a0 \u00a0 \u00a0 \u00a0 print(\" \",end=\"\")\u00a0 \u00a0 for p in range(abs(out),row_size+1):\u00a0 \u00a0 \u00a0 \u00a0 print(p,end=\"\")\u00a0 \u00a0 print(\"\\r\")", "nl": " Program to print the Solid Inverted Half Diamond Number Pattern"}
{"code": "str=input(\"Enter Your String:\")arr=[0]*256for i in range(len(str)):\u00a0 \u00a0 if str[i]!=' ':\u00a0 \u00a0 \u00a0 \u00a0 num=ord(str[i])\u00a0 \u00a0 \u00a0 \u00a0 arr[num]+=1print(\"After Removing Duplicate character from a given string is:\")for i in range(len(str)):\u00a0 \u00a0 if str[i]!=' ':\u00a0 \u00a0 \u00a0 \u00a0 if arr[ord(str[i])] !=0:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(str[i],end=\"\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[ord(str[i])]=0\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 print(str[i], end=\"\")", "nl": "Remove duplicate characters from a given string"}
{"code": "def Find_Factorial(len1):\u00a0 \u00a0 fact = 1\u00a0 \u00a0 for i in range(1, len1+1):\u00a0 \u00a0 \u00a0 \u00a0 fact = fact * i\u00a0 \u00a0 return factdef Find_Lexicographic_Rank(str,len1):\u00a0 \u00a0 rank = 1\u00a0 \u00a0 for inn in range(0, len1):\u00a0 \u00a0 \u00a0 \u00a0 count=0\u00a0 \u00a0 \u00a0 \u00a0 for out in range(inn+1, len1+1):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if str[inn] > str[out]:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count+=1\u00a0 \u00a0 \u00a0 \u00a0 rank+=count*Find_Factorial(len1-inn)\u00a0 \u00a0 return rankstr=input(\"Enter Your String:\")print(\"Lexicographic Rank of given String is: \",Find_Lexicographic_Rank(str,len(str)-1))", "nl": "Find lexicographic rank of a given string"}
{"code": "class Node:\n    def __init__(self, data):\n       self.data = data\n       self.next = None\n\u00a0\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.last_node = None\n\u00a0\n    def append(self, data):\n        if self.last_node is None:\n            self.head = Node(data)\n            self.last_node = self.head\n        else:\n            self.last_node.next = Node(data)\n            self.last_node = self.last_node.next\n\u00a0\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end = ' ')\n            current = current.next\n\u00a0\n    def count(self, key):\n        current = self.head\n\u00a0\n        count = 0\n        while current:\n            if current.data == key:\n                count = count + 1\n            current = current.next\n\u00a0\n        return count\n\u00a0\na_llist = LinkedList()\nfor data in [5, 1, 3, 5, 5, 15, 4, 9, 2]:\n    a_llist.append(data)\nprint('The linked list: ', end = '')\na_llist.display()\nprint()\n\u00a0\nkey = int(input('Enter data item: '))\ncount = a_llist.count(key)\nprint('{0} occurs {1} time(s) in the list.'.format(key, count))", "nl": "Python Program to Count the Number of Occurrences of an Element in the Linked List without using Recursion"}
{"code": "\n\n'''Write a Python\nprogram\u00a0to\u00a0find out all Automorphic numbers present within a given\nrange. or\u00a0Write a program\u00a0to\u00a0find out all Automorphic numbers\npresent within a given range using Python '''\n\nprint(\"Enter a range:\")\nrange1=int(input())\nrange2=int(input())\nprint(\"Perfect numbers between \",range1,\" and \",range2,\" are: \")\nfor i in range(range1,range2+1):\n\u00a0 \u00a0 num=i\n\u00a0 \u00a0 sqr=num*num\n\u00a0 \u00a0 flag=0\n\u00a0 \u00a0 while num!=0:\n\u00a0 \u00a0 \u00a0 \u00a0 if(num%10 != sqr%10):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flag=-1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 num=int(num/10)\n\u00a0 \u00a0 \u00a0 \u00a0 sqr=int(sqr/10)\n\u00a0 \u00a0 if(flag==0):\nprint(i,end=\" \")\u00a0\n", "nl": "Find out all Automorphic numbers present within a given range"}
{"code": "# Get size of matrix\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\n\nmatrix=[]\n# Taking input of the matrix\nprint(\"Enter the Matrix Element:\")\nfor i in range(row_size):\n    matrix.append([int(j) for j in input().split()])\n\n#Display Lower triangular matrix\nprint(\"Lower Triangular Matrix is:\\n\")\nfor i in range(len(matrix)):\n    for j in range(len(matrix[0])):\n        if i<j:\n            print(\"0 \",end=\"\")\n        else:\n            print(matrix[i][j],end=\" \")\n    print()", "nl": "Program to display a lower triangular matrix"}
{"code": "str=input(\"Enter Your String:\")count=0for inn in range(0,len(str)):\u00a0 \u00a0 if str[inn] >= '0' and\u00a0 str[inn] <= '9':\u00a0 \u00a0 \u00a0 \u00a0 count+=1if count==len(str):\u00a0 \u00a0 print(\"String contains only digits.\")else:\u00a0 \u00a0 print(\"String does not contain only digits.\")", "nl": "Check if a string contains only digits"}
{"code": "\n\nimport math\nPI=3.14\nr=int(input(\"Enter the radius of the cone:\"))\nh=int(input(\"Enter the height of the cone:\"))\nsurface_area=(PI*r)*(r+math.sqrt(math.pow(h,2)+math.pow(r,2)))\nvolume=PI*math.pow(r,2)*(h/3.0)\nprint(\"Surface Area of the cone= \",surface_area)\nprint(\"Volume of the cone = \",volume)\n", "nl": "Program to Calculate the surface area and volume of a Cone"}
{"code": "\nclass MyError(Exception):\n    \"\"\"My own exception class\n\n    Attributes:\n        msg  -- explanation of the error\n    \"\"\"\n\n    def __init__(self, msg):\n        self.msg = msg\n\nerror = MyError(\"something wrong\")\n\n", "nl": "\nDefine a custom exception class which takes a string message as attribute.\n:"}
{"code": "string=input(\"Enter string:\")\nstring=string.replace('a','$')\nstring=string.replace('A','$')\nprint(\"Modified string:\")\nprint(string)", "nl": "Python Program to Replace all Occurrences of \u2018a\u2019 with $ in a String"}
{"code": "def gcd(num1,num2):\u00a0 \u00a0 if num2==0:\u00a0 \u00a0 \u00a0 \u00a0 return num1\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return gcd(num2,num1%num2)def lcm(num1,num2):\u00a0 \u00a0 return (num1 * num2) // gcd(num1, num2)print(\"Enter the two Number:\")num1=int(input())num2=int(input())print(\"Lcm of Given Numbers Using Recursion is:\",lcm(num1,num2))", "nl": "Find the LCM of two numbers using recursion"}
{"code": "a=[]\nn= int(input(\"Enter the number of elements in list:\"))\nfor x in range(0,n):\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\n    a.append(element)\nb = set()\nunique = []\nfor x in a:\n    if x not in b:\n        unique.append(x)\n        b.add(x)\nprint(\"Non-duplicate items:\")\nprint(unique)", "nl": "Python Program to Remove the Duplicate Items from a List"}
{"code": "rev = 0def Num_reverse(num):\u00a0 \u00a0 global rev\u00a0 \u00a0 if num!=0:\u00a0 \u00a0 \u00a0 \u00a0 rem=num%10\u00a0 \u00a0 \u00a0 \u00a0 rev=(rev*10)+rem\u00a0 \u00a0 \u00a0 \u00a0 Num_reverse(num//10)\u00a0 \u00a0 return revnum=int(input(\"Enter your Number:\"))if(Num_reverse(num)==num):\u00a0 \u00a0 print(num,\" is a Palindrome Number.\")else:\u00a0 \u00a0 print(num,\" is not a Palindrome Number.\")", "nl": "Check if given number is palindrome using recursion"}
{"code": "arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)c=size-1for i in range(size-1,-1,-1):\u00a0 \u00a0 if arr[i]!=0:\u00a0 \u00a0 \u00a0 \u00a0 arr[c]=arr[i]\u00a0 \u00a0 \u00a0 \u00a0 c-=1for i in range(c,-1,-1):\u00a0 \u00a0 \u00a0 \u00a0 arr[c]=0\u00a0 \u00a0 \u00a0 \u00a0 c-=1print(\"After Move all zeros\u00a0to Start, Array is:\")print(arr)", "nl": "Move all zeros to the Start of an Array"}
{"code": "\nimport random\nprint random.sample(range(100), 5)\n\n", "nl": "\nPlease write a program to generate a list with 5 random numbers between 100 and 200 inclusive.\n\n\n:"}
{"code": "\nstr=input(\"Enter the String:\")\ncount=0\nfor i in range(len(str)):\n\u00a0 \u00a0 if str[i] == 'a' or str[i] == 'A' or str[i] == 'e' or str[i] == 'E' or str[i] == 'i'or str[i] == 'I' or str[i] == 'o' or str[i] == 'O' or str[i] == 'u' or str[i] == 'U' or\u00a0str[i]==' ':\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 count+=1\nif count==0:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"No consonants are present in the string.\")\nelse:\n\u00a0 \u00a0 print(\"Numbers of consonants present in the string are \",count)", "nl": "Count how many consonants present in a String"}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\ndef dfs(v, pre, post):\n    \"\"\"Display DFS traversal starting at vertex v. Stores pre and post times in\n    dictionaries pre and post.\"\"\"\n    dfs_helper(v, set(), pre, post, [0])\n\u00a0\ndef dfs_helper(v, visited, pre, post, time):\n    \"\"\"Display DFS traversal starting at vertex v. Uses set visited to keep\n    track of already visited nodes, dictionaries pre and post to store\n    discovered and finished times and the one-element list time to keep track of\n    current time.\"\"\"\n    visited.add(v)\n    time[0] = time[0] + 1\n    pre[v] = time[0]\n    print('Visiting {}... discovered time = {}'.format(v.get_key(), time[0]))\n    for dest in v.get_neighbours():\n        if dest not in visited:\n            dfs_helper(dest, visited, pre, post, time)\n    time[0] = time[0] + 1\n    post[v] = time[0]\n    print('Leaving {}... finished time = {}'.format(v.get_key(), time[0]))\n\u00a0\n\u00a0\ng = Graph()\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest>')\nprint('dfs <vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'dfs':\n        key = int(do[1])\n        print('Depth-first Traversal: ')\n        vertex = g.get_vertex(key)\n        pre = dict()\n        post = dict()\n        dfs(vertex, pre, post)\n        print()\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Print DFS Numbering of a Graph"}
{"code": "temp=0def Linear_search(arr,Search_ele,n):\u00a0 \u00a0 global temp\u00a0 \u00a0 if(n>0):\u00a0 \u00a0 \u00a0 \u00a0 i=n-1\u00a0 \u00a0 \u00a0 \u00a0 if(arr[i]==Search_ele):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temp=1\u00a0 \u00a0 \u00a0 \u00a0 Linear_search(arr, Search_ele, i)\u00a0 \u00a0 return temparr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\u00a0 \u00a0 num = int(input())\u00a0 \u00a0 arr.append(num)Search_ele=int(input(\"Enter the search element:\"))if(Linear_search(arr,Search_ele,n)==1):\u00a0 \u00a0 print(\"Element found....\")else:\u00a0 \u00a0 print(\"Element not found....\")", "nl": "Linear search Program using recursion "}
{"code": "class Graph:\n    def __init__(self):\n        # dictionary containing keys that map to the corresponding vertex object\n        self.vertices = {}\n\u00a0\n    def add_vertex(self, key):\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\n        vertex = Vertex(key)\n        self.vertices[key] = vertex\n\u00a0\n    def get_vertex(self, key):\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\n        return self.vertices[key]\n\u00a0\n    def __contains__(self, key):\n        return key in self.vertices\n\u00a0\n    def add_edge(self, src_key, dest_key, weight=1):\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n\u00a0\n    def does_edge_exist(self, src_key, dest_key):\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n\u00a0\n    def __iter__(self):\n        return iter(self.vertices.values())\n\u00a0\n\u00a0\nclass Vertex:\n    def __init__(self, key):\n        self.key = key\n        self.points_to = {}\n\u00a0\n    def get_key(self):\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\n        return self.key\n\u00a0\n    def add_neighbour(self, dest, weight):\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\n        self.points_to[dest] = weight\n\u00a0\n    def get_neighbours(self):\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\n        return self.points_to.keys()\n\u00a0\n    def get_weight(self, dest):\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\n        return self.points_to[dest]\n\u00a0\n    def does_it_point_to(self, dest):\n        \"\"\"Return True if this vertex points to dest.\"\"\"\n        return dest in self.points_to\n\u00a0\n\u00a0\ndef dijkstra(g, source):\n    \"\"\"Return distance where distance[v] is min distance from source to v.\n\u00a0\n    This will return a dictionary distance.\n\u00a0\n    g is a Graph object.\n    source is a Vertex object in g.\n    \"\"\"\n    unvisited = set(g)\n    distance = dict.fromkeys(g, float('inf'))\n    distance[source] = 0\n\u00a0\n    while unvisited != set():\n        # find vertex with minimum distance\n        closest = min(unvisited, key=lambda v: distance[v])\n\u00a0\n        # mark as visited\n        unvisited.remove(closest)\n\u00a0\n        # update distances\n        for neighbour in closest.get_neighbours():\n           if neighbour in unvisited:\n               new_distance = distance[closest] + closest.get_weight(neighbour)\n               if distance[neighbour] > new_distance:\n                   distance[neighbour] = new_distance\n\u00a0\n    return distance\n\u00a0\n\u00a0\ng = Graph()\nprint('Undirected Graph')\nprint('Menu')\nprint('add vertex <key>')\nprint('add edge <src> <dest> <weight>')\nprint('shortest <source vertex key>')\nprint('display')\nprint('quit')\n\u00a0\nwhile True:\n    do = input('What would you like to do? ').split()\n\u00a0\n    operation = do[0]\n    if operation == 'add':\n        suboperation = do[1]\n        if suboperation == 'vertex':\n            key = int(do[2])\n            if key not in g:\n                g.add_vertex(key)\n            else:\n                print('Vertex already exists.')\n        elif suboperation == 'edge':\n            src = int(do[2])\n            dest = int(do[3])\n            weight = int(do[4])\n            if src not in g:\n                print('Vertex {} does not exist.'.format(src))\n            elif dest not in g:\n                print('Vertex {} does not exist.'.format(dest))\n            else:\n                if not g.does_edge_exist(src, dest):\n                    g.add_edge(src, dest, weight)\n                    g.add_edge(dest, src, weight)\n                else:\n                    print('Edge already exists.')\n\u00a0\n    elif operation == 'shortest':\n        key = int(do[1])\n        source = g.get_vertex(key)\n        distance = dijkstra(g, source)\n        print('Distances from {}: '.format(key))\n        for v in distance:\n            print('Distance to {}: {}'.format(v.get_key(), distance[v]))\n        print()\n\u00a0\n    elif operation == 'display':\n        print('Vertices: ', end='')\n        for v in g:\n            print(v.get_key(), end=' ')\n        print()\n\u00a0\n        print('Edges: ')\n        for v in g:\n            for dest in v.get_neighbours():\n                w = v.get_weight(dest)\n                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n                                                             dest.get_key(), w))\n        print()\n\u00a0\n    elif operation == 'quit':\n        break", "nl": "Python Program to Implement Dijkstra\u2019s Shortest Path Algorithm"}
{"code": "Solution\ndef printValue(n):\n\tprint str(n)\n\nprintValue(3)\n\n", "nl": "Define a function that can convert a integer into a string and print it in console.\n:"}
