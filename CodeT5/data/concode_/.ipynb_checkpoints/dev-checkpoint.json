{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nlen=0\\\\nwhile str[len:]:\\\\n\\\\xa0 \\\\xa0 len+=1\\\\nprint(\"Your Enter String is:\", len)'", "nl": "Find the length of the string without using the inbuilt function"}
{"code": "b'Solution\\\\nevenNumbers = filter(lambda x: x%2==0, range(1,21))\\\\nprint evenNumbers\\\\n\\\\n\\\\n'", "nl": "Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).\n:"}
{"code": "b'Solution\\\\ndef printValue(s1,s2):\\\\n\\\\tprint s1+s2\\\\n\\\\nprintValue(\"3\",\"4\") #34\\\\n\\\\n'", "nl": "Define a function that can accept two strings as input and concatenate them and then print it in console.\n:"}
{"code": "b'def BinaryToDecimal(n):\\\\xa0 \\\\xa0 if n==0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return (n% 10 + 2* BinaryToDecimal(n // 10))n=int(input(\"Enter the Binary Value:\"))print(\"Decimal Value of Binary number is:\",BinaryToDecimal(n))'", "nl": "Binary to Decimal conversion using recursion"}
{"code": "b'def binary_to_gray(n):\\\\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\\\\n    n = int(n, 2) # convert to int\\\\n    n ^= (n >> 1)\\\\n\\\\xa0\\\\n    # bin(n) returns n\\'s binary representation with a \\'0b\\' prefixed\\\\n    # the slice operation is to remove the prefix\\\\n    return bin(n)[2:]\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = input(\\'Enter binary number: \\')\\\\nb = binary_to_gray(g)\\\\nprint(\\'Gray codeword:\\', b)'", "nl": "Python Program to Convert Binary to Gray Code"}
{"code": "b'print(\"Enter octal number: \")\\\\noctal=int(input())\\\\ndecimal = 0\\\\ni = 0\\\\nbinary = 0\\\\nwhile (octal != 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 decimal = decimal + (octal % 10) * pow (8, i)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 i+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 octal = octal // 10\\\\ni = 1\\\\nwhile (decimal != 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 binary = binary + (decimal % 2) * i\\\\n\\\\xa0 \\\\xa0 \\\\xa0 decimal = decimal // 2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 i = i * 10\\\\nprint (\"Binary number is: \", binary)\\\\n\\\\n\\\\n\\\\n'", "nl": "Program to convert octal to binary "}
{"code": "b'n=int(input(\"Enter the range of number(Limit):\"))i=0pr=2print(\"2 \",end=\"\")while i<n-1:\\\\xa0 \\\\xa0 pr = (pr * 2) -i\\\\xa0 \\\\xa0 print(pr,end=\" \")\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print series 2 4 7 12 21 ...N"}
{"code": "b'# Get size of 1st matrix\\\\nrow_size=int(input(\"Enter the row Size Of the 1st Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the 1st Matrix:\"))\\\\n\\\\n# Get size of 2nd matrix\\\\nrow_size1=int(input(\"Enter the row Size Of the 1st Matrix:\"))\\\\ncol_size1=int(input(\"Enter the columns Size Of the 2nd Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the 1st Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nmatrix1=[]\\\\n# Taking input of the 2nd matrix\\\\nprint(\"Enter the 2nd Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix1.append([int(j) for j in input().split()])\\\\n\\\\n# Compare two matrices\\\\npoint=0\\\\nif row_size==row_size1 and col_size==col_size1:\\\\n    for i in range(len(matrix)):\\\\n        for j in range(len(matrix[0])):\\\\n            if matrix[i][j] != matrix1[i][j]:\\\\n                point=1\\\\n                break\\\\nelse:\\\\n    print(\"Two matrices are not equal.\")\\\\n    exit(0)\\\\n\\\\nif point==1:\\\\n    print(\"Two matrices are not equal.\")\\\\nelse:\\\\n    print(\"Two matrices are equal.\")'", "nl": "Program to check two matrix are equal or not"}
{"code": "b'def Reverse_String(str):\\\\xa0 \\\\xa0 if not str:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return str\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return Reverse_String(str[1:]) + str[0]str=input(\"Enter your String:\")print(\"After Reversing String is: \",Reverse_String(str))'", "nl": " Reverse a given string using recursion"}
{"code": "b'def fact(x):\\\\n    if x == 0:\\\\n        return 1\\\\n    return x * fact(x - 1)\\\\n\\\\nx=int(raw_input())\\\\nprint fact(x)\\\\n'", "nl": "Write a program which can compute the factorial of a given numbers.\nThe results should be printed in a comma-separated sequence on a single line."}
{"code": "b'n=int(input(\"Enter the range of number(Limit):\"))i=4if n>=1:\\\\xa0 \\\\xa0 print(\"1 \",end=\"\")if n>=2:\\\\xa0 \\\\xa0 print(\"2 \",end=\"\")if n>=3:\\\\xa0 \\\\xa0 print(\"5 \",end=\"\")a=1b=2c=5while i<=n:\\\\xa0 \\\\xa0 d = a + b + c\\\\xa0 \\\\xa0 a = b\\\\xa0 \\\\xa0 b = c\\\\xa0 \\\\xa0 c = d\\\\xa0 \\\\xa0 print(d,end=\" \")\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print series 1 2 5 8 15 28 51 94 ...N"}
{"code": "b'def power(base,exp):\\\\n    if(exp==1):\\\\n        return(base)\\\\n    if(exp!=1):\\\\n        return(base*power(base,exp-1))\\\\nbase=int(input(\"Enter base: \"))\\\\nexp=int(input(\"Enter exponential value: \"))\\\\nprint(\"Result:\",power(base,exp))'", "nl": "Python Program to Find the Power of a Number Using Recursion"}
{"code": "b\"class Stack:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def push(self, data):\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def pop(self):\\\\n        return self.items.pop()\\\\n\\\\xa0\\\\n\\\\xa0\\\\ns = Stack()\\\\nexp = input('Please enter the expression: ')\\\\n\\\\xa0\\\\nfor c in exp:\\\\n    if c == '(':\\\\n        s.push(1)\\\\n    elif c == ')':\\\\n        if s.is_empty():\\\\n            is_balanced = False\\\\n            break\\\\n        s.pop()\\\\nelse:\\\\n    if s.is_empty():\\\\n        is_balanced = True\\\\n    else:\\\\n        is_balanced = False\\\\n\\\\xa0\\\\nif is_balanced:\\\\n    print('Expression is correctly parenthesized.')\\\\nelse:\\\\n    print('Expression is not correctly parenthesized.')\"", "nl": "Python Program to Check if Expression is correctly Parenthesized"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\ncount=0\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i] == \\'a\\' or str[i] == \\'A\\' or str[i] == \\'e\\' or str[i] == \\'E\\' or str[i] == \\'i\\'or str[i] == \\'I\\' or str[i] == \\'o\\' or str[i] == \\'O\\' or str[i] == \\'u\\' or str[i] == \\'U\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1\\\\nif count==0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"No vowels are present in the string.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 print(\"Numbers of vowels present in the string are \",count)'", "nl": "Count how many vowels present in a string"}
{"code": "b'decimal=0sem=0def OctalToDecimal(n):\\\\xa0 \\\\xa0 global sem,decimal\\\\xa0 \\\\xa0 if(n!=0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 decimal+=(n%10)*pow(8,sem)\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sem+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 OctalToDecimal(n // 10)\\\\xa0 \\\\xa0 return decimaln=int(input(\"Enter the Octal Value:\"))print(\"Decimal Value of Octal number is:\",OctalToDecimal(n))'", "nl": "Convert Octal to decimal using recursion"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n       self.data = data\\\\n       self.next = None\\\\n       self.prev = None\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass DoublyLinkedList:\\\\n    def __init__(self):\\\\n        self.first = None\\\\n        self.last = None\\\\n\\\\xa0\\\\n    def append(self, data):\\\\n        self.insert_at_end(Node(data))\\\\n\\\\xa0\\\\n    def insert_at_end(self, new_node):\\\\n        if self.last is None:\\\\n            self.last = new_node\\\\n            self.first = new_node\\\\n        else:\\\\n            new_node.prev = self.last\\\\n            self.last.next = new_node\\\\n            self.last = new_node\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef find_largest(dllist):\\\\n    if dllist.first is None:\\\\n        return None\\\\n    largest = dllist.first.data\\\\n    current = dllist.first.next\\\\n    while current:\\\\n        if current.data > largest:\\\\n            largest = current.data\\\\n        current = current.next\\\\n    return largest\\\\n\\\\xa0\\\\n\\\\xa0\\\\na_dllist = DoublyLinkedList()\\\\n\\\\xa0\\\\ndata_list = input('Please enter the elements in the doubly linked list: ').split()\\\\nfor data in data_list:\\\\n    a_dllist.append(int(data))\\\\n\\\\xa0\\\\nlargest = find_largest(a_dllist)\\\\nif largest:\\\\n    print('The largest element is {}.'.format(largest))\\\\nelse:\\\\n    print('The list is empty.')\"", "nl": "Python Program to Find the Largest Element in a Doubly Linked List"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\\\\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\\\\n        given weight.\"\"\"\\\\n        self.add_edge(v1_key, v2_key, weight)\\\\n        self.add_edge(v2_key, v1_key, weight)\\\\n\\\\xa0\\\\n    def does_undirected_edge_exist(self, v1_key, v2_key):\\\\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\\\\n        return (self.does_edge_exist(v1_key, v2_key)\\\\n                and self.does_edge_exist(v1_key, v2_key))\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef is_cycle_present(v, visited):\\\\n    \"\"\"Return True if cycle is present in component containing vertex and put\\\\n    all vertices in component in set visited.\"\"\"\\\\n    parent = {v: None}\\\\n    return is_cycle_present_helper(v, visited, parent)\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef is_cycle_present_helper(v, visited, parent):\\\\n    \"\"\"Return True if cycle is present in component containing vertex and put\\\\n    all vertices in component in set visited. Uses dictionary parent to keep\\\\n    track of parents of nodes in the DFS tree.\"\"\"\\\\n    visited.add(v)\\\\n    for dest in v.get_neighbours():\\\\n        if dest not in visited:\\\\n            parent[dest] = v\\\\n            if is_cycle_present_helper(dest, visited, parent):\\\\n                return True\\\\n        else:\\\\n            if parent[v] is not dest:\\\\n                return True\\\\n    return False\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Undirected Graph\\')\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <vertex1> <vertex2>\\')\\\\nprint(\\'cycle\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            v1 = int(do[2])\\\\n            v2 = int(do[3])\\\\n            if v1 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v1))\\\\n            elif v2 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v2))\\\\n            else:\\\\n                if not g.does_undirected_edge_exist(v1, v2):\\\\n                    g.add_undirected_edge(v1, v2)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'cycle\\':\\\\n        present = False\\\\n        visited = set()\\\\n        for v in g:\\\\n            if v not in visited:\\\\n                if is_cycle_present(v, visited):\\\\n                    present = True\\\\n                    break\\\\n\\\\xa0\\\\n        if present:\\\\n            print(\\'Cycle present.\\')\\\\n        else:\\\\n            print(\\'Cycle not present.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find if Undirected Graph contains Cycle using DFS"}
{"code": "b'\\\\nrangenumber=int(input(\"Enter a Nth Number:\"))\\\\nc = 0\\\\nletest = 0\\\\nnum = 1\\\\nwhile c != rangenumber:\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 mult = 1\\\\n\\\\xa0 \\\\xa0 num1=num\\\\n\\\\xa0 \\\\xa0 while num1 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += rem\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 mult *= rem\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 //= 10\\\\n\\\\n\\\\xa0 \\\\xa0 if sum == mult:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th Spy number is \",letest)'", "nl": "Program to Find nth Spy Number "}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0find out all How many 1 and 0 in a given number.\\\\nor\\\\xa0Write a program\\\\xa0to\\\\xa0find out all How many 1 and 0 in a given the number using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter a number:\")\\\\nnum=int(input())\\\\nc1=0\\\\nc0=0\\\\nwhile int(num):\\\\n\\\\xa0 \\\\xa0 r=num%10\\\\n\\\\xa0 \\\\xa0 num=int(num/10)\\\\n\\\\xa0 \\\\xa0 if r==1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c1=c1+1\\\\n\\\\xa0 \\\\xa0 if r==0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c0=c0+1\\\\nprint(\"The total number of zero\\'s are \",c0)\\\\nprint(\"The total number of one\\'s are \",c1)\\\\n\\\\n\\\\n'", "nl": "Find out how many 1 and 0 in a given number."}
{"code": "b'# Get size of 1st matrix\\\\nrow_size=int(input(\"Enter the row Size Of the 1st Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the 1st Matrix:\"))\\\\n\\\\n# Get size of 2nd matrix\\\\nrow_size1=int(input(\"Enter the row Size Of the 1st Matrix:\"))\\\\ncol_size1=int(input(\"Enter the columns Size Of the 2nd Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the 1st Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nmatrix1=[]\\\\n# Taking input of the 2nd matrix\\\\nprint(\"Enter the 2nd Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix1.append([int(j) for j in input().split()])\\\\n\\\\n# Compare two matrices\\\\npoint=0\\\\nif row_size==row_size1 and col_size==col_size1:\\\\n    for i in range(len(matrix)):\\\\n        for j in range(len(matrix[0])):\\\\n            if matrix[i][j] != matrix1[i][j]:\\\\n                point=1\\\\n                break\\\\nelse:\\\\n    print(\"Two matrices are not equal.\")\\\\n    exit(0)\\\\n\\\\nif point==1:\\\\n    print(\"Two matrices are not equal.\")\\\\nelse:\\\\n    print(\"Two matrices are equal.\")'", "nl": "Program to check two matrix are equal or not"}
{"code": "b'str=input(\"Enter Your String:\")sub_str=str.split(\" \")maxInd=0max=0max = len(sub_str[0])for inn in range(0,len(sub_str)):\\\\xa0 \\\\xa0 len1 = len(sub_str[inn])\\\\xa0 \\\\xa0 if len1 > max:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 max=len1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 maxInd=innprint(\"Longest Substring(Word) is \",sub_str[maxInd])'", "nl": "Find the Longest word in a string"}
{"code": "b'def gray_to_binary(n):\\\\n    \"\"\"Convert Gray codeword to binary and return it.\"\"\"\\\\n    n = int(n, 2) # convert to int\\\\n\\\\xa0\\\\n    mask = n\\\\n    while mask != 0:\\\\n        mask >>= 1\\\\n        n ^= mask\\\\n\\\\xa0\\\\n    # bin(n) returns n\\'s binary representation with a \\'0b\\' prefixed\\\\n    # the slice operation is to remove the prefix\\\\n    return bin(n)[2:]\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = input(\\'Enter Gray codeword: \\')\\\\nb = gray_to_binary(g)\\\\nprint(\\'In binary:\\', b)'", "nl": "Python Program to Convert Gray Code to Binary"}
{"code": "b\"class Stack:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def push(self, data):\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def pop(self):\\\\n        return self.items.pop()\\\\n\\\\xa0\\\\n\\\\xa0\\\\ns = Stack()\\\\nwhile True:\\\\n    print('push <value>')\\\\n    print('pop')\\\\n    print('quit')\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'push':\\\\n        s.push(int(do[1]))\\\\n    elif operation == 'pop':\\\\n        if s.is_empty():\\\\n            print('Stack is empty.')\\\\n        else:\\\\n            print('Popped value: ', s.pop())\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement a Stack"}
{"code": "b'def find_max_subarray(alist, start, end):\\\\n    \"\"\"Returns (l, r, m) such that alist[l:r] is the maximum subarray in\\\\n    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <\\\\n    end.\"\"\"\\\\n    # base case\\\\n    if start == end - 1:\\\\n        return start, end, alist[start]\\\\n    else:\\\\n        mid = (start + end)//2\\\\n        left_start, left_end, left_max = find_max_subarray(alist, start, mid)\\\\n        right_start, right_end, right_max = find_max_subarray(alist, mid, end)\\\\n        cross_start, cross_end, cross_max = find_max_crossing_subarray(alist, start, mid, end)\\\\n        if (left_max > right_max and left_max > cross_max):\\\\n            return left_start, left_end, left_max\\\\n        elif (right_max > left_max and right_max > cross_max):\\\\n            return right_start, right_end, right_max\\\\n        else:\\\\n            return cross_start, cross_end, cross_max\\\\n\\\\xa0\\\\ndef find_max_crossing_subarray(alist, start, mid, end):\\\\n    \"\"\"Returns (l, r, m) such that alist[l:r] is the maximum subarray within\\\\n    alist with start <= l < mid <= r < end with sum m. The arguments start, mid,\\\\n    end must satisfy start <= mid <= end.\"\"\"\\\\n    sum_left = float(\\'-inf\\')\\\\n    sum_temp = 0\\\\n    cross_start = mid\\\\n    for i in range(mid - 1, start - 1, -1):\\\\n        sum_temp = sum_temp + alist[i]\\\\n        if sum_temp > sum_left:\\\\n            sum_left = sum_temp\\\\n            cross_start = i\\\\n\\\\xa0\\\\n    sum_right = float(\\'-inf\\')\\\\n    sum_temp = 0\\\\n    cross_end = mid + 1\\\\n    for i in range(mid, end):\\\\n        sum_temp = sum_temp + alist[i]\\\\n        if sum_temp > sum_right:\\\\n            sum_right = sum_temp\\\\n            cross_end = i + 1\\\\n    return cross_start, cross_end, sum_left + sum_right\\\\n\\\\xa0\\\\nalist = input(\\'Enter the list of numbers: \\')\\\\nalist = alist.split()\\\\nalist = [int(x) for x in alist]\\\\nstart, end, maximum = find_max_subarray(alist, 0, len(alist))\\\\nprint(\\'The maximum subarray starts at index {}, ends at index {}\\'\\\\n      \\' and has sum {}.\\'.format(start, end - 1, maximum))'", "nl": "Python Program to solve Maximum Subarray Problem using Divide and Conquer"}
{"code": "b\"items=[x for x in raw_input().split(',')]\\\\nitems.sort()\\\\nprint ','.join(items)\\\\n\"", "nl": "Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically."}
{"code": "b'\\\\n\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to calculate the LCM of two numbers. or\\\\xa0\\\\n\\\\n\\\\n\\\\n\\\\xa0\\\\xa0 Write a program\\\\xa0to\\\\xa0calculate the\\\\nLCM of two numbers using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter two number to find L.C.M:\")\\\\nnum1=int(input())\\\\nnum2=int(input())\\\\nn1=num1\\\\nn2=num2\\\\nwhile(num1!=num2):\\\\n\\\\xa0 \\\\xa0if (num1 > num2):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 num1 = num1 - num2\\\\n\\\\xa0 \\\\xa0else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 num2= num2 - num1\\\\nlcm=int((n1*n2)/num1)\\\\nprint(\"L.C.M is\",lcm)\\\\n'", "nl": "Program to calculate the LCM of two numbers"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)count=0print(\"All the inversions are:\")for i in range(0,size-1):\\\\xa0 \\\\xa0 for j in range(i+1, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if arr[i]>arr[j]:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"(\",arr[i],\",\",arr[j],\")\")\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1if count==0:\\\\xa0 \\\\xa0 \\\\xa0print(\"(0)\")elif count==0:\\\\xa0 \\\\xa0 \\\\xa0print(\"\\\\\\\\nNumber of Inversions is \",count)else:\\\\xa0 \\\\xa0 print(\"\\\\\\\\nNumber of Inversions are \",count)'", "nl": "Count inversions in an array"}
{"code": "b'n=int(input(\"Enter a number:\"))\\\\nd={x:x*x for x in range(1,n+1)}\\\\nprint(d)'", "nl": "Python Program to Generate a Dictionary that Contains Numbers (between 1 and n) in the Form (x,x*x)."}
{"code": "b'a=str(input(\"Enter a string: \"))\\\\nprint(\"Reverse of the string is: \")\\\\nprint(a[::-1])'", "nl": "Python Program to Reverse a String without using Recursion"}
{"code": "b'def count_paths(m, n, holes):\\\\n    \"\"\"Return number of paths from (0, 0) to (m, n) in an m x n grid.\\\\n\\\\xa0\\\\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\\\\n    blocked for a path.\\\\n    \"\"\"\\\\n    paths = [[-1]*(m + 1) for _ in range(n + 1)]\\\\n\\\\xa0\\\\n    if (0, 0) in holes:\\\\n        paths[0][0] = 0\\\\n    else:\\\\n        paths[0][0] = 1\\\\n\\\\xa0\\\\n    for x in range(1, n + 1):\\\\n        if (x, 0) in holes:\\\\n            paths[x][0] = 0\\\\n        else:\\\\n            paths[x][0] = paths[x - 1][0]\\\\n\\\\xa0\\\\n    for y in range(1, m + 1):\\\\n        if (0, y) in holes:\\\\n            paths[0][y] = 0\\\\n        else:\\\\n            paths[0][y] = paths[0][y - 1]\\\\n\\\\xa0\\\\n    for x in range(1, n + 1):\\\\n        for y in range(1, m + 1):\\\\n            if (x, y) in holes:\\\\n                paths[x][y] = 0\\\\n            else:\\\\n                paths[x][y] = paths[x - 1][y] + paths[x][y - 1]\\\\n\\\\xa0\\\\n    return paths[n][m]\\\\n\\\\xa0\\\\n\\\\xa0\\\\nm, n = input(\\'Enter m, n for the size of the m x n grid (m rows and n columns): \\').split(\\',\\')\\\\nm = int(m)\\\\nn = int(n)\\\\nprint(\\'Enter the coordinates of holes on each line (empty line to stop): \\')\\\\nholes = []\\\\nwhile True:\\\\n    hole = input(\\'\\')\\\\n    if not hole.strip():\\\\n        break\\\\n    hole = hole.split(\\',\\')\\\\n    hole = (int(hole[0]), int(hole[1]))\\\\n    holes.append(hole)\\\\n\\\\xa0\\\\ncount = count_paths(m, n, holes)\\\\nprint(\\'Number of paths from (0, 0) to ({}, {}): {}.\\'.format(n, m, count))'", "nl": "Python Program to Count all Paths in a Grid with Holes using Dynamic Programming with Bottom-Up Approach"}
{"code": "b'\\\\xa0\\\\ncm=int(input(\"Enter the height in centimeters:\"))\\\\ninches=0.394*cm\\\\nfeet=0.0328*cm\\\\nprint(\"The length in inches\",round(inches,2))\\\\nprint(\"The length in feet\",round(feet,2))'", "nl": "Python Program to Read Height in Centimeters and then Convert the Height to Feet and Inches"}
{"code": "b'\\\\nimport random\\\\nprint random.choice([i for i in range(201) if i%5==0 and i%7==0])\\\\n\\\\n\\\\n\\\\n'", "nl": "\nPlease write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using random module and list comprehension.\n\n\n:"}
{"code": "b'a=str(input(\"Enter the name of the file with .txt extension:\"))\\\\nfile2=open(a,\\'r\\')\\\\nline=file2.readline()\\\\nwhile(line!=\"\"):\\\\n    print(line)\\\\n    line=file2.readline()\\\\nfile2.close()'", "nl": "Python Program to Read the Contents of a File"}
{"code": "b'\\\\ndef EvenGenerator(n):\\\\n    i=0\\\\n    while i<=n:\\\\n        if i%2==0:\\\\n            yield i\\\\n        i+=1\\\\n\\\\n\\\\nn=int(raw_input())\\\\nvalues = []\\\\nfor i in EvenGenerator(n):\\\\n    values.append(str(i))\\\\n\\\\nprint \",\".join(values)\\\\n\\\\n\\\\n'", "nl": "\nPlease write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.\n"}
{"code": "b'Solution\\\\ndef printValue(s1,s2):\\\\n\\\\tprint int(s1)+int(s2)\\\\n\\\\nprintValue(\"3\",\"4\") #7\\\\n\\\\n\\\\n'", "nl": "Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.\n:"}
{"code": "b'\\\\nli = [12,24,35,70,88,120,155]\\\\nli = [x for (i,x) in enumerate(li) if i not in (0,4,5)]\\\\nprint li\\\\n\\\\n\\\\n\\\\n'", "nl": "\nBy using list comprehension, please write a program to print the list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].\n:"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))np=row_size*2-1for out in range(row_size-1,-1,-1):\\\\xa0 \\\\xa0 for inn in range(row_size,out,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\xa0 \\\\xa0 for p in range(0,np):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print((chr)(out+65),end=\"\")\\\\xa0 \\\\xa0 np-=2\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Print the Full Inverted Pyramid Alphabet Pattern"}
{"code": "b'\\\\nexpression = raw_input()\\\\nprint eval(expression)\\\\n\\\\n\\\\n'", "nl": "\nPlease write a program which accepts basic mathematic expression from console and print the evaluation result.\n"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i] == \\'a\\' or str[i] == \\'A\\' or str[i] == \\'e\\' or str[i] == \\'E\\' or str[i] == \\'i\\'or str[i] == \\'I\\' or str[i] == \\'o\\' or str[i] == \\'O\\' or str[i] == \\'u\\' or str[i] == \\'U\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(str[i],end=\" \")'", "nl": "Print vowels in a string"}
{"code": "b'a=[]\\\\nc=[]\\\\nn1=int(input(\"Enter number of elements:\"))\\\\nfor i in range(1,n1+1):\\\\n    b=int(input(\"Enter element:\"))\\\\n    a.append(b)\\\\nn2=int(input(\"Enter number of elements:\"))\\\\nfor i in range(1,n2+1):\\\\n    d=int(input(\"Enter element:\"))\\\\n    c.append(d)\\\\nnew=a+c\\\\nnew.sort()\\\\nprint(\"Sorted list is:\",new)'", "nl": "Python Program to Merge Two Lists and Sort it"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)Maximum_Sum=0for i in range(0,size):\\\\xa0 \\\\xa0 for j in range(i, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=0\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for p in range(i, j):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum+=arr[p]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if sum>=Maximum_Sum:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0Maximum_Sum=sumprint(\"Maximum sum of Contiguous Subarray is \",Maximum_Sum)'", "nl": "Max sum contiguous subarray"}
{"code": "b'a=[]\\\\nl=int(input(\"Enter lower limit: \"))\\\\nu=int(input(\"Enter upper limit: \"))\\\\na=[x for x in range(l,u+1) if x%2!=0 and str(x)==str(x)[::-1]]\\\\nprint(\"The numbers are: \",a)'", "nl": "Python Program to Find All Numbers which are Odd and Palindromes Between a Range of Numbers without using Recursion"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 print(i*i*i,end=\" \")\\\\n\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to Print Cube Number series 1 8 27 64...N"}
{"code": "b\"def merge_sort(alist, start, end):\\\\n    '''Sorts the list from indexes start to end - 1 inclusive.'''\\\\n    if end - start > 1:\\\\n        mid = (start + end)//2\\\\n        merge_sort(alist, start, mid)\\\\n        merge_sort(alist, mid, end)\\\\n        merge_list(alist, start, mid, end)\\\\n\\\\xa0\\\\ndef merge_list(alist, start, mid, end):\\\\n    left = alist[start:mid]\\\\n    right = alist[mid:end]\\\\n    k = start\\\\n    i = 0\\\\n    j = 0\\\\n    while (start + i < mid and mid + j < end):\\\\n        if (left[i] <= right[j]):\\\\n            alist[k] = left[i]\\\\n            i = i + 1\\\\n        else:\\\\n            alist[k] = right[j]\\\\n            j = j + 1\\\\n        k = k + 1\\\\n    if start + i < mid:\\\\n        while k < end:\\\\n            alist[k] = left[i]\\\\n            i = i + 1\\\\n            k = k + 1\\\\n    else:\\\\n        while k < end:\\\\n            alist[k] = right[j]\\\\n            j = j + 1\\\\n            k = k + 1\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input('Enter the list of numbers: ').split()\\\\nalist = [int(x) for x in alist]\\\\nmerge_sort(alist, 0, len(alist))\\\\nprint('Sorted list: ', end='')\\\\nprint(alist)\"", "nl": "Python Program to Implement Merge Sort"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nprint(\"After Reversing String is :\")\\\\nfor i in range(len(str)-1,-1,-1):\\\\n\\\\xa0 \\\\xa0 print(str[i],end=\"\")'", "nl": "Program to reverse a string without using the reverse function"}
{"code": "b'Solution\\\\nsquaredNumbers = map(lambda x: x**2, range(1,21))\\\\nprint squaredNumbers\\\\n\\\\n\\\\n\\\\n\\\\n'", "nl": "Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).\n:"}
{"code": "b'\\\\n\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nsum=0\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 sum+=i*i\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find the sum of series 1^2+2^2+3^2...+N^2"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# Compute transpose of two matrices\\\\ntran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\\\\nfor i in range(0,row_size):\\\\n    for j in range(0,col_size):\\\\n        tran_matrix[i][j]=matrix[j][i]\\\\n\\\\n# display transpose of the matrix\\\\nprint(\"Transpose of the Given Matrix is:\")\\\\nfor m in tran_matrix:\\\\n    print(m)'", "nl": "Program to find the transpose of a matrix"}
{"code": "b'\\\\nprint(\"Enter 3 numbers:\")\\\\nnum1=int(input())\\\\nnum2=int(input())\\\\nnum3=int(input())\\\\n\\\\nprint(\"The biggest number is \",max(num1,num2,num3))\\\\n\\\\n'", "nl": "Program to Find the Biggest of three numbers"}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter the number:\"))\\\\ntmp=n\\\\nk=0\\\\nwhile(n>0):\\\\n    k=k+1\\\\n    n=n//10\\\\nb=str(tmp)\\\\nc=str(k)\\\\nd=c+b[k-1]\\\\nprint(\"The new number formed:\",int(d))'", "nl": "Python Program to Form an Integer that has the Number of Digits at Ten's Place and the Least Significant Digit of the Entered Integer at One's Place"}
{"code": "b'Solution\\\\ndef printList():\\\\n\\\\tli=list()\\\\n\\\\tfor i in range(1,21):\\\\n\\\\t\\\\tli.append(i**2)\\\\n\\\\tprint li\\\\n\\\\t\\\\t\\\\n\\\\nprintList()\\\\n\\\\n'", "nl": "Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).\n:"}
{"code": "b'def Multiplication(num1,num2):\\\\xa0 \\\\xa0 if num1<num2:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return Multiplication(num2, num1)\\\\xa0 \\\\xa0 elif num2!=0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return num1 + Multiplication(num1, num2 - 1)\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0print(\"Enter the two Number:\")num1=int(input())num2=int(input())print(\"Multiplication of Two Number Using Recursion is: \",Multiplication(num1,num2))'", "nl": "Multiply two numbers using recursion"}
{"code": "b'\\\\nn=int(input(\"Enter the n value:\"))\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 fact*=i\\\\nresult=1.0/fact\\\\nprint(\"1/n!= \",result)\\\\n'", "nl": "Write C|Java|C++|Python Program to compute 1/N!"}
{"code": "b'\\\\nrow_size=int(input(\"Enter the row size:\"))\\\\nfor out in range(row_size,-(row_size-1),-1):\\\\n\\\\xa0 \\\\xa0 for i in range((row_size),abs(out-1),-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"*\",end=\"\")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n\\\\n'", "nl": " Program to print the Solid Half Diamond Star Pattern"}
{"code": "b'class InputOutString(object):\\\\n    def __init__(self):\\\\n        self.s = \"\"\\\\n\\\\n    def getString(self):\\\\n        self.s = raw_input()\\\\n\\\\n    def printString(self):\\\\n        print self.s.upper()\\\\n\\\\nstrObj = InputOutString()\\\\nstrObj.getString()\\\\nstrObj.printString()\\\\n'", "nl": "Define a class which has at least two methods:\ngetString: to get a string from console input\nprintString: to print the string in upper case.\nAlso please include simple test function to test the class methods.\n:"}
{"code": "b'count=0def count_digit(num):\\\\xa0 \\\\xa0 global count\\\\xa0 \\\\xa0 if (num != 0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count +=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count_digit(num // 10)\\\\xa0 \\\\xa0 return countn=int(input(\"Enter a number:\"))print(\"The number of digits in the Given Number is \",count_digit(n))'", "nl": "Count number of digits in a number using recursion"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1for out in range(1,row_size+1):\\\\xa0 \\\\xa0 for inn in range(1,row_size+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if (inn==1 or inn==row_size) or (out==1 or out==row_size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"*\",end=\"\")\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \", end=\"\")\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Program to Print the Hollow Rectangle Star Pattern"}
{"code": "b'\\\\nstr=input(\"Enter the 1st String:\")\\\\nstr2=input(\"Enter the 2nd String:\")\\\\nif len(str) != len(str2):\\\\n\\\\xa0 \\\\xa0 print(\"Strings are not an Anagrams.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 count = 0\\\\n\\\\xa0 \\\\xa0 str3=\\'\\'.join(sorted(str))\\\\n\\\\xa0 \\\\xa0 str4=\\'\\'.join(sorted(str2))\\\\n\\\\xa0 \\\\xa0 for i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if str3[i] != str4[i]:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count=1\\\\n\\\\xa0 \\\\xa0 if count == 1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"Input strings are not an anagram\")\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"Input strings are an anagram\")'", "nl": "Program to check two strings are anagrams or not"}
{"code": "b\"def introsort(alist):\\\\n    maxdepth = (len(alist).bit_length() - 1)*2\\\\n    introsort_helper(alist, 0, len(alist), maxdepth)\\\\n\\\\xa0\\\\ndef introsort_helper(alist, start, end, maxdepth):\\\\n    if end - start <= 1:\\\\n        return\\\\n    elif maxdepth == 0:\\\\n        heapsort(alist, start, end)\\\\n    else:\\\\n        p = partition(alist, start, end)\\\\n        introsort_helper(alist, start, p + 1, maxdepth - 1)\\\\n        introsort_helper(alist, p + 1, end, maxdepth - 1)\\\\n\\\\xa0\\\\ndef partition(alist, start, end):\\\\n    pivot = alist[start]\\\\n    i = start - 1\\\\n    j = end\\\\n\\\\xa0\\\\n    while True:\\\\n        i = i + 1\\\\n        while alist[i] < pivot:\\\\n            i = i + 1\\\\n        j = j - 1\\\\n        while alist[j] > pivot:\\\\n            j = j - 1\\\\n\\\\xa0\\\\n        if i >= j:\\\\n            return j\\\\n\\\\xa0\\\\n        swap(alist, i, j)\\\\n\\\\xa0\\\\ndef swap(alist, i, j):\\\\n    alist[i], alist[j] = alist[j], alist[i]\\\\n\\\\xa0\\\\ndef heapsort(alist, start, end):\\\\n    build_max_heap(alist, start, end)\\\\n    for i in range(end - 1, start, -1):\\\\n        swap(alist, start, i)\\\\n        max_heapify(alist, index=0, start=start, end=i)\\\\n\\\\xa0\\\\ndef build_max_heap(alist, start, end):\\\\n    def parent(i):\\\\n        return (i - 1)//2\\\\n    length = end - start\\\\n    index = parent(length - 1)\\\\n    while index >= 0:\\\\n        max_heapify(alist, index, start, end)\\\\n        index = index - 1\\\\n\\\\xa0\\\\ndef max_heapify(alist, index, start, end):\\\\n    def left(i):\\\\n        return 2*i + 1\\\\n    def right(i):\\\\n        return 2*i + 2\\\\n\\\\xa0\\\\n    size = end - start\\\\n    l = left(index)\\\\n    r = right(index)\\\\n    if (l < size and alist[start + l] > alist[start + index]):\\\\n        largest = l\\\\n    else:\\\\n        largest = index\\\\n    if (r < size and alist[start + r] > alist[start + largest]):\\\\n        largest = r\\\\n    if largest != index:\\\\n        swap(alist, start + largest, start + index)\\\\n        max_heapify(alist, largest, start, end)\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input('Enter the list of numbers: ').split()\\\\nalist = [int(x) for x in alist]\\\\nintrosort(alist)\\\\nprint('Sorted list: ', end='')\\\\nprint(alist)\"", "nl": "Python Program to Implement Introsort"}
{"code": "b'a=[]\\\\nn=int(input(\"Enter number of elements:\"))\\\\nfor i in range(1,n+1):\\\\n    b=int(input(\"Enter element:\"))\\\\n    a.append(b)\\\\nk=0\\\\nnum=int(input(\"Enter the number to be counted:\"))\\\\nfor j in a:\\\\n    if(j==num):\\\\n        k=k+1\\\\nprint(\"Number of times\",num,\"appears is\",k)'", "nl": "Python Program to Search the Number of Times a Particular Number Occurs in a List"}
{"code": "b'\\\\nimport math\\\\nprint(\"Enter range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Perfect squares between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 sqr=math.sqrt(i)\\\\n\\\\xa0 \\\\xa0 if sqr-math.floor(sqr)==0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")\\\\xa0\\\\n'", "nl": "Print perfect square numbers in a given range"}
{"code": "b'import sysdef FindMax(arr,n):\\\\xa0 \\\\xa0 if n == 1:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return arr[0]\\\\xa0 \\\\xa0 return max(arr[n - 1], FindMax(arr, n - 1))def FindMin(arr,n):\\\\xa0 \\\\xa0 if n==1:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return arr[0]\\\\xa0 \\\\xa0 return min(arr[n-1], FindMin(arr, n-1))arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Maximum Element of the array is: \",FindMax(arr,len(arr)))print(\"Minimum Element of the array is: \",FindMin(arr,len(arr)))'", "nl": "Find maximum and minimum elements in array using recursion"}
{"code": "b'\\\\n\\\\nprint(\"Enter the row and column size:\");\\\\nrow_size=input()\\\\nfor out in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(i),end=\" \")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n'", "nl": "Write a program to print the alphabet pattern"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nj=0\\\\nnewStr=\"\"\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if i==0 or str[i-1]==\\' \\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch=str[i].upper()\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 newStr+=ch\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 newStr = newStr + str[i]\\\\nprint(\"Your String is:\", newStr)'", "nl": "Capitalize First letter of each word in String"}
{"code": "b'import math\\\\nprint(\"Enter the coefficients of the form ax^3 + bx^2 + cx + d\")\\\\nlst=[]\\\\nfor i in range(0,4):\\\\n    a=int(input(\"Enter coefficient:\"))\\\\n    lst.append(a)\\\\nx=int(input(\"Enter the value of x:\"))\\\\nsum1=0\\\\nj=3\\\\nfor i in range(0,3):\\\\n    while(j>0):\\\\n        sum1=sum1+(lst[i]*math.pow(x,j))\\\\n        break\\\\n    j=j-1\\\\nsum1=sum1+lst[3]\\\\nprint(\"The value of the polynomial is:\",sum1)'", "nl": "Python Program to Compute a Polynomial Equation given that the Coefficients of the Polynomial are stored in a List"}
{"code": "b'Solution\\\\ns= raw_input()\\\\nif s==\"yes\" or s==\"YES\" or s==\"Yes\":\\\\n    print \"Yes\"\\\\nelse:\\\\n    print \"No\"\\\\n\\\\n\\\\n\\\\n'", "nl": "Write a program which accepts a string as input to print \"Yes\" if the string is \"yes\" or \"YES\" or \"Yes\", otherwise print \"No\". \n:"}
{"code": "b'\\\\nstr=input(\"Enter the String(Upper case):\")\\\\nprint(\"Lower case String is:\", str.lower())'", "nl": "Convert Uppercase to Lowercase using string function"}
{"code": "b'\\\\nprint(\"Enter the row size:\")\\\\nrow_size=int(input())\\\\nfor out in range(row_size+1):\\\\n\\\\xa0 \\\\xa0 for j in range(out):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\n\\\\xa0 \\\\xa0 for p in range(row_size,out,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"* \",end=\"\")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Program to print inverted pyramid star pattern"}
{"code": "b\"class BinaryTree:\\\\n    def __init__(self, key=None):\\\\n        self.key = key\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\xa0\\\\n    def set_root(self, key):\\\\n        self.key = key\\\\n\\\\xa0\\\\n    def inorder(self):\\\\n        if self.left is not None:\\\\n            self.left.inorder()\\\\n        print(self.key, end=' ')\\\\n        if self.right is not None:\\\\n            self.right.inorder()\\\\n\\\\xa0\\\\n    def insert_left(self, new_node):\\\\n        self.left = new_node\\\\n\\\\xa0\\\\n    def insert_right(self, new_node):\\\\n        self.right = new_node\\\\n\\\\xa0\\\\n    def search(self, key):\\\\n        if self.key == key:\\\\n            return self\\\\n        if self.left is not None:\\\\n            temp =  self.left.search(key)\\\\n            if temp is not None:\\\\n                return temp\\\\n        if self.right is not None:\\\\n            temp =  self.right.search(key)\\\\n            return temp\\\\n        return None\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef sum_nodes(node):\\\\n    if node is None:\\\\n        return 0\\\\n    return node.key + sum_nodes(node.left) + sum_nodes(node.right)\\\\n\\\\xa0\\\\n\\\\xa0\\\\nbtree = None\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('insert <data> at root')\\\\nprint('insert <data> left of <data>')\\\\nprint('insert <data> right of <data>')\\\\nprint('sum')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    print('inorder traversal of binary tree: ', end='')\\\\n    if btree is not None:\\\\n        btree.inorder()\\\\n    print()\\\\n\\\\xa0\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        new_node = BinaryTree(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n                btree = new_node\\\\n        else:\\\\n            position = do[4].strip().lower()\\\\n            key = int(position)\\\\n            ref_node = None\\\\n            if btree is not None:\\\\n                ref_node = btree.search(key)\\\\n            if ref_node is None:\\\\n                print('No such key.')\\\\n                continue\\\\n            if suboperation == 'left':\\\\n                ref_node.insert_left(new_node)\\\\n            elif suboperation == 'right':\\\\n                ref_node.insert_right(new_node)\\\\n\\\\xa0\\\\n    elif operation == 'sum':\\\\n        print('Sum of nodes in tree: {}'.format(sum_nodes(btree)))\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Find the Sum of All Nodes in a Binary Tree"}
{"code": "b'sum=0def SumOfEvenElement(arr,n):\\\\xa0 \\\\xa0 global sum\\\\xa0 \\\\xa0 if(n>0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 i=n-1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if(arr[i]%2==0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=sum+arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 SumOfEvenElement(arr,i)\\\\xa0 \\\\xa0 return sumarr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Sum of even Element is:\",SumOfEvenElement(arr,n))'", "nl": "Find sum of even numbers using recursion in an array"}
{"code": "b'\\\\ns = raw_input()\\\\nu = unicode( s ,\"utf-8\")\\\\nprint u\\\\n\\\\n'", "nl": "\nWrite a program to read an ASCII string and to convert it to a unicode string encoded by utf-8.\n:"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n#Calculate sum of lower triangular matrix element\\\\nsum=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i<j:\\\\n            sum += matrix[i][j]\\\\n\\\\n# display the sum of a lower triangular matrix element\\\\nprint(\"Sum of Lower Triangular Matrix Elements is: \",sum)'", "nl": "Program to Find the sum of a lower triangular matrix"}
{"code": "b'\\\\nrow_size=int(input(\"Enter the row size:\"))\\\\nfor out in range(row_size,0,-1):\\\\n\\\\xa0 \\\\xa0 for in1 in range(row_size,out,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\n\\\\xa0 \\\\xa0 for in2 in range(1, out+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(in2,end=\"\")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n'", "nl": " Program to print the Inverted Half Pyramid Number Pattern"}
{"code": "b'def Find_median(arr,arr2,size,size2):\\\\xa0 \\\\xa0 m_size = size + size2\\\\xa0 \\\\xa0 merge_arr = [0]*m_size\\\\xa0 \\\\xa0 i=0\\\\xa0 \\\\xa0 k=0\\\\xa0 \\\\xa0 j=0\\\\xa0 \\\\xa0 while k<m_size:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0if i<size:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0merge_arr[k] = arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0i+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0k+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0if j<size2:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0merge_arr[k] = arr2[j]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0j+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0k+=1\\\\xa0 \\\\xa0 merge_arr.sort()\\\\xa0 \\\\xa0 if size % 2 == 1:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 median = merge_arr[size // 2]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"\\\\\\\\nMedian= \", median)\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 median = (merge_arr[m_size // 2] + (merge_arr[(m_size // 2) - 1])) / 2.0\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"\\\\\\\\nMedian= \", median)arr=[]arr2=[]size = int(input(\"Enter the size of the 1st array: \"))size2 = int(input(\"Enter the size of the 2nd array: \"))print(\"Enter the Element of the 1st array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Enter the Element of the 2nd array:\")for i in range(0,size2):\\\\xa0 \\\\xa0 num2 = int(input())\\\\xa0 \\\\xa0 arr2.append(num2)Find_median(arr,arr2,size,size2)'", "nl": "Find the median of two unsorted arrays"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nmatrix1=[]\\\\n# Taking input of the 2nd matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix1.append([int(j) for j in input().split()])\\\\n\\\\nsum=0\\\\n# Compute Multiplication of two matrices\\\\nmul_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        for k in range(row_size):\\\\n            sum+=matrix[i][j]*matrix1[i][j]\\\\n        mul_matrix[i][j]=sum\\\\n\\\\n# display the Multiplication of two matrices\\\\nprint(\"Multiplication of the two Matrices is:\")\\\\nfor m in mul_matrix:\\\\n    print(m)'", "nl": "Program to Find the multiplication of two matrices"}
{"code": "b'\\\\xa0\\\\nfor i in range(0,51):\\\\n    if(i%2!=0&i%3!=0):\\\\n        print(i)'", "nl": "Python Program to Print all Integers that Aren't Divisible by Either 2 or 3 and Lie between 1 and 50."}
{"code": "b'radius=int(input(\"Enter radius of a sphere :\"))\\\\n\\\\nsurfaceArea=4*3.14*radius*radius\\\\nvolume=(4/3)*3.14*radius*radius*radius\\\\n\\\\nprint(\"Surface Area of the sphere =\",surfaceArea)\\\\nprint(\"Volume of the sphere =\",volume)'", "nl": "Program to Find Surface area and volume of a sphere"}
{"code": "b'\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Neon numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 sqr =i*i\\\\n\\\\xa0 \\\\xa0 # Sum of digit\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 while sqr != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = sqr % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += rem\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sqr //= 10\\\\n\\\\n\\\\xa0 \\\\xa0 if sum == i:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Neon numbers present within a given range"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nch=\\' \\'\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i] >= \\'A\\' and str[i] <= \\'Z\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch = str[i]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 break\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 continue\\\\nprint(\"First capital letter in a given String is: \", ch)'", "nl": "Find the First Capital Letter in a given String"}
{"code": "b'\\\\nstr=input(\"Enter the String(Lower case):\")\\\\ni=0\\\\nch=\\'\\'\\\\n#convert capital letter string to small letter string\\\\nwhile len(str)>i:\\\\n\\\\xa0 \\\\xa0 if str[i]>=\\'a\\' and str[i]<=\\'z\\' :\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch+=chr(ord(str[i])-32)\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch += chr(ord(str[i]))\\\\n\\\\xa0 \\\\xa0 i+=1\\\\nprint(\"Lower case String is:\", ch)'", "nl": "Convert Lowercase to Uppercase without using the inbuilt function"}
{"code": "b'\\\\nimport math\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Pronic numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 flag = 0\\\\n\\\\xa0 \\\\xa0 for j in range(0, i + 1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if j * (j + 1) == i:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 flag = 1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 break\\\\n\\\\xa0 \\\\xa0 if flag == 1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Pronic numbers present within a given range"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n       self.data = data\\\\n       self.next = None\\\\n\\\\xa0\\\\nclass LinkedList:\\\\n    def __init__(self):\\\\n        self.head = None\\\\n        self.last_node = None\\\\n\\\\xa0\\\\n    def append(self, data):\\\\n        if self.last_node is None:\\\\n            self.head = Node(data)\\\\n            self.last_node = self.head\\\\n        else:\\\\n            self.last_node.next = Node(data)\\\\n            self.last_node = self.last_node.next\\\\n\\\\xa0\\\\n    def display_reversed(self):\\\\n        self.display_reversed_helper(self.head)\\\\n\\\\xa0\\\\n    def display_reversed_helper(self, current):\\\\n        if current is None:\\\\n            return\\\\n\\\\xa0\\\\n        self.display_reversed_helper(current.next)\\\\n        print(current.data, end = ' ')\\\\n\\\\xa0\\\\na_llist = LinkedList()\\\\nn = int(input('How many elements would you like to add? '))\\\\nfor i in range(n):\\\\n    data = int(input('Enter data item: '))\\\\n    a_llist.append(data)\\\\n\\\\xa0\\\\nprint('The reversed linked list: ', end = '')\\\\na_llist.display_reversed()\"", "nl": "Python Program to Display the Nodes of a Linked List in Reverse using Recursion"}
{"code": "b'string=raw_input(\"Enter string:\")\\\\nif(string==string[::-1]):\\\\n      print(\"The string is a palindrome\")\\\\nelse:\\\\n      print(\"The string isn\\'t a palindrome\")'", "nl": "Python Program to Check if a String is a Palindrome or Not"}
{"code": "b'\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Evil numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 one_c = 0\\\\n\\\\xa0 \\\\xa0 num=i\\\\n\\\\xa0 \\\\xa0 while num != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if num % 2 == 1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 one_c += 1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num //= 2\\\\n\\\\xa0 \\\\xa0 if one_c % 2 == 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Evil numbers present within a given range"}
{"code": "b'\\\\nrangenumber=int(input(\"Enter a Nth Number:\"))\\\\nc = 0\\\\nletest = 0\\\\nnum = 1\\\\nwhile c != rangenumber:\\\\n\\\\xa0 \\\\xa0 num1 = num\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 for i in range(1, num1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if num1 % i == 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum = sum + i\\\\n\\\\xa0 \\\\xa0 if sum>num:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th Abundant number is \",letest)'", "nl": "Program to Find Nth Abundant Number"}
{"code": "b\"class Dequeue:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def append(self, data):\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def append_left(self, data):\\\\n        self.items.insert(0, data)\\\\n\\\\xa0\\\\n    def pop(self):\\\\n        return self.items.pop()\\\\n\\\\xa0\\\\n    def pop_left(self):\\\\n        return self.items.pop(0)\\\\n\\\\xa0\\\\n\\\\xa0\\\\nq = Dequeue()\\\\nprint('Menu')\\\\nprint('append <value>')\\\\nprint('appendleft <value>')\\\\nprint('pop')\\\\nprint('popleft')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'append':\\\\n        q.append(int(do[1]))\\\\n    elif operation == 'appendleft':\\\\n        q.append_left(int(do[1]))\\\\n    elif operation == 'pop':\\\\n        if q.is_empty():\\\\n            print('Dequeue is empty.')\\\\n        else:\\\\n            print('Popped value from right: ', q.pop())\\\\n    elif operation == 'popleft':\\\\n        if q.is_empty():\\\\n            print('Dequeue is empty.')\\\\n        else:\\\\n            print('Popped value from left: ', q.pop_left())\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement Dequeue"}
{"code": "b'\\\\n\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to check whether a given number is An Automorphic\\\\nnumber or not. or\\\\xa0Write a program\\\\xa0to\\\\xa0check whether\\\\na given number is An Automorphic number or not using Python \\'\\'\\'\\\\n\\\\nnum=int(input(\"Enter a number:\"))\\\\nsqr=num*num\\\\nflag=0\\\\nwhile num!=0:\\\\n\\\\xa0 \\\\xa0 if(num%10 != sqr%10):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0flag=-1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0break\\\\n\\\\xa0 \\\\xa0 num=int(num/10)\\\\n\\\\xa0 \\\\xa0 sqr=int(sqr/10)\\\\nif(flag==0):\\\\n\\\\xa0 \\\\xa0print(\"It is an Automorphic Number\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is not an Automorphic Number\")\\\\n\\\\n'", "nl": "Check a given number is an Automorphic number or not"}
{"code": "b'def Merge_Array(arr,arr2,size,size2):\\\\xa0 \\\\xa0 m_size = size + size2\\\\xa0 \\\\xa0 merge_arr = [0]*m_size\\\\xa0 \\\\xa0 i=0\\\\xa0 \\\\xa0 k=0\\\\xa0 \\\\xa0 j=0\\\\xa0 \\\\xa0 while k<m_size:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0if i<size:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0merge_arr[k] = arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0i+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0k+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0if j<size2:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0merge_arr[k] = arr2[j]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0j+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0k+=1\\\\xa0 \\\\xa0 print(\"After Merge two Array element are:\")\\\\xa0 \\\\xa0 for p in range(0, m_size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(merge_arr[p],end=\" \")arr=[]arr2=[]size = int(input(\"Enter the size of the 1st array: \"))size2 = int(input(\"Enter the size of the 2nd array: \"))print(\"Enter the Element of the 1st array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Enter the Element of the 2nd array:\")for i in range(0,size2):\\\\xa0 \\\\xa0 num2 = int(input())\\\\xa0 \\\\xa0 arr2.append(num2)Merge_Array(arr,arr2,size,size2)'", "nl": "Merging two unsorted arrays of different lengths"}
{"code": "b'n=int(input(\"Enter number of rows: \"))\\\\na=[]\\\\nfor i in range(n):\\\\n    a.append([])\\\\n    a[i].append(1)\\\\n    for j in range(1,i):\\\\n        a[i].append(a[i-1][j-1]+a[i-1][j])\\\\n    if(n!=0):\\\\n        a[i].append(1)\\\\nfor i in range(n):\\\\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\\\\n    for j in range(0,i+1):\\\\n        print(\\'{0:6}\\'.format(a[i][j]),end=\" \",sep=\" \")\\\\n    print()'", "nl": "Python Program to Print the Pascal's triangle for n number of rows given by the user"}
{"code": "b'l=[]\\\\ndef sum_digits(b):\\\\n    if(b==0):\\\\n        return l\\\\n    dig=b%10\\\\n    l.append(dig)\\\\n    sum_digits(b//10)\\\\nn=int(input(\"Enter a number: \"))\\\\nsum_digits(n)\\\\nprint(sum(l))'", "nl": "Python Program to Find the Sum of the Digits of the Number Recursively"}
{"code": "b'\\\\n\\\\n\\\\n\\'num=int(input(\"Enter a number:\"))\\\\nnum2=num\\\\nsum=0\\\\nwhile(num!=0):\\\\n\\\\xa0 \\\\xa0rem=num%10\\\\n\\\\xa0 \\\\xa0num=int(num/10)\\\\n\\\\xa0 \\\\xa0sum=sum+rem*rem*rem\\\\nif sum==num2:\\\\n\\\\xa0 \\\\xa0print(\"It is an Armstrong Number\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is not an Armstrong Number\")\\\\n\\\\n\\\\n\\\\n'", "nl": "Check a given number is an Armstrong Number"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n       self.data = data\\\\n       self.next = None\\\\n       self.prev = None\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass CircularDoublyLinkedList:\\\\n    def __init__(self):\\\\n        self.first = None\\\\n\\\\xa0\\\\n    def get_node(self, index):\\\\n        current = self.first\\\\n        for i in range(index):\\\\n            current = current.next\\\\n            if current == self.first:\\\\n                return None\\\\n        return current\\\\n\\\\xa0\\\\n    def insert_after(self, ref_node, new_node):\\\\n        new_node.prev = ref_node\\\\n        new_node.next = ref_node.next\\\\n        new_node.next.prev = new_node\\\\n        ref_node.next = new_node\\\\n\\\\xa0\\\\n    def insert_before(self, ref_node, new_node):\\\\n        self.insert_after(ref_node.prev, new_node)\\\\n\\\\xa0\\\\n    def insert_at_end(self, new_node):\\\\n        if self.first is None:\\\\n            self.first = new_node\\\\n            new_node.next = new_node\\\\n            new_node.prev = new_node\\\\n        else:\\\\n            self.insert_after(self.first.prev, new_node)\\\\n\\\\xa0\\\\n    def insert_at_beg(self, new_node):\\\\n        self.insert_at_end(new_node)\\\\n        self.first = new_node\\\\n\\\\xa0\\\\n    def remove(self, node):\\\\n        if self.first.next == self.first:\\\\n            self.first = None\\\\n        else:\\\\n            node.prev.next = node.next\\\\n            node.next.prev = node.prev\\\\n            if self.first == node:\\\\n                self.first = node.next\\\\n\\\\xa0\\\\n    def display(self):\\\\n        if self.first is None:\\\\n            return\\\\n        current = self.first\\\\n        while True:\\\\n            print(current.data, end = ' ')\\\\n            current = current.next\\\\n            if current == self.first:\\\\n                break\\\\n\\\\xa0\\\\n\\\\xa0\\\\na_cdllist = CircularDoublyLinkedList()\\\\n\\\\xa0\\\\nprint('Menu')\\\\nprint('insert <data> after <index>')\\\\nprint('insert <data> before <index>')\\\\nprint('insert <data> at beg')\\\\nprint('insert <data> at end')\\\\nprint('remove <index>') \\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    print('The list: ', end = '')\\\\n    a_cdllist.display()\\\\n    print()\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n\\\\xa0\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        position = do[3].strip().lower()\\\\n        new_node = Node(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n            if position == 'beg':\\\\n                a_cdllist.insert_at_beg(new_node)\\\\n            elif position == 'end':\\\\n                a_cdllist.insert_at_end(new_node)\\\\n        else:\\\\n            index = int(position)\\\\n            ref_node = a_cdllist.get_node(index)\\\\n            if ref_node is None:\\\\n                print('No such index.')\\\\n                continue\\\\n            if suboperation == 'after':\\\\n                a_cdllist.insert_after(ref_node, new_node)\\\\n            elif suboperation == 'before':\\\\n                a_cdllist.insert_before(ref_node, new_node)\\\\n\\\\xa0\\\\n    elif operation == 'remove':\\\\n        index = int(do[1])\\\\n        node = a_cdllist.get_node(index)\\\\n        if node is None:\\\\n            print('No such index.')\\\\n            continue\\\\n        a_cdllist.remove(node)\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement Circular Doubly Linked List"}
{"code": "b'with open(\"test.txt\") as f:\\\\n    with open(\"out.txt\", \"w\") as f1:\\\\n        for line in f:\\\\n            f1.write(line)'", "nl": "Python Program to Copy the Contents of One File into Another"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0add between 2 numbers without using arithmetic operators.\\\\nor\\\\xa0Write a program\\\\xa0to\\\\xa0add between 2 numbers without using\\\\narithmetic operators using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter first number:\")\\\\nnum1=int(input())\\\\nprint(\"Enter\\\\xa0 second number:\")\\\\nnum2=int(input())\\\\nwhile num2 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0carry= num1 & num2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0num1= num1 ^ num2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0num2=carry << 1\\\\nprint(\"Addition of two number is \",num1)\\\\xa0\\\\n'", "nl": "Add between 2 numbers without using arithmetic operators"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to the\\\\xa0sum of all digits of a number. or\\\\xa0\\\\n\\\\n\\\\xa0\\\\xa0 Write a program\\\\xa0to the\\\\xa0sum of all\\\\ndigits of a number using Python \\'\\'\\'\\\\n\\\\nn=int(input(\"Enter a number:\"))\\\\nsum=0\\\\nwhile n>0:\\\\n\\\\xa0 \\\\xa0rem=n%10\\\\n\\\\xa0 \\\\xa0sum=sum+rem\\\\n\\\\xa0 \\\\xa0n=int(n/10)\\\\n\\\\nprint(\"The sum of digits of number is:\", sum)\\\\xa0\\\\n'", "nl": "Write a program to sum of all digits of a number."}
{"code": "b'n=int(input(\"Enter the number of terms:\"))\\\\nx=int(input(\"Enter the value of x:\"))\\\\nsum1=1\\\\nfor i in range(2,n+1):\\\\n    sum1=sum1+((x**i)/i)\\\\nprint(\"The sum of series is\",round(sum1,2))'", "nl": "Python Program to Find the Sum of the Series: 1 + x^2/2 + x^3/3 + \u2026 x^n/n"}
{"code": "b'\\\\n\\\\nl=int(input(\"Enter the length of the cuboid:\"))\\\\nh=int(input(\"Enter the height of the cuboid:\"))\\\\nw=int(input(\"Enter the weight of the cuboid:\"))\\\\nsurface_area=2*((l*w)+(l*h)+(h*w))\\\\nvolume=l*w*h\\\\nprint(\"Surface Area of the cuboid = \",surface_area)\\\\nprint(\"Volume of the cuboid = \",volume)\\\\n'", "nl": "Program to Calculate the surface area and volume of a Cuboid "}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\narr=[0]*256\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i]==\\' \\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 continue\\\\n\\\\xa0 \\\\xa0 num=ord(str[i])\\\\n\\\\xa0 \\\\xa0 arr[num]+=1\\\\nprint(\"Frequency of character in a string are:\")\\\\nfor i in range(256):\\\\n\\\\xa0 \\\\xa0 if arr[i]!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print((chr)(i),\" occurs \",arr[i],\" times\")'", "nl": "Find frequency of characters in a string"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0.0fact=1for i in range(1,n+1):\\\\xa0 \\\\xa0 fact *= i\\\\xa0 \\\\xa0 sum+=1.0/factprint(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 1/1!+1/2!+1/3!.....+1/N!"}
{"code": "b'\\\\ndef reverse(num):\\\\n\\\\xa0 \\\\xa0 if num<10:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 print(num)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 return\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(num % 10,end=\"\")\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 reverse(int(num / 10))\\\\nprint(\"Enter your number:\")\\\\nnum=int(input())\\\\nprint(\"Reverse of the input number is:\")\\\\nreverse(num)\\\\xa0\\\\n'", "nl": "Find reverse of a number using recursion"}
{"code": "b's1=raw_input(\"Enter first string:\")\\\\ns2=raw_input(\"Enter second string:\")\\\\na=list(set(s1)^set(s2))\\\\nprint(\"The letters are:\")\\\\nfor i in a:\\\\n    print(i)'", "nl": "Python Program that Displays which Letters are in the Two Strings but not in Both"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0.0for i in range(1,n+1):\\\\xa0 \\\\xa0 sum += i / (i + 1)print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 1/2+2/3+3/4.....+(N-1)/N"}
{"code": "b'import math\\\\ndef sin(x,n):\\\\n    sine = 0\\\\n    for i in range(n):\\\\n        sign = (-1)**i\\\\n        pi=22/7\\\\n        y=x*(pi/180)\\\\n        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign\\\\n    return sine\\\\nx=int(input(\"Enter the value of x in degrees:\"))\\\\nn=int(input(\"Enter the number of terms:\"))\\\\nprint(round(sin(x,n),2))'", "nl": "Python Program to Find the Sum of Sine Series"}
{"code": "b'l_range=int(input(\"Enter the lower range:\"))\\\\nu_range=int(input(\"Enter the upper range:\"))\\\\na=[(x,x**2) for x in range(l_range,u_range+1)]\\\\nprint(a)'", "nl": "Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number"}
{"code": "b'def clear_rightmost_set_bit(n):\\\\n    \"\"\"Clear rightmost set bit of n and return it.\"\"\"\\\\n    return n & (n - 1)\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Enter a number: \\'))\\\\nans = clear_rightmost_set_bit(n)\\\\nprint(\\'n with its rightmost set bit cleared equals:\\', ans)'", "nl": "Python Program to Clear the Rightmost Set Bit of a Number"}
{"code": "b'\\\\nimport array\\\\narr=array.array(\\'u\\', [\\'c\\',\\'s\\',\\'i\\',\\'n\\',\\'f\\',\\'o\\',\\'3\\',\\'6\\',\\'0\\',\\'.\\',\\'c\\',\\'o\\',\\'m\\'])\\\\nlen=len(arr)\\\\nfor i in range(0,len):\\\\n\\\\xa0 \\\\xa0 print(arr[i],end=\"\")'", "nl": "Print a string using an array"}
{"code": "b'\\\\n\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to check whether a given number is a Harshad number or\\\\nnot. or\\\\xa0Write a program\\\\xa0to\\\\xa0check whether\\\\na given number is a Harshad number or not\\\\nusing Python \\'\\'\\'\\\\n\\\\n\\\\n\\\\nnum=int(input(\"Enter a number:\"))\\\\nnum2=num\\\\nsum=0\\\\nwhile num!=0:\\\\n\\\\xa0 rem=num%10\\\\n\\\\xa0 num=int(num/10)\\\\n\\\\xa0 sum=sum+rem\\\\nif(num2%sum==0):\\\\n\\\\xa0 \\\\xa0print(\"It is a Harshad Number\")\\\\nelse:\\\\nprint(\"It is not a Harshad Number\")\\\\xa0\\\\n'", "nl": "Check whether a given number is a Harshad number or not"}
{"code": "b'\\\\narr=[]\\\\ntemp=0\\\\npos=0\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nprint(\"Enter the element to be deleted:\")\\\\nele=int(input())\\\\nprint(\"Before deleting array elements are:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 print(arr[i],end=\" \")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 if arr[i] == ele:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 pos = i\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp = 1\\\\n\\\\nif temp==1:\\\\n\\\\xa0 \\\\xa0 arr.pop(pos)\\\\nprint(\"\\\\\\\\nAfter deleting array elements are:\")\\\\nprint(arr)'", "nl": "delete an element from an array"}
{"code": "b\"print abs.__doc__\\\\nprint int.__doc__\\\\nprint raw_input.__doc__\\\\n\\\\ndef square(num):\\\\n    '''Return the square value of the input number.\\\\n    \\\\n    The input number must be integer.\\\\n    '''\\\\n    return num ** 2\\\\n\\\\nprint square(2)\\\\nprint square.__doc__\\\\n\"", "nl": "    Python has many built-in functions, and if you do not know how to use it, you can read document online or find some books. But Python has a built-in document function for every built-in functions.\n    Please write a program to print some Python built-in functions documents, such as abs(), int(), raw_input()\n    And add document for your own function\n    :"}
{"code": "b\"class BinaryHeap:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def size(self):\\\\n        return len(self.items)\\\\n\\\\xa0\\\\n    def parent(self, i):\\\\n        return (i - 1)//2\\\\n\\\\xa0\\\\n    def left(self, i):\\\\n        return 2*i + 1\\\\n\\\\xa0\\\\n    def right(self, i):\\\\n        return 2*i + 2\\\\n\\\\xa0\\\\n    def get(self, i):\\\\n        return self.items[i]\\\\n\\\\xa0\\\\n    def get_max(self):\\\\n        if self.size() == 0:\\\\n            return None\\\\n        return self.items[0]\\\\n\\\\xa0\\\\n    def extract_max(self):\\\\n        if self.size() == 0:\\\\n            return None\\\\n        largest = self.get_max()\\\\n        self.items[0] = self.items[-1]\\\\n        del self.items[-1]\\\\n        self.max_heapify(0)\\\\n        return largest\\\\n\\\\xa0\\\\n    def max_heapify(self, i):\\\\n        l = self.left(i)\\\\n        r = self.right(i)\\\\n        if (l <= self.size() - 1 and self.get(l) > self.get(i)):\\\\n            largest = l\\\\n        else:\\\\n            largest = i\\\\n        if (r <= self.size() - 1 and self.get(r) > self.get(largest)):\\\\n            largest = r\\\\n        if (largest != i):\\\\n            self.swap(largest, i)\\\\n            self.max_heapify(largest)\\\\n\\\\xa0\\\\n    def swap(self, i, j):\\\\n        self.items[i], self.items[j] = self.items[j], self.items[i]\\\\n\\\\xa0\\\\n    def insert(self, key):\\\\n        index = self.size()\\\\n        self.items.append(key)\\\\n\\\\xa0\\\\n        while (index != 0):\\\\n            p = self.parent(index)\\\\n            if self.get(p) < self.get(index):\\\\n                self.swap(p, index)\\\\n            index = p\\\\n\\\\xa0\\\\n\\\\xa0\\\\nbheap = BinaryHeap()\\\\n\\\\xa0\\\\nprint('Menu')\\\\nprint('insert <data>')\\\\nprint('max get')\\\\nprint('max extract')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        bheap.insert(data)\\\\n    elif operation == 'max':\\\\n        suboperation = do[1].strip().lower()\\\\n        if suboperation == 'get':\\\\n            print('Maximum value: {}'.format(bheap.get_max()))\\\\n        elif suboperation == 'extract':\\\\n            print('Maximum value removed: {}'.format(bheap.extract_max()))\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement Binary Heap"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0i=0while i<=n:\\\\xa0 \\\\xa0 sum+=i\\\\xa0 \\\\xa0 i+=2print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 2+4+6+8.....+N"}
{"code": "b'def lcm(a,b):\\\\n    lcm.multiple=lcm.multiple+b\\\\n    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):\\\\n        return lcm.multiple;\\\\n    else:\\\\n        lcm(a, b)\\\\n    return lcm.multiple\\\\nlcm.multiple=0\\\\na=int(input(\"Enter first number:\"))\\\\nb=int(input(\"Enter second number:\"))\\\\nif(a>b):\\\\n    LCM=lcm(b,a)\\\\nelse:\\\\n    LCM=lcm(a,b)\\\\nprint(LCM)'", "nl": "Python Program to Find the LCM of Two Numbers Using Recursion"}
{"code": "b'# Get size of matrixrow_size=int(input(\"Enter the row Size Of the Matrix:\"))col_size=int(input(\"Enter the columns Size Of the Matrix:\"))matrix=[]# Taking input of the matrixprint(\"Enter the Matrix Element:\")for i in range(row_size):\\\\xa0\\\\xa0\\\\xa0\\\\xa0matrix.append([int(j) for j in input().split()])# display the Matrixprint(\"Given Matrix is:\")for m in matrix:\\\\xa0\\\\xa0\\\\xa0\\\\xa0print(m)'", "nl": "Program to read and display a Matrix"}
{"code": "b'\\\\narr=[]\\\\nodd_type=0\\\\neven_type=0\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nprint(\"Array elements are:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 print(arr[i],end=\" \")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 if arr[i] % 2 == 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 even_type +=1\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 odd_type +=1\\\\nif even_type==size:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"\\\\\\\\nEven type array\")\\\\nelif odd_type==size:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"\\\\\\\\nodd type array\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"\\\\\\\\nMixed array\")'", "nl": "Find the type of the array"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0find out all Harshad numbers present within a given range.\\\\nor\\\\xa0Write a program\\\\xa0to\\\\xa0find out all Harshad numbers present\\\\nwithin a given range using Python \\'\\'\\'\\\\n\\\\n\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Harshad numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 num2=i\\\\n\\\\xa0 \\\\xa0 num=i\\\\n\\\\xa0 \\\\xa0 sum=0\\\\n\\\\xa0 \\\\xa0 while num!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem=num%10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num=int(num/10)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=sum+rem\\\\n\\\\xa0 \\\\xa0 if(num2%sum==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")\\\\n'", "nl": "Find out all Harshad numbers present within a given range"}
{"code": "b'def StringLength(str, i):\\\\xa0 \\\\xa0 if (str[i] == \\'\\\\\\\\0\\'):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return (1 + StringLength(str, i + 1))str=input(\"Enter your String:\")str+=\\'\\\\\\\\0\\'print(\"Length of the String is: \",StringLength(str,0))'", "nl": "Find length of string using recursion"}
{"code": "b'n=int(input(\"Enter the range of number(Limit):\"))i=1pr=1while i<=n:\\\\xa0 \\\\xa0 if(i%2==0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(-1*pr,end=\" \")\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(pr, end=\" \")\\\\xa0 \\\\xa0 pr+=pow(i,2)\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print series 1,-2,6,-15,31...N"}
{"code": "b'\\\\n\\\\nimport math\\\\nprint(\"Enter the length of the side:\")\\\\na=int(input())\\\\narea=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\\\\nperimeter=(5*a)\\\\nprint(\"Area of the Pentagon = \",area)\\\\n\\\\nprint(\"Perimeter of the Pentagon = \",perimeter)\\\\n'", "nl": "Program to compute the area and perimeter of Pentagon"}
{"code": "b'import math\\\\ndef cosine(x,n):\\\\n    cosx = 1\\\\n    sign = -1\\\\n    for i in range(2, n, 2):\\\\n        pi=22/7\\\\n        y=x*(pi/180)\\\\n        cosx = cosx + (sign*(y**i))/math.factorial(i)\\\\n        sign = -sign\\\\n    return cosx\\\\nx=int(input(\"Enter the value of x in degrees:\"))\\\\nn=int(input(\"Enter the number of terms:\"))\\\\nprint(round(cosine(x,n),2))'", "nl": "Python Program to Find the Sum of Cosine Series"}
{"code": "b'\\\\nimport sys\\\\narr=[]\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nmin=sys.maxsize\\\\nfor j in range(0,size):\\\\n\\\\xa0 \\\\xa0 if (arr[j] <= min):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 min = arr[j]\\\\n\\\\nprint(\"The smallest element of array: \",min)'", "nl": "Find the smallest element in the array"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# Calculate sum of given matrix Elements\\\\nsum=0\\\\nfor i in range(0,row_size):\\\\n    for j in range(0,col_size):\\\\n        sum+=matrix[i][j]\\\\n\\\\n# Display The Sum Of Given Matrix Elements\\\\nprint(\"Sum of the Given Matrix Elements is: \",sum)'", "nl": "Find the sum of all elements in a 2D Array"}
{"code": "b\"\\\\ndef solve(numheads,numlegs):\\\\n    ns='No solutions!'\\\\n    for i in range(numheads+1):\\\\n        j=numheads-i\\\\n        if 2*i+4*j==numlegs:\\\\n            return i,j\\\\n    return ns,ns\\\\n\\\\nnumheads=35\\\\nnumlegs=94\\\\nsolutions=solve(numheads,numlegs)\\\\nprint solutions\\\\n\\\\n\"", "nl": "\nWrite a program to solve a classic ancient Chinese puzzle: \nWe count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?\n\nHint:"}
{"code": "b'\\\\n\\\\nprint(\"Enter the row and column size:\");\\\\nrow_size=input()\\\\nfor out in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(i),end=\" \")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n'", "nl": "Write a program to print the alphabet pattern"}
{"code": "b'\\\\n\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to check whether a given number is an Abundant number\\\\nor not. or\\\\xa0Write a program\\\\xa0to\\\\xa0check whether\\\\na given number is an Abundant number or not\\\\nusing Python \\'\\'\\'\\\\n\\\\n\\\\n\\\\nnum=int(input(\"Enter a number:\"))\\\\nsum=0\\\\nfor i in range(1,num):\\\\n\\\\xa0 \\\\xa0if(num%i==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 sum=sum+i\\\\nif sum>num:\\\\n\\\\xa0 \\\\xa0print(\"It is an Abundant Number\")\\\\nelse:\\\\n\\\\n\\\\xa0 \\\\xa0print(\"It is not an Abundant Number\")\\\\n\\\\n\\\\n'", "nl": "Check whether a given number is an Abundant number or not"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0for i in range(1,n+1):\\\\xa0 \\\\xa0 if i % 2 == 0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum -= i\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += iprint(\"The sum of the series = \",sum)'", "nl": "Program to Find sum of series 1-2+3-4+5...+N"}
{"code": "b'a=[]\\\\nn= int(input(\"Enter the number of elements in list:\"))\\\\nfor x in range(0,n):\\\\n    element=input(\"Enter element\" + str(x+1) + \":\")\\\\n    a.append(element)\\\\nmax1=len(a[0])\\\\ntemp=a[0]\\\\nfor i in a:\\\\n    if(len(i)>max1):\\\\n       max1=len(i)\\\\n       temp=i\\\\nprint(\"The word with the longest length is:\")\\\\nprint(temp)'", "nl": "Python Program to Read a List of Words and Return the Length of the Longest One"}
{"code": "b'\\\\narr=[]\\\\ncout=0\\\\nsum=0\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nfor j in range(1, size+1):\\\\n\\\\xa0 \\\\xa0 if (j % 2 == 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += arr[j]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 cout+=1\\\\navg = (sum / cout)\\\\nprint(\"Average of Numbers in array at even position is \", avg)'", "nl": "Print Average of Numbers in array at even position  "}
{"code": "b'def PrintNaturalNumber(n):\\\\xa0 \\\\xa0 if(n<=50):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(n,end=\" \")\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 PrintNaturalNumber(n + 1)n=1print(\"First 50 Natural Numbers are:\")PrintNaturalNumber(n)'", "nl": "Print First 50 natural numbers using recursion"}
{"code": "b'\\\\nimport math\\\\nnum=int(input(\"Enter a number:\"))\\\\nnum1 = num\\\\nc=0\\\\nwhile num1!=0:\\\\n\\\\xa0 \\\\xa0 num1 //= 10\\\\n\\\\xa0 \\\\xa0 c+=1\\\\nnum1=num\\\\nsum=0\\\\nwhile num1!=0:\\\\n\\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 sum += math.pow(rem, c)\\\\n\\\\xa0 \\\\xa0 num1 //= 10\\\\n\\\\xa0 \\\\xa0 c-=1\\\\nif sum==num:\\\\n\\\\xa0 \\\\xa0 print(\"It is a Disarium Number.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is Not a Disarium Number.\")'", "nl": "Check whether number is Disarium Number or Not"}
{"code": "b'def putNumbers(n):\\\\n    i = 0\\\\n    while i<n:\\\\n        j=i\\\\n        i=i+1\\\\n        if j%7==0:\\\\n            yield j\\\\n\\\\nfor i in reverse(100):\\\\n    print i\\\\n'", "nl": "Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.\n:"}
{"code": "b'keys=[]\\\\nvalues=[]\\\\nn=int(input(\"Enter number of elements for dictionary:\"))\\\\nprint(\"For keys:\")\\\\nfor x in range(0,n):\\\\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\\\\n    keys.append(element)\\\\nprint(\"For values:\")\\\\nfor x in range(0,n):\\\\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\\\\n    values.append(element)\\\\nd=dict(zip(keys,values))\\\\nprint(\"The dictionary is:\")\\\\nprint(d)'", "nl": "Python Program to Map Two Lists into a Dictionary"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))print_control_x=row_size//2+1x=1for out in range(1,row_size+1):\\\\xa0 \\\\xa0 for inn in range(1,row_size+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if inn==print_control_x or inn==row_size-print_control_x+1:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(x,end=\"\")\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \", end=\"\")\\\\xa0 \\\\xa0 if out <= row_size // 2:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print_control_x-=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 x+=1\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print_control_x+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 x-=1\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Print the Hollow Diamond Number Pattern"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n#Calculate sum of Upper triangular matrix element\\\\nsum=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i>j:\\\\n            sum += matrix[i][j]\\\\n\\\\n# display the sum of the Upper triangular matrix element\\\\nprint(\"Sum of Upper Triangular Matrix Elements is: \",sum)'", "nl": "Program to find the sum of an upper triangular matrix"}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter any number: \"))\\\\na=list(map(int,str(n)))\\\\nb=list(map(lambda x:x**3,a))\\\\nif(sum(b)==n):\\\\n    print(\"The number is an armstrong number. \")\\\\nelse:\\\\n    print(\"The number isn\\'t an arsmtrong number. \")'", "nl": "Python Program to Check if a Number is an Armstrong Number"}
{"code": "b'a=int(input(\"Enter the first number of the series \"))\\\\nb=int(input(\"Enter the second number of the series \"))\\\\nn=int(input(\"Enter the number of terms needed \"))\\\\nprint(a,b,end=\" \")\\\\nwhile(n-2):\\\\n    c=a+b\\\\n    a=b\\\\n    b=c\\\\n    print(c,end=\" \")\\\\n    n=n-1'", "nl": "Python Program to Find the Fibonacci Series without Using Recursion"}
{"code": "b'fname = input(\"Enter file name: \")\\\\nfile3=open(fname,\"a\")\\\\nc=input(\"Enter string to append: \\\\\\\\n\");\\\\nfile3.write(\"\\\\\\\\n\")\\\\nfile3.write(c)\\\\nfile3.close()\\\\nprint(\"Contents of appended file:\");\\\\nfile4=open(fname,\\'r\\')\\\\nline1=file4.readline()\\\\nwhile(line1!=\"\"):\\\\n    print(line1)\\\\n    line1=file4.readline()    \\\\nfile4.close()'", "nl": "Python Program to Read a String from the User and Append it into a File"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nstr2 = []\\\\ni = 0\\\\nwhile i < len(str):\\\\n\\\\xa0 \\\\xa0 ch = str[i]\\\\n\\\\xa0 \\\\xa0 if not ch.islower():\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 str2.append(ch)\\\\n\\\\xa0 \\\\xa0 i += 1\\\\nFinal_String = \\'\\'.join(str2)\\\\nprint(\"After removing lowercase letter string is:\",Final_String)'", "nl": "Remove all lowercase characters in the string"}
{"code": "b'\\\\nimport math\\\\nprint(\"Enter a range to find all prime numbers within that range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Prime numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor j in range(range1,range2+1):\\\\xa0\\\\n\\\\xa0 \\\\xa0 \\\\xa0count=0 for i in range(2,int(math.sqrt(j))+1):\\\\xa0\\\\n\\\\xa0 \\\\xa0 \\\\xa0if j%i==0:\\\\xa0\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0count+=1\\\\nif count==0:\\\\xa0\\\\nprint(j,end=\" \")\\\\n'", "nl": "Print prime numbers in a given range(1 to n)"}
{"code": "b's1=raw_input(\"Enter first string:\")\\\\ns2=raw_input(\"Enter second string:\")\\\\na=list(set(s1)&set(s2))\\\\nprint(\"The common letters are:\")\\\\nfor i in a:\\\\n    print(i)'", "nl": "Python Program to Check Common Letters in Two Input Strings"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n        self.data = data\\\\n        self.next = None\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass LinkedList:\\\\n    def __init__(self):\\\\n        self.head = None\\\\n        self.last_node = None\\\\n\\\\xa0\\\\n    def append(self, data):\\\\n        if self.last_node is None:\\\\n            self.head = Node(data)\\\\n            self.last_node = self.head\\\\n        else:\\\\n            self.last_node.next = Node(data)\\\\n            self.last_node = self.last_node.next\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef length_llist(llist):\\\\n    length = 0\\\\n    current = llist.head\\\\n    while current:\\\\n        current = current.next\\\\n        length = length + 1\\\\n    return length\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef return_n_from_last(llist, n):\\\\n    l = length_llist(llist)\\\\n    current = llist.head\\\\n    for i in range(l - n):\\\\n        current = current.next\\\\n    return current.data\\\\n\\\\xa0\\\\n\\\\xa0\\\\na_llist = LinkedList()\\\\n\\\\xa0\\\\ndata_list = input('Please enter the elements in the linked list: ').split()\\\\nfor data in data_list:\\\\n    a_llist.append(int(data))\\\\n\\\\xa0\\\\nn = int(input('The nth element from the end will be printed. Please enter n: '))\\\\nvalue = return_n_from_last(a_llist, n)\\\\n\\\\xa0\\\\nprint('The nth element from the end: {}'.format(value))\"", "nl": "Python Program to Print Nth Node from the last of a Linked List"}
{"code": "b'\\\\nt_sec=int(input(\"Enter the total Second:\"))\\\\nhour=(int)(t_sec/3600)\\\\nt_sec=(int)(t_sec%3600)\\\\nmint=(int)(t_sec/60)\\\\nsec=(int)(t_sec%60)\\\\nprint(\"Hours=\",hour,\"\\\\\\\\nMinutes=\",mint,\"\\\\\\\\nSecond=\",sec)'", "nl": "Program to convert seconds to hour, minute and seconds"}
{"code": "b\"class Tree:\\\\n    def __init__(self, data=None):\\\\n        self.key = data\\\\n        self.children = []\\\\n\\\\xa0\\\\n    def set_root(self, data):\\\\n        self.key = data\\\\n\\\\xa0\\\\n    def add(self, node):\\\\n        self.children.append(node)\\\\n\\\\xa0\\\\n    def search(self, key):\\\\n        if self.key == key:\\\\n            return self\\\\n        for child in self.children:\\\\n            temp = child.search(key)\\\\n            if temp is not None:\\\\n                return temp\\\\n        return None\\\\n\\\\xa0\\\\n    def bfs(self):\\\\n        queue = [self]\\\\n        while queue != []:\\\\n            popped = queue.pop(0)\\\\n            for child in popped.children:\\\\n                queue.append(child)\\\\n            print(popped.key, end=' ')\\\\n\\\\xa0\\\\n\\\\xa0\\\\ntree = None\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('add <data> at root')\\\\nprint('add <data> below <data>')\\\\nprint('bfs')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'add':\\\\n        data = int(do[1])\\\\n        new_node = Tree(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n            tree = new_node\\\\n        elif suboperation == 'below':\\\\n            position = do[3].strip().lower()\\\\n            key = int(position)\\\\n            ref_node = None\\\\n            if tree is not None:\\\\n                ref_node = tree.search(key)\\\\n            if ref_node is None:\\\\n                print('No such key.')\\\\n                continue\\\\n            ref_node.add(new_node)\\\\n\\\\xa0\\\\n    elif operation == 'bfs':\\\\n        if tree is None:\\\\n            print('Tree is empty.')\\\\n        else:\\\\n            print('BFS traversal: ', end='')\\\\n            tree.bfs()\\\\n            print()\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Display the Nodes of a Tree using BFS Traversal"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\ncount = 0\\\\nj=len(str)-1\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i]==str[j]:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1\\\\n\\\\xa0 \\\\xa0 j-=1\\\\nif count==len(str):\\\\n\\\\xa0 \\\\xa0 print(\"Input string is palindrome\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 print(\"Input string is not palindrome\")'", "nl": "Check given string is palindrome or not"}
{"code": "b\"class Stack:\\\\n    def __init__(self):\\\\n        self.q = Queue()\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.q.is_empty()\\\\n\\\\xa0\\\\n    def push(self, data):\\\\n        self.q.enqueue(data)\\\\n\\\\xa0\\\\n    def pop(self):\\\\n        for _ in range(self.q.get_size() - 1):\\\\n            dequeued = self.q.dequeue()\\\\n            self.q.enqueue(dequeued)\\\\n        return self.q.dequeue()\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Queue:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n        self.size = 0\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def enqueue(self, data):\\\\n        self.size += 1\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def dequeue(self):\\\\n        self.size -= 1\\\\n        return self.items.pop(0)\\\\n\\\\xa0\\\\n    def get_size(self):\\\\n        return self.size\\\\n\\\\xa0\\\\n\\\\xa0\\\\ns = Stack()\\\\n\\\\xa0\\\\nprint('Menu')\\\\nprint('push <value>')\\\\nprint('pop')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'push':\\\\n        s.push(int(do[1]))\\\\n    elif operation == 'pop':\\\\n        if s.is_empty():\\\\n            print('Stack is empty.')\\\\n        else:\\\\n            print('Popped value: ', s.pop())\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement Stack using One Queue"}
{"code": "b'\\\\nrow_size=int(input(\"Enter the row size:\"))\\\\nnp=1\\\\nfor out in range(0,row_size):\\\\n\\\\xa0 \\\\xa0 for in1 in range(row_size-1,out,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\n\\\\xa0 \\\\xa0 for in2 in range(0, np):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(np-out,end=\"\")\\\\n\\\\xa0 \\\\xa0 np+=2\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n'", "nl": " Program to print the Full Pyramid Number Pattern"}
{"code": "b'n=int(input(\"Enter number of rows: \"))\\\\nfor i in range (n,0,-1):\\\\n    print((n-i) * \\' \\' + i * \\'*\\')'", "nl": "Python Program to Print an Inverted Star Pattern"}
{"code": "b'\\\\n\\\\nprint(\"Enter the row and column size:\");\\\\n\\\\nrow_size=input()\\\\nfor out in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(out),end=\" \")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n\\\\n'", "nl": "Write a program to print the alphabet pattern"}
{"code": "b'\\\\nimport sys\\\\narr=[]\\\\nfreq=[]\\\\nmax=-sys.maxsize-1\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nfor i in range(0, size):\\\\n\\\\xa0 \\\\xa0 if arr[i]>=max:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 max=arr[i]\\\\nfor i in range(0,max+1):\\\\n\\\\xa0 \\\\xa0 freq.append(0)\\\\nfor i in range(0, size):\\\\n\\\\xa0 \\\\xa0 freq[arr[i]]+=1\\\\nlist_oc=9999\\\\nlist_v=9999\\\\nfor i in range(0, size):\\\\n\\\\xa0 \\\\xa0 if freq[arr[i]] < list_oc:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 list_oc = freq[arr[i]]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 list_v = arr[i]\\\\nprint(\"The List occurring Number \",list_v,\" occurs \",list_oc,\" times.\")'", "nl": "Print lists occurring elements in an array"}
{"code": "b'l=[]\\\\nb=int(input(\"Enter a number: \"))\\\\nwhile(b>0):\\\\n    dig=b%10\\\\n    l.append(dig)\\\\n    b=b//10\\\\nprint(\"Sum is:\")\\\\nprint(sum(l))'", "nl": "Python Program to Find the Sum of Digits in a Number without Recursion"}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter the number of elements to be in the list:\"))\\\\nb=[]\\\\nfor i in range(0,n):\\\\n    a=int(input(\"Element: \"))\\\\n    b.append(a)\\\\nsum1=0\\\\nsum2=0\\\\nsum3=0\\\\nfor j in b:\\\\n    if(j>0):\\\\n        if(j%2==0):\\\\n            sum1=sum1+j\\\\n        else:\\\\n            sum2=sum2+j\\\\n    else:\\\\n        sum3=sum3+j\\\\nprint(\"Sum of all positive even numbers:\",sum1)\\\\nprint(\"Sum of all positive odd numbers:\",sum2)\\\\nprint(\"Sum of all negative numbers:\",sum3)'", "nl": "Python Program to Print Sum of Negative Numbers, Positive Even Numbers and Positive Odd numbers in a List"}
{"code": "b\"class D_aryHeap:\\\\n    def __init__(self, d):\\\\n        self.items = []\\\\n        self.d = d\\\\n\\\\xa0\\\\n    def size(self):\\\\n        return len(self.items)\\\\n\\\\xa0\\\\n    def parent(self, i):\\\\n        return (i - 1)//self.d\\\\n\\\\xa0\\\\n    def child(self, index, position):\\\\n        return index*self.d + (position + 1)\\\\n\\\\xa0\\\\n    def get(self, i):\\\\n        return self.items[i]\\\\n\\\\xa0\\\\n    def get_max(self):\\\\n        if self.size() == 0:\\\\n            return None\\\\n        return self.items[0]\\\\n\\\\xa0\\\\n    def extract_max(self):\\\\n        if self.size() == 0:\\\\n            return None\\\\n        largest = self.get_max()\\\\n        self.items[0] = self.items[-1]\\\\n        del self.items[-1]\\\\n        self.max_heapify(0)\\\\n        return largest\\\\n\\\\xa0\\\\n    def max_heapify(self, i):\\\\n        largest = i\\\\n        for j in range(self.d):\\\\n            c = self.child(i, j)\\\\n            if (c < self.size() and self.get(c) > self.get(largest)):\\\\n                largest = c\\\\n        if (largest != i):\\\\n            self.swap(largest, i)\\\\n            self.max_heapify(largest)\\\\n\\\\xa0\\\\n    def swap(self, i, j):\\\\n        self.items[i], self.items[j] = self.items[j], self.items[i]\\\\n\\\\xa0\\\\n    def insert(self, key):\\\\n        index = self.size()\\\\n        self.items.append(key)\\\\n        while (index != 0):\\\\n            p = self.parent(index)\\\\n            if self.get(p) < self.get(index):\\\\n                self.swap(p, index)\\\\n            index = p\\\\n\\\\xa0\\\\n\\\\xa0\\\\nd = int(input('Enter the value of D: '));\\\\ndheap = D_aryHeap(d)\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('insert <data>')\\\\nprint('max get')\\\\nprint('max extract')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        dheap.insert(data)\\\\n    elif operation == 'max':\\\\n        suboperation = do[1].strip().lower()\\\\n        if suboperation == 'get':\\\\n            print('Maximum value: {}'.format(dheap.get_max()))\\\\n        elif suboperation == 'extract':\\\\n            print('Maximum value removed: {}'.format(dheap.extract_max()))\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement D-ary-Heap"}
{"code": "b'filename=input(\"Enter file name: \")\\\\nfor line in reversed(list(open(filename))):\\\\n    print(line.rstrip())'", "nl": "Python Program to Read the Contents of a File in Reverse Order"}
{"code": "b'Solution\\\\ndef printDict():\\\\n\\\\td=dict()\\\\n\\\\td[1]=1\\\\n\\\\td[2]=2**2\\\\n\\\\td[3]=3**2\\\\n\\\\tprint d\\\\n\\\\t\\\\t\\\\n\\\\nprintDict()\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n'", "nl": "Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.\n:"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# check except Diagonal all elements are 0 or not\\\\n# and check all diagonal elements are same or not\\\\npoint=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i!=j and matrix[i][j]!=0:\\\\n            point=1\\\\n            break\\\\n        if i==j and matrix[i][j]!=matrix[i][j]:\\\\n            point = 1\\\\n            break\\\\n\\\\nif point==1:\\\\n    print(\"Given Matrix is not a Scaler Matrix.\")\\\\nelse:\\\\n    print(\"Given Matrix is a Scaler Matrix.\")'", "nl": "Program to check whether a matrix is a scalar or not"}
{"code": "b\"l1 = []\\\\nnum1 = int(input('Enter size of list 1: '))\\\\nfor n in range(num1):\\\\n    numbers1 = int(input('Enter any number:'))\\\\n    l1.append(numbers1)\\\\n\\\\xa0\\\\nl2 = []\\\\nnum2 = int(input('Enter size of list 2:'))\\\\nfor n in range(num2):\\\\n    numbers2 = int(input('Enter any number:'))\\\\n    l2.append(numbers2)\\\\n\\\\xa0\\\\nunion = list(set().union(l1,l2))\\\\n\\\\xa0\\\\nprint('The Union of two lists is:',union)\"", "nl": "Python Program to Find the Union of two Lists"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n       self.data = data\\\\n       self.next = None\\\\n\\\\xa0\\\\nclass Queue:\\\\n    def __init__(self):\\\\n        self.head = None\\\\n        self.last = None\\\\n\\\\xa0\\\\n    def enqueue(self, data):\\\\n        if self.last is None:\\\\n            self.head = Node(data)\\\\n            self.last = self.head\\\\n        else:\\\\n            self.last.next = Node(data)\\\\n            self.last = self.last.next\\\\n\\\\xa0\\\\n    def dequeue(self):\\\\n        if self.head is None:\\\\n            return None\\\\n        else:\\\\n            to_return = self.head.data\\\\n            self.head = self.head.next\\\\n            return to_return\\\\n\\\\xa0\\\\na_queue = Queue()\\\\nwhile True:\\\\n    print('enqueue <value>')\\\\n    print('dequeue')\\\\n    print('quit')\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'enqueue':\\\\n        a_queue.enqueue(int(do[1]))\\\\n    elif operation == 'dequeue':\\\\n        dequeued = a_queue.dequeue()\\\\n        if dequeued is None:\\\\n            print('Queue is empty.')\\\\n        else:\\\\n            print('Dequeued element: ', int(dequeued))\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Implement Queue Data Structure using Linked List"}
{"code": "b'\\\\nunicodeString = u\"hello world!\"\\\\nprint unicodeString\\\\n\\\\n'", "nl": "\n\nPrint a unicode string \"hello world\".\n:"}
{"code": "b'\\\\nsubjects=[\"I\", \"You\"]\\\\nverbs=[\"Play\", \"Love\"]\\\\nobjects=[\"Hockey\",\"Football\"]\\\\nfor i in range(len(subjects)):\\\\n    for j in range(len(verbs)):\\\\n        for k in range(len(objects)):\\\\n            sentence = \"%s %s %s.\" % (subjects[i], verbs[j], objects[k])\\\\n            print sentence\\\\n\\\\n\\\\n'", "nl": "\nPlease write a program to generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and the object is in [\"Hockey\",\"Football\"].\n:"}
{"code": "b'\\\\n\\\\n\\\\n\\'\\'\\'Write\\\\na Python program\\\\xa0to check whether a given number is a perfect square\\\\nnumber or not. or\\\\xa0\\\\xa0Write a program\\\\xa0to\\\\xa0check whether\\\\na given number is a perfect square number or not using Python \\'\\'\\'\\\\n\\\\n\\\\n\\\\nimport math\\\\nnum=int(input(\"Enter a number:\"))\\\\nsqr=math.sqrt(num)\\\\nif sqr-math.floor(sqr)==0:\\\\n\\\\xa0 \\\\xa0print(\"It is a Perfect Square\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is not a Perfect Square\")\\\\n\\\\n\\\\n'", "nl": "Check whether a given number is a perfect square number or not. "}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter the number of elements to be inserted: \"))\\\\na=[]\\\\nfor i in range(0,n):\\\\n    elem=int(input(\"Enter element: \"))\\\\n    a.append(elem)\\\\navg=sum(a)/n\\\\nprint(\"Average of elements in the list\",round(avg,2))'", "nl": "Python Program to Calculate the Average of Numbers in a Given List"}
{"code": "b'\\\\nimport math\\\\nnum=int(input(\"Enter a number:\"))\\\\nflag=0\\\\nfor i in range(0,num+1):\\\\n\\\\xa0 \\\\xa0 if i*(i+1)==num:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 flag=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 break\\\\nif flag==1:\\\\n\\\\xa0 \\\\xa0 print(\"It is a Pronic Number.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is Not a Pronic Number.\")'", "nl": "Check whether number is Pronic Number or Not"}
{"code": "b'c=0def Check_Palindrome(str,i,length):\\\\xa0 \\\\xa0 global c\\\\xa0 \\\\xa0 if (i < len(str)):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if (str[i] == str[length]):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c +=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 Check_Palindrome(str, i + 1, length-1)\\\\xa0 \\\\xa0 return cstr=input(\"Enter your String:\")if(Check_Palindrome(str,0,len(str)-1)==len(str)):\\\\xa0 \\\\xa0 print(\"It is a Palindrome String.\")else: print(\"It is not a Palindrome String.\")'", "nl": "Check if given String is palindrome using recursion"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)First_element=arr[0]Second_element=arr[1]third_element=arr[2]Max_Product=First_element*Second_element*third_elementfor i in range(0,size-2):\\\\xa0 \\\\xa0 for j in range(i+1, size-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for k in range(j + 1, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 product=arr[i]*arr[j]*arr[k]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if abs(product) >= abs(Max_Product):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 Max_Product =product\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 First_element = arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 Second_element = arr[j]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 third_element=arr[k]print(\"Maximum Product of 3 numbers pair is (\",First_element,\",\",Second_element,\",\",third_element,\")\")print(\"Maximum Product of 3 numbers is \",Max_Product)'", "nl": "Find maximum product of 3 numbers in an array"}
{"code": "b'\\\\nn=int(input(\"Enter the n value:\"))\\\\nprint(\"Printing Odd numbers between 1 to \",n)\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 if i%2!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0print(i,end=\" \")'", "nl": "Print all the odd numbers from 1 to n"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\na=10\\\\nb=5\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 if(i%2==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(b,end=\" \")\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 b += 10\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(a, end=\" \")\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 a += 50\\\\n\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print series 10,5,60,15,110...N"}
{"code": "b'\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nprint(\"Enter the value of x:\")\\\\nx=int(input())\\\\nsum=0\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 for j in range(1,i+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum+=j\\\\n\\\\xa0 \\\\xa0 i+=1\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find sum of series (1+(1+2)+(1+2+3)+...till N)"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0p=3for i in range(1,n+1):\\\\xa0 \\\\xa0 sum += p\\\\xa0 \\\\xa0 p=(p*10)+3print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 3+33+333.....+N"}
{"code": "b'a=[]\\\\nn= int(input(\"Enter the number of elements in list:\"))\\\\nfor x in range(0,n):\\\\n    element=input(\"Enter element\" + str(x+1) + \":\")\\\\n    a.append(element)\\\\nprint(a)\\\\nc=[]\\\\ncount=0\\\\nb=input(\"Enter word to remove: \")\\\\nn=int(input(\"Enter the occurrence to remove: \"))\\\\nfor i in a:\\\\n    if(i==b):\\\\n        count=count+1\\\\n        if(count!=n):\\\\n            c.append(i)\\\\n    else:\\\\n        c.append(i)\\\\nif(count==0):\\\\n    print(\"Item not found \")\\\\nelse: \\\\n    print(\"The number of repetitions is: \",count)\\\\n    print(\"Updated list is: \",c)\\\\n    print(\"The distinct elements are: \",set(a))'", "nl": "Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat"}
{"code": "b'\\\\nimport math\\\\nhex=input(\"Enter Hexadecimal Number:\")\\\\nvalue=0\\\\ndecimal=0\\\\nj=len(hex)\\\\nj-=1\\\\nfor i in range(0,len(hex)):\\\\n\\\\xa0 \\\\xa0 if hex[i]>=\\'0\\' and hex[i]<=\\'9\\' :\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=(int)(hex[i])\\\\n\\\\xa0 \\\\xa0 if hex[i]==\\'A\\' or hex[i]==\\'a\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=10\\\\n\\\\xa0 \\\\xa0 if hex[i] == \\'B\\' or hex[i] == \\'b\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=11\\\\n\\\\xa0 \\\\xa0 if hex[i] == \\'C\\' or hex[i] == \\'c\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=12\\\\n\\\\xa0 \\\\xa0 if hex[i] == \\'D\\' or hex[i] == \\'d\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=13\\\\n\\\\xa0 \\\\xa0 if hex[i] == \\'E\\' or hex[i] == \\'e\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=14\\\\n\\\\xa0 \\\\xa0 if hex[i] == \\'F\\' or hex[i] == \\'f\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 value=15\\\\n\\\\xa0 \\\\xa0 decimal=decimal+(int)(value*math.pow(16,j))\\\\n\\\\xa0 \\\\xa0 j-=1\\\\nprint(\"Decimal Number is:\",decimal)'", "nl": "Program to convert Hexadecimal to Decimal "}
{"code": "b'# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# compute square of the matrix\\\\nfor i in range(0,row_size):\\\\n    for j in range(0,col_size):\\\\n        matrix[i][j]=pow(matrix[i][j],2)\\\\n\\\\n# display square of the matrix\\\\nprint(\"Square of the Matrix elements are:\")\\\\nfor m in matrix:\\\\n    print(m)'", "nl": "Program to Find square of a matrix "}
{"code": "b'def Factorial(num):\\\\xa0 \\\\xa0 if num<=0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 1\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return num*Factorial(num-1)num=int(input(\"Enter the Number:\"))print(\"Factorial of Given Number Using Recursion is:\",Factorial(num))'", "nl": "Find factorial of a number using recursion"}
{"code": "b'def SumEven(num1,num2):\\\\xa0 \\\\xa0 if num1>num2:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0\\\\xa0 \\\\xa0 return num1+SumEven(num1+2,num2)num1=2print(\"Enter your Limit:\")num2=int(input())print(\"Sum of all Even numbers in the given range is:\",SumEven(num1,num2))'", "nl": "Find the sum of Even numbers using recursion"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0find the nth strong number. or\\\\xa0Write a\\\\nprogram\\\\xa0to\\\\xa0find the nth strong number using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter the Nth value:\")\\\\nrangenumber=int(input())\\\\nnum = 1\\\\nc = 0\\\\nletest = 0\\\\n\\\\nwhile (c != rangenumber):\\\\n\\\\xa0 \\\\xa0 num2 = num\\\\n\\\\xa0 \\\\xa0 num1 = num\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 fact = 1\\\\n\\\\xa0 \\\\xa0 while (num1 != 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 fact = 1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 = num1 // 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for j in range(1,rem+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 fact = fact * j\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum = sum + fact\\\\n\\\\xa0 \\\\xa0 if (sum == num2):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th strong number is \",letest)\\\\xa0\\\\n\\\\n'", "nl": "Write a program to find the nth strong number"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <src> <dest> [weight]\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            src = int(do[2])\\\\n            dest = int(do[3])\\\\n            if src not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(src))\\\\n            elif dest not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(dest))\\\\n            else:\\\\n                if not g.does_edge_exist(src, dest):\\\\n                    if len(do) == 5:\\\\n                        weight = int(do[4])\\\\n                        g.add_edge(src, dest, weight)\\\\n                    else:\\\\n                        g.add_edge(src, dest)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Implement Graph"}
{"code": "b'\\\\n\\\\nimport math\\\\nnum=int(input(\"Enter a number:\"))\\\\nprint(\"Prime Factors of \",num,end=\" are \\\\\\\\n\")\\\\nwhile num%2==0:\\\\n\\\\xa0 \\\\xa0 print(2,)\\\\n\\\\xa0 \\\\xa0 num=num/2\\\\nfor i in range(3,int(math.sqrt(num))+1,2):\\\\n\\\\xa0 \\\\xa0while num%i==0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 print(i,)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 num = num/i\\\\nif num>2:\\\\n\\\\xa0 print(num)\\\\n'", "nl": "program to find the prime factors of a number"}
{"code": "b'\\\\nfrom random import shuffle\\\\nli = [3,6,7,8]\\\\nshuffle(li)\\\\nprint li\\\\n\\\\n\\\\n\\\\n'", "nl": "\nPlease write a program to shuffle and print the list [3,6,7,8].\n\n\n:"}
{"code": "b'\\\\nimport random\\\\nprint random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)\\\\n\\\\n'", "nl": "\nPlease write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.\n\n\n:"}
{"code": "b'string1=raw_input(\"Enter first string:\")\\\\nstring2=raw_input(\"Enter second string:\")\\\\ncount1=0\\\\ncount2=0\\\\nfor i in string1:\\\\n      count1=count1+1\\\\nfor j in string2:\\\\n      count2=count2+1\\\\nif(count1<count2):\\\\n      print(\"Larger string is:\")\\\\n      print(string2)\\\\nelif(count1==count2):\\\\n      print(\"Both strings are equal.\")\\\\nelse:\\\\n      print(\"Larger string is:\")\\\\n      print(string1)'", "nl": "Python Program to Take in Two Strings and Display the Larger String without Using Built-in Functions"}
{"code": "b'\\\\n\\\\nprint(\"Enter the row and column size:\");\\\\n\\\\nrow_size=input()\\\\nfor out in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(out),end=\" \")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n\\\\n'", "nl": "Write a program to print the alphabet pattern"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0p=1for i in range(1,n+1):\\\\xa0 \\\\xa0 sum += p\\\\xa0 \\\\xa0 p = (p * 10) + 1print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 1+11+111.....+N"}
{"code": "b'num1=int(input(\"Enter 1st number:\"))\\\\nnum2=int(input(\"Enter 2nd number:\"))\\\\n\\\\nnum1=num1+num2\\\\nnum2=num1-num2\\\\nnum1=num1-num2\\\\n\\\\nprint(\"***After swapping***\")\\\\nprint(\"Number 1: \",num1)\\\\nprint(\"Number 2: \",num2)'", "nl": "Program to swap two numbers without third variable"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __len__(self):\\\\n        return len(self.vertices)\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef bellman_ford(g, source):\\\\n    \"\"\"Return distance where distance[v] is min distance from source to v.\\\\n\\\\xa0\\\\n    This will return a dictionary distance.\\\\n\\\\xa0\\\\n    g is a Graph object which can have negative edge weights.\\\\n    source is a Vertex object in g.\\\\n    \"\"\"\\\\n    distance = dict.fromkeys(g, float(\\'inf\\'))\\\\n    distance[source] = 0\\\\n\\\\xa0\\\\n    for _ in range(len(g) - 1):\\\\n        for v in g:\\\\n            for n in v.get_neighbours():\\\\n                distance[n] = min(distance[n], distance[v] + v.get_weight(n))\\\\n\\\\xa0\\\\n    return distance\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <src> <dest> <weight>\\')\\\\nprint(\\'bellman-ford <source vertex key>\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            src = int(do[2])\\\\n            dest = int(do[3])\\\\n            weight = int(do[4])\\\\n            if src not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(src))\\\\n            elif dest not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(dest))\\\\n            else:\\\\n                if not g.does_edge_exist(src, dest):\\\\n                    g.add_edge(src, dest, weight)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'bellman-ford\\':\\\\n        key = int(do[1])\\\\n        source = g.get_vertex(key)\\\\n        distance = bellman_ford(g, source)\\\\n        print(\\'Distances from {}: \\'.format(key))\\\\n        for v in distance:\\\\n            print(\\'Distance to {}: {}\\'.format(v.get_key(), distance[v]))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Implement Bellman-Ford Algorithm"}
{"code": "b'fname = input(\"Enter file name: \")\\\\nk = 0\\\\n\\\\xa0\\\\nwith open(fname, \\'r\\') as f:\\\\n    for line in f:\\\\n        words = line.split()\\\\n        for i in words:\\\\n            for letter in i:\\\\n                if(letter.isspace):\\\\n                    k=k+1\\\\nprint(\"Occurrences of blank spaces:\")\\\\nprint(k)'", "nl": "Python Program to Count the Number of Blank Spaces in a Text File"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))x=1for out in range(row_size,-(row_size+1),-1):\\\\xa0 \\\\xa0 for inn in range(1,abs(out)+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\xa0 \\\\xa0 for p in range(row_size,abs(out)-1,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(x,end=\" \")\\\\xa0 \\\\xa0 if out > 0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 x +=1\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 x -=1\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Print the Solid Diamond Number Pattern"}
{"code": "b'Solution\\\\ntp=(1,2,3,4,5,6,7,8,9,10)\\\\ntp1=tp[:5]\\\\ntp2=tp[5:]\\\\nprint tp1\\\\nprint tp2\\\\n\\\\n\\\\n'", "nl": "With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half values in one line and the last half values in one line. \n:"}
{"code": "b'sum=0def SumOfOddElement(arr,n):\\\\xa0 \\\\xa0 global sum\\\\xa0 \\\\xa0 if(n>0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 i=n-1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if(arr[i]%2==1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=sum+arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 SumOfOddElement(arr,i)\\\\xa0 \\\\xa0 return sumarr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Sum of Odd Element is:\",SumOfOddElement(arr,n))'", "nl": "Find sum of Odd numbers using recursion in an array"}
{"code": "b'freq = {}   # frequency of words in text\\\\nline = raw_input()\\\\nfor word in line.split():\\\\n    freq[word] = freq.get(word,0)+1\\\\n\\\\nwords = freq.keys()\\\\nwords.sort()\\\\n\\\\nfor w in words:\\\\n    print \"%s:%d\" % (w,freq[w])\\\\n'", "nl": "Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. "}
{"code": "b'\\\\nli = [5,6,77,45,22,12,24]\\\\nli = [x for x in li if x%2!=0]\\\\nprint li\\\\n\\\\n'", "nl": "\nPlease write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].\n:"}
{"code": "b'\\\\xa0\\\\na=int(input(\"Enter value of first variable: \"))\\\\nb=int(input(\"Enter value of second variable: \"))\\\\na=a+b\\\\nb=a-b\\\\na=a-b\\\\nprint(\"a is:\",a,\" b is:\",b)'", "nl": "Python Program to Exchange the Values of Two Numbers Without Using a Temporary Variable"}
{"code": "b'\\\\xa0\\\\ndate=input(\"Enter the date: \")\\\\ndd,mm,yy=date.split(\\'/\\')\\\\ndd=int(dd)\\\\nmm=int(mm)\\\\nyy=int(yy)\\\\nif(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):\\\\n    max1=31\\\\nelif(mm==4 or mm==6 or mm==9 or mm==11):\\\\n    max1=30\\\\nelif(yy%4==0 and yy%100!=0 or yy%400==0):\\\\n    max1=29\\\\nelse:\\\\n    max1=28\\\\nif(mm<1 or mm>12):\\\\n    print(\"Date is invalid.\")\\\\nelif(dd<1 or dd>max1):\\\\n    print(\"Date is invalid.\")\\\\nelif(dd==max1 and mm!=12):\\\\n    dd=1\\\\n    mm=mm+1\\\\n    print(\"The incremented date is: \",dd,mm,yy)\\\\nelif(dd==31 and mm==12):\\\\n    dd=1\\\\n    mm=1\\\\n    yy=yy+1\\\\n    print(\"The incremented date is: \",dd,mm,yy)\\\\nelse:\\\\n    dd=dd+1\\\\n    print(\"The incremented date is: \",dd,mm,yy)'", "nl": "Python Program to Check if a Date is Valid and Print the Incremented Date if it is"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nsum=0\\\\n#Calculate sum of the diagonals element\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i==j:\\\\n            sum+=matrix[i][j]\\\\n# Display the sum of diagonals Element\\\\nprint(\"Sum of diagonals Element is: \",sum)'", "nl": "Find the sum of all diagonal elements of a matrix"}
{"code": "b'\\\\xa0\\\\nprinciple=float(input(\"Enter the principle amount:\"))\\\\ntime=int(input(\"Enter the time(years):\"))\\\\nrate=float(input(\"Enter the rate:\"))\\\\nsimple_interest=(principle*time*rate)/100\\\\nprint(\"The simple interest is:\",simple_interest)'", "nl": "Python Program to Compute Simple Interest Given all the Required Values"}
{"code": "b'\\\\nrangenumber=int(input(\"Enter a Nth Number:\"))\\\\nc = 0\\\\nletest = 0\\\\nnum = 1\\\\nwhile c != rangenumber:\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 num1=num\\\\n\\\\xa0 \\\\xa0 while sum != 1 and sum != 4:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 while num1 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += (rem * rem)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 //= 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 = sum\\\\n\\\\n\\\\xa0 \\\\xa0 if sum == 1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th Happy number is \",letest)'", "nl": "Program to Find nth Happy Number "}
{"code": "b'\\\\nimport java.util.Scanner;\\\\npublic class p10 {\\\\n\\\\n public static void main(String[] args) {\\\\n Scanner cs=new Scanner(System.in);\\\\n  System.out.println(\"Enter the row and column size:\");\\\\n int row_size,out,in;\\\\n \\\\xa0 row_size=cs.nextInt();\\\\n \\\\xa0 for(out=row_size;out>=1;out--)\\\\n \\\\xa0 {\\\\n \\\\xa0 \\\\xa0for(in=1;in<=row_size;in++)\\\\n \\\\xa0 \\\\xa0 System.out.print(out);\\\\n\\\\n \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 System.out.println();\\\\n \\\\xa0 }\\\\n cs.close();\\\\n }\\\\n}'", "nl": "Write a program to print the pattern"}
{"code": "b'\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Magic numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 num3 = i\\\\n\\\\xa0 \\\\xa0 num1 = i\\\\n\\\\xa0 \\\\xa0 sum=0\\\\n# Sum of digit\\\\n\\\\xa0 \\\\xa0 while num1 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += rem\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 //= 10\\\\n# Reverse of sum\\\\n\\\\xa0 \\\\xa0 rev = 0\\\\n\\\\xa0 \\\\xa0 num2 = sum\\\\n\\\\xa0 \\\\xa0 while num2 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem2 = num2 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rev = rev * 10 + rem2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num2 //= 10\\\\n\\\\xa0 \\\\xa0 if sum*rev==num3:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Magic numbers present within a given range"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n#Calculate sum of Upper triangular matrix element\\\\nsum=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i>j:\\\\n            sum += matrix[i][j]\\\\n\\\\n# display the sum of the Upper triangular matrix element\\\\nprint(\"Sum of Upper Triangular Matrix Elements is: \",sum)'", "nl": "Program to find the sum of an upper triangular matrix"}
{"code": "b'\\\\nli = [2,4,6,8]\\\\nfor i in li:\\\\n    assert i%2==0\\\\n\\\\n\\\\n'", "nl": "\n\nPlease write assert statements to verify that every number in the list [2,4,6,8] is even.\n\n\n:"}
{"code": "b\"\\\\ndic = {}\\\\ns=raw_input()\\\\nfor s in s:\\\\n    dic[s] = dic.get(s,0)+1\\\\nprint '\\\\\\\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])\\\\n\\\\n\"", "nl": "\nPlease write a program which count and print the numbers of each character in a string input by console.\n"}
{"code": "b'\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Armstrong numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 num2=i\\\\n\\\\xa0 \\\\xa0 num1=i\\\\n\\\\xa0 \\\\xa0 sum=0\\\\n\\\\xa0 \\\\xa0 while(num1!=0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem=num1%10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1=int(num1/10)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=sum+rem*rem*rem\\\\n\\\\xa0 \\\\xa0 if sum==num2:\\\\nprint(i,end=\" \")\\\\xa0\\\\n'", "nl": " Find out all Armstrong numbers present within a given range"}
{"code": "b\"def gnome_sort(alist):\\\\n    for pos in range(1, len(alist)):\\\\n        while (pos != 0 and alist[pos] < alist[pos - 1]):\\\\n            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]\\\\n            pos = pos - 1\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input('Enter the list of numbers: ').split()\\\\nalist = [int(x) for x in alist]\\\\ngnome_sort(alist)\\\\nprint('Sorted list: ', end='')\\\\nprint(alist)\"", "nl": "Python Program to Implement Gnome Sort"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 print((int)((i*(i+1))/2),end=\" \")\\\\n\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print Triangular Number series 1 3 6 10 15 ...N"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        # dictionary containing destination vertices mapped to the weight of the\\\\n        # edge with which they are joined to this vertex\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Queue:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def enqueue(self, data):\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def dequeue(self):\\\\n        return self.items.pop(0)\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef find_shortest_paths(src):\\\\n    \"\"\"Returns tuple of two dictionaries: (parent, distance)\\\\n\\\\xa0\\\\n    parent contains vertices mapped to their parent vertex in the shortest\\\\n    path from src to that vertex.\\\\n    distance contains vertices mapped to their shortest distance from src.\\\\n    \"\"\"\\\\n    parent = {src: None}\\\\n    distance = {src: 0}\\\\n\\\\xa0\\\\n    visited = set()\\\\n    q = Queue()\\\\n    q.enqueue(src)\\\\n    visited.add(src)\\\\n    while not q.is_empty():\\\\n        current = q.dequeue()\\\\n        for dest in current.get_neighbours():\\\\n            if dest not in visited:\\\\n                visited.add(dest)\\\\n                parent[dest] = current\\\\n                distance[dest] = distance[current] + 1\\\\n                q.enqueue(dest)\\\\n    return (parent, distance)\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <src> <dest>\\')\\\\nprint(\\'shortest <vertex key>\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            src = int(do[2])\\\\n            dest = int(do[3])\\\\n            if src not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(src))\\\\n            elif dest not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(dest))\\\\n            else:\\\\n                if not g.does_edge_exist(src, dest):\\\\n                    g.add_edge(src, dest)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'shortest\\':\\\\n        key = int(do[1])\\\\n        src = g.get_vertex(key)\\\\n        parent, distance = find_shortest_paths(src)\\\\n\\\\xa0\\\\n        print(\\'Path from destination vertices to source vertex {}:\\'.format(key))\\\\n        for v in parent:\\\\n            print(\\'Vertex {} (distance {}): \\'.format(v.get_key(), distance[v]),\\\\n                  end=\\'\\')\\\\n            while parent[v] is not None:\\\\n                print(v.get_key(), end = \\' \\')\\\\n                v = parent[v]\\\\n            print(src.get_key()) # print source vertex\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find Shortest Path From a Vertex using BFS in an Unweighted Graph"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\\\\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\\\\n        given weight.\"\"\"\\\\n        self.add_edge(v1_key, v2_key, weight)\\\\n        self.add_edge(v2_key, v1_key, weight)\\\\n\\\\xa0\\\\n    def does_undirected_edge_exist(self, v1_key, v2_key):\\\\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\\\\n        return (self.does_edge_exist(v1_key, v2_key)\\\\n                and self.does_edge_exist(v1_key, v2_key))\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef is_bipartite(vertex, visited):\\\\n    \"\"\"Return True if component containing vertex is bipartite and put all\\\\n    vertices in its component in set visited.\"\"\"\\\\n    colour = {vertex: 0}\\\\n    return is_bipartite_helper(vertex, visited, colour)\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef is_bipartite_helper(v, visited, colour):\\\\n    \"\"\"Return True if component containing vertex is bipartite and put all\\\\n    vertices in its component in set visited. Uses dictionary colour to keep\\\\n    track of colour of each vertex.\"\"\"\\\\n    visited.add(v)\\\\n    next_colour = 1 - colour[v] # switch colour\\\\n    for dest in v.get_neighbours():\\\\n        if dest not in visited:\\\\n            colour[dest] = next_colour\\\\n            if not is_bipartite_helper(dest, visited, colour):\\\\n                return False\\\\n        else:\\\\n            if colour[dest] != next_colour:\\\\n                return False\\\\n    return True\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Undirected Graph\\')\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <vertex1> <vertex2>\\')\\\\nprint(\\'bipartite\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            v1 = int(do[2])\\\\n            v2 = int(do[3])\\\\n            if v1 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v1))\\\\n            elif v2 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v2))\\\\n            else:\\\\n                if not g.does_undirected_edge_exist(v1, v2):\\\\n                    g.add_undirected_edge(v1, v2)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'bipartite\\':\\\\n        bipartite = True\\\\n        visited = set()\\\\n        for v in g:\\\\n            if v not in visited:\\\\n                if not is_bipartite(v, visited):\\\\n                    bipartite = False\\\\n                    break\\\\n\\\\xa0\\\\n        if bipartite:\\\\n            print(\\'Graph is bipartite.\\')\\\\n        else:\\\\n            print(\\'Graph is not bipartite.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find if Undirected Graph is Bipartite using DFS"}
{"code": "b'\\\\nnum1=int(input(\"Enter first number:\"))\\\\nnum2=int(input(\"Enter\\\\xa0 second number:\"))\\\\nsub=num1+(~num2+1)#number + 2\\'s complement of number\\\\nprint(\"Subtraction of two number is \",sub)\\\\n'", "nl": "Subtract Two Numbers Operator without using Minus(-) operator"}
{"code": "b'def lcs(u, v):\\\\n    \"\"\"Return c where c[i][j] contains length of LCS of u[i:] and v[j:].\"\"\"\\\\n    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]\\\\n    lcs_helper(u, v, c, 0, 0)\\\\n    return c\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef lcs_helper(u, v, c, i, j):\\\\n    \"\"\"Return length of LCS of u[i:] and v[j:] and fill in table c.\\\\n\\\\xa0\\\\n    c[i][j] contains the length of LCS of u[i:] and v[j:].\\\\n    This function fills in c as smaller subproblems for solving c[i][j] are\\\\n    solved.\"\"\"\\\\n    if c[i][j] >= 0:\\\\n        return c[i][j]\\\\n\\\\xa0\\\\n    if i == len(u) or j == len(v):\\\\n        q = 0\\\\n    else:\\\\n        if u[i] == v[j]:\\\\n            q = 1 + lcs_helper(u, v, c, i + 1, j + 1)\\\\n        else:\\\\n            q = max(lcs_helper(u, v, c, i + 1, j),\\\\n                    lcs_helper(u, v, c, i, j + 1))\\\\n    c[i][j] = q\\\\n    return q\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef print_lcs(u, v, c):\\\\n    \"\"\"Print one LCS of u and v using table c.\"\"\"\\\\n    i = j = 0\\\\n    while not (i == len(u) or j == len(v)):\\\\n        if u[i] == v[j]:\\\\n            print(u[i], end=\\'\\')\\\\n            i += 1\\\\n            j += 1\\\\n        elif c[i][j + 1] > c[i + 1][j]:\\\\n            j += 1\\\\n        else:\\\\n            i += 1\\\\n\\\\xa0\\\\n\\\\xa0\\\\nu = input(\\'Enter first string: \\')\\\\nv = input(\\'Enter second string: \\')\\\\nc = lcs(u, v)\\\\nprint(\\'Longest Common Subsequence: \\', end=\\'\\')\\\\nprint_lcs(u, v, c)'", "nl": "Python Program to Find Longest Common Subsequence using Dynamic Programming with Memoization"}
{"code": "b\"class Node:\\\\n    def __init__(self, data):\\\\n       self.data = data\\\\n       self.next = None\\\\n\\\\xa0\\\\nclass LinkedList:\\\\n    def __init__(self):\\\\n        self.head = None\\\\n        self.last_node = None\\\\n\\\\xa0\\\\n    def append(self, data):\\\\n        if self.last_node is None:\\\\n            self.head = Node(data)\\\\n            self.last_node = self.head\\\\n        else:\\\\n            self.last_node.next = Node(data)\\\\n            self.last_node = self.last_node.next\\\\n\\\\xa0\\\\n    def alternate(self):\\\\n        self.alternate_helper(self.head)\\\\n\\\\xa0\\\\n    def alternate_helper(self, current):\\\\n        if current is None:\\\\n            return\\\\n        print(current.data, end = ' ')\\\\n        if current.next:\\\\n            self.alternate_helper(current.next.next)\\\\n\\\\xa0\\\\na_llist = LinkedList()\\\\ndata_list = input('Please enter the elements in the linked list: ').split()\\\\nfor data in data_list:\\\\n    a_llist.append(int(data))\\\\n\\\\xa0\\\\nprint('The alternate nodes of the linked list: ', end = '')\\\\na_llist.alternate()\"", "nl": "Python Program to Print the Alternate Nodes in a Linked List using Recursion"}
{"code": "b'\\\\n\\\\nnum=int(input(\"Enter a number:\"))\\\\nfact=1\\\\nfor i in range(1,num+1):\\\\n\\\\xa0 \\\\xa0fact=fact*i\\\\nprint(\"The Factorial is\",fact)\\\\n\\\\n\\\\n'", "nl": "Program to Find the factorial of a number"}
{"code": "b'\\\\ndef partition(arr,first,last):\\\\n\\\\xa0 \\\\xa0 i=first-1\\\\n\\\\xa0 \\\\xa0 x=arr[last]\\\\n\\\\xa0 \\\\xa0 for j in range(first,last):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if(arr[j]<x):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 i+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp=arr[i]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[i]=arr[j]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[j]=temp\\\\n\\\\xa0 \\\\xa0 i+=1\\\\n\\\\xa0 \\\\xa0 temp=arr[i]\\\\n\\\\xa0 \\\\xa0 arr[i]=arr[last]\\\\n\\\\xa0 \\\\xa0 arr[last]=temp\\\\n\\\\xa0 \\\\xa0 return i\\\\n\\\\ndef qsort(arr,first,last):\\\\n\\\\xa0 \\\\xa0 if(first<last):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 mid=partition(arr,first,last)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 qsort(arr,first,mid-1)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 qsort(arr,mid+1,last)\\\\n\\\\nsize=int(input(\"Enter the size of the array:\"))\\\\narr=[]\\\\nprint(\"Enter the element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\n\\\\nprint(\"Before Sorting Array Element are: \",arr)\\\\n\\\\nqsort(arr,0,size-1)\\\\n\\\\nprint(\"\\\\\\\\nAfter Sorting Array Element are: \",arr)'", "nl": "Quick Sort Program in Python | Java | C | C++"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)c=0for i in range(0,size):\\\\xa0 \\\\xa0 if arr[i]!=0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[c]=arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1for i in range(c,size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[c]=0\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1print(\"After Move all zeros to end, Array is:\")print(arr)'", "nl": "Move all zeros to the end of an Array"}
{"code": "b'\\\\nn=int(input(\"Enter the n Value:\"))\\\\nx=int(input(\"Enter the x value:\"))\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 fact*=i\\\\nresult=pow(x,n)/fact\\\\nprint(\"Result(x^n/n!)= \",result)\\\\n'", "nl": "Write C|Java|C++|Python Program to compute x^n/n!"}
{"code": "b'l=[]\\\\ndef convert(b):\\\\n    if(b==0):\\\\n        return l\\\\n    dig=b%2\\\\n    l.append(dig)\\\\n    convert(b//2)\\\\na=int(input(\"Enter a number: \"))\\\\nconvert(a)\\\\nl.reverse()\\\\nprint(\"Binary equivalent:\")\\\\nfor i in l:\\\\n    print i,'", "nl": "Python Program to Find the Binary Equivalent of a Number Recursively"}
{"code": "b'n=int(input(\"Enter a number: \"))\\\\nfor j in range(1,n+1):\\\\n    a=[]\\\\n    for i in range(1,j+1):\\\\n        print(i,sep=\" \",end=\" \")\\\\n        if(i<j):\\\\n            print(\"+\",sep=\" \",end=\" \")\\\\n        a.append(i)\\\\n    print(\"=\",sum(a))\\\\n\\\\xa0\\\\nprint()'", "nl": "Python Program to Read a Number n and Print the Natural Numbers Summation Pattern"}
{"code": "b'n=int(input(\"Enter a number: \"))\\\\nfor i in range(0,n):\\\\n    for j in range(0,n):\\\\n        if(i==j):\\\\n            print(\"1\",sep=\" \",end=\" \")\\\\n        else:\\\\n            print(\"0\",sep=\" \",end=\" \")\\\\n    print()'", "nl": "Python Program to Print an Identity Matrix"}
{"code": "b'\\\\ndef f(n):\\\\n    if n == 0: return 0\\\\n    elif n == 1: return 1\\\\n    else: return f(n-1)+f(n-2)\\\\n\\\\nn=int(raw_input())\\\\nprint f(n)\\\\n\\\\n\\\\n'", "nl": "\n\nThe Fibonacci Sequence is computed based on the following formula:\n\n\nf(n)=0 if n=0\nf(n)=1 if n=1\nf(n)=f(n-1)+f(n-2) if n>1\n\nPlease write a program to compute the value of f(n) with a given n input by console.\n"}
{"code": "b'\\\\ns=raw_input()\\\\ns = s[::-1]\\\\nprint s\\\\n\\\\n'", "nl": "\nPlease write a program which accepts a string from console and print it in reverse order.\n"}
{"code": "b'def swap_Element(arr,i,j):\\\\xa0 \\\\xa0 temp = arr[i]\\\\xa0 \\\\xa0 arr[i] = arr[j]\\\\xa0 \\\\xa0 arr[j] = tempdef sort_element(arr,n):\\\\xa0 \\\\xa0 if(n>0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for i in range(0,n):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if (arr[i] >= arr[n - 1]):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 swap_Element(arr, i, n - 1)\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sort_element(arr, n - 1)def printArr(arr,n):\\\\xa0 \\\\xa0 for i in range(0, n):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(arr[i],end=\" \")arr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)sort_element(arr,n)print(\"After ascending\\\\xa0 order sort Array Elements are:\")printArr(arr, n)'", "nl": "Sort array in ascending order using recursion"}
{"code": "b'\\\\n\\\\nnum=int(input(\"Enter a number:\"))\\\\nsum=0\\\\nfor i in range(1,num):\\\\n\\\\xa0 \\\\xa0if(num%i==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 sum=sum+i\\\\nif sum==num:\\\\n\\\\xa0 \\\\xa0print(\"It is a Perfect Number\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 print(\"It is not a Perfect Number\")\\\\xa0\\\\n'", "nl": "Check whether a given number is a perfect number or not"}
{"code": "b'\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nsum=0\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 fact*=i\\\\n\\\\xa0 \\\\xa0 sum+=fact\\\\n\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find sum of series 1!+2!+3!...+n!"}
{"code": "b'from string import ascii_lowercase as asc_lower\\\\ndef check(s):\\\\n    return set(asc_lower) - set(s.lower()) == set([])\\\\nstrng=raw_input(\"Enter string:\")\\\\nif(check(strng)==True):\\\\n      print(\"The string is a pangram\")\\\\nelse:\\\\n      print(\"The string isn\\'t a pangram\")'", "nl": "Python Program to Check if a String is a Pangram or Not"}
{"code": "b'\\\\nside=int(input(\"Enter side of a square :\"))\\\\narea=side*side\\\\nperimeter=4*side\\\\n\\\\nprint(\"Area of the Square=\",area)\\\\nprint(\"Perimeter of the square=\",perimeter)'", "nl": "Program to Find area and perimeter of a square"}
{"code": "b\"#!/usr/bin/env python\\\\nimport math\\\\nc=50\\\\nh=30\\\\nvalue = []\\\\nitems=[x for x in raw_input().split(',')]\\\\nfor d in items:\\\\n    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))\\\\n\\\\nprint ','.join(value)\\\\n\"", "nl": "Write a program that calculates and prints the value according to the given formula:\nQ = Square root of [(2 * C * D)/H]\nFollowing are the fixed values of C and H:\nC is 50. H is 30.\nD is the variable whose values should be input to your program in a comma-separated sequence."}
{"code": "b'm1=float(input(\"Enter the first mass: \"))\\\\nm2=float(input(\"Enter the second mass: \"))\\\\nr=float(input(\"Enter the distance between the centres of the masses: \"))\\\\nG=6.673*(10**-11)\\\\nf=(G*m1*m2)/(r**2)\\\\nprint(\"Hence, the gravitational force is: \",round(f,2),\"N\")'", "nl": "Python Program to Find the Gravitational Force Acting Between Two Objects"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nprint(\"ASCII values of letters in string are:\")\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 print(str[i],\" ==> \",(ord)(str[i]))'", "nl": "Print the ASCII value of character in a String"}
{"code": "b'def CheckPrime(i,num):\\\\xa0 \\\\xa0 if num==i:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if(num%i==0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return CheckPrime(i+1,num)num=int(input(\"Enter your Number:\"))if(CheckPrime(2,num)==0):\\\\xa0 \\\\xa0 print(\"It is a Prime Number.\")else:\\\\xa0 \\\\xa0 print(\"It is not a Prime Number.\")'", "nl": "Check prime number using Recursion"}
{"code": "b'def Find_Factorial(len1):\\\\xa0 \\\\xa0 fact = 1\\\\xa0 \\\\xa0 for i in range(1, len1+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 fact = fact * i\\\\xa0 \\\\xa0 return factdef Find_Lexicographic_Rank(str,len1):\\\\xa0 \\\\xa0 rank = 1\\\\xa0 \\\\xa0 for inn in range(0, len1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count=0\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for out in range(inn+1, len1+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if str[inn] > str[out]:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rank+=count*Find_Factorial(len1-inn)\\\\xa0 \\\\xa0 return rankstr=input(\"Enter Your String:\")print(\"Lexicographic Rank of given String is: \",Find_Lexicographic_Rank(str,len(str)-1))'", "nl": "Find lexicographic rank of a given string"}
{"code": "b'\\\\nimport sys\\\\narr=[]\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nmax=-sys.maxsize-1\\\\nfor j in range(0,size):\\\\n\\\\xa0 \\\\xa0 if (arr[j] >= max):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 max = arr[j]\\\\nprint(\"The largest element of array: \",max)'", "nl": " Find the largest element in the array"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))for out in range(row_size,-(row_size+1),-1):\\\\xa0 \\\\xa0 for inn in range(row_size,abs(out)-1,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print((chr)(inn+65),end=\"\")\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": " Program to print the Solid Half Diamond Alphabet Pattern"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0find the nth strong number. or\\\\xa0Write a\\\\nprogram\\\\xa0to\\\\xa0find the nth strong number using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter the Nth value:\")\\\\nrangenumber=int(input())\\\\nnum = 1\\\\nc = 0\\\\nletest = 0\\\\n\\\\nwhile (c != rangenumber):\\\\n\\\\xa0 \\\\xa0 num2 = num\\\\n\\\\xa0 \\\\xa0 num1 = num\\\\n\\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 fact = 1\\\\n\\\\xa0 \\\\xa0 while (num1 != 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 fact = 1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num1 % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1 = num1 // 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 for j in range(1,rem+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 fact = fact * j\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum = sum + fact\\\\n\\\\xa0 \\\\xa0 if (sum == num2):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th strong number is \",letest)\\\\xa0\\\\n\\\\n'", "nl": "Write a program to find the nth strong number"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n#Calculate sum of lower triangular matrix element\\\\nsum=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i<j:\\\\n            sum += matrix[i][j]\\\\n\\\\n# display the sum of a lower triangular matrix element\\\\nprint(\"Sum of Lower Triangular Matrix Elements is: \",sum)'", "nl": "Program to Find the sum of a lower triangular matrix"}
{"code": "b\"def insertion_sort(alist):\\\\n    for i in range(1, len(alist)):\\\\n        temp = alist[i]\\\\n        j = i - 1\\\\n        while (j >= 0 and temp < alist[j]):\\\\n            alist[j + 1] = alist[j]\\\\n            j = j - 1\\\\n        alist[j + 1] = temp\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input('Enter the list of numbers: ').split()\\\\nalist = [int(x) for x in alist]\\\\ninsertion_sort(alist)\\\\nprint('Sorted list: ', end='')\\\\nprint(alist)\"", "nl": "Python Program to Implement Insertion Sort"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0add between 2 numbers without using arithmetic operators.\\\\nor\\\\xa0Write a program\\\\xa0to\\\\xa0add between 2 numbers without using\\\\narithmetic operators using Python \\'\\'\\'\\\\n\\\\nprint(\"Enter first number:\")\\\\nnum1=int(input())\\\\nprint(\"Enter\\\\xa0 second number:\")\\\\nnum2=int(input())\\\\nwhile num2 != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0carry= num1 & num2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0num1= num1 ^ num2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0num2=carry << 1\\\\nprint(\"Addition of two number is \",num1)\\\\xa0\\\\n'", "nl": "Add between 2 numbers without using arithmetic operators"}
{"code": "b'\\\\nd=float(input(\"Enter the Distance in Kms:\"))\\\\nt=float(input(\"Enter the Time in Hrs:\"))\\\\nspeed=d/t\\\\nprint(\"Speed is \",speed,\" (Km/Hr)\")'", "nl": "Program to calculate speed in km/hr"}
{"code": "b'\\\\nprint(\"Enter Binary number:\")\\\\nbinary=int(input())\\\\ndecimal= 0\\\\ntemp = 0\\\\nwhile (binary!=0):\\\\n\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 reminder = binary % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary = binary // 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 decimal = decimal + reminder*pow(2,temp)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp=temp+1\\\\nprint(\"Decimal number is: \",decimal)\\\\xa0\\\\n'", "nl": "Program to convert binary to decimal using while loop"}
{"code": "b'import math\\\\n# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# Calculate sum of the diagonals element\\\\n# and Calculate sum of all the element\\\\ntrace=0\\\\nsum=0\\\\nfor i in range(0, row_size):\\\\n    for j in range(0, col_size):\\\\n        if i==j:\\\\n            trace += matrix[i][j]\\\\n        sum+=matrix[i][j]\\\\nnormal=math.sqrt(sum)\\\\n\\\\n# Display the normal and trace of the matrix\\\\nprint(\"Normal Of the Matrix is: \",normal)\\\\nprint(\"Trace Of the Matrix is: \",trace)'", "nl": "Program to find the normal and trace of a matrix"}
{"code": "b'\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nsum=0.0\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 fact*=i\\\\n\\\\xa0 \\\\xa0 sum+=fact/i\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find sum of series 1!/1+2!/2+3!/3+4!/4+5!/5 ...+n!/n"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def display(self):\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in self:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in self:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n\\\\xa0\\\\n    def __len__(self):\\\\n        return len(self.vertices)\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef mst_prim(g):\\\\n    \"\"\"Return a minimum cost spanning tree of the connected graph g.\"\"\"\\\\n    mst = Graph() # create new Graph object to hold the MST\\\\n\\\\xa0\\\\n    # if graph is empty\\\\n    if not g:\\\\n        return mst\\\\n\\\\xa0\\\\n    # nearest_neighbour[v] is the nearest neighbour of v that is in the MST\\\\n    # (v is a vertex outside the MST and has at least one neighbour in the MST)\\\\n    nearest_neighbour = {}\\\\n    # smallest_distance[v] is the distance of v to its nearest neighbour in the MST\\\\n    # (v is a vertex outside the MST and has at least one neighbour in the MST)\\\\n    smallest_distance = {}\\\\n    # v is in unvisited iff v has not been added to the MST\\\\n    unvisited = set(g)\\\\n\\\\xa0\\\\n    u = next(iter(g)) # select any one vertex from g\\\\n    mst.add_vertex(u.get_key()) # add a copy of it to the MST\\\\n    unvisited.remove(u)\\\\n\\\\xa0\\\\n    # for each neighbour of vertex u\\\\n    for n in u.get_neighbours():\\\\n        if n is u:\\\\n            # avoid self-loops\\\\n            continue\\\\n        # update dictionaries\\\\n        nearest_neighbour[n] = mst.get_vertex(u.get_key())\\\\n        smallest_distance[n] = u.get_weight(n)\\\\n\\\\xa0\\\\n    # loop until smallest_distance becomes empty\\\\n    while (smallest_distance):\\\\n        # get nearest vertex outside the MST\\\\n        outside_mst = min(smallest_distance, key=smallest_distance.get)\\\\n        # get the nearest neighbour inside the MST\\\\n        inside_mst = nearest_neighbour[outside_mst]\\\\n\\\\xa0\\\\n        # add a copy of the outside vertex to the MST\\\\n        mst.add_vertex(outside_mst.get_key())\\\\n        # add the edge to the MST\\\\n        mst.add_edge(outside_mst.get_key(), inside_mst.get_key(),\\\\n                     smallest_distance[outside_mst])\\\\n        mst.add_edge(inside_mst.get_key(), outside_mst.get_key(),\\\\n                     smallest_distance[outside_mst])\\\\n\\\\xa0\\\\n        # now that outside_mst has been added to the MST, remove it from our\\\\n        # dictionaries and the set unvisited\\\\n        unvisited.remove(outside_mst)\\\\n        del smallest_distance[outside_mst]\\\\n        del nearest_neighbour[outside_mst]\\\\n\\\\xa0\\\\n        # update dictionaries\\\\n        for n in outside_mst.get_neighbours():\\\\n            if n in unvisited:\\\\n                if n not in smallest_distance:\\\\n                    smallest_distance[n] = outside_mst.get_weight(n)\\\\n                    nearest_neighbour[n] = mst.get_vertex(outside_mst.get_key())\\\\n                else:\\\\n                    if smallest_distance[n] > outside_mst.get_weight(n):\\\\n                        smallest_distance[n] = outside_mst.get_weight(n)\\\\n                        nearest_neighbour[n] = mst.get_vertex(outside_mst.get_key())\\\\n\\\\xa0\\\\n    return mst\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Undirected Graph\\')\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <src> <dest> <weight>\\')\\\\nprint(\\'mst\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            src = int(do[2])\\\\n            dest = int(do[3])\\\\n            weight = int(do[4])\\\\n            if src not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(src))\\\\n            elif dest not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(dest))\\\\n            else:\\\\n                if not g.does_edge_exist(src, dest):\\\\n                    g.add_edge(src, dest, weight)\\\\n                    g.add_edge(dest, src, weight)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'mst\\':\\\\n        mst = mst_prim(g)\\\\n        print(\\'Minimum Spanning Tree:\\')\\\\n        mst.display()\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        g.display()\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find Minimum Spanning Tree using Prim\u2019s Algorithm"}
{"code": "b'for i in range(1,101):\\\\n\\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Print numbers from 1 to 100 using for loop"}
{"code": "b\"class Tree:\\\\n    def __init__(self, data=None):\\\\n        self.key = data\\\\n        self.children = []\\\\n\\\\xa0\\\\n    def set_root(self, data):\\\\n        self.key = data\\\\n\\\\xa0\\\\n    def add(self, node):\\\\n        self.children.append(node)\\\\n\\\\xa0\\\\n    def search(self, key):\\\\n        if self.key == key:\\\\n            return self\\\\n        for child in self.children:\\\\n            temp = child.search(key)\\\\n            if temp is not None:\\\\n                return temp\\\\n        return None\\\\n\\\\xa0\\\\n    def sum_nodes(self):\\\\n        summation = self.key\\\\n        for child in self.children:\\\\n            summation = summation + child.sum_nodes()\\\\n        return summation\\\\n\\\\xa0\\\\n\\\\xa0\\\\ntree = None\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('add <data> at root')\\\\nprint('add <data> below <data>')\\\\nprint('sum')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'add':\\\\n        data = int(do[1])\\\\n        new_node = Tree(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n            tree = new_node\\\\n        elif suboperation == 'below':\\\\n            position = do[3].strip().lower()\\\\n            key = int(position)\\\\n            ref_node = None\\\\n            if tree is not None:\\\\n                ref_node = tree.search(key)\\\\n            if ref_node is None:\\\\n                print('No such key.')\\\\n                continue\\\\n            ref_node.add(new_node)\\\\n\\\\xa0\\\\n    elif operation == 'sum':\\\\n        if tree is None:\\\\n            print('Tree is empty.')\\\\n        else:\\\\n            summation = tree.sum_nodes()\\\\n            print('Sum of all nodes: {}'.format(summation))\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Find the Sum of all Nodes in a Tree"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))for out in range(row_size,0,-1):\\\\xa0 \\\\xa0 for inn in range(row_size,out,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\xa0 \\\\xa0 for p in range(out,0,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(out,end=\" \")\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Print the Full Inverted Pyramid Number Pattern"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\ni=1\\\\nsum=0.0\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 if(i%2==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum-=i/(i+1)\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum+=i/(i+1)\\\\n\\\\xa0 \\\\xa0 i+=1\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find sum of series 1/2-2/3+3/4-4/5+5/6...+N/N+1"}
{"code": "b'\\\\nnum=int(input(\"Enter a number:\"))\\\\nsum=0\\\\nwhile sum != 1 and sum != 4:\\\\n\\\\xa0 \\\\xa0 sum=0\\\\n\\\\xa0 \\\\xa0 while num!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += (rem*rem)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num //= 10\\\\n\\\\xa0 \\\\xa0 num=sum\\\\n\\\\nif sum==1:\\\\n\\\\xa0 \\\\xa0 print(\"It is a Happy Number.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is\\\\xa0 an Unhappy Number.\")'", "nl": "Check whether number is Happy Number or Not"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nprint(\"Your Enter String is:\", len(str))'", "nl": "Find the length of the string using the inbuilt function"}
{"code": "b'string=raw_input(\"Enter string:\")\\\\nstring=string.replace(\\' \\',\\'-\\')\\\\nprint(\"Modified string:\")\\\\nprint(string)'", "nl": "Python Program to Take in a String and Replace Every Blank Space with Hyphen"}
{"code": "b'a=[]\\\\nn= int(input(\"Enter the number of elements in list:\"))\\\\nfor x in range(0,n):\\\\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\\\\n    a.append(element)\\\\nb=[sum(a[0:x+1]) for x in range(0,len(a))]\\\\nprint(\"The original list is: \",a)\\\\nprint(\"The new list is: \",b)'", "nl": "Python Program to Find the Cumulative Sum of a List where the ith Element is the Sum of the First i+1 Elements From The Original List"}
{"code": "b'\\\\nbasic=float(input(\"Enter the basic salary of an employee:\"))\\\\nda = (float)(15 * basic) / 100.0\\\\nhr = (float)(10 * basic) / 100.0\\\\nda_on_ta = (float)(3 * basic) / 100.0\\\\ngross = basic + da + hr + da_on_ta\\\\nprint(\"Gross salary of an Employee= \",gross)'", "nl": "Program to enter basic salary and calculate gross salary of an employee"}
{"code": "b'def cut_rod(p, n):\\\\n    \"\"\"Take a list p of prices and the rod length n and return lists r and s.\\\\n    r[i] is the maximum revenue that you can get and s[i] is the length of the\\\\n    first piece to cut from a rod of length i.\"\"\"\\\\n    # r[i] is the maximum revenue for rod length i\\\\n    # r[i] = -1 means that r[i] has not been calculated yet\\\\n    r = [-1]*(n + 1)\\\\n    r[0] = 0\\\\n\\\\xa0\\\\n    # s[i] is the length of the initial cut needed for rod length i\\\\n    # s[0] is not needed\\\\n    s = [-1]*(n + 1)\\\\n\\\\xa0\\\\n    for i in range(1, n + 1):\\\\n        q = -1\\\\n        for j in range(1, i + 1):\\\\n            temp = p[j] + r[i - j]\\\\n            if q < temp:\\\\n                q = temp\\\\n                s[i] = j\\\\n        r[i] = q\\\\n\\\\xa0\\\\n    return r, s\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Enter the length of the rod in inches: \\'))\\\\n\\\\xa0\\\\n# p[i] is the price of a rod of length i\\\\n# p[0] is not needed, so it is set to None\\\\np = [None]\\\\nfor i in range(1, n + 1):\\\\n    price = input(\\'Enter the price of a rod of length {} in: \\'.format(i))\\\\n    p.append(int(price))\\\\n\\\\xa0\\\\nr, s = cut_rod(p, n)\\\\nprint(\\'The maximum revenue that can be obtained:\\', r[n])\\\\nprint(\\'The rod needs to be cut into length(s) of \\', end=\\'\\')\\\\nwhile n > 0:\\\\n    print(s[n], end=\\' \\')\\\\n    n -= s[n]'", "nl": "Python Program to Solve Rod Cutting Problem using Dynamic Programming with Bottom-Up Approach"}
{"code": "b'def is_palindrome(s):\\\\n    if len(s) < 1:\\\\n        return True\\\\n    else:\\\\n        if s[0] == s[-1]:\\\\n            return is_palindrome(s[1:-1])\\\\n        else:\\\\n            return False\\\\na=str(input(\"Enter string:\"))\\\\nif(is_palindrome(a)==True):\\\\n    print(\"String is a palindrome!\")\\\\nelse:\\\\n    print(\"String isn\\'t a palindrome!\")'", "nl": "Python Program to Check Whether a String is a Palindrome or not Using Recursion"}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0for i in range(1,n+1):\\\\xa0 \\\\xa0 sum+=pow(i,3)print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 1\u00b3+2\u00b3+3\u00b3+4\u00b3.....+N\u00b3"}
{"code": "b'\\\\nn=int(input(\"Enter the n Value:\"))\\\\nx=int(input(\"Enter the x value:\"))\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 fact*=i\\\\nresult=pow(x,n)/fact\\\\nprint(\"Result(x^n/n!)= \",result)\\\\n'", "nl": "Write C|Java|C++|Python Program to compute x^n/n!"}
{"code": "b'\\\\n\\\\nprint(\"Enter a HexaDecimal number:\")\\\\nhex=input()\\\\nbinary=\"\"\\\\ni=0\\\\nj=1\\\\nfor i in range(0,len(hex)):\\\\n\\\\xa0 \\\\xa0 if hex[i]==\\'F\\' :\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1111\"\\\\n\\\\xa0 \\\\xa0 elif hex[i]==\"E\":\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1110\"\\\\n\\\\xa0 \\\\xa0 elif hex[i]==\"D\":\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1101\"\\\\n\\\\xa0 \\\\xa0 elif hex[i]==\"C\":\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1100\"\\\\n\\\\xa0 \\\\xa0 elif hex[i]==\"B\":\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1011\"\\\\n\\\\xa0 \\\\xa0 elif hex[i]==\"A\":\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+\"1010\"\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 st=hex[i:i+1]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 decimal=0\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 hexnum=int(st)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 while hexnum!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 remainder=hexnum%2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 hexnum=hexnum//2\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 decimal=decimal+remainder*temp\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp=temp*10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 str1=str(decimal)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if len(str1)==3:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 str1=\"0\"+str1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if len(str1)==2:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 str1=\"00\"+str1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if len(str1)==1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 str1=\"000\"+str1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 binary=binary+str1\\\\nprint(\"HexaDecimal to Binary is\",binary)\\\\n'", "nl": "Program to Convert Hexadecimal Number to Binary"}
{"code": "b'def square(num):\\\\n    return num ** 2\\\\n\\\\nprint square(2)\\\\nprint square(3)\\\\n'", "nl": "    Write a method which can calculate square value of number\n:"}
{"code": "b'\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Happy numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 num=i\\\\n\\\\xa0 \\\\xa0 sum=0\\\\n\\\\xa0 \\\\xa0 while sum != 1 and sum != 4:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum = 0\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 while num != 0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem = num % 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += (rem * rem)\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num //= 10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num = sum\\\\n\\\\n\\\\xa0 \\\\xa0 if sum == 1:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Happy numbers present within a given range"}
{"code": "b\"class BinaryTree:\\\\n    def __init__(self, key=None):\\\\n        self.key = key\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\xa0\\\\n    def set_root(self, key):\\\\n        self.key = key\\\\n\\\\xa0\\\\n    def inorder(self):\\\\n        if self.left is not None:\\\\n            self.left.inorder()\\\\n        print(self.key, end=' ')\\\\n        if self.right is not None:\\\\n            self.right.inorder()\\\\n\\\\xa0\\\\n    def insert_left(self, new_node):\\\\n        self.left = new_node\\\\n\\\\xa0\\\\n    def insert_right(self, new_node):\\\\n        self.right = new_node\\\\n\\\\xa0\\\\n    def search(self, key):\\\\n        if self.key == key:\\\\n            return self\\\\n        if self.left is not None:\\\\n            temp =  self.left.search(key)\\\\n            if temp is not None:\\\\n                return temp\\\\n        if self.right is not None:\\\\n            temp =  self.right.search(key)\\\\n            return temp\\\\n        return None\\\\n\\\\xa0\\\\n    def print_left(self):\\\\n        if self.left is not None:\\\\n            self.left.inorder()\\\\n\\\\xa0\\\\n\\\\xa0\\\\nbtree = None\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('insert <data> at root')\\\\nprint('insert <data> left of <data>')\\\\nprint('insert <data> right of <data>')\\\\nprint('left')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        new_node = BinaryTree(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n                btree = new_node\\\\n        else:\\\\n            position = do[4].strip().lower()\\\\n            key = int(position)\\\\n            ref_node = None\\\\n            if btree is not None:\\\\n                ref_node = btree.search(key)\\\\n            if ref_node is None:\\\\n                print('No such key.')\\\\n                continue\\\\n            if suboperation == 'left':\\\\n                ref_node.insert_left(new_node)\\\\n            elif suboperation == 'right':\\\\n                ref_node.insert_right(new_node)\\\\n\\\\xa0\\\\n    elif operation == 'left':\\\\n        print('Nodes of left subtree: ', end='')\\\\n        if btree is not None:\\\\n            btree.print_left()\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Print only Nodes in Left SubTree"}
{"code": "b'\\\\narr=[]\\\\ncout=0\\\\nsum=0\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nfor j in range(0, size):\\\\n\\\\xa0 \\\\xa0 if ((j+1) % 2 == 1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum += arr[j]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 cout+=1\\\\navg = (sum / cout)\\\\nprint(\"Average of Numbers in array at odd position is \", avg)'", "nl": "Print Average of Numbers in array at Odd position  "}
{"code": "b'\\\\nset1=set([1,3,6,78,35,55])\\\\nset2=set([12,24,35,24,88,120,155])\\\\nset1 &= set2\\\\nli=list(set1)\\\\nprint li\\\\n\\\\n'", "nl": "\nWith two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.\n:"}
{"code": "b'sum=0def SumOfArray(arr,n):\\\\xa0 \\\\xa0 global sum\\\\xa0 \\\\xa0 if(n>0):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 i=n-1\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum=sum+arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 SumOfArray(arr,i)\\\\xa0 \\\\xa0 return sumarr=[]n = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,n):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Sum of Array Element is:\",SumOfArray(arr,n))'", "nl": "Sum of elements in array using recursion"}
{"code": "b'\\\\narr=[]\\\\nsize = int(input(\"Enter the size of the array: \"))\\\\nprint(\"Enter the Element of the array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = float(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\nsum_pos=0.0\\\\nsum_neg=0.0\\\\nfor j in range(0,size):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if (arr[j] > 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum_pos += arr[j]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum_neg += arr[j]\\\\nprint(\"sum of positive number : \",sum_pos)\\\\nprint(\"sum of Negative number : \",sum_neg)'", "nl": "Find the sum of negative and positive numbers in array"}
{"code": "b'\\\\xa0\\\\nn = int(input(\"Enter any number: \"))\\\\nsum1 = 0\\\\nfor i in range(1, n):\\\\n    if(n % i == 0):\\\\n        sum1 = sum1 + i\\\\nif (sum1 == n):\\\\n    print(\"The number is a Perfect number!\")\\\\nelse:\\\\n    print(\"The number is not a Perfect number!\")'", "nl": "Python Program to Check if a Number is a Perfect Number"}
{"code": "b'def is_power_of_two(n):\\\\n    \"\"\"Return True if n is a power of two.\"\"\"\\\\n    if n <= 0:\\\\n        return False\\\\n    else:\\\\n        return n & (n - 1) == 0\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Enter a number: \\'))\\\\n\\\\xa0\\\\nif is_power_of_two(n):\\\\n    print(\\'{} is a power of two.\\'.format(n))\\\\nelse:\\\\n    print(\\'{} is not a power of two.\\'.format(n))'", "nl": "Python Program to Find Whether a Number is a Power of Two"}
{"code": "b'def select(alist, start, end, i):\\\\n    \"\"\"Find ith smallest element in alist[start... end-1].\"\"\"\\\\n    if end - start <= 1:\\\\n        return alist[start]\\\\n    pivot = partition(alist, start, end)\\\\n\\\\xa0\\\\n    # number of elements in alist[start... pivot]\\\\n    k = pivot - start + 1\\\\n\\\\xa0\\\\n    if i < k:\\\\n        return select(alist, start, pivot, i)\\\\n    elif i > k:\\\\n        return select(alist, pivot + 1, end, i - k)\\\\n\\\\xa0\\\\n    return alist[pivot]\\\\n\\\\xa0\\\\ndef partition(alist, start, end):\\\\n    pivot = alist[start]\\\\n    i = start + 1\\\\n    j = end - 1\\\\n\\\\xa0\\\\n    while True:\\\\n        while (i <= j and alist[i] <= pivot):\\\\n            i = i + 1\\\\n        while (i <= j and alist[j] >= pivot):\\\\n            j = j - 1\\\\n\\\\xa0\\\\n        if i <= j:\\\\n            alist[i], alist[j] = alist[j], alist[i]\\\\n        else:\\\\n            alist[start], alist[j] = alist[j], alist[start]\\\\n            return j\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input(\\'Enter the list of numbers: \\')\\\\nalist = alist.split()\\\\nalist = [int(x) for x in alist]\\\\ni = int(input(\\'The ith smallest element will be found. Enter i: \\'))\\\\n\\\\xa0\\\\nith_smallest_item = select(alist, 0, len(alist), i)\\\\nprint(\\'Result: {}.\\'.format(ith_smallest_item))'", "nl": "Python Program to Select the ith Smallest Element from a List in Expected Linear Time"}
{"code": "b'print(\"Printing A-Z using ASCII\")\\\\nfor i in range(65,90+1):\\\\n\\\\xa0 \\\\xa0 print(chr(i),end=\" \")'", "nl": "Program to print all alphabets from A to Z using loop"}
{"code": "b'\\\\n\\\\nprint(\"Enter the range of number:\")\\\\n\\\\nn=int(input())\\\\nsum=0\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 sum+=i\\\\n\\\\xa0 \\\\xa0 i+=2\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find the sum of series 1+3+5+7..+N"}
{"code": "b'str=input(\"Enter Your String:\")min=999arr=[0]*256for i in range(len(str)):\\\\xa0 \\\\xa0 if str[i]==\\' \\':\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 continue\\\\xa0 \\\\xa0 num=ord(str[i])\\\\xa0 \\\\xa0 arr[num]+=1ch=\\' \\'for i in range(len(str)):\\\\xa0 \\\\xa0 if arr[ord(str[i])] != 0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if arr[ord(str[i])] <= min:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 min = arr[ord(str[i])]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch=str[i]print(\"The Minimum occurring character in a string is \",ch)'", "nl": "Find the Minimum occurring character in given string"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nmatrix1=[]\\\\n# Taking input of the 2nd matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix1.append([int(j) for j in input().split()])\\\\n\\\\n# Compute Subtraction of two matrices\\\\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\\\\n\\\\n# display the Subtraction of two matrices\\\\nprint(\"Subtraction of the two Matrices is:\")\\\\nfor m in sub_matrix:\\\\n    print(m)'", "nl": "Program to Find subtraction of two matrices"}
{"code": "b'Solution\\\\ndef printTuple():\\\\n\\\\tli=list()\\\\n\\\\tfor i in range(1,21):\\\\n\\\\t\\\\tli.append(i**2)\\\\n\\\\tprint tuple(li)\\\\n\\\\t\\\\t\\\\nprintTuple()\\\\n\\\\n\\\\n\\\\n'", "nl": "Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). \n:"}
{"code": "b'class sub:  \\\\n    def f1(self, s1):  \\\\n        return self.f2([], sorted(s1))  \\\\n\\\\xa0\\\\n    def f2(self, curr, s1):  \\\\n        if s1:  \\\\n            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  \\\\n        return [curr]  \\\\na=[]\\\\nn=int(input(\"Enter number of elements of list: \"))\\\\nfor i in range(0,n):\\\\n    b=int(input(\"Enter element: \"))\\\\n    a.append(b)\\\\nprint(\"Subsets: \")\\\\nprint(sub().f1(a))'", "nl": "Python Program to Create a Class and Get All Possible Subsets from a Set of Distinct Integers"}
{"code": "b'from math import factorial\\\\n\\\\xa0\\\\ndef print_permutations_lexicographic_order(s):\\\\n    \"\"\"Print all permutations of string s in lexicographic order.\"\"\"\\\\n    seq = list(s)\\\\n    for _ in range(factorial(len(seq))):\\\\n        print(\\'\\'.join(seq))\\\\n        nxt = get_next_permutation(seq)\\\\n        # if seq is the highest permutation\\\\n        if nxt is None:\\\\n            # then reverse it\\\\n            seq.reverse()\\\\n        else:\\\\n            seq = nxt\\\\n\\\\xa0\\\\ndef get_next_permutation(seq):\\\\n    \"\"\"Return next greater lexicographic permutation. Return None if cannot.\\\\n\\\\xa0\\\\n    This will return the next greater permutation of seq in lexicographic\\\\n    order. If seq is the highest permutation then this will return None.\\\\n\\\\xa0\\\\n    seq is a list.\\\\n    \"\"\"\\\\n    if len(seq) == 0:\\\\n        return None\\\\n\\\\xa0\\\\n    nxt = get_next_permutation(seq[1:])\\\\n\\\\xa0\\\\n    # if seq[1:] is the highest permutation\\\\n    if nxt is None:\\\\n        # reverse seq[1:], so that seq[1:] now is in ascending order\\\\n        seq[1:] = reversed(seq[1:])\\\\n\\\\xa0\\\\n        # find q such that seq[q] is the smallest element in seq[1:] such that\\\\n        # seq[q] > seq[0]\\\\n        q = 1\\\\n        while q < len(seq) and seq[0] > seq[q]:\\\\n            q += 1\\\\n\\\\xa0\\\\n        # if cannot find q, then seq is the highest permutation\\\\n        if q == len(seq):\\\\n            return None\\\\n\\\\xa0\\\\n        # swap seq[0] and seq[q]\\\\n        seq[0], seq[q] = seq[q], seq[0]\\\\n\\\\xa0\\\\n        return seq\\\\n    else:\\\\n        return [seq[0]] + nxt\\\\n\\\\xa0\\\\n\\\\xa0\\\\ns = input(\\'Enter the string: \\')\\\\nprint_permutations_lexicographic_order(s)'", "nl": "Python Program to Print All Permutations of a String in Lexicographic Order using Recursion"}
{"code": "b'def remove(string, n):  \\\\n      first = string[:n]   \\\\n      last = string[n+1:]  \\\\n      return first + last\\\\nstring=raw_input(\"Enter the sring:\")\\\\nn=int(input(\"Enter the index of the character to remove:\"))\\\\nprint(\"Modified string:\")\\\\nprint(remove(string, n))'", "nl": "Python Program to Remove the nth Index Character from a Non-Empty String"}
{"code": "b'\\\\n\\\\n\\'\\'\\'Write a Python\\\\nprogram\\\\xa0to\\\\xa0find the nth prime number. or\\\\xa0Write a\\\\nprogram\\\\xa0to\\\\xa0find the nth prime number using Python \\'\\'\\'\\\\n\\\\n\\\\nprint(\"Enter Nth Number:\")\\\\nrangenumber=int(input())\\\\nc = 0\\\\nnum = 2\\\\nletest = 0\\\\n\\\\nwhile (c != rangenumber):\\\\n\\\\xa0 \\\\xa0count = 0\\\\n\\\\xa0 \\\\xa0for i in range(2,num):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 if (num % i == 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0count+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0break\\\\n\\\\xa0 \\\\xa0if (count == 0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\xa0 \\\\xa0num = num + 1\\\\nprint (rangenumber,\"th prime number is \",letest)\\\\n'", "nl": "Write a Program to Find the nth Prime Number"}
{"code": "b'str=input(\"Enter Your String:\")ch=input(\"Enter the Character:\")sub_str=str.split(\" \")print(\"All the words ending with \",ch,\" are:\")for inn in range(0,len(sub_str)):\\\\xa0 \\\\xa0 if sub_str[inn].endswith(ch):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(sub_str[inn],end=\" \")'", "nl": "Find words ending with given characters(suffix)"}
{"code": "b'def linear_search(alist, key):\\\\n    \"\"\"Return index of key in alist. Return -1 if key not present.\"\"\"\\\\n    for i in range(len(alist)):\\\\n        if alist[i] == key:\\\\n            return i\\\\n    return -1\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input(\\'Enter the list of numbers: \\')\\\\nalist = alist.split()\\\\nalist = [int(x) for x in alist]\\\\nkey = int(input(\\'The number to search for: \\'))\\\\n\\\\xa0\\\\nindex = linear_search(alist, key)\\\\nif index < 0:\\\\n    print(\\'{} was not found.\\'.format(key))\\\\nelse:\\\\n    print(\\'{} was found at index {}.\\'.format(key, index))'", "nl": "Python Program to Implement Linear Search"}
{"code": "b'class QueenChessBoard:\\\\n    def __init__(self, size):\\\\n        # board has dimensions size x size\\\\n        self.size = size\\\\n        # columns[r] is a number c if a queen is placed at row r and column c.\\\\n        # columns[r] is out of range if no queen is place in row r.\\\\n        # Thus after all queens are placed, they will be at positions\\\\n        # (columns[0], 0), (columns[1], 1), ... (columns[size - 1], size - 1)\\\\n        self.columns = []\\\\n\\\\xa0\\\\n    def get_size(self):\\\\n        return self.size\\\\n\\\\xa0\\\\n    def get_queens_count(self):\\\\n        return len(self.columns)\\\\n\\\\xa0\\\\n    def place_in_next_row(self, column):\\\\n        self.columns.append(column)\\\\n\\\\xa0\\\\n    def remove_in_current_row(self):\\\\n        return self.columns.pop()\\\\n\\\\xa0\\\\n    def is_this_column_safe_in_next_row(self, column):\\\\n        # index of next row\\\\n        row = len(self.columns)\\\\n\\\\xa0\\\\n        # check column\\\\n        for queen_column in self.columns:\\\\n            if column == queen_column:\\\\n                return False\\\\n\\\\xa0\\\\n        # check diagonal\\\\n        for queen_row, queen_column in enumerate(self.columns):\\\\n            if queen_column - queen_row == column - row:\\\\n                return False\\\\n\\\\xa0\\\\n        # check other diagonal\\\\n        for queen_row, queen_column in enumerate(self.columns):\\\\n            if ((self.size - queen_column) - queen_row\\\\n                == (self.size - column) - row):\\\\n                return False\\\\n\\\\xa0\\\\n        return True\\\\n\\\\xa0\\\\n    def display(self):\\\\n        for row in range(self.size):\\\\n            for column in range(self.size):\\\\n                if column == self.columns[row]:\\\\n                    print(\\'Q\\', end=\\' \\')\\\\n                else:\\\\n                    print(\\'.\\', end=\\' \\')\\\\n            print()\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef print_all_solutions_to_n_queen(size):\\\\n    \"\"\"Display a chessboard for each possible configuration of placing n queens\\\\n    on an n x n chessboard where n = size and print the number of such\\\\n    configurations.\"\"\"\\\\n    board = QueenChessBoard(size)\\\\n    number_of_solutions = print_all_solutions_helper(board)\\\\n    print(\\'Number of solutions:\\', number_of_solutions)\\\\n\\\\xa0\\\\ndef print_all_solutions_helper(board):\\\\n    \"\"\"Display a chessboard for each possible configuration of filling the given\\\\n    board with queens and return the number of such configurations.\"\"\"\\\\n    size = board.get_size()\\\\n\\\\xa0\\\\n    # if board is full, display solution\\\\n    if size == board.get_queens_count():\\\\n        board.display()\\\\n        print()\\\\n        return 1\\\\n\\\\xa0\\\\n    number_of_solutions = 0\\\\n    # place queen in next row\\\\n    for column in range(size):\\\\n        if board.is_this_column_safe_in_next_row(column):\\\\n            board.place_in_next_row(column)\\\\n            number_of_solutions += print_all_solutions_helper(board)\\\\n            board.remove_in_current_row()\\\\n\\\\xa0\\\\n    return number_of_solutions\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Enter n: \\'))\\\\nprint_all_solutions_to_n_queen(n)'", "nl": "Python Program to Solve n-Queen Problem with Recursion"}
{"code": "b'a=[]\\\\nn= int(input(\"Enter the number of elements in list:\"))\\\\nfor x in range(0,n):\\\\n    element=int(input(\"Enter element\" + str(x+1) + \":\"))\\\\n    a.append(element)\\\\ntemp=a[0]\\\\na[0]=a[n-1]\\\\na[n-1]=temp\\\\nprint(\"New list is:\")\\\\nprint(a)'", "nl": "Python Program to Swap the First and Last Value of a List"}
{"code": "b'\\\\nprint(\"Enter the row and column size:\")\\\\nrow_size=input()\\\\nfor out in range(ord(\\'A\\'),ord(row_size)+1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(\\'A\\'),ord(row_size)+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(out),end=\"\")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")\\\\n'", "nl": "Write a program to print the alphabet pattern"}
{"code": "b'print(\"Enter a Decimal Number: \")\\\\ndecimal=int(input())\\\\nbinary = 0\\\\ntemp = 1\\\\nwhile (decimal != 0):\\\\n\\\\xa0 \\\\xa0 reminder = decimal % 2\\\\n\\\\xa0 \\\\xa0 decimal = decimal // 2\\\\n\\\\xa0 \\\\xa0 binary =int (binary + (reminder * temp))\\\\n\\\\xa0 \\\\xa0 temp =int( temp * 10)\\\\n\\\\nprint(\"The Binary Number is: \",binary)\\\\n\\\\n'", "nl": "Program to convert a decimal number to Binary"}
{"code": "b'def SumOfDigits(num):\\\\xa0 \\\\xa0 if num==0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return 0\\\\xa0 \\\\xa0 else:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return ((num%10) +SumOfDigits(num//10))num=int(input(\"Enter the Number:\"))print(\"Sum of digits of given Number Using Recursion is:\",SumOfDigits(num))'", "nl": "Find the sum of digits of a number using recursion"}
{"code": "b'str=input(\"Enter Your String:\")count=0for inn in range(0,len(str)):\\\\xa0 \\\\xa0 if str[inn] >= \\'0\\' and\\\\xa0 str[inn] <= \\'9\\':\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1if count>=1:\\\\xa0 \\\\xa0 print(\"String contains at least one digits.\")else:\\\\xa0 \\\\xa0 print(\"String does not contains at least one digits.\")'", "nl": "Check if a string contains at least one Number"}
{"code": "b'Solution\\\\ndef printDict():\\\\n\\\\td=dict()\\\\n\\\\tfor i in range(1,21):\\\\n\\\\t\\\\td[i]=i**2\\\\n\\\\tfor (k,v) in d.items():\\\\t\\\\n\\\\t\\\\tprint v\\\\n\\\\t\\\\t\\\\n\\\\nprintDict()\\\\n\\\\n'", "nl": "Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\n:"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\ni=1\\\\nse=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 if(i%2==0):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(se,end=\" \")\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(-1*se, end=\" \")\\\\n\\\\xa0 \\\\xa0 se+=3\\\\n\\\\xa0 \\\\xa0 i+=1'", "nl": "Program to print series -1 4 -7 10 -13 16 -19...n"}
{"code": "b'def fibonacci(n):\\\\n    \"\"\"Return the nth Fibonacci number.\"\"\"\\\\n    if n == 0:\\\\n        return 0\\\\n\\\\xa0\\\\n    # r[i] will contain the ith Fibonacci number\\\\n    r = [-1]*(n + 1)\\\\n    r[0] = 0\\\\n    r[1] = 1\\\\n\\\\xa0\\\\n    for i in range(2, n + 1):\\\\n        r[i] = r[i - 1] + r[i - 2]\\\\n\\\\xa0\\\\n    return r[n]\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Enter n: \\'))\\\\n\\\\xa0\\\\nans = fibonacci(n)\\\\nprint(\\'The nth Fibonacci number:\\', ans)'", "nl": "Python Program to Print nth Fibonacci Number using Dynamic Programming with Bottom-Up Approach"}
{"code": "b'\\\\nstr=input(\"Enter the String:\")\\\\nch=\\' \\'\\\\nfor i in range(len(str)):\\\\n\\\\xa0 \\\\xa0 if str[i] >= \\'a\\' and str[i] <= \\'z\\':\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch = str[i]\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 break\\\\n\\\\xa0 \\\\xa0 else:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 continue\\\\nprint(\"First small letter in a given String is: \", ch)'", "nl": "Find the First small Letter in a given String"}
{"code": "b'\\\\n\\\\nimport math\\\\nprint(\"Enter the length of the side:\")\\\\na=int(input())\\\\narea=(2*(1+math.sqrt(2))*math.pow(a,2))\\\\nperimeter=(8*a)\\\\nprint(\"Area of the Octagon = \",area)\\\\nprint(\"Perimeter of the Octagon = \",perimeter)\\\\n'", "nl": "Program to compute the area and perimeter of Octagon"}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter number:\"))\\\\ntemp=n\\\\nrev=0\\\\nwhile(n>0):\\\\n    dig=n%10\\\\n    rev=rev*10+dig\\\\n    n=n//10\\\\nif(temp==rev):\\\\n    print(\"The number is a palindrome!\")\\\\nelse:\\\\n    print(\"The number isn\\'t a palindrome!\")'", "nl": "Python Program to Check if a Number is a Palindrome"}
{"code": "b'def MultiplicationTable(num, i):\\\\xa0 \\\\xa0 print(num,\" X \",i,\" = \",num * i)\\\\xa0 \\\\xa0 if (i < 10):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 MultiplicationTable(num, i + 1)num=int(input(\"Enter a number:\"))print(\"Multiplication Table of \",num,\" is:\")MultiplicationTable(num, 1)'", "nl": "Print multiplication table using recursion"}
{"code": "b'string=raw_input(\"Enter string:\")\\\\ncount=0\\\\nfor i in string:\\\\n      count=count+1\\\\nnew=string[0:2]+string[count-2:count]\\\\nprint(\"Newly formed string is:\")\\\\nprint(new)'", "nl": "Python Program to Form a New String Made of the First 2 and Last 2 characters From a Given String"}
{"code": "b'\\\\n\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nprint(\"Enter the value of x:\");\\\\nx=int(input())\\\\nsum=0\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 sum+=pow(x,i)\\\\n\\\\xa0 \\\\xa0 i+=2print(\"The sum of the series = \",sum)'", "nl": "Program to find the sum of series 1+X+X^3...+X^N"}
{"code": "b'\\\\nprint(\"Enter the First Number:\")\\\\nfirst_num=int(input())\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\nprint(\"Enter the Difference Between two Number:\")\\\\ndiff=int(input())\\\\nwhile(first_num<=n):\\\\n\\\\xa0 \\\\xa0 \\\\xa0print(first_num,end=\" \")\\\\n\\\\xa0 \\\\xa0 \\\\xa0first_num+=diff'", "nl": "Program to print Arithmetic series 1 4 7 10...N"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# check Diagonal elements are 1 and rest elements are 0\\\\npoint=0\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        # check for diagonals element\\\\n        if i == j and matrix[i][j] != 1:\\\\n            point=1\\\\n            break\\\\n        #check for rest elements\\\\n        elif i!=j and matrix[i][j]!=0:\\\\n            point=1\\\\n            break\\\\n\\\\nif point==1:\\\\n    print(\"Given Matrix is not an identity matrix.\")\\\\nelse:\\\\n    print(\"Given Matrix is an identity matrix.\")'", "nl": "Check whether a given matrix is an identity matrix or not"}
{"code": "b'\\\\nch=input(\"Enter a character:\")\\\\nascii=ord(ch) #ord is used for returning the ASCII value a character, ord stands for ordinal\\\\nprint(\"The ASCII value is\",ascii)'", "nl": "Program to print ascii value of a character"}
{"code": "b'def Subtraction(num1,num2):\\\\xa0 \\\\xa0 if num2==0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return num1\\\\xa0 \\\\xa0 return Subtraction(num1-1, num2-1)print(\"Enter the two Number:\")num1=int(input())num2=int(input())print(\"Subtraction of Two Number Using Recursion is: \",Subtraction(num1,num2))'", "nl": "Find subtraction of two numbers using recursion"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the 1st matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\nmatrix1=[]\\\\n# Taking input of the 2nd matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix1.append([int(j) for j in input().split()])\\\\n\\\\n# Compute Subtraction of two matrices\\\\nsub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]\\\\n\\\\n# display the Subtraction of two matrices\\\\nprint(\"Subtraction of the two Matrices is:\")\\\\nfor m in sub_matrix:\\\\n    print(m)'", "nl": "Program to Find subtraction of two matrices"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def add_undirected_edge(self, v1_key, v2_key, weight=1):\\\\n        \"\"\"Add undirected edge (2 directed edges) between v1_key and v2_key with\\\\n        given weight.\"\"\"\\\\n        self.add_edge(v1_key, v2_key, weight)\\\\n        self.add_edge(v2_key, v1_key, weight)\\\\n\\\\xa0\\\\n    def does_undirected_edge_exist(self, v1_key, v2_key):\\\\n        \"\"\"Return True if there is an undirected edge between v1_key and v2_key.\"\"\"\\\\n        return (self.does_edge_exist(v1_key, v2_key)\\\\n                and self.does_edge_exist(v1_key, v2_key))\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Queue:\\\\n    def __init__(self):\\\\n        self.items = []\\\\n\\\\xa0\\\\n    def is_empty(self):\\\\n        return self.items == []\\\\n\\\\xa0\\\\n    def enqueue(self, data):\\\\n        self.items.append(data)\\\\n\\\\xa0\\\\n    def dequeue(self):\\\\n        return self.items.pop(0)\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef is_bipartite(vertex, visited):\\\\n    \"\"\"Return True if component containing vertex is bipartite and put all\\\\n    vertices in its component in set visited.\"\"\"\\\\n    colour = {vertex: 0}\\\\n    visited.add(vertex)\\\\n    q = Queue()\\\\n    q.enqueue(vertex)\\\\n    while not q.is_empty():\\\\n        current = q.dequeue()\\\\n\\\\xa0\\\\n        next_colour = 1 - colour[current] # switch colour\\\\n        for dest in current.get_neighbours():\\\\n            if dest not in visited:\\\\n                visited.add(dest)\\\\n                colour[dest] = next_colour\\\\n                q.enqueue(dest)\\\\n            else:\\\\n                if colour[dest] != next_colour:\\\\n                    return False\\\\n    return True\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Undirected Graph\\')\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <vertex1> <vertex2>\\')\\\\nprint(\\'bipartite\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            v1 = int(do[2])\\\\n            v2 = int(do[3])\\\\n            if v1 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v1))\\\\n            elif v2 not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(v2))\\\\n            else:\\\\n                if not g.does_undirected_edge_exist(v1, v2):\\\\n                    g.add_undirected_edge(v1, v2)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'bipartite\\':\\\\n        bipartite = True\\\\n        visited = set()\\\\n        for v in g:\\\\n            if v not in visited:\\\\n                if not is_bipartite(v, visited):\\\\n                    bipartite = False\\\\n                    break\\\\n\\\\xa0\\\\n        if bipartite:\\\\n            print(\\'Graph is bipartite.\\')\\\\n        else:\\\\n            print(\\'Graph is not bipartite.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in g:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in g:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find if Undirected Graph is Bipartite using BFS"}
{"code": "b'\\\\nprint(\"Enter the range of number(Limit):\")\\\\nn=int(input())\\\\ni=1\\\\nsum=0.0\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 sum+=1/i\\\\n\\\\xa0 \\\\xa0 i+=2\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find sum of series 1+1/3+1/5+1/7+.....1/(N+2)"}
{"code": "b'values = raw_input()\\\\nnumbers = [x for x in values.split(\",\") if int(x)%2!=0]\\\\nprint \",\".join(numbers)\\\\n'", "nl": "Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers."}
{"code": "b'a=[]\\\\nn=int(input(\"Enter number of elements:\"))\\\\nfor i in range(1,n+1):\\\\n    b=int(input(\"Enter element:\"))\\\\n    a.append(b)\\\\na.sort()\\\\nprint(\"Second largest element is:\",a[n-2])'", "nl": "Python Program to Find the Second Largest Number in a List"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)First_element=arr[0]Second_element=arr[1]Max_Product=First_element*Second_elementfor i in range(0,size-1):\\\\xa0 \\\\xa0 for j in range(i+1, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 product = arr[i] * arr[j]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if abs(product) >= abs(Max_Product):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 Max_Product =product\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 First_element = arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 Second_element = arr[j]print(\"Pair of Maximum Product is (\",First_element,\",\",Second_element,\")\")print(\"\\\\\\\\nMaximum Product of 2 numbers is \",Max_Product)'", "nl": "Find a pair with maximum product in array"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n\\\\n#Display Upper triangular matrix\\\\nprint(\"Upper Triangular Matrix is:\")\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i>j:\\\\n            print(\"0 \",end=\"\")\\\\n        else:\\\\n            print(matrix[i][j],end=\" \")\\\\n    print()'", "nl": "Program to display an upper triangular matrix"}
{"code": "b'class Graph:\\\\n    def __init__(self):\\\\n        # dictionary containing keys that map to the corresponding vertex object\\\\n        self.vertices = {}\\\\n\\\\xa0\\\\n    def add_vertex(self, key):\\\\n        \"\"\"Add a vertex with the given key to the graph.\"\"\"\\\\n        vertex = Vertex(key)\\\\n        self.vertices[key] = vertex\\\\n\\\\xa0\\\\n    def get_vertex(self, key):\\\\n        \"\"\"Return vertex object with the corresponding key.\"\"\"\\\\n        return self.vertices[key]\\\\n\\\\xa0\\\\n    def __contains__(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def add_edge(self, src_key, dest_key, weight=1):\\\\n        \"\"\"Add edge from src_key to dest_key with given weight.\"\"\"\\\\n        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\\\\n\\\\xa0\\\\n    def does_vertex_exist(self, key):\\\\n        return key in self.vertices\\\\n\\\\xa0\\\\n    def does_edge_exist(self, src_key, dest_key):\\\\n        \"\"\"Return True if there is an edge from src_key to dest_key.\"\"\"\\\\n        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\\\\n\\\\xa0\\\\n    def display(self):\\\\n        print(\\'Vertices: \\', end=\\'\\')\\\\n        for v in self:\\\\n            print(v.get_key(), end=\\' \\')\\\\n        print()\\\\n\\\\xa0\\\\n        print(\\'Edges: \\')\\\\n        for v in self:\\\\n            for dest in v.get_neighbours():\\\\n                w = v.get_weight(dest)\\\\n                print(\\'(src={}, dest={}, weight={}) \\'.format(v.get_key(),\\\\n                                                             dest.get_key(), w))\\\\n\\\\xa0\\\\n    def __len__(self):\\\\n        return len(self.vertices)\\\\n\\\\xa0\\\\n    def __iter__(self):\\\\n        return iter(self.vertices.values())\\\\n\\\\xa0\\\\n\\\\xa0\\\\nclass Vertex:\\\\n    def __init__(self, key):\\\\n        self.key = key\\\\n        self.points_to = {}\\\\n\\\\xa0\\\\n    def get_key(self):\\\\n        \"\"\"Return key corresponding to this vertex object.\"\"\"\\\\n        return self.key\\\\n\\\\xa0\\\\n    def add_neighbour(self, dest, weight):\\\\n        \"\"\"Make this vertex point to dest with given edge weight.\"\"\"\\\\n        self.points_to[dest] = weight\\\\n\\\\xa0\\\\n    def get_neighbours(self):\\\\n        \"\"\"Return all vertices pointed to by this vertex.\"\"\"\\\\n        return self.points_to.keys()\\\\n\\\\xa0\\\\n    def get_weight(self, dest):\\\\n        \"\"\"Get weight of edge from this vertex to dest.\"\"\"\\\\n        return self.points_to[dest]\\\\n\\\\xa0\\\\n    def does_it_point_to(self, dest):\\\\n        \"\"\"Return True if this vertex points to dest.\"\"\"\\\\n        return dest in self.points_to\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef mst_krusal(g):\\\\n    \"\"\"Return a minimum cost spanning tree of the connected graph g.\"\"\"\\\\n    mst = Graph() # create new Graph object to hold the MST\\\\n\\\\xa0\\\\n    if len(g) == 1:\\\\n        u = next(iter(g)) # get the single vertex\\\\n        mst.add_vertex(u.get_key()) # add a copy of it to mst\\\\n        return mst\\\\n\\\\xa0\\\\n    # get all the edges in a list\\\\n    edges = []\\\\n    for v in g:\\\\n        for n in v.get_neighbours():\\\\n            # avoid adding two edges for each edge of the undirected graph\\\\n            if v.get_key() < n.get_key():\\\\n                edges.append((v, n))\\\\n\\\\xa0\\\\n    # sort edges\\\\n    edges.sort(key=lambda edge: edge[0].get_weight(edge[1]))\\\\n\\\\xa0\\\\n    # initially, each vertex is in its own component\\\\n    component = {}\\\\n    for i, v in enumerate(g):\\\\n        component[v] = i\\\\n\\\\xa0\\\\n    # next edge to try\\\\n    edge_index = 0\\\\n\\\\xa0\\\\n    # loop until mst has the same number of vertices as g\\\\n    while len(mst) < len(g):\\\\n        u, v = edges[edge_index]\\\\n        edge_index += 1\\\\n\\\\xa0\\\\n        # if adding edge (u, v) will not form a cycle\\\\n        if component[u] != component[v]:\\\\n\\\\xa0\\\\n            # add to mst\\\\n            if not mst.does_vertex_exist(u.get_key()):\\\\n                mst.add_vertex(u.get_key())\\\\n            if not mst.does_vertex_exist(v.get_key()):\\\\n                mst.add_vertex(v.get_key())\\\\n            mst.add_edge(u.get_key(), v.get_key(), u.get_weight(v))\\\\n            mst.add_edge(v.get_key(), u.get_key(), u.get_weight(v))\\\\n\\\\xa0\\\\n            # merge components of u and v\\\\n            for w in g:\\\\n                if component[w] == component[v]:\\\\n                    component[w] = component[u]\\\\n\\\\xa0\\\\n    return mst\\\\n\\\\xa0\\\\n\\\\xa0\\\\ng = Graph()\\\\nprint(\\'Undirected Graph\\')\\\\nprint(\\'Menu\\')\\\\nprint(\\'add vertex <key>\\')\\\\nprint(\\'add edge <src> <dest> <weight>\\')\\\\nprint(\\'mst\\')\\\\nprint(\\'display\\')\\\\nprint(\\'quit\\')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input(\\'What would you like to do? \\').split()\\\\n\\\\xa0\\\\n    operation = do[0]\\\\n    if operation == \\'add\\':\\\\n        suboperation = do[1]\\\\n        if suboperation == \\'vertex\\':\\\\n            key = int(do[2])\\\\n            if key not in g:\\\\n                g.add_vertex(key)\\\\n            else:\\\\n                print(\\'Vertex already exists.\\')\\\\n        elif suboperation == \\'edge\\':\\\\n            src = int(do[2])\\\\n            dest = int(do[3])\\\\n            weight = int(do[4])\\\\n            if src not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(src))\\\\n            elif dest not in g:\\\\n                print(\\'Vertex {} does not exist.\\'.format(dest))\\\\n            else:\\\\n                if not g.does_edge_exist(src, dest):\\\\n                    g.add_edge(src, dest, weight)\\\\n                    g.add_edge(dest, src, weight)\\\\n                else:\\\\n                    print(\\'Edge already exists.\\')\\\\n\\\\xa0\\\\n    elif operation == \\'mst\\':\\\\n        mst = mst_krusal(g)\\\\n        print(\\'Minimum Spanning Tree:\\')\\\\n        mst.display()\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'display\\':\\\\n        g.display()\\\\n        print()\\\\n\\\\xa0\\\\n    elif operation == \\'quit\\':\\\\n        break'", "nl": "Python Program to Find Minimum Spanning Tree using Krusal\u2019s Algorithm"}
{"code": "b'\\\\nnum=int(input(\"Enter a number:\"))\\\\nnum1=num\\\\n#Sum of digit\\\\nsum=0\\\\nwhile num1!=0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 rem=num1%10\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 sum+=rem\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num1//=10\\\\n#Reverse of sum\\\\nrev=0\\\\nnum2=sum\\\\nwhile num2!=0:\\\\n\\\\xa0 \\\\xa0 rem2=num2%10\\\\n\\\\xa0 \\\\xa0 rev=rev*10+rem2\\\\n\\\\xa0 \\\\xa0 num2//=10\\\\n\\\\nif sum*rev==num:\\\\n\\\\xa0 \\\\xa0print(\"It is a Magic Number.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0print(\"It is not a Magic Number.\")'", "nl": "Check whether number is Magic Number or Not."}
{"code": "b'n=int(input(\"Enter the range of number:\"))sum=0for i in range(2,n+2):\\\\xa0 \\\\xa0 sum+=1+(i*(i-1))print(\"The sum of the series = \",sum)'", "nl": "Program to Find the sum of series 3+7+13+21.....+N"}
{"code": "b'def eliminate_non_celebrities(matrix):\\\\n    \"\"\"Take an n x n matrix that has m[i][j] = True iff i knows j and return\\\\n    person who is maybe a celebrity.\"\"\"\\\\n    possible_celeb = 0\\\\n    n = len(matrix)\\\\n    for p in range(1, n):\\\\n        if (matrix[possible_celeb][p]\\\\n            or not matrix[p][possible_celeb]):\\\\n            possible_celeb = p\\\\n    return possible_celeb\\\\n\\\\xa0\\\\n\\\\xa0\\\\ndef check_if_celebrity(possible_celeb, matrix):\\\\n    \"\"\"Take an n x n matrix that has m[i][j] = True iff i knows j and return\\\\n    True if possible_celeb is a celebrity.\"\"\"\\\\n    for i in range(n):\\\\n        if matrix[possible_celeb][i] is True:\\\\n            return False\\\\n\\\\xa0\\\\n    for i in range(n):\\\\n        if matrix[i][possible_celeb] is False:\\\\n            if i != possible_celeb:\\\\n                return False\\\\n\\\\xa0\\\\n    return True\\\\n\\\\xa0\\\\n\\\\xa0\\\\nn = int(input(\\'Number of people: \\'))\\\\n\\\\xa0\\\\n# create n x n matrix initialized to False that has m[i][j] = True iff i knows j\\\\nm = [[False]*n for _ in range(n)]\\\\n\\\\xa0\\\\nfor i in range(n):\\\\n    people = input(\\'Enter list of people known to {}: \\'.format(i)).split()\\\\n    for p in people:\\\\n        p = int(p)\\\\n        m[i][p] = True\\\\n\\\\xa0\\\\npossible_celeb = eliminate_non_celebrities(m)\\\\n\\\\xa0\\\\nif check_if_celebrity(possible_celeb, m):\\\\n    print(\\'{} is the celebrity.\\'.format(possible_celeb))\\\\nelse:\\\\n    print(\\'There is no celebrity.\\')'", "nl": "Python Program to Solve the Celebrity Problem"}
{"code": "b'n=int(input(\"Enter a number: \"))\\\\nsum1 = 0\\\\nwhile(n > 0):\\\\n    sum1=sum1+n\\\\n    n=n-1\\\\nprint(\"The sum of first n natural numbers is\",sum1)'", "nl": "Python Program to Find the Sum of First N Natural Numbers"}
{"code": "b\"def selection_sort(alist):\\\\n    for i in range(0, len(alist) - 1):\\\\n        smallest = i\\\\n        for j in range(i + 1, len(alist)):\\\\n            if alist[j] < alist[smallest]:\\\\n                smallest = j\\\\n        alist[i], alist[smallest] = alist[smallest], alist[i]\\\\n\\\\xa0\\\\n\\\\xa0\\\\nalist = input('Enter the list of numbers: ').split()\\\\nalist = [int(x) for x in alist]\\\\nselection_sort(alist)\\\\nprint('Sorted list: ', end='')\\\\nprint(alist)\"", "nl": "Python Program to Implement Selection Sort"}
{"code": "b'str=input(\"Enter Your String:\")arr=[0]*256for i in range(len(str)):\\\\xa0 \\\\xa0 if str[i]!=\\' \\':\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 num=ord(str[i])\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[num]+=1ch=\\' \\'print(\"First Non-repeating character in a given string is: \",end=\"\")for i in range(len(str)):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if arr[ord(str[i])] ==1:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 ch=str[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 breakprint(ch,end=\"\")'", "nl": "Find first non repeating character in a string"}
{"code": "b'\\\\nimport math\\\\nrangenumber=int(input(\"Enter a Nth Number:\"))\\\\nc = 0\\\\nletest = 0\\\\nnum = 1\\\\nwhile c != rangenumber:\\\\n\\\\xa0 \\\\xa0 num1 = num\\\\n\\\\xa0 \\\\xa0 sqr = math.sqrt(num1)\\\\n\\\\xa0 \\\\xa0 if sqr-math.floor(sqr)==0:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 c+=1\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 letest = num\\\\n\\\\n\\\\xa0 \\\\xa0 num = num + 1\\\\nprint(rangenumber,\"th Perfect Square number is \",latest)'", "nl": "Program to Find nth Perfect Square Number"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# Compute transpose of two matrices\\\\ntran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]\\\\nfor i in range(0,row_size):\\\\n    for j in range(0,col_size):\\\\n        tran_matrix[i][j]=matrix[j][i]\\\\n\\\\n# display transpose of the matrix\\\\nprint(\"Transpose of the Given Matrix is:\")\\\\nfor m in tran_matrix:\\\\n    print(m)'", "nl": "Program to find the transpose of a matrix"}
{"code": "b'import math\\\\n# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n# Calculate sum of the diagonals element\\\\n# and Calculate sum of all the element\\\\ntrace=0\\\\nsum=0\\\\nfor i in range(0, row_size):\\\\n    for j in range(0, col_size):\\\\n        if i==j:\\\\n            trace += matrix[i][j]\\\\n        sum+=matrix[i][j]\\\\nnormal=math.sqrt(sum)\\\\n\\\\n# Display the normal and trace of the matrix\\\\nprint(\"Normal Of the Matrix is: \",normal)\\\\nprint(\"Trace Of the Matrix is: \",trace)'", "nl": "Program to find the normal and trace of a matrix"}
{"code": "b'def factorial(n):\\\\n    if(n <= 1):\\\\n        return 1\\\\n    else:\\\\n        return(n*factorial(n-1))\\\\nn = int(input(\"Enter number:\"))\\\\nprint(\"Factorial:\")\\\\nprint(factorial(n))'", "nl": "Python Program to Find the Factorial of a Number Using Recursion"}
{"code": "b'\\\\nimport math\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nsum=0.0\\\\nfact=1\\\\nfor i in range(1,n+1):\\\\n\\\\xa0 \\\\xa0 sum += pow(i, i) / i\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Find sum of series 1^1/1+2^2/2+3^3/3...+n^n/n"}
{"code": "b's1=raw_input(\"Enter first string:\")\\\\ns2=raw_input(\"Enter second string:\")\\\\na=list(set(s1)|set(s2))\\\\nprint(\"The letters are:\")\\\\nfor i in a:\\\\n    print(i)'", "nl": "Python Program that Displays which Letters are Present in Both the Strings"}
{"code": "b'# Get size of matrix\\\\nrow_size=int(input(\"Enter the row Size Of the Matrix:\"))\\\\ncol_size=int(input(\"Enter the columns Size Of the Matrix:\"))\\\\n\\\\nmatrix=[]\\\\n# Taking input of the matrix\\\\nprint(\"Enter the Matrix Element:\")\\\\nfor i in range(row_size):\\\\n    matrix.append([int(j) for j in input().split()])\\\\n\\\\n\\\\n#Display Upper triangular matrix\\\\nprint(\"Upper Triangular Matrix is:\")\\\\nfor i in range(len(matrix)):\\\\n    for j in range(len(matrix[0])):\\\\n        if i>j:\\\\n            print(\"0 \",end=\"\")\\\\n        else:\\\\n            print(matrix[i][j],end=\" \")\\\\n    print()'", "nl": "Program to display an upper triangular matrix"}
{"code": "b\"d={'A':10,'B':10,'C':239}\\\\ntot=1\\\\nfor i in d:    \\\\n    tot=tot*d[i]\\\\nprint(tot)\"", "nl": "Python Program to Multiply All the Items in a Dictionary"}
{"code": "b'arr=[]size = int(input(\"Enter the size of the array: \"))print(\"Enter the Element of the array:\")for i in range(0,size):\\\\xa0 \\\\xa0 num = int(input())\\\\xa0 \\\\xa0 arr.append(num)print(\"Before sorting array elements are:\")for i in range(0,size):\\\\xa0 \\\\xa0 print(arr[i],end=\" \")for i in range(0,size):\\\\xa0 \\\\xa0 for j in range(i+1, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if arr[i] <= arr[j]:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 temp = arr[i]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[i] = arr[j]\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 arr[j] = tempprint(\"\\\\\\\\nAfter Decreasing order sort Array Elements are:\")for i in range(0, size):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(arr[i],end=\" \")'", "nl": "Program to Sort an array in Descending order"}
{"code": "b\"class BinaryTree:\\\\n    def __init__(self, key=None):\\\\n        self.key = key\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\xa0\\\\n    def set_root(self, key):\\\\n        self.key = key\\\\n\\\\xa0\\\\n    def inorder(self):\\\\n        if self.left is not None:\\\\n            self.left.inorder()\\\\n        print(self.key, end=' ')\\\\n        if self.right is not None:\\\\n            self.right.inorder()\\\\n\\\\xa0\\\\n    def insert_left(self, new_node):\\\\n        self.left = new_node\\\\n\\\\xa0\\\\n    def insert_right(self, new_node):\\\\n        self.right = new_node\\\\n\\\\xa0\\\\n    def search(self, key):\\\\n        if self.key == key:\\\\n            return self\\\\n        if self.left is not None:\\\\n            temp =  self.left.search(key)\\\\n            if temp is not None:\\\\n                return temp\\\\n        if self.right is not None:\\\\n            temp =  self.right.search(key)\\\\n            return temp\\\\n        return None\\\\n\\\\xa0\\\\n    def print_left_boundary(self):\\\\n        current = self\\\\n        while True:\\\\n            if current.left is not None:\\\\n                print(current.key, end=' ')\\\\n                current = current.left\\\\n            elif current.right is not None:\\\\n                print(current.key, end=' ')\\\\n                current = current.right\\\\n            else:\\\\n                break\\\\n\\\\xa0\\\\n    def print_right_boundary(self):\\\\n        if self.right is not None:\\\\n            self.right.print_right_boundary()\\\\n            print(self.key, end=' ')\\\\n        elif self.left is not None:\\\\n            self.left.print_right_boundary()\\\\n            print(self.key, end=' ')\\\\n\\\\xa0\\\\n\\\\xa0\\\\n    def print_leaves(self):\\\\n        if self.left is not None:\\\\n            self.left.print_leaves()\\\\n        if self.right is not None:\\\\n            self.right.print_leaves()\\\\n        if (self.left is None\\\\n            and self.right is None):\\\\n            print(self.key, end=' ')\\\\n\\\\xa0\\\\n    def print_border(self):\\\\n        print(self.key, end=' ')\\\\n        if self.left is not None:\\\\n            self.left.print_left_boundary()\\\\n            self.left.print_leaves()\\\\n        if self.right is not None:\\\\n            self.right.print_leaves()\\\\n            self.right.print_right_boundary()\\\\n\\\\xa0\\\\n\\\\xa0\\\\nbtree = None\\\\n\\\\xa0\\\\nprint('Menu (this assumes no duplicate keys)')\\\\nprint('insert <data> at root')\\\\nprint('insert <data> left of <data>')\\\\nprint('insert <data> right of <data>')\\\\nprint('border')\\\\nprint('quit')\\\\n\\\\xa0\\\\nwhile True:\\\\n    do = input('What would you like to do? ').split()\\\\n\\\\xa0\\\\n    operation = do[0].strip().lower()\\\\n    if operation == 'insert':\\\\n        data = int(do[1])\\\\n        new_node = BinaryTree(data)\\\\n        suboperation = do[2].strip().lower() \\\\n        if suboperation == 'at':\\\\n                btree = new_node\\\\n        else:\\\\n            position = do[4].strip().lower()\\\\n            key = int(position)\\\\n            ref_node = None\\\\n            if btree is not None:\\\\n                ref_node = btree.search(key)\\\\n            if ref_node is None:\\\\n                print('No such key.')\\\\n                continue\\\\n            if suboperation == 'left':\\\\n                ref_node.insert_left(new_node)\\\\n            elif suboperation == 'right':\\\\n                ref_node.insert_right(new_node)\\\\n\\\\xa0\\\\n    elif operation == 'border':\\\\n        if btree is not None:\\\\n            print('Border of tree: ')\\\\n            btree.print_border()\\\\n            print()\\\\n\\\\xa0\\\\n    elif operation == 'quit':\\\\n        break\"", "nl": "Python Program to Print Border of given Tree in Anticlockwise Direction"}
{"code": "b'\\\\nimport math\\\\nprint(\"Enter a range:\")\\\\nrange1=int(input())\\\\nrange2=int(input())\\\\nprint(\"Sunny numbers between \",range1,\" and \",range2,\" are: \")\\\\nfor i in range(range1,range2+1):\\\\n\\\\xa0 \\\\xa0 root = math.sqrt(i+ 1)\\\\n\\\\xa0 \\\\xa0 if int(root)==root:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(i,end=\" \")'", "nl": "Find out all Sunny numbers present within a given range"}
{"code": "b'Solution\\\\nclass American(object):\\\\n    @staticmethod\\\\n    def printNationality():\\\\n        print \"America\"\\\\n\\\\nanAmerican = American()\\\\nanAmerican.printNationality()\\\\nAmerican.printNationality()\\\\n\\\\n\\\\n\\\\n\\\\n'", "nl": "Define a class named American which has a static method called printNationality.\n:"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))for out in range(row_size,-(row_size+1),-1):\\\\xa0 \\\\xa0 for inn in range(0,abs(out)+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\"*\",end=\"\")\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Program to Print the Double Pyramid Star Pattern"}
{"code": "b'fname = input(\"Enter file name: \")\\\\nword=input(\"Enter word to be searched:\")\\\\nk = 0\\\\n\\\\xa0\\\\nwith open(fname, \\'r\\') as f:\\\\n    for line in f:\\\\n        words = line.split()\\\\n        for i in words:\\\\n            if(i==word):\\\\n                k=k+1\\\\nprint(\"Occurrences of the word:\")\\\\nprint(k)'", "nl": "Python Program to Count the Occurrences of a Word in a Text File"}
{"code": "b'\\\\narr=[]\\\\narr2=[]\\\\nsize = int(input(\"Enter the size of the 1st array: \"))\\\\nsize2 = int(input(\"Enter the size of the 2nd array: \"))\\\\n\\\\nprint(\"Enter the Element of the 1st array:\")\\\\nfor i in range(0,size):\\\\n\\\\xa0 \\\\xa0 num = int(input())\\\\n\\\\xa0 \\\\xa0 arr.append(num)\\\\n\\\\nprint(\"Enter the Element of the 2nd array:\")\\\\nfor i in range(0,size2):\\\\n\\\\xa0 \\\\xa0 num2 = int(input())\\\\n\\\\xa0 \\\\xa0 arr2.append(num2)\\\\n\\\\ncount=0\\\\nfor i in range(0, size):\\\\n\\\\xa0 \\\\xa0 for j in range(0, size2):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 if arr[i] == arr2[j]:\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 count+=1\\\\n\\\\nif count>=1:\\\\n\\\\xa0 \\\\xa0 print(\"Arrays are not disjoint.\")\\\\nelse:\\\\n\\\\xa0 \\\\xa0 print(\"Arrays are disjoint.\")'", "nl": "Check if two arrays are the disjoint or not"}
{"code": "b'# Get size of matrixrow_size=int(input(\"Enter the row Size Of the Matrix:\"))col_size=int(input(\"Enter the columns Size Of the Matrix:\"))matrix=[]# Taking input of the matrixprint(\"Enter the Matrix Element:\")for i in range(row_size):\\\\xa0\\\\xa0\\\\xa0\\\\xa0matrix.append([int(j) for j in input().split()])# display the Matrixprint(\"Given Matrix is:\")for m in matrix:\\\\xa0\\\\xa0\\\\xa0\\\\xa0print(m)'", "nl": "Program to read and display a Matrix"}
{"code": "b'def check(n, div = None):\\\\n    if div is None:\\\\n        div = n - 1\\\\n    while div >= 2:\\\\n        if n % div == 0:\\\\n            print(\"Number not prime\")\\\\n            return False\\\\n        else:\\\\n            return check(n, div-1)\\\\n    else:\\\\n        print(\"Number is prime\")\\\\n        return \\'True\\'\\\\nn=int(input(\"Enter number: \"))\\\\ncheck(n)'", "nl": "Python Program to Find if a Number is Prime or Not Prime Using Recursion"}
{"code": "b'\\\\nnum1=int(input(\"Enter a number:\"))\\\\nnum2=int(input(\"Enter a number:\"))\\\\n\\\\naddition=num1+num2\\\\nmultiplication=num1*num2\\\\naverage=(num1+num2)/2\\\\n\\\\nprint(\"Addition =\",addition)\\\\nprint(\"Multiplication =\",multiplication)\\\\nprint(\"Average =\",average)\\\\n'", "nl": "Find sum multiplication and an average of two numbers"}
{"code": "b'def sum(num1,num2):\\\\xa0 \\\\xa0 if num2==0:\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 return num1\\\\xa0 \\\\xa0 return sum(num1, num2-1)+1print(\"Enter the two Number:\")num1=int(input())num2=int(input())print(\"Sum of Two Number Using Recursion is: \",sum(num1,num2))'", "nl": "Find sum of two numbers using recursion"}
{"code": "b'fname = input(\"Enter file name: \")\\\\n\\\\xa0\\\\nnum_words = 0\\\\n\\\\xa0\\\\nwith open(fname, \\'r\\') as f:\\\\n    for line in f:\\\\n        words = line.split()\\\\n        num_words += len(words)\\\\nprint(\"Number of words:\")\\\\nprint(num_words)'", "nl": "Python Program to Count the Number of Words in a Text File"}
{"code": "b'd={\\'A\\':1,\\'B\\':2,\\'C\\':3}\\\\nkey=raw_input(\"Enter key to check:\")\\\\nif key in d.keys():\\\\n      print(\"Key is present and value of the key is:\")\\\\n      print(d[key])\\\\nelse:\\\\n      print(\"Key isn\\'t present!\")'", "nl": "Python Program to Check if a Given Key Exists in a Dictionary or Not"}
{"code": "b'row_size=int(input(\"Enter the row size:\"))for out in range(1,row_size+1):\\\\xa0 \\\\xa0 for inn in range(row_size,out,-1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(\" \",end=\"\")\\\\xa0 \\\\xa0 for p in range(1,out+1):\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(out,end=\" \")\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": " Print the Full Pyramid Number Pattern"}
{"code": "b'\\\\xa0\\\\nn=int(input(\"Enter number: \"))\\\\nif(n>0):\\\\n    print(\"Number is positive\")\\\\nelse:\\\\n    print(\"Number is negative\")'", "nl": "Python Program to Check Whether a Number is Positive or Negative"}
{"code": "b'\\\\ndef f(n):\\\\n    if n == 0: return 0\\\\n    elif n == 1: return 1\\\\n    else: return f(n-1)+f(n-2)\\\\n\\\\nn=int(raw_input())\\\\nvalues = [str(f(x)) for x in range(0, n+1)]\\\\nprint \",\".join(values)\\\\n\\\\n\\\\n'", "nl": "\nThe Fibonacci Sequence is computed based on the following formula:\n\n\nf(n)=0 if n=0\nf(n)=1 if n=1\nf(n)=f(n-1)+f(n-2) if n>1\n\nPlease write a program using list comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.\n"}
{"code": "b\"\\\\nraise RuntimeError('something wrong')\\\\n\\\\n\\\\n\\\\n\"", "nl": "\n\n\nPlease raise a RuntimeError exception.\n:"}
{"code": "b'\\\\nprint(\"Enter the row and column size:\");\\\\nrow_size=input()\\\\nfor out in range(ord(row_size),ord(\\'A\\')-1,-1):\\\\n\\\\xa0 \\\\xa0 for i in range(ord(\\'A\\'),out+1):\\\\n\\\\xa0 \\\\xa0 \\\\xa0 \\\\xa0 print(chr(i),end=\" \")\\\\n\\\\xa0 \\\\xa0 print(\"\\\\\\\\r\")'", "nl": "Program to print inverted right triangle alphabet pattern"}
{"code": "b'\\\\nprint(\"Enter the range of number:\")\\\\nn=int(input())\\\\nprint(\"Enter the value of x:\")\\\\nx=int(input())\\\\nsum=1.0\\\\ni=1\\\\nwhile(i<=n):\\\\n\\\\xa0 \\\\xa0 sum+=pow(x,i)/i\\\\n\\\\xa0 \\\\xa0 i+=1\\\\nprint(\"The sum of the series = \",sum)'", "nl": "Program to find the sum of series 1+X+X^2/2...+X^N/N"}
